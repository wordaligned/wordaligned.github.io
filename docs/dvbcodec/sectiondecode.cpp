// GENERATED FILE. DO NOT EDIT.
// Generated by: dvbcodecgenerator 
// On: Nov 25 2004
/**
 * Copyright (c) 2004, Thomas Guest. All rights reserved.
 * @file
 * @brief Generated section decoders.
 */

#include "decodeout.hpp"
#include "decodeexception.hpp"


/**
 * @brief Generated descriptor decoder
 */
void
decode_descriptor(DecodeOut & out)
{
    out.putSectionName("descriptor()");
    {
        out.enterBlock();
        out.putField("descriptor_tag", 8);
        out.putField("descriptor_length", 8);
        out.putLoopControl("for (i=0; i<N; i++)");
        out.enterBlock();
        while(!out.testLoopExit())
        {
            out.putField("private_data_byte", 8);
        }
        out.leaveBlock();
    }
}


/**
 * @brief Generated program_association_section decoder
 */
void
decode_program_association_section(DecodeOut & out)
{
    out.putSectionName("program_association_section()");
    {
        out.enterBlock();
        out.putField("table_id", 8);
        out.putField("section_syntax_indicator", 1);
        out.putField("'0'", 1);
        out.putField("reserved", 2);
        out.putField("section_length", 12);
        out.putField("transport_stream_id", 16);
        out.putField("reserved", 2);
        out.putField("version_number", 5);
        out.putField("current_next_indicator", 1);
        out.putField("section_number", 8);
        out.putField("last_section_number", 8);
        out.putLoopControl("for (i=0; i<N; i++)");
        out.enterBlock();
        while(!out.testLoopExit())
        {
            out.putField("program_number", 16);
            out.putField("reserved", 3);
            if (out.putIf("program_number", "==", '0'))
            {
                out.enterBlock();
                out.putField("network_PID", 13);
                out.leaveBlock();
            }
            else if (out.putElse())
            {
                out.enterBlock();
                out.putField("program_map_PID", 13);
                out.leaveBlock();
            }
        }
        out.putField("CRC_32", 32);
        out.leaveBlock();
    }
}


/**
 * @brief Generated conditional_access_section decoder
 */
void
decode_conditional_access_section(DecodeOut & out)
{
    out.putSectionName("conditional_access_section()");
    {
        out.enterBlock();
        out.putField("table_id", 8);
        out.putField("section_syntax_indicator", 1);
        out.putField("'0'", 1);
        out.putField("reserved", 2);
        out.putField("section_length", 12);
        out.putField("reserved", 18);
        out.putField("version_number", 5);
        out.putField("current_next_indicator", 1);
        out.putField("section_number", 8);
        out.putField("last_section_number", 8);
        out.putLoopControl("for (i=0; i<N; i++)");
        out.enterBlock();
        while(!out.testLoopExit())
        {
            decode_descriptor(out);
        }
        out.putField("CRC_32", 32);
        out.leaveBlock();
    }
}


/**
 * @brief Generated program_map_section decoder
 */
void
decode_program_map_section(DecodeOut & out)
{
    out.putSectionName("program_map_section()");
    {
        out.enterBlock();
        out.putField("table_id", 8);
        out.putField("section_syntax_indicator", 1);
        out.putField("'0'", 1);
        out.putField("reserved", 2);
        out.putField("section_length", 12);
        out.putField("program_number", 16);
        out.putField("reserved", 2);
        out.putField("version_number", 5);
        out.putField("current_next_indicator", 1);
        out.putField("section_number", 8);
        out.putField("last_section_number", 8);
        out.putField("reserved", 3);
        out.putField("PCR_PID", 13);
        out.putField("reserved", 4);
        out.putField("program_info_length", 12);
        out.putLoopControl("for (i=0; i<N; i++)");
        out.enterBlock();
        while(!out.testLoopExit())
        {
            decode_descriptor(out);
        }
        out.putLoopControl("for (i=0;i<N1;i++)");
        out.enterBlock();
        while(!out.testLoopExit())
        {
            out.putField("stream_type", 8);
            out.putField("reserved", 3);
            out.putField("elementary_PID", 13);
            out.putField("reserved", 4);
            out.putField("ES_info_length", 12);
            out.putLoopControl("for (i=0; i<N2; i++)");
            out.enterBlock();
            while(!out.testLoopExit())
            {
                decode_descriptor(out);
            }
        }
        out.putField("CRC_32", 32);
        out.leaveBlock();
    }
}


/**
 * @brief Generated network_information_section decoder
 */
void
decode_network_information_section(DecodeOut & out)
{
    out.putSectionName("network_information_section()");
    {
        out.enterBlock();
        out.putField("table_id", 8);
        out.putField("section_syntax_indicator", 1);
        out.putField("reserved_future_use", 1);
        out.putField("reserved", 2);
        out.putField("section_length", 12);
        out.putField("network_id", 16);
        out.putField("reserved", 2);
        out.putField("version_number", 5);
        out.putField("current_next_indicator", 1);
        out.putField("section_number", 8);
        out.putField("last_section_number", 8);
        out.putField("reserved_future_use", 4);
        out.putField("network_descriptors_length", 12);
        out.putLoopControl("for(i=0;i<N;i++)");
        out.enterBlock();
        while(!out.testLoopExit())
        {
            decode_descriptor(out);
        }
        out.putField("reserved_future_use", 4);
        out.putField("transport_stream_loop_length", 12);
        out.putLoopControl("for(i=0;i<N;i++)");
        out.enterBlock();
        while(!out.testLoopExit())
        {
            out.putField("transport_stream_id", 16);
            out.putField("original_network_id", 16);
            out.putField("reserved_future_use", 4);
            out.putField("transport_descriptors_length", 12);
            out.putLoopControl("for(j=0;j<N;j++)");
            out.enterBlock();
            while(!out.testLoopExit())
            {
                decode_descriptor(out);
            }
        }
        out.putField("CRC_32", 32);
        out.leaveBlock();
    }
}


/**
 * @brief Generated bouquet_association_section decoder
 */
void
decode_bouquet_association_section(DecodeOut & out)
{
    out.putSectionName("bouquet_association_section()");
    {
        out.enterBlock();
        out.putField("table_id", 8);
        out.putField("section_syntax_indicator", 1);
        out.putField("reserved_future_use", 1);
        out.putField("reserved", 2);
        out.putField("section_length", 12);
        out.putField("bouquet_id", 16);
        out.putField("reserved", 2);
        out.putField("version_number", 5);
        out.putField("current_next_indicator", 1);
        out.putField("section_number", 8);
        out.putField("last_section_number", 8);
        out.putField("reserved_future_use", 4);
        out.putField("bouquet_descriptors_length", 12);
        out.putLoopControl("for(i=0;i<N;i++)");
        out.enterBlock();
        while(!out.testLoopExit())
        {
            decode_descriptor(out);
        }
        out.putField("reserved_future_use", 4);
        out.putField("transport_stream_loop_length", 12);
        out.putLoopControl("for(i=0;i<N;i++)");
        out.enterBlock();
        while(!out.testLoopExit())
        {
            out.putField("transport_stream_id", 16);
            out.putField("original_network_id", 16);
            out.putField("reserved_future_use", 4);
            out.putField("transport_descriptors_length", 12);
            out.putLoopControl("for(j=0;j<N;j++)");
            out.enterBlock();
            while(!out.testLoopExit())
            {
                decode_descriptor(out);
            }
        }
        out.putField("CRC_32", 32);
        out.leaveBlock();
    }
}


/**
 * @brief Generated service_description_section decoder
 */
void
decode_service_description_section(DecodeOut & out)
{
    out.putSectionName("service_description_section()");
    {
        out.enterBlock();
        out.putField("table_id", 8);
        out.putField("section_syntax_indicator", 1);
        out.putField("reserved_future_use", 1);
        out.putField("reserved", 2);
        out.putField("section_length", 12);
        out.putField("transport_stream_id", 16);
        out.putField("reserved", 2);
        out.putField("version_number", 5);
        out.putField("current_next_indicator", 1);
        out.putField("section_number", 8);
        out.putField("last_section_number", 8);
        out.putField("original_network_id", 16);
        out.putField("reserved_future_use", 8);
        out.putLoopControl("for (i=0;i<N;i++)");
        out.enterBlock();
        while(!out.testLoopExit())
        {
            out.putField("service_id", 16);
            out.putField("reserved_future_use", 6);
            out.putField("EIT_schedule_flag", 1);
            out.putField("EIT_present_following_flag", 1);
            out.putField("running_status", 3);
            out.putField("free_CA_mode", 1);
            out.putField("descriptors_loop_length", 12);
            out.putLoopControl("for (j=0;j<N;j++)");
            out.enterBlock();
            while(!out.testLoopExit())
            {
                decode_descriptor(out);
            }
        }
        out.putField("CRC_32", 32);
        out.leaveBlock();
    }
}


/**
 * @brief Generated event_information_section decoder
 */
void
decode_event_information_section(DecodeOut & out)
{
    out.putSectionName("event_information_section()");
    {
        out.enterBlock();
        out.putField("table_id", 8);
        out.putField("section_syntax_indicator", 1);
        out.putField("reserved_future_use", 1);
        out.putField("reserved", 2);
        out.putField("section_length", 12);
        out.putField("service_id", 16);
        out.putField("reserved", 2);
        out.putField("version_number", 5);
        out.putField("current_next_indicator", 1);
        out.putField("section_number", 8);
        out.putField("last_section_number", 8);
        out.putField("transport_stream_id", 16);
        out.putField("original_network_id", 16);
        out.putField("segment_last_section_number", 8);
        out.putField("last_table_id", 8);
        out.putLoopControl("for(i=0;i<N;i++)");
        out.enterBlock();
        while(!out.testLoopExit())
        {
            out.putField("event_id", 16);
            out.putField("start_time", 40);
            out.putField("duration", 24);
            out.putField("running_status", 3);
            out.putField("free_CA_mode", 1);
            out.putField("descriptors_loop_length", 12);
            out.putLoopControl("for(i=0;i<N;i++)");
            out.enterBlock();
            while(!out.testLoopExit())
            {
                decode_descriptor(out);
            }
        }
        out.putField("CRC_32", 32);
        out.leaveBlock();
    }
}


/**
 * @brief Generated time_date_section decoder
 */
void
decode_time_date_section(DecodeOut & out)
{
    out.putSectionName("time_date_section()");
    {
        out.enterBlock();
        out.putField("table_id", 8);
        out.putField("section_syntax_indicator", 1);
        out.putField("reserved_future_use", 1);
        out.putField("reserved", 2);
        out.putField("section_length", 12);
        out.putField("UTC_time", 40);
        out.leaveBlock();
    }
}


/**
 * @brief Generated time_offset_section decoder
 */
void
decode_time_offset_section(DecodeOut & out)
{
    out.putSectionName("time_offset_section()");
    {
        out.enterBlock();
        out.putField("table_id", 8);
        out.putField("section_syntax_indicator", 1);
        out.putField("reserved_future_use", 1);
        out.putField("reserved", 2);
        out.putField("section_length", 12);
        out.putField("UTC_time", 40);
        out.putField("reserved", 4);
        out.putField("descriptors_loop_length", 12);
        out.putLoopControl("for(i=0;i<N;i++)");
        out.enterBlock();
        while(!out.testLoopExit())
        {
            decode_descriptor(out);
        }
        out.putField("CRC_32", 32);
        out.leaveBlock();
    }
}


/**
 * @brief Generated running_status_section decoder
 */
void
decode_running_status_section(DecodeOut & out)
{
    out.putSectionName("running_status_section()");
    {
        out.enterBlock();
        out.putField("table_id", 8);
        out.putField("section_syntax_indicator", 1);
        out.putField("reserved_future_use", 1);
        out.putField("reserved", 2);
        out.putField("section_length", 12);
        out.putLoopControl("for (i=0;i<N;i++)");
        out.enterBlock();
        while(!out.testLoopExit())
        {
            out.putField("transport_stream_id", 16);
            out.putField("original_network_id", 16);
            out.putField("service_id", 16);
            out.putField("event_id", 16);
            out.putField("reserved_future_use", 5);
            out.putField("running_status", 3);
        }
        out.leaveBlock();
    }
}


/**
 * @brief Generated stuffing_section decoder
 */
void
decode_stuffing_section(DecodeOut & out)
{
    out.putSectionName("stuffing_section()");
    {
        out.enterBlock();
        out.putField("table_id", 8);
        out.putField("section_syntax_indicator", 1);
        out.putField("reserved_future_use", 1);
        out.putField("reserved", 2);
        out.putField("section_length", 12);
        out.putLoopControl("for (i=0;i<N;i++)");
        out.enterBlock();
        while(!out.testLoopExit())
        {
            out.putField("data_byte", 8);
        }
        out.leaveBlock();
    }
}


void
sectionDecode(char const * section_name,
              DecodeOut & out)
{
    if (std::string(section_name) == "descriptor")
    {
        decode_descriptor(out);
    }
    else if (std::string(section_name) == "program_association_section")
    {
        decode_program_association_section(out);
    }
    else if (std::string(section_name) == "conditional_access_section")
    {
        decode_conditional_access_section(out);
    }
    else if (std::string(section_name) == "program_map_section")
    {
        decode_program_map_section(out);
    }
    else if (std::string(section_name) == "network_information_section")
    {
        decode_network_information_section(out);
    }
    else if (std::string(section_name) == "bouquet_association_section")
    {
        decode_bouquet_association_section(out);
    }
    else if (std::string(section_name) == "service_description_section")
    {
        decode_service_description_section(out);
    }
    else if (std::string(section_name) == "event_information_section")
    {
        decode_event_information_section(out);
    }
    else if (std::string(section_name) == "time_date_section")
    {
        decode_time_date_section(out);
    }
    else if (std::string(section_name) == "time_offset_section")
    {
        decode_time_offset_section(out);
    }
    else if (std::string(section_name) == "running_status_section")
    {
        decode_running_status_section(out);
    }
    else if (std::string(section_name) == "stuffing_section")
    {
        decode_stuffing_section(out);
    }
    else
    {
        throw UnknownSectionException(section_name);
    }
}
