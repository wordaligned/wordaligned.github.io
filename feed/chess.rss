<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:dc="http://purl.org/dc/elements/1.1/" >
<channel>
<title>Word Aligned</title>
<link>http://wordaligned.org</link>
<description>tales from the code face</description>
<dc:creator>tag@wordaligned.org</dc:creator>
<language>en-gb</language>
<item>
<title>White black knight then black white knight</title>
<description>&lt;p&gt;&lt;img src=&quot;http://wordaligned.org/images/chess-pos-small-font.png&quot; alt=&quot;Small chess board&quot; style=&quot;float:right;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;At the end of &lt;a href=&quot;http://wordaligned.org/articles/drawing-chess-positions.html&quot;&gt;yesterday&amp;#8217;s article&lt;/a&gt; I admitted defeat. I&amp;#8217;d developed a script to render chess positions, using a suitable font as a source of scalable bitmasks to represent the pieces. Sadly, you could clearly see the board through the pieces, which meant white pieces on black squares looked wrong. I couldn&amp;#8217;t see an easy fix.&lt;/p&gt;
&lt;p&gt;Happily one of my readers was &lt;a href=&quot;http://www.haloscan.com/comments/wordaligned/drawing_chess_positions/#14496&quot;&gt;more resourceful&lt;/a&gt;:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;You can make white pieces by drawing a &amp;#8220;black&amp;#8221; piece in white, then overlaying that with a &amp;#8220;white&amp;#8221; piece in black.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;This is a clever trick which I wish I&amp;#8217;d thought of! The redrawn pictures do look better.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://wordaligned.org/images/chess-font-fixed.png&quot; alt=&quot;Fixed chess board&quot;/&gt;&lt;/p&gt;
&lt;p&gt;We need three more lines of code and comments apiece.&lt;/p&gt;
&lt;div class=&quot;typocode&quot;&gt;

&lt;pre class=&quot;prettyprint&quot;&gt;def chess_position_font(fen, font_file, sq_size):
    ....
    for sq, piece in filter(not_blank, zip(sqs, pieces)):
        if is_white_piece(piece):
            # Use the equivalent black piece, drawn white,
            # for the &amp;#x27;body&amp;#x27; of the piece, so the background
            # square doesn&amp;#x27;t show through.
            filler = unichr_pieces[piece.lower()]
            put_piece(sq, filler, fill=&amp;#x27;white&amp;#x27;, font=font)
        put_piece(sq, unichr_pieces[piece], fill=&amp;#x27;black&amp;#x27;, font=font)
    return board

&lt;/pre&gt;

&lt;/div&gt;

&lt;p&gt;Note, in passing, that &lt;span /&gt;I &lt;strong&gt;don&amp;#8217;t&lt;/strong&gt; think comments can or should be entirely eliminated from source code &amp;#8212; here&amp;#8217;s a case where they help.&lt;/p&gt;
&lt;p&gt;Even after this hack, the pictures aren&amp;#8217;t pixel perfect. But I do like the grey mane you get when a white knight occupies a dark square.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://wordaligned.org/images/white-knight-on-black-square.png&quot; alt=&quot;White knight on a black square&quot;/&gt;&lt;/p&gt;</description>
<dc:date>2008-03-31</dc:date>
<guid>http://wordaligned.org/articles/white-black-knight</guid>
<author>tag@wordaligned.org (Thomas Guest)</author>
<link>http://wordaligned.org/articles/white-black-knight</link>
<category>Chess</category>
</item>

<item>
<title>Drawing Chess Positions</title>
<description>&lt;h3 id=&quot;dominus-connects&quot;&gt;Dominus Connects&lt;/h3&gt;
&lt;p&gt;In a recent &lt;a href=&quot;http://blog.plover.com/prog/perl/lines.html&quot;&gt;article&lt;/a&gt; Mark Dominus describes how he grew frustrated with his graphical editor and wrote a script to draw connectors:&lt;/p&gt;
&lt;blockquote&gt;&lt;p&gt;Here&amp;#8217;s what I did instead. I wrote a program that would read an input like this:&lt;/p&gt;
&lt;pre&gt;
        &amp;gt;-v-&amp;lt;
        &#x27;-+-`
&lt;/pre&gt;
&lt;p&gt;and produce a jpeg file that looks like this:
&lt;img src=&quot;http://pic.blog.plover.com/prog/perl/lines/demo1.jpg&quot; alt=&quot;Line and box graphic&quot;/&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;I haven&amp;#8217;t tried running the software, which, Dominus admits, isn&amp;#8217;t his most polished. What interests me is: the way he devises a mini-language for describing these connectors, then combines hand-built and standard tools to produce the required result; and how quickly he ditches the &lt;a href=&quot;http://www.gimp.org&quot;&gt;Gimp&lt;/a&gt; and settles on this approach. Clearly he&amp;#8217;s done this sort of thing before.&lt;/p&gt;
&lt;h3 id=&quot;chessboards-revisited&quot;&gt;Chessboards Revisited&lt;/h3&gt;
&lt;p&gt;Recently I wrote about a rather easier graphics problem, of &lt;a href=&quot;http://wordaligned.org/articles/drawing-chessboards.html&quot;&gt;drawing chessboards&lt;/a&gt;. My real mission, though, was to promote scripted graphics. A chessboard would make a good starting point, I thought. I planned to go on to describe a more advanced drawing problem, of putting pieces on the board &amp;#8212; a problem requiring more pixel bashing and more thought about inputs.&lt;/p&gt;
&lt;p&gt;This article tackles that follow-on problem. What I didn&amp;#8217;t realise &amp;#8212; but really should have guessed &amp;#8212; is that it&amp;#8217;s a problem which has been solved many times before in many different domains. You can find &lt;a href=&quot;http://www.ctan.org/tex-archive/fonts/chess/skak/&quot;&gt;LaTeX packages&lt;/a&gt; and &lt;a href=&quot;http://emacs-chess.sourceforge.net/&quot;&gt;emacs modes&lt;/a&gt; for it. There&amp;#8217;s even a &lt;a href=&quot;http://en.wikipedia.org/wiki/Template:Chess_diagram&quot;&gt;MediaWiki macro&lt;/a&gt;. So if you need to draw chess positions please investigate what&amp;#8217;s &lt;a href=&quot;http://www.enpassant.dk/chess/diaeng.htm&quot;&gt;already out there&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;That said, the rest of this article follows on from its &lt;a href=&quot;http://wordaligned.org/articles/drawing-chessboards.html&quot;&gt;predecessor&lt;/a&gt;. We&amp;#8217;ll settle on a suitable notation for describing chess positions and use this as a basis for creating ASCII, Unicode + CSS, and PNG graphics. We&amp;#8217;ll also discuss the advantages of using an interpreted, dynamic language for image processing.&lt;/p&gt;
&lt;p&gt;&lt;span id=&quot;continue-reading&quot;/&gt;&lt;/p&gt;
&lt;h3 id=&quot;program-input&quot;&gt;Program Input&lt;/h3&gt;
&lt;div class=&quot;info&quot;&gt;Things I learned while writing this article: Forsyth-Edwards Notation (FEN) is a standard way to record a chess position.&lt;/div&gt;

&lt;p&gt;Mark Dominus invented his own input notation. We needn&amp;#8217;t. The Forsyth-Edwards notation for recording a particular board position is compact, simple and standard.&lt;/p&gt;
&lt;p&gt;From &lt;a href=&quot;http://en.wikipedia.org/wiki/Forsyth-Edwards_Notation&quot;&gt;Wikipedia&lt;/a&gt;:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;A FEN &amp;#8220;record&amp;#8221; defines a particular game position, all in one text line and using only the ASCII character set. A FEN record contains six fields. The separator between fields is a space. The fields are:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Piece placement (from white&amp;#8217;s perspective). Each rank is described, starting with rank 8 and ending with rank 1; within each rank, the contents of each square are described from file a through file h. Following the Standard Algebraic Notation (SAN), each piece is identified by a single letter taken from the standard English names (pawn = &amp;#8220;P&amp;#8221;, knight = &amp;#8220;N&amp;#8221;, bishop = &amp;#8220;B&amp;#8221;, rook = &amp;#8220;R&amp;#8221;, queen = &amp;#8220;Q&amp;#8221; and king = &amp;#8220;K&amp;#8221;). White pieces are designated using upper-case letters (&amp;#8220;PNBRQK&amp;#8221;) while Black take lowercase (&amp;#8220;pnbrqk&amp;#8221;). Blank squares are noted using digits 1 through 8 (the number of blank squares), and &amp;#8220;/&amp;#8221; separate ranks.&lt;/li&gt;
&lt;li&gt;&amp;#8230;&lt;/li&gt;
&lt;/ol&gt;
&lt;/blockquote&gt;
&lt;p&gt;The remaining five fields store other pieces of state (whose turn it is, who can castle etc.) required for resuming a game. We&amp;#8217;ll omit them from our input.&lt;/p&gt;
&lt;p&gt;So, for example, we record the start position:&lt;/p&gt;
&lt;pre&gt;rnbqkbnr/pppppppp/8/8/8/8/PPPPPPPP/RNBQKBNR&lt;/pre&gt;

&lt;p&gt;Some moves later, the game might be at:&lt;/p&gt;
&lt;pre&gt;r2q1rk1/pp2ppbp/1np2np1/2Q3B1/3PP1b1/2N2N2/PP3PPP/3RKB1R&lt;/pre&gt;

&lt;h3 id=&quot;ascii-chess-positions&quot;&gt;ASCII Chess Positions&lt;/h3&gt;
&lt;p&gt;The first field of the FEN record is already close to an ASCII representation of a chessboard. If we expand the digits into the spaces they represent and switch the forward slashes for newlines, then printing the resulting string gives an 8x8 text square. (By the way, I&amp;#8217;ve fixed the chessboard size at 8 rather than make it an input parameter since the FEN notation won&amp;#8217;t work for a board size of 10x10 or bigger.) It&amp;#8217;s not hard to add some ASCII dividers to tart up this simple graphic.&lt;/p&gt;
&lt;div class=&quot;typocode&quot;&gt;

&lt;pre class=&quot;prettyprint&quot;&gt;def expand_blanks(fen):
    &amp;#x27;&amp;#x27;&amp;#x27;Expand the digits in an FEN string into spaces

    &amp;gt;&amp;gt;&amp;gt; expand_blanks(&quot;rk4q3&quot;)
    &amp;#x27;rk    q   &amp;#x27;
    &amp;#x27;&amp;#x27;&amp;#x27;
    def expand(match):
        return &amp;#x27; &amp;#x27; * int(match.group(0))
    return re.compile(r&amp;#x27;\d&amp;#x27;).sub(expand, fen)

def outer_join(sep, ss):
    &amp;#x27;&amp;#x27;&amp;#x27;Like string.join, but encloses the result with outer separators.

    Example:
    &amp;gt;&amp;gt;&amp;gt; outer_join(&amp;#x27;|&amp;#x27;, [&amp;#x27;1&amp;#x27;, &amp;#x27;2&amp;#x27;, &amp;#x27;3&amp;#x27;])
    &amp;#x27;|1|2|3|&amp;#x27;
    &amp;#x27;&amp;#x27;&amp;#x27;
    return &amp;#x27;%s%s%s&amp;#x27; % (sep, sep.join(ss), sep)

def ascii_draw_chess_position(fen):
    &amp;#x27;&amp;#x27;&amp;#x27;Returns an ASCII picture of pieces on a chessboard.&amp;#x27;&amp;#x27;&amp;#x27;
    pieces = expand_blanks(fen).replace(&amp;#x27;/&amp;#x27;, &amp;#x27;&amp;#x27;)
    divider = &amp;#x27;+-+-+-+-+-+-+-+-+\n&amp;#x27;
    rows = ((outer_join(&amp;#x27;|&amp;#x27;, pieces[r: r + 8]) + &amp;#x27;\n&amp;#x27;)
            for r in range(0, 8 * 8, 8))
    return outer_join(divider, rows)    

&lt;/pre&gt;

&lt;/div&gt;

&lt;p&gt;An example:&lt;/p&gt;
&lt;div class=&quot;typocode&quot;&gt;

&lt;pre class=&quot;prettyprint&quot;&gt;&amp;gt;&amp;gt;&amp;gt; fen = &quot;r2q1rk1/pp2ppbp/1np2np1/2Q3B1/3PP1b1/2N2N2/PP3PPP/3RKB1R&quot;
&amp;gt;&amp;gt;&amp;gt; print ascii_draw_chess_position(fen)
+-+-+-+-+-+-+-+-+
|r| | |q| |r|k| |
+-+-+-+-+-+-+-+-+
|p|p| | |p|p|b|p|
+-+-+-+-+-+-+-+-+
| |n|p| | |n|p| |
+-+-+-+-+-+-+-+-+
| | |Q| | | |B| |
+-+-+-+-+-+-+-+-+
| | | |P|P| |b| |
+-+-+-+-+-+-+-+-+
| | |N| | |N| | |
+-+-+-+-+-+-+-+-+
|P|P| | | |P|P|P|
+-+-+-+-+-+-+-+-+
| | | |R|K|B| |R|
+-+-+-+-+-+-+-+-+

&lt;/pre&gt;

&lt;/div&gt;

&lt;h3 id=&quot;unicode-css&quot;&gt;Unicode + CSS&lt;/h3&gt;
&lt;div class=&quot;info&quot;&gt;Things I learned while writing this article: Unicode has code points for the black and white chess pieces.&lt;/div&gt;

&lt;p&gt;This means we can get a rather better picture of a chess position using nothing more than text. Note that these Unicode characters solve the internationalisation problem without the need for translators. (We will need a suitable font though!)&lt;/p&gt;
&lt;p&gt;Here&amp;#8217;s how we can create a dictionary which maps the FEN piece ASCII names to their HTML entity codes.&lt;/p&gt;
&lt;div class=&quot;typocode&quot;&gt;

&lt;pre class=&quot;prettyprint&quot;&gt;unicode_pieces=dict(
    zip(&quot;KQRBNPkqrbnp&quot;,
        (&quot;&amp;amp;#x%x;&quot; % uc for uc in range(0x2654, 0x2660))))

&lt;/pre&gt;

&lt;/div&gt;

&lt;p&gt;I&amp;#8217;ve used this dictionary to create the block of text shown below. I&amp;#8217;ve tried using CSS to colour and place squares on the board &amp;#8212; sorry if it doesn&amp;#8217;t work in your browser, I&amp;#8217;m no CSS expert!&lt;/p&gt;
&lt;div class=&quot;chessboard&quot;&gt;
&lt;pre&gt;
&lt;span class=&quot;white_sq&quot;&gt;&amp;#x265c;&lt;/span&gt;&lt;span class=&quot;black_sq&quot;&gt; &lt;/span&gt;&lt;span class=&quot;white_sq&quot;&gt; &lt;/span&gt;&lt;span class=&quot;black_sq&quot;&gt;&amp;#x265b;&lt;/span&gt;&lt;span class=&quot;white_sq&quot;&gt; &lt;/span&gt;&lt;span class=&quot;black_sq&quot;&gt;&amp;#x265c;&lt;/span&gt;&lt;span class=&quot;white_sq&quot;&gt;&amp;#x265a;&lt;/span&gt;&lt;span class=&quot;black_sq&quot;&gt; &lt;/span&gt;&lt;br/&gt;
&lt;span class=&quot;black_sq&quot;&gt;&amp;#x265f;&lt;/span&gt;&lt;span class=&quot;white_sq&quot;&gt;&amp;#x265f;&lt;/span&gt;&lt;span class=&quot;black_sq&quot;&gt; &lt;/span&gt;&lt;span class=&quot;white_sq&quot;&gt; &lt;/span&gt;&lt;span class=&quot;black_sq&quot;&gt;&amp;#x265f;&lt;/span&gt;&lt;span class=&quot;white_sq&quot;&gt;&amp;#x265f;&lt;/span&gt;&lt;span class=&quot;black_sq&quot;&gt;&amp;#x265d;&lt;/span&gt;&lt;span class=&quot;white_sq&quot;&gt;&amp;#x265f;&lt;/span&gt;&lt;br/&gt;
&lt;span class=&quot;white_sq&quot;&gt; &lt;/span&gt;&lt;span class=&quot;black_sq&quot;&gt;&amp;#x265e;&lt;/span&gt;&lt;span class=&quot;white_sq&quot;&gt;&amp;#x265f;&lt;/span&gt;&lt;span class=&quot;black_sq&quot;&gt; &lt;/span&gt;&lt;span class=&quot;white_sq&quot;&gt; &lt;/span&gt;&lt;span class=&quot;black_sq&quot;&gt;&amp;#x265e;&lt;/span&gt;&lt;span class=&quot;white_sq&quot;&gt;&amp;#x265f;&lt;/span&gt;&lt;span class=&quot;black_sq&quot;&gt; &lt;/span&gt;&lt;br/&gt;
&lt;span class=&quot;black_sq&quot;&gt; &lt;/span&gt;&lt;span class=&quot;white_sq&quot;&gt; &lt;/span&gt;&lt;span class=&quot;black_sq&quot;&gt;&amp;#x2655;&lt;/span&gt;&lt;span class=&quot;white_sq&quot;&gt; &lt;/span&gt;&lt;span class=&quot;black_sq&quot;&gt; &lt;/span&gt;&lt;span class=&quot;white_sq&quot;&gt; &lt;/span&gt;&lt;span class=&quot;black_sq&quot;&gt;&amp;#x2657;&lt;/span&gt;&lt;span class=&quot;white_sq&quot;&gt; &lt;/span&gt;&lt;br/&gt;
&lt;span class=&quot;white_sq&quot;&gt; &lt;/span&gt;&lt;span class=&quot;black_sq&quot;&gt; &lt;/span&gt;&lt;span class=&quot;white_sq&quot;&gt; &lt;/span&gt;&lt;span class=&quot;black_sq&quot;&gt;&amp;#x2659;&lt;/span&gt;&lt;span class=&quot;white_sq&quot;&gt;&amp;#x2659;&lt;/span&gt;&lt;span class=&quot;black_sq&quot;&gt; &lt;/span&gt;&lt;span class=&quot;white_sq&quot;&gt;&amp;#x265d;&lt;/span&gt;&lt;span class=&quot;black_sq&quot;&gt; &lt;/span&gt;&lt;br/&gt;
&lt;span class=&quot;black_sq&quot;&gt; &lt;/span&gt;&lt;span class=&quot;white_sq&quot;&gt; &lt;/span&gt;&lt;span class=&quot;black_sq&quot;&gt;&amp;#x2658;&lt;/span&gt;&lt;span class=&quot;white_sq&quot;&gt; &lt;/span&gt;&lt;span class=&quot;black_sq&quot;&gt; &lt;/span&gt;&lt;span class=&quot;white_sq&quot;&gt;&amp;#x2658;&lt;/span&gt;&lt;span class=&quot;black_sq&quot;&gt; &lt;/span&gt;&lt;span class=&quot;white_sq&quot;&gt; &lt;/span&gt;&lt;br/&gt;
&lt;span class=&quot;white_sq&quot;&gt;&amp;#x2659;&lt;/span&gt;&lt;span class=&quot;black_sq&quot;&gt;&amp;#x2659;&lt;/span&gt;&lt;span class=&quot;white_sq&quot;&gt; &lt;/span&gt;&lt;span class=&quot;black_sq&quot;&gt; &lt;/span&gt;&lt;span class=&quot;white_sq&quot;&gt; &lt;/span&gt;&lt;span class=&quot;black_sq&quot;&gt;&amp;#x2659;&lt;/span&gt;&lt;span class=&quot;white_sq&quot;&gt;&amp;#x2659;&lt;/span&gt;&lt;span class=&quot;black_sq&quot;&gt;&amp;#x2659;&lt;/span&gt;&lt;br/&gt;
&lt;span class=&quot;black_sq&quot;&gt; &lt;/span&gt;&lt;span class=&quot;white_sq&quot;&gt; &lt;/span&gt;&lt;span class=&quot;black_sq&quot;&gt; &lt;/span&gt;&lt;span class=&quot;white_sq&quot;&gt;&amp;#x2656;&lt;/span&gt;&lt;span class=&quot;black_sq&quot;&gt;&amp;#x2654;&lt;/span&gt;&lt;span class=&quot;white_sq&quot;&gt;&amp;#x2657;&lt;/span&gt;&lt;span class=&quot;black_sq&quot;&gt; &lt;/span&gt;&lt;span class=&quot;white_sq&quot;&gt;&amp;#x2656;&lt;/span&gt;
&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;This image isn&amp;#8217;t ideal: the board background is visible through the pieces, which is particularly noticeable for white pieces on dark squares. I haven&amp;#8217;t figured out how to eliminate this flaw!&lt;/p&gt;
&lt;h3 id=&quot;wiki-macros&quot;&gt;Wiki Macros&lt;/h3&gt;
&lt;div class=&quot;info&quot;&gt;Things I learned while writing this article: MediaWiki has a fully-featured macro for chess diagrams.&lt;/div&gt;

&lt;p&gt;Here&amp;#8217;s the opening chess position as a MediaWiki macro. If this seems like too much effort to type, David A. Wheeler provides an online &lt;a href=&quot;http://www.dwheeler.com/misc/fen2wikipedia.html&quot;&gt;FEN-to-Wikipedia conversion tool&lt;/a&gt;.&lt;/p&gt;
&lt;pre&gt;{{Chess diagram|=
| tright
| 
|=
 8 |rd|nd|bd|qd|kd|bd|nd|rd|=
 7 |pd|pd|pd|pd|pd|pd|pd|pd|=
 6 |  |  |  |  |  |  |  |  |=
 5 |  |  |  |  |  |  |  |  |=
 4 |  |  |  |  |  |  |  |  |=
 3 |  |  |  |  |  |  |  |  |=
 2 |pl|pl|pl|pl|pl|pl|pl|pl|=
 1 |rl|nl|bl|ql|kl|bl|nl|rl|=
    a  b  c  d  e  f  g  h
| 
}}&lt;/pre&gt;

&lt;h3 id=&quot;python-imaging-library&quot;&gt;Python Imaging Library&lt;/h3&gt;
&lt;div class=&quot;info&quot;&gt;Things I learned while writing this article: OS X has problems distinguishing upper- and lower-case filenames.&lt;/div&gt;

&lt;p&gt;The OS X filename limitation came as a nasty surprise. Most of the time I use my Mac like any other Unix box and so I naturally expected that &lt;code&gt;K.png&lt;/code&gt; and &lt;code&gt;k.png&lt;/code&gt; would co-reside happily in the same directory. They can&amp;#8217;t! Apparently it&amp;#8217;s for &lt;a href=&quot;http://www.jms1.net/osx-case-sensitive-fs.shtml&quot;&gt;backwards compatibility&lt;/a&gt;, to keep old software alive. Yuck!&lt;/p&gt;
&lt;p&gt;Anyway, to render a chess position using the &lt;a href=&quot;http://effbot.org/imagingbook/pil-index.htm&quot;&gt;Python Imaging Library&lt;/a&gt; (PIL), we&amp;#8217;ll need some suitable pictures of the pieces. I downloaded some from Wikipedia (thanks!) It&amp;#8217;s important these images have an alpha channel. (The alpha channel assigns an opacity to each pixel, which will be used when we compose the image with another: when we put the piece on the board, that is. Without an alpha channel, we wouldn&amp;#8217;t see the squares underneath the pieces.)&lt;/p&gt;
&lt;h3 id=&quot;interacting-with-images&quot;&gt;Interacting with Images&lt;/h3&gt;
&lt;p&gt;An interpreted language comes into its own when working with an image. Here&amp;#8217;s a session in which we open a PNG (the black king) and poke around at it to find:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;what it looks like&lt;/li&gt;
&lt;li&gt;its mode and size&lt;/li&gt;
&lt;li&gt;whether all pixels are grey&lt;/li&gt;
&lt;li&gt;how many transparent and opaque pixels it has&lt;/li&gt;
&lt;li&gt;the contents of a few pixels on the left of the image&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&quot;typocode&quot;&gt;

&lt;pre class=&quot;prettyprint&quot;&gt;&amp;gt;&amp;gt;&amp;gt; import Image
&amp;gt;&amp;gt;&amp;gt; king = Image.open(&amp;#x27;k.png&amp;#x27;)
&amp;gt;&amp;gt;&amp;gt; king.show()
&amp;gt;&amp;gt;&amp;gt; king.mode
&amp;#x27;RGBA&amp;#x27;
&amp;gt;&amp;gt;&amp;gt; king.size
(45, 45)
&amp;gt;&amp;gt;&amp;gt; pixels = king.load()
&amp;gt;&amp;gt;&amp;gt; def is_grey(rgba):
...     r, g, b, a = rgba
...     return r == g == b
... 
&amp;gt;&amp;gt;&amp;gt; W, H = king.size
&amp;gt;&amp;gt;&amp;gt; xys = [(x, y) for y in range(H) for x in range(W)]
&amp;gt;&amp;gt;&amp;gt; all(is_grey(pixels[xy]) for xy in xys) 
True
&amp;gt;&amp;gt;&amp;gt; sum(1 for xy in xys if pixels[xy][3] == 0)
1243
&amp;gt;&amp;gt;&amp;gt; sum(1 for xy in xys if pixels[xy][3] == 255)
612
&amp;gt;&amp;gt;&amp;gt; print &quot;\n&quot;.join(map(repr, (pixels[x, 20] for x in range(10))))
(0, 0, 0, 0)
(0, 0, 0, 0)
(0, 0, 0, 0)
(0, 0, 0, 0)
(0, 0, 0, 0)
(15, 15, 15, 170)
(247, 247, 247, 255)
(148, 148, 148, 255)
(0, 0, 0, 255)
(0, 0, 0, 255)

&lt;/pre&gt;

&lt;/div&gt;

&lt;p&gt;To place this piece on top of a background image we use &lt;a href=&quot;http://effbot.org/imagingbook/image.htm#tag-Image.Image.paste&quot;&gt;Image.paste&lt;/a&gt;. Again, we can experiment interactively.&lt;/p&gt;
&lt;div class=&quot;typocode&quot;&gt;

&lt;pre class=&quot;prettyprint&quot;&gt;&amp;gt;&amp;gt;&amp;gt; red_sq = Image.new(&amp;#x27;RGBA&amp;#x27;, king.size, &amp;#x27;red&amp;#x27;)
&amp;gt;&amp;gt;&amp;gt; help(red_sq.paste)
Help on method paste in module Image:

paste(self, im, box=None, mask=None) method of Image.Image instance
    Paste other image into region

&amp;gt;&amp;gt;&amp;gt; mask = king.split()[3]
&amp;gt;&amp;gt;&amp;gt; red_sq.paste(king, None, mask)
&amp;gt;&amp;gt;&amp;gt; red_sq.show()

&lt;/pre&gt;

&lt;/div&gt;

&lt;p&gt;Note that &lt;a href=&quot;http://effbot.org/imagingbook/image.htm#tag-Image.Image.show&quot;&gt;Image.show&lt;/a&gt; allows us to view the image using some platform dependent utility.&lt;/p&gt;
&lt;h3 id=&quot;the-details&quot;&gt;The details&lt;/h3&gt;
&lt;p&gt;Once we&amp;#8217;ve figured out how to put pieces on the board using &lt;a href=&quot;http://effbot.org/imagingbook/image.htm#tag-Image.Image.paste&quot;&gt;Image.paste&lt;/a&gt;, the rest is all details. I&amp;#8217;ve decided to create a class for rendering chess positions. Creating a class instance pre-loads the piece graphics and sketches in the board background; each time we call draw, the background is copied and the pieces are pasted into place. The resulting image is returned directly to the client, who can choose what to do with it.&lt;/p&gt;
&lt;div class=&quot;typocode&quot;&gt;

&lt;pre class=&quot;prettyprint&quot;&gt;#! /usr/bin/env python
&amp;#x27;&amp;#x27;&amp;#x27;Code to draw chess board and pieces.

FEN notation to describe the arrangement of peices on a chess board.

White pieces are coded: K, Q, B, N, R, P, for king, queen, bishop,
rook knight, pawn. Black pieces use lowercase k, q, b, n, r, p. Blank
squares are noted with digits, and the &quot;/&quot; separates ranks.

As an example, the game starts at:

rnbqkbnr/pppppppp/8/8/8/8/PPPPPPPP/RNBQKBNR

See: http://en.wikipedia.org/wiki/Forsyth-Edwards_Notation
&amp;#x27;&amp;#x27;&amp;#x27;
import re
import Image
import ImageDraw

class BadChessboard(ValueError):
    pass

def expand_blanks(fen):
    &amp;#x27;&amp;#x27;&amp;#x27;Expand the digits in an FEN string into spaces

    &amp;gt;&amp;gt;&amp;gt; expand_blanks(&quot;rk4q3&quot;)
    &amp;#x27;rk    q   &amp;#x27;
    &amp;#x27;&amp;#x27;&amp;#x27;
    def expand(match):
        return &amp;#x27; &amp;#x27; * int(match.group(0))
    return re.compile(r&amp;#x27;\d&amp;#x27;).sub(expand, fen)

def check_valid(expanded_fen):
    &amp;#x27;&amp;#x27;&amp;#x27;Asserts an expanded FEN string is valid&amp;#x27;&amp;#x27;&amp;#x27;
    match = re.compile(r&amp;#x27;([KQBNRPkqbnrp ]{8}/){8}$&amp;#x27;).match
    if not match(expanded_fen + &amp;#x27;/&amp;#x27;):
        raise BadChessboard()

def expand_fen(fen):
    &amp;#x27;&amp;#x27;&amp;#x27;Preprocesses a fen string into an internal format.

    Each square on the chessboard is represented by a single 
    character in the output string. The rank separator characters
    are removed. Invalid inputs raise a BadChessboard error.
    &amp;#x27;&amp;#x27;&amp;#x27;
    expanded = expand_blanks(fen)
    check_valid(expanded)
    return expanded.replace(&amp;#x27;/&amp;#x27;, &amp;#x27;&amp;#x27;)

def draw_board(n=8, sq_size=(20, 20)):
    &amp;#x27;&amp;#x27;&amp;#x27;Return an image of a chessboard.

    The board has n x n squares each of the supplied size.&amp;#x27;&amp;#x27;&amp;#x27;
    from itertools import cycle
    def square(i, j):
        return i * sq_size[0], j * sq_size[1]
    opaque_grey_background = 192, 255
    board = Image.new(&amp;#x27;LA&amp;#x27;, square(n, n), opaque_grey_background) 
    draw_square = ImageDraw.Draw(board).rectangle
    whites = ((square(i, j), square(i + 1, j + 1))
              for i_start, j in zip(cycle((0, 1)), range(n))
              for i in range(i_start, n, 2))
    for white_square in whites:
        draw_square(white_square, fill=&amp;#x27;white&amp;#x27;)
    return board

class DrawChessPosition(object):
    &amp;#x27;&amp;#x27;&amp;#x27;Chess position renderer.

    Create an instance of this class, then call 
    &amp;#x27;&amp;#x27;&amp;#x27;
    def __init__(self):
        &amp;#x27;&amp;#x27;&amp;#x27;Initialise, preloading pieces and creating a blank board.&amp;#x27;&amp;#x27;&amp;#x27; 
        self.n = 8
        self.create_pieces()
        self.create_blank_board()

    def create_pieces(self):
        &amp;#x27;&amp;#x27;&amp;#x27;Load the chess pieces from disk.

        Also extracts and caches the alpha masks for these pieces. 
        &amp;#x27;&amp;#x27;&amp;#x27;
        whites = &amp;#x27;KQBNRP&amp;#x27;
        piece_images = dict(
            zip(whites, (Image.open(&amp;#x27;pieces/w%s.png&amp;#x27; % p) for p in whites)))
        blacks = &amp;#x27;kqbnrp&amp;#x27;
        piece_images.update(dict(
            zip(blacks, (Image.open(&amp;#x27;pieces/%s.png&amp;#x27; % p) for p in blacks))))
        piece_sizes = set(piece.size for piece in piece_images.values())
        # Sanity check: the pieces should all be the same size
        assert len(piece_sizes) == 1
        self.piece_w, self.piece_h = piece_sizes.pop()
        self.piece_images = piece_images
        self.piece_masks = dict((pc, img.split()[3]) for pc, img in
                                 self.piece_images.iteritems())

    def create_blank_board(self):
        &amp;#x27;&amp;#x27;&amp;#x27;Pre-render a blank board.&amp;#x27;&amp;#x27;&amp;#x27;
        self.board = draw_board(sq_size=(self.piece_w, self.piece_h))

    def point(self, i, j):
        &amp;#x27;&amp;#x27;&amp;#x27;Return the top left of the square at (i, j).&amp;#x27;&amp;#x27;&amp;#x27;
        w, h = self.piece_w, self.piece_h
        return i * h, j * w

    def square(self, i, j):
        &amp;#x27;&amp;#x27;&amp;#x27;Return the square at (i, j).&amp;#x27;&amp;#x27;&amp;#x27;
        t, l = self.point(i, j)
        b, r = self.point(i + 1, j + 1)
        return t, l, b, r

    def draw(self, fen):
        &amp;#x27;&amp;#x27;&amp;#x27;Return an image depicting the input position.

        fen - the first record of a FEN chess position.
        Clients are responsible for resizing this image and saving it,
        if required.
        &amp;#x27;&amp;#x27;&amp;#x27;
        board = self.board.copy()
        pieces = expand_fen(fen)
        images, masks, n = self.piece_images, self.piece_masks, self.n
        pts = (self.point(i, j) for j in range(n) for i in range(n))
        def not_blank(pt_pc):
            return pt_pc[1] != &amp;#x27; &amp;#x27;
        for pt, piece in filter(not_blank, zip(pts, pieces)):
            board.paste(images[piece], pt, masks[piece])
        return board

&lt;/pre&gt;

&lt;/div&gt;

&lt;p&gt;This code depends on PNGs for the pieces being available in the current directory, filed under the (case-sensitive!) names: &lt;code&gt;{K,Q,B,N,R,P,k,q,b,n,r,p}.png&lt;/code&gt;. It also requires all these PNGs to have the same dimensions. Here&amp;#8217;s how to use it:&lt;/p&gt;
&lt;div class=&quot;typocode&quot;&gt;

&lt;pre class=&quot;prettyprint&quot;&gt;&amp;gt;&amp;gt;&amp;gt; renderer = DrawChessPosition()
&amp;gt;&amp;gt;&amp;gt; fen = &quot;r2q1rk1/pp2ppbp/1np2np1/2Q3B1/3PP1b1/2N2N2/PP3PPP/3RKB1R&quot;
&amp;gt;&amp;gt;&amp;gt; board = renderer.draw(fen)
&amp;gt;&amp;gt;&amp;gt; board.show()
&amp;gt;&amp;gt;&amp;gt; board.save(&quot;%s.png&quot; % fen.replace(&amp;#x27;/&amp;#x27;, &amp;#x27;-&amp;#x27;))

&lt;/pre&gt;

&lt;/div&gt;

&lt;p&gt;And here&amp;#8217;s the resulting image (with a CSS double border):&lt;/p&gt;
&lt;p&gt;&lt;img style=&quot;border-style:double;&quot; src=&quot;http://wordaligned.org/images/r2q1rk1-pp2ppbp-1np2np1-2Q3B1-3PP1b1-2N2N2-PP3PPP-3RKB1R.png&quot; alt=&quot;Chess position with FEN r2q1rk1/pp2ppbp/1np2np1/2Q3B1/3PP1b1/2N2N2/PP3PPP/3RKB1R&quot;/&gt;&lt;/p&gt;
&lt;h3 id=&quot;using-a-font-with-pil&quot;&gt;Using a font with PIL&lt;/h3&gt;
&lt;p&gt;There is a problem with the approach taken in the previous section. We only get a good graphic if we save the returned image at its native size: scaling it up or down results in a suboptimal picture. That&amp;#8217;s because the scaling doesn&amp;#8217;t have enough information to go on &amp;#8212; it has to work from a pixel raster when it really needs strokes or vector graphics.&lt;/p&gt;
&lt;p&gt;So if we scale the linear dimensions up or down:&lt;/p&gt;
&lt;div class=&quot;typocode&quot;&gt;

&lt;pre class=&quot;prettyprint&quot;&gt;&amp;gt;&amp;gt;&amp;gt; fen = &quot;r2q1rk1/pp2ppbp/1np2np1/2Q3B1/3PP1b1/2N2N2/PP3PPP/3RKB1R&quot;
&amp;gt;&amp;gt;&amp;gt; renderer = DrawChessPosition()
&amp;gt;&amp;gt;&amp;gt; board = renderer.draw(fen)
&amp;gt;&amp;gt;&amp;gt; board.size
(360, 360)
&amp;gt;&amp;gt;&amp;gt; small_board = board.resize((160, 160))
&amp;gt;&amp;gt;&amp;gt; big_board = board.resize((640, 640))
&amp;gt;&amp;gt;&amp;gt; big_4_squares = big_board.crop([80, 160, 240, 320])
&amp;gt;&amp;gt;&amp;gt; big_4_squares.show()
&amp;gt;&amp;gt;&amp;gt; small_board.show()

&lt;/pre&gt;

&lt;/div&gt;

&lt;p&gt;we&amp;#8217;ll get something like this:&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://wordaligned.org/images/chess-pos-small.png&quot; alt=&quot;Small chess board&quot;/&gt;
&lt;img src=&quot;http://wordaligned.org/images/chess-pos-big4.png&quot; alt=&quot;Section of large chess board&quot;/&gt;&lt;/p&gt;
&lt;p&gt;The way to avoid the aliasing problems is to work directly from a stroke representation of the chess pieces; for example, by using a &lt;a href=&quot;http://mip.noekeon.org/HTMLTTChess/install.html&quot;&gt;suitable font&lt;/a&gt;. Once again, PIL can do the job (though you&amp;#8217;ll need to have installed PIL with FreeType support). I found a freely available unicode true type &lt;a href=&quot;http://mip.noekeon.org/HTMLTTChess/install.html&quot;&gt;font&lt;/a&gt; and plugged it into the following code:&lt;/p&gt;
&lt;div class=&quot;typocode&quot;&gt;

&lt;pre class=&quot;prettyprint&quot;&gt;unichr_pieces=dict(
    zip(&quot;KQRBNPkqrbnp&quot;,
        (unichr(uc) for uc in range(0x2654, 0x2660))))

def chess_position_using_font(fen, font_file, sq_size):
    &amp;#x27;&amp;#x27;&amp;#x27;Return a chess position image.

    font_file - the name of a font file
    sq_size - the size of each square on the chess board
    &amp;#x27;&amp;#x27;&amp;#x27;
    font = ImageFont.truetype(font_file, sq_size)
    pieces = expand_fen(fen)
    board = draw_board(sq_size=(sq_size, sq_size))
    put_piece = ImageDraw.Draw(board).text
    def point(i, j):
        return i * sq_size, j * sq_size
    def not_blank(pt_pce):
        return pt_pce[1] != &amp;#x27; &amp;#x27;
    pts = (point(i, j) for j in range(8) for i in range(8))
    for pt, piece in filter(not_blank, zip(pts, pieces)):
        put_piece(pt, unichr_pieces[piece], fill=&amp;#x27;black&amp;#x27;, font=font)
    return board

&lt;/pre&gt;

&lt;/div&gt;

&lt;p&gt;If we use this code to create small and large chess pictures, much as before, we&amp;#8217;ll see something like this:&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://wordaligned.org/images/chess-pos-small-font.png&quot; alt=&quot;Small chess board&quot;/&gt;
&lt;img src=&quot;http://wordaligned.org/images/chess-pos-big4-font.png&quot; alt=&quot;Section of large chess board&quot;/&gt;&lt;/p&gt;
&lt;p&gt;As with our CSS + Unicode picture, this image isn&amp;#8217;t ideal since the board shows through the interiors of the pieces. And once again, I haven&amp;#8217;t figured out how to work around this problem.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Update, 2008-03-31.&lt;/strong&gt; A reader has worked out a &lt;a href=&quot;http://www.haloscan.com/comments/wordaligned/drawing_chess_positions/#14496&quot;&gt;cunning solution&lt;/a&gt;:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;You can make white pieces by drawing a &amp;#8220;black&amp;#8221; piece in white, then overlaying that with a &amp;#8220;white&amp;#8221; piece in black.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;I&amp;#8217;ve given this idea a try and &lt;a href=&quot;http://wordaligned.org/articles/white-black-knight.html&quot;&gt;written up the results&lt;/a&gt;. Here&amp;#8217;s the knight at square c3 &amp;#8212; a definite  improvement!&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://wordaligned.org/images/white-knight-on-black-square.png&quot; alt=&quot;White knight on a black square&quot;/&gt;&lt;/p&gt;
&lt;h3 id=&quot;latex&quot;&gt;LaTeX&lt;/h3&gt;
&lt;div class=&quot;info&quot;&gt;Things I learned while writing this article: the &lt;a href=&quot;http://www.ctan.org/tex-archive/fonts/chess/skak/&quot;&gt;skak package&lt;/a&gt; does chess with LaTeX.&lt;/div&gt;

&lt;p&gt;My thanks Ivan Uemlianin for pointing out that I&amp;#8217;d neglected to mention LaTeX as a suitable chess position type-setter, as &lt;a href=&quot;http://www.llaisdy.com/blog/2008/04/19/drawing-chess-positions/&quot;&gt;shown in his blog&lt;/a&gt;. LaTeX has been high on my list of things I really ought to learn about for well over a decade, and I simply wasn&amp;#8217;t aware it could do this.&lt;/p&gt;
&lt;h3 id=&quot;conclusions&quot;&gt;Conclusions&lt;/h3&gt;
&lt;p&gt;This article has shown, again, the merits of scripting graphics. We&amp;#8217;ve also seen that &lt;span /&gt;an interpreted language has much to offer in this area, allowing us to query and shape images dynamically, effectively bridging the gap between our program and a GUI driven graphics package.&lt;/p&gt;
&lt;p&gt;The &lt;a href=&quot;http://effbot.org/imagingbook/pil-index.htm&quot;&gt;Python Imaging Library&lt;/a&gt; has shown itself capable of working with shapes, colours, text and fonts. It&amp;#8217;s a great tool.&lt;/p&gt;
&lt;p&gt;We&amp;#8217;ve not done so well at our motivating task, of drawing a chess position. As I said at the outset, if that&amp;#8217;s why you&amp;#8217;re here I&amp;#8217;d suggest taking another look at the alternatives.&lt;/p&gt;
&lt;p&gt;The subtext of this article is platform-dependence. I don&amp;#8217;t know if the Unicode + CSS combination works in your browser or feed-reader, or indeed any other user agent; it depends on font contents and CSS rendering. &lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://www.libpng.org/pub/png/&quot;&gt;&lt;img style=&quot;float:right;&quot; src=&quot;http://www.libpng.org/pub/png/img_png/pngnow.png&quot; alt=&quot;[PNG now!]&quot;/&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;The &amp;#8220;P&amp;#8221; in PNG stands for &amp;#8220;Portable&amp;#8221;, and I would hope you can see the IMGs, which all source from PNGs &amp;#8212; all except the off-site JPEG, another well supported format.&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://www.freetype.org/index2.html&quot;&gt;&lt;img style=&quot;float:right;&quot; src=&quot;http://upload.wikimedia.org/wikipedia/en/thumb/3/3a/Freetype.png/160px-Freetype.png&quot; alt=&quot;[FreeType now!]&quot;/&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;span /&gt;One reason I like Python and writing about Python is its platform independence. Linux, Windows, OS X etc. &amp;mdash; we can all run the same code. For this particular application, that&amp;#8217;s less true. For a start, you&amp;#8217;ll need to install the non-standard &lt;a href=&quot;http://effbot.org/imagingbook/pil-index.htm&quot;&gt;PIL&lt;/a&gt; module. Then there&amp;#8217;s the filename case-insensitivity (which is easy to work around, but nonetheless an embarrassment). The capabilities of PIL itself depend on the presence of other thirdparty libraries: to get you going with this article you&amp;#8217;ll need &lt;a href=&quot;http://www.libpng.org/pub/png/&quot;&gt;libpng&lt;/a&gt;, which in turn depends on &lt;a href=&quot;http://www.zlib.net/&quot;&gt;zlib&lt;/a&gt;, and &lt;a href=&quot;http://www.freetype.org/index2.html&quot;&gt;FreeType&lt;/a&gt;, which again depends on zlib. On my Linux machine &lt;a href=&quot;http://effbot.org/imagingbook/image.htm#tag-Image.Image.show&quot;&gt;Image.show&lt;/a&gt; didn&amp;#8217;t work until I&amp;#8217;d installed &lt;a href=&quot;http://www.trilon.com/xv/&quot;&gt;xv&lt;/a&gt; from source, and that source needed some tweaking before it would build. So the code in this article is only portable once you&amp;#8217;ve suitably prepared your platform &amp;#8212; that is, the code isn&amp;#8217;t really portable!&lt;/p&gt;</description>
<dc:date>2008-03-30</dc:date>
<guid>http://wordaligned.org/articles/drawing-chess-positions</guid>
<author>tag@wordaligned.org (Thomas Guest)</author>
<link>http://wordaligned.org/articles/drawing-chess-positions</link>
<category>Chess</category>
</item>

<item>
<title>Drawing Chessboards</title>
<description>&lt;p&gt;I wanted a picture of a chessboard. Rather than boot up some drawing software and cut and paste black and white squares I decided to write a program to create the picture.&lt;/p&gt;
&lt;p&gt;If you&amp;#8217;d like to know &lt;strong&gt;why&lt;/strong&gt; anyone would ever create work for themselves in this way, skip to the end of this article, where you&amp;#8217;ll find justification and a more challenging &lt;a href=&quot;http://wordaligned.org/articles/drawing-chessboards.html#why&quot;&gt;follow-on problem&lt;/a&gt;. Otherwise, please read on from top to bottom in the usual way.&lt;/p&gt;
&lt;h3 id=&quot;the-python-imaging-library&quot;&gt;The Python Imaging Library&lt;/h3&gt;
&lt;p&gt;&lt;img style=&quot;border-style:double;&quot; src=&quot;http://wordaligned.org/images/chessboard-pil.png&quot; alt=&quot;Chessboard created by PIL&quot;/&gt;&lt;/p&gt;
&lt;p&gt;Fredrik Lundh&amp;#8217;s &lt;a href=&quot;http://effbot.org/imagingbook/pil-index.htm&quot;&gt;Python Imaging Library&lt;/a&gt; (commonly known as &lt;a href=&quot;http://effbot.org/imagingbook/pil-index.htm&quot;&gt;PIL&lt;/a&gt;) must surely rank as one of the most popular Python libraries which doesn&amp;#8217;t come as standard&lt;sup&gt;&lt;a id=&quot;fn1link&quot; href=&quot;http://wordaligned.org/articles/drawing-chessboards.html#fn1&quot;&gt;&lt;a href=&quot;https://blog.codeship.com/building-minimal-docker-containers-for-go-applications/&quot;&gt;1&lt;/a&gt;&lt;/a&gt;&lt;/sup&gt;. It&amp;#8217;s a fabulous tool which I&amp;#8217;ve used to create the graphic above (though note that the double border around this graphic and subsequent ones is applied by a CSS style property). Here&amp;#8217;s how.
&lt;span id=&quot;continue-reading&quot;/&gt;&lt;/p&gt;
&lt;div class=&quot;typocode&quot;&gt;&lt;div class=&quot;codetitle&quot;&gt;PIL chessboard&lt;/div&gt;

&lt;pre class=&quot;prettyprint&quot;&gt;def draw_chessboard(n=8, pixel_width=200):
    &quot;Draw an n x n chessboard using PIL.&quot;
    import Image, ImageDraw
    from itertools import cycle
    def sq_start(i):
        &quot;Return the x/y start coord of the square at column/row i.&quot;
        return i * pixel_width / n

    def square(i, j):
        &quot;Return the square corners, suitable for use in PIL drawings&quot; 
        return map(sq_start, [i, j, i + 1, j + 1])

    image = Image.new(&quot;L&quot;, (pixel_width, pixel_width))
    draw_square = ImageDraw.Draw(image).rectangle
    squares = (square(i, j)
               for i_start, j in zip(cycle((0, 1)), range(n))
               for i in range(i_start, n, 2))
    for sq in squares:
        draw_square(sq, fill=&amp;#x27;white&amp;#x27;)
    image.save(&quot;chessboard-pil.png&quot;)

&lt;/pre&gt;

&lt;/div&gt;

&lt;p&gt;Note:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;We don&amp;#8217;t draw any black squares, instead relying on the default image background being black.&lt;/li&gt;
&lt;li&gt;The &amp;#8220;L&amp;#8221; image type (Luminance?) specifies a greyscale image.&lt;/li&gt;
&lt;li&gt;PIL adopts the usual raster graphics convention, of the origin being in the top-left corner.&lt;/li&gt;
&lt;li&gt;As we progress &lt;strong&gt;down&lt;/strong&gt; the board row by row, the first white square alternates between being the first and second square of each row. &lt;code&gt;Itertools.cycle((0, 1))&lt;/code&gt; achieves this nicely. &lt;/li&gt;
&lt;li&gt;A regular 8 x 8 chessboard will, then, have a black square at the bottom left, which is the usual convention. For odd values of n the bottom-left square would be white.&lt;/li&gt;
&lt;li&gt;There may be rounding problems with this code if the supplied pixel width isn&amp;#8217;t an integral multiple of &lt;code&gt;n&lt;/code&gt;. It&amp;#8217;s probably better to guarantee the image size, rather than round down the board size.&lt;/li&gt;
&lt;li&gt;It would be better to parametrise the output file name, or even return the created image to clients. For now, we&amp;#8217;ll just save to a fixed-name PNG.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;imagemagick&quot;&gt;ImageMagick&lt;/h3&gt;
&lt;p&gt;PIL is a general purpose image processing library and it takes a little head-scratching and maths before we can even create something as simple as a chessboard. &lt;a href=&quot;http://www.imagemagick.org/script/index.php&quot;&gt;ImageMagick&lt;/a&gt; provides tools to perform a similar job from the command-line, making the chessboard a one-liner.&lt;/p&gt;
&lt;div class=&quot;typocode&quot;&gt;&lt;div class=&quot;codetitle&quot;&gt;ImageMagick chessboard&lt;/div&gt;

&lt;pre class=&quot;prettyprint&quot;&gt;$ N=8
$ PIXEL_WIDTH=200
$ convert -size $((N*15))x$((N*15)) pattern:checkerboard \
  -monochrome -resize $PIXEL_WIDTH chessboard-magick.png 

&lt;/pre&gt;

&lt;/div&gt;

&lt;p&gt;&lt;img style=&quot;border-style:double;float:right;margin-left:4px;&quot; src=&quot;http://wordaligned.org/images/chessboard-magick.png&quot; alt=&quot;Chessboard created by ImageMagick&quot;/&gt;&lt;/p&gt;
&lt;p&gt;Here, the checkerboard pattern is an ImageMagick built-in which, inspecting its output, happens to generate 15x15 squares (hence the 15&amp;#8217;s in the script above). The &lt;code&gt;-monochrome&lt;/code&gt; filter renders the pattern in black and white, rather than its native light- on dark-grey. The &lt;code&gt;-size&lt;/code&gt; and &lt;code&gt;-resize&lt;/code&gt; parameters should need no further explanation. The ((double parentheses)) perform Bash shell arithmetic.&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://www.imagemagick.org/script/index.php&quot;&gt;ImageMagick&lt;/a&gt; masquerades as a shell tool but really it&amp;#8217;s a powerful and fully featured programmer&amp;#8217;s imaging tool &amp;#8212; a bit like a command-line version of &lt;a href=&quot;http://www.gimp.org&quot;&gt;Gimp&lt;/a&gt;&lt;a id=&quot;fn2link&quot; href=&quot;http://wordaligned.org/articles/drawing-chessboards#fn2&quot;&gt;&lt;sup&gt;&lt;a href=&quot;http://devcenter.wercker.com/docs/quickstarts/advanced/building-minimal-containers-with-go&quot;&gt;2&lt;/a&gt;&lt;/sup&gt;&lt;/a&gt;. Although well documented, my gut reaction is that it pushes the command-line interface too far. For more advanced image mangling, you&amp;#8217;ll probably need a program to generate the one-liner needed to drive &lt;code&gt;convert&lt;/code&gt;. Despite this reservation, it does the simple things simply, and it can do complex things too. Recommended!&lt;/p&gt;
&lt;h3 id=&quot;google-chart-api&quot;&gt;Google Chart API&lt;/h3&gt;
&lt;p&gt;For a bit of fun, we can persuade Google to render the chessboard for us &amp;#8212; in this case as a scatter plot using a square black markers&lt;a id=&quot;fn3link&quot; href=&quot;http://wordaligned.org/articles/drawing-chessboards#fn3&quot;&gt;&lt;sup&gt;[3]&lt;/sup&gt;&lt;/a&gt;. We flip the PIL processing around, drawing black squares on the (default) white background, and using the usual plotting convention which places the origin at the bottom left.&lt;/p&gt;
&lt;div class=&quot;typocode&quot;&gt;&lt;div class=&quot;codetitle&quot;&gt;Google chart chessboard&lt;/div&gt;

&lt;pre class=&quot;prettyprint&quot;&gt;def chessboard_url(n=8, pixel_width=200):
    &quot;Returns the URL of a chessboard graphic.&quot;
    def sq_midpt(i):
        &quot;Return the x/y midpt of a square in column/row i.&quot;
        # For text encoding, the graphic&amp;#x27;s logical width is 100
        return (0.5 + i) * 100. / n

    xys = [(sq_midpt(i), sq_midpt(j))
           for i_start, j in zip(cycle((0, 1)), range(n))
           for i in range(i_start, n, 2)]
    fields = dict(width=pixel_width, sqside=pixel_width/n,
                  xs=&quot;,&quot;.join(&quot;%.02f&quot; % x for x, _ in xys),
                  ys=&quot;,&quot;.join(&quot;%.02f&quot; % y for _, y in xys))
    return (
        &quot;http://chart.apis.google.com/chart?&quot;
        &quot;cht=s&amp;amp;&quot;                        # Draw a scatter graph
        &quot;chd=t:%(xs)s|%(ys)s&amp;amp;&quot;          # using text encoding and
        &quot;chm=s,000000,1,2.0,%(sqside)r&amp;amp;&quot;# square black markers
        &quot;chs=%(width)rx%(width)r&quot;       # at this size.
        ) % fields

&lt;/pre&gt;

&lt;/div&gt;

&lt;p&gt;Note that we plot our chart on a logical 100 x 100 rectangle, the coordinate space mandated by the encoding we&amp;#8217;ve chosen, then resize it to the physical dimensions supplied by the client.&lt;/p&gt;
&lt;p&gt;This function actually returns the URL of a PNG which the &lt;a href=&quot;http://code.google.com/apis/chart/&quot;&gt;Google chart API&lt;/a&gt; serves up. Paste this URL into your browser address bar to see the graphic, or curl it to a local file.&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://chart.apis.google.com/chart?cht=s&amp;amp;chd=t:6.25,31.25,56.25,81.25,18.75,43.75,68.75,93.75,6.25,31.25,56.25,81.25,18.75,43.75,68.75,93.75,6.25,31.25,56.25,81.25,18.75,43.75,68.75,93.75,6.25,31.25,56.25,81.25,18.75,43.75,68.75,93.75|6.25,6.25,6.25,6.25,18.75,18.75,18.75,18.75,31.25,31.25,31.25,31.25,43.75,43.75,43.75,43.75,56.25,56.25,56.25,56.25,68.75,68.75,68.75,68.75,81.25,81.25,81.25,81.25,93.75,93.75,93.75,93.75&amp;amp;chm=s,000000,1,2.0,25.0&amp;amp;chs=200x200&quot;&gt;http://chart.apis.google.com/chart?cht=s&amp;amp;chd=t:6.25,31.25&amp;#8230;&amp;amp;chs=200x200&lt;/a&gt;&lt;/p&gt;
&lt;div class=&quot;typocode&quot;&gt;

&lt;pre class=&quot;prettyprint&quot;&gt;$ url=`python chessboard_url.py`
$ curl $url &amp;gt; chessboard.png

&lt;/pre&gt;

&lt;/div&gt;

&lt;p&gt;We could embed the image into HTML using the IMG element, which is how I&amp;#8217;ve embedded the image which you should see below.&lt;/p&gt;
&lt;div class=&quot;typocode&quot;&gt;

&lt;pre class=&quot;prettyprint&quot;&gt;&amp;gt;&amp;gt;&amp;gt; from cgi import escape
&amp;gt;&amp;gt;&amp;gt; img = &amp;#x27;&amp;lt;img src=&quot;%s&quot; alt=&quot;chessboard graphic&quot;/&amp;gt;&amp;#x27;
&amp;gt;&amp;gt;&amp;gt; img % escape(chessboard_url())

&lt;/pre&gt;

&lt;/div&gt;

&lt;p&gt;&lt;img src=&quot;http://chart.apis.google.com/chart?cht=s&amp;amp;chd=t:6.25,31.25,56.25,81.25,18.75,43.75,68.75,93.75,6.25,31.25,56.25,81.25,18.75,43.75,68.75,93.75,6.25,31.25,56.25,81.25,18.75,43.75,68.75,93.75,6.25,31.25,56.25,81.25,18.75,43.75,68.75,93.75|6.25,6.25,6.25,6.25,18.75,18.75,18.75,18.75,31.25,31.25,31.25,31.25,43.75,43.75,43.75,43.75,56.25,56.25,56.25,56.25,68.75,68.75,68.75,68.75,81.25,81.25,81.25,81.25,93.75,93.75,93.75,93.75&amp;amp;chm=s,000000,1,2.0,25.0&amp;amp;chs=200x200&quot; alt=&quot;Chessboard chart&quot; style=&quot;float:right;border-style:double;margin-left:4px;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;As you can see, we have plenty of options, but unfortunately the image itself isn&amp;#8217;t suitable. You can&amp;#8217;t get rid of the axes &amp;#8212; or at least, I haven&amp;#8217;t found a way to &amp;#8212; and the rendered chart has some padding to the top and the right. And worse, we&amp;#8217;re pretty much at the end of the line for this hack: if we wanted to do something more interesting, such as place pieces on the board, we&amp;#8217;re out of luck. &lt;/p&gt;
&lt;p&gt;Of course this isn&amp;#8217;t a flaw in the &lt;a href=&quot;http://code.google.com/apis/chart/&quot;&gt;Google Chart API&lt;/a&gt;: we&amp;#8217;ve actually asked it to draw a scatter plot of the centres of black squares on a chessboard, using square black markers, a job it&amp;#8217;s done well enough. Some examples showing the proper use of Google charts can be found in an &lt;a href=&quot;http://wordaligned.org/articles/the-maximum-subsequence-problem.html&quot;&gt;article I wrote about maximum sum subsequences&lt;/a&gt;.&lt;/p&gt;
&lt;h3 id=&quot;ascii-text&quot;&gt;ASCII Text&lt;/h3&gt;
&lt;p&gt;The chart URL might be considered a text encoding of the image; the actual graphic is returned by a server. There are other, more direct, textual representations.&lt;/p&gt;
&lt;div class=&quot;typocode&quot;&gt;&lt;div class=&quot;codetitle&quot;&gt;ASCII art chessboard&lt;/div&gt;

&lt;pre class=&quot;prettyprint&quot;&gt;def outer_join(sep, ss):
    &quot;&quot;&quot;Like string.join, but encloses the result with outer separators.

    Example:
    &amp;gt;&amp;gt;&amp;gt; outer_join(&amp;#x27;|&amp;#x27;, [&amp;#x27;1&amp;#x27;, &amp;#x27;2&amp;#x27;, &amp;#x27;3&amp;#x27;])
    &amp;#x27;|1|2|3|&amp;#x27;
    &quot;&quot;&quot;
    return &quot;%s%s%s&quot; % (sep, sep.join(ss), sep)

def ascii_chessboard(n=8):
    &quot;&quot;&quot;Draws an ASCII art chessboard.

    Returns a string representation of an n x n board.
    &quot;&quot;&quot;
    from itertools import islice, cycle
    divider = outer_join(&quot;+&quot;, &quot;-&quot; * n) + &quot;\n&quot;
    row0 = outer_join(&quot;|&quot;, islice(cycle(&quot; B&quot;), n)) + &quot;\n&quot;
    row1 = outer_join(&quot;|&quot;, islice(cycle(&quot;B &quot;), n)) + &quot;\n&quot;
    return outer_join(divider, islice(cycle([row0, row1]), n))

&lt;/pre&gt;

&lt;/div&gt;

&lt;p&gt;I suspect this code was easier for me to write than it is for you to read! It treats the chessboard as a sequence of alternating rows of alternating squares, which are then joined together for output.&lt;/p&gt;
&lt;div class=&quot;typocode&quot;&gt;

&lt;pre class=&quot;prettyprint&quot;&gt;&amp;gt;&amp;gt;&amp;gt; print ascii_chessboard(8)
+-+-+-+-+-+-+-+-+
| |B| |B| |B| |B|
+-+-+-+-+-+-+-+-+
|B| |B| |B| |B| |
+-+-+-+-+-+-+-+-+
| |B| |B| |B| |B|
+-+-+-+-+-+-+-+-+
|B| |B| |B| |B| |
+-+-+-+-+-+-+-+-+
| |B| |B| |B| |B|
+-+-+-+-+-+-+-+-+
|B| |B| |B| |B| |
+-+-+-+-+-+-+-+-+
| |B| |B| |B| |B|
+-+-+-+-+-+-+-+-+
|B| |B| |B| |B| |
+-+-+-+-+-+-+-+-+

&lt;/pre&gt;

&lt;/div&gt;

&lt;p&gt;Not pretty, but such graphics may be useful in source code, which is typically viewed in a plain-text editor, and where ASCII art provides a way of embedding pictures right where they&amp;#8217;re needed. &lt;/p&gt;
&lt;p&gt;On which point: if you&amp;#8217;re working through &amp;#8220;Structure and Interpretation of Computer Programs&amp;#8221; you may like to know the book is &lt;a href=&quot;http://www.neilvandyke.org/sicp-texi/&quot;&gt;available in Texinfo format&lt;/a&gt;, with the pictures all rendered in ASCII art. So you can split your editor window and run the code on one side, while browsing the book on the other. Here&amp;#8217;s one of the figures:&lt;/p&gt;
&lt;pre&gt;
*Figure 4.6:* The `or&#x27; combination of two queries is produced by
operating on the stream of frames in parallel and merging the
results.

            +---------------------------+
            |          (or A B)         |
            |    +---+                  |
 input      | +-&amp;gt;| A |------------+     |  output
 stream of  | |  +---+            V     |  stream of
 frames     | |    ^          +-------+ |  frames
 -------------*    |          | merge +---------------&amp;gt;
            | |    |          +-------+ |
            | |    |              ^     |
            | |    |   +---+      |     |
            | +-------&amp;gt;| B +------+     |
            |      |   +---+            |
            |      |     ^              |
            |      |     |              |
            |      +--*--+              |
            +---------|-----------------+
                      |
                  data base
&lt;/pre&gt;

&lt;p&gt;Even though I own a copy of the book and the &lt;a href=&quot;http://mitpress.mit.edu/sicp/full-text/book/book.html&quot;&gt;full text is available on-line&lt;/a&gt;, this primitive info version has become my preferred format when actually running the code examples and exercises.&lt;/p&gt;
&lt;h3 id=&quot;unicode-block-elements&quot;&gt;Unicode Block Elements&lt;/h3&gt;
&lt;p&gt;Most programming languages may be &lt;a href=&quot;http://wordaligned.org/articles/a-yen-for-more-symbols.html&quot;&gt;stuck in ASCII&lt;/a&gt;, but we needn&amp;#8217;t restict ourselves in this way. I found some block elements in the &lt;a href=&quot;http://www.unicode.org/charts/symbols.html&quot;&gt;Geometrical Symbols&lt;/a&gt; section of the Unicode code charts (&lt;a href=&quot;http://www.unicode.org/charts/PDF/U2580.pdf&quot;&gt;Unicode Block Elements (PDF)&lt;/a&gt;). Here&amp;#8217;s a pre-rendered block of text composed of the light and dark shade block characters, U+2591 LIGHT SHADE and U+2593 DARK SHADE.&lt;/p&gt;
&lt;pre&gt;
&amp;#x2591;&amp;#x2593;&amp;#x2591;&amp;#x2593;&amp;#x2591;&amp;#x2593;&amp;#x2591;&amp;#x2593;
&amp;#x2593;&amp;#x2591;&amp;#x2593;&amp;#x2591;&amp;#x2593;&amp;#x2591;&amp;#x2593;&amp;#x2591;
&amp;#x2591;&amp;#x2593;&amp;#x2591;&amp;#x2593;&amp;#x2591;&amp;#x2593;&amp;#x2591;&amp;#x2593;
&amp;#x2593;&amp;#x2591;&amp;#x2593;&amp;#x2591;&amp;#x2593;&amp;#x2591;&amp;#x2593;&amp;#x2591;
&amp;#x2591;&amp;#x2593;&amp;#x2591;&amp;#x2593;&amp;#x2591;&amp;#x2593;&amp;#x2591;&amp;#x2593;
&amp;#x2593;&amp;#x2591;&amp;#x2593;&amp;#x2591;&amp;#x2593;&amp;#x2591;&amp;#x2593;&amp;#x2591;
&amp;#x2591;&amp;#x2593;&amp;#x2591;&amp;#x2593;&amp;#x2591;&amp;#x2593;&amp;#x2591;&amp;#x2593;
&amp;#x2593;&amp;#x2591;&amp;#x2593;&amp;#x2591;&amp;#x2593;&amp;#x2591;&amp;#x2593;&amp;#x2591;
&lt;/pre&gt;

&lt;h3 id=&quot;and-more&quot;&gt;And more&lt;/h3&gt;
&lt;p&gt;I can think of plenty of other ways to draw a chessboard. My favourite &lt;a href=&quot;http://wordaligned.org/articles/drawing-software-design.htmls&quot;&gt;drawing&lt;/a&gt; environments are the &lt;a href=&quot;http://blogoscoped.com/archive/2008-02-11-n78.html&quot;&gt;pencil and paper&lt;/a&gt;, and the pen and whiteboard; combine the former with a scanner and the latter with a digital camera and you&amp;#8217;ve got an easy route to an electronic version of your design.&lt;/p&gt;
&lt;p&gt;For an HTML document I suspect &lt;a href=&quot;http://www.w3.org/Graphics/SVG/&quot;&gt;SVG&lt;/a&gt; would be a good choice, but I don&amp;#8217;t know enough about SVG to state this with confidence. I bet you could go a long way with &lt;a href=&quot;http://www.w3.org/Style/CSS/&quot;&gt;CSS&lt;/a&gt; too. &lt;a href=&quot;http://en.wikipedia.org/wiki/Chessboard&quot;&gt;Wikipedia&amp;#8217;s chess board&lt;/a&gt; is a table built on top of two small images, a light and a dark square, which I guess saves on bandwidth.&lt;/p&gt;
&lt;h3 id=&quot;why&quot;&gt;Why?&lt;/h3&gt;
&lt;p&gt;Why ever bother programming when all we want is a simple graphic?&lt;/p&gt;
&lt;p&gt;Well, for one thing, there&amp;#8217;s not &lt;strong&gt;that&lt;/strong&gt; much programming. The actual work of pushing pixels around is done by &lt;a href=&quot;http://code.google.com/apis/chart/&quot;&gt;Google&lt;/a&gt;, or &lt;a href=&quot;http://effbot.org/imagingbook/pil-index.htm&quot;&gt;PIL&lt;/a&gt;, or &lt;a href=&quot;http://www.imagemagick.org/script/index.php&quot;&gt;ImageMagick&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Once we&amp;#8217;ve got a program written, it should be easy to adapt it. We&amp;#8217;ve already put in hooks to specify the number of squares and the image dimensions. It&amp;#8217;s equally easy to, for example, write out a JPEG rather than a PNG, or use different colours.&lt;/p&gt;
&lt;p&gt;A programmatic solution is dynamic. Google&amp;#8217;s chart API generates pictures on the fly, based on data points, ranges etc. which clients choose as and when. It&amp;#8217;s rather  like lazy-evaluation: pre-rendering all possibilities isn&amp;#8217;t just expensive, it&amp;#8217;s out of the question.&lt;/p&gt;
&lt;h3 id=&quot;teaser&quot;&gt;Teaser&lt;/h3&gt;
&lt;p&gt;&lt;img src=&quot;http://tbn0.google.com/images?q=tbn:AmRSkxMo-1W5iM:http://web.usna.navy.mil/~wdj/images_chess/chess011.gif&quot; alt=&quot;Lurid chessboard&quot; style=&quot;float:right;margin-left:4px;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;That&amp;#8217;s quite enough pixels and characters for now, so this article will have to appear in two parts. If I&amp;#8217;ve still not convinced you of the merits of creating images programmatically, please consider the following puzzle.&lt;/p&gt;
&lt;p&gt;&lt;span /&gt;How would you draw a position reached in a game of chess, showing both the board and the pieces?&lt;/p&gt;
&lt;p&gt;And if I &lt;strong&gt;have&lt;/strong&gt; convinced you, this exercise makes for a good workout.&lt;/p&gt;
&lt;p&gt;Some Q&amp;amp;A&amp;#8217;s.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Q&lt;/strong&gt;: What position, exactly?&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;A&lt;/strong&gt;: Any!&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Q&lt;/strong&gt;: How will the position be described?&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;A&lt;/strong&gt;: Your choice &amp;#8212; it&amp;#8217;s an interesting part of the puzzle.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;A great starting point would be to solve the puzzle using an ASCII art representation.&lt;/p&gt;
&lt;p&gt;You can find my solution in &lt;a href=&quot;http://wordaligned.org/articles/drawing-chess-positions.html&quot;&gt;this follow-up article&lt;/a&gt;.&lt;/p&gt;
&lt;h3 id=&quot;thanks&quot;&gt;Thanks&lt;/h3&gt;
&lt;p&gt;Thanks to &lt;a href=&quot;http://gedmin.as&quot;&gt;Marius Gedminas&lt;/a&gt; and Johannes Hoff for their help bug-fixing this article.&lt;/p&gt;
&lt;hr /&gt;
&lt;p&gt;&lt;a id=&quot;fn1&quot; href=&quot;http://wordaligned.org/articles/drawing-chessboards#fn1link&quot;&gt;&lt;a href=&quot;https://blog.codeship.com/building-minimal-docker-containers-for-go-applications/&quot;&gt;1&lt;/a&gt;&lt;/a&gt;
I&amp;#8217;m confused about where exactly PIL belongs; the official homepage seems to be on the PythonWare website (&lt;a href=&quot;http://www.pythonware.com/library/pil/handbook/&quot;&gt;http://www.pythonware.com/library/pil/handbook/&lt;/a&gt;), but I usually head for the Effbot site, &lt;a href=&quot;http://effbot.org/imagingbook/&quot;&gt;http://effbot.org/imagingbook/&lt;/a&gt;. I think the sites mirror the same information, so it boils down to whether you prefer a blue or green theme, and how off-putting you find all the ads-by-google.&lt;/p&gt;
&lt;p&gt;&lt;a id=&quot;fn2&quot; href=&quot;http://wordaligned.org/articles/drawing-chessboards#fn2link&quot;&gt;&lt;a href=&quot;http://devcenter.wercker.com/docs/quickstarts/advanced/building-minimal-containers-with-go&quot;&gt;2&lt;/a&gt;&lt;/a&gt;
Actually, you can use &lt;a href=&quot;http://www.gimp.org/tutorials/Basic_Batch/&quot;&gt;Gimp from the command-line&lt;/a&gt;, and it comes with some tools for creating and editing batch files, and indeed for creating a personal suite of image processing scripts. I&amp;#8217;ve never used &lt;a href=&quot;http://www.gimp.org&quot;&gt;Gimp&lt;/a&gt; in this way, so I can&amp;#8217;t say much more about this.&lt;/p&gt;
&lt;p&gt;&lt;a id=&quot;fn3&quot; href=&quot;http://wordaligned.org/articles/drawing-chessboards#fn3link&quot;&gt;[3]&lt;/a&gt;
In theory you could use the Google Chart API to render any image in a pointillist manner: just plot enough pixels in the right places.&lt;/p&gt;</description>
<dc:date>2008-03-18</dc:date>
<guid>http://wordaligned.org/articles/drawing-chessboards</guid>
<author>tag@wordaligned.org (Thomas Guest)</author>
<link>http://wordaligned.org/articles/drawing-chessboards</link>
<category>Chess</category>
</item>

</channel>
</rss>
