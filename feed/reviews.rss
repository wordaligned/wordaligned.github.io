<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:dc="http://purl.org/dc/elements/1.1/" >
<channel>
<title>Word Aligned</title>
<link>http://wordaligned.org</link>
<description>tales from the code face</description>
<dc:creator>tag@wordaligned.org</dc:creator>
<language>en-gb</language>
<item>
<title>C++ Concurrency in Action</title>
<description>&lt;p&gt;&lt;span style=&quot;text-align:center;font-size:72px;color:gold;&quot;&gt;&amp;#9733;&amp;#9733;&amp;#9733;&amp;#9733;&amp;#9733;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://www.amazon.co.uk/C-Concurrency-Action-Practical-Multithreading/dp/1933988770&quot; title=&quot;C++ Concurrency in Action, on Amazon&quot;&gt;C++ Concurrency in Action&lt;/a&gt; is an excellent book. You should buy it if you want to use the support for concurrency added by the new C++ standard, C++11; and if you&amp;#8217;re using C++11 you&amp;#8217;ll deepen your understanding of the various language enhancements and how they work together.&lt;/p&gt;
&lt;div class=&quot;amazon&quot;&gt;&lt;a href=&quot;http://www.amazon.co.uk/C-Concurrency-Action-Practical-Multithreading/dp/1933988770&quot;&gt;&lt;img src=&quot;http://www.justsoftwaresolutions.co.uk/images/ccia.jpg&quot; alt=&quot;C++ Concurrency in Action cover&quot;&gt;&lt;/a&gt;&lt;/div&gt;

&lt;p&gt;Who&amp;#8217;s the author? What makes him qualified to write this book?&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;a href=&quot;http://www.justsoftwaresolutions.co.uk/&quot; title=&quot;Anthony Willams&#x27; website&quot;&gt;Anthony Williams&lt;/a&gt; is a UK-based developer and consultant with many years experience in C++. He has been an active member of the BSI C++ Standards Panel since 2001, and is author or coauthor of many of the C++ Standards Committee papers that led up to the inclusion of the thread library in the new C++ Standard, known as C++11 or C++0x. He has been the maintainer of the Boost Thread library since 2006, and is the developer of the &lt;a href=&quot;http://www.stdthread.co.uk/&quot; title=&quot;just::thread, a C++ Standard Thread Library implementation&quot;&gt;just::thread&lt;/a&gt; implementation of the C++11 thread library from Just Software Solutions Ltd. Anthony lives in the far west of Cornwall, England. &amp;#8212; &lt;a href=&quot;http://www.manning.com/williams/&quot; title=&quot;Williams&#x27; author page on Manning website&quot;&gt;About the Author, Manning website&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;It&amp;#8217;s clear the experience of writing papers for the standards committee has paid off. The book is well organised and clearly written. Accurate and thorough, it&amp;#8217;s also a pleasure to read. The examples are practical, and range from launching threads through to lock-free message queues. The largest case study &amp;#8212; a message passing framework and an ATM application built on this framework &amp;#8212; shows the expert use of modern C++ to write elegant and compact code.&lt;/p&gt;
&lt;p&gt;The clarity of the text is matched by the book&amp;#8217;s clean and functional design. It looks good. I bought the dead-tree version which gave me free access to the ebook and I&amp;#8217;ve made use of both formats.&lt;/p&gt;
&lt;p&gt;I&amp;#8217;m new to C++11 and compilers are still catching up with the standard. This book is steeped in C++11. Reading through it, I came to realise that a close look at the standard thread library helps explain the evolution of the language as a whole: so &lt;strong&gt;that&amp;#8217;s&lt;/strong&gt; why variadic templates are needed, and move semantics work &lt;strong&gt;there&lt;/strong&gt;, and &amp;#8212; &lt;strong&gt;I get it!&lt;/strong&gt; &amp;#8212; lambda functions fit nicely with condition variables.&lt;/p&gt;
&lt;p&gt;Recommended++&lt;/p&gt;</description>
<dc:date>2013-01-21</dc:date>
<guid>http://wordaligned.org/articles/c++-concurrency-in-action</guid>
<author>tag@wordaligned.org (Thomas Guest)</author>
<link>http://wordaligned.org/articles/c++-concurrency-in-action</link>
<category>Reviews</category>
</item>

<item>
<title>The Rings of Saturn</title>
<description>&lt;p&gt;&lt;a href=&quot;http://en.wikipedia.org/wiki/Heart_of_Darkness#Historical_context&quot;&gt;&lt;img src=&quot;http://upload.wikimedia.org/wikipedia/en/d/d1/Roi_des_belges.jpg&quot; alt=&quot;Roi des Belges, the ship Conrad used to travel up the Congo&quot; style=&quot;float:right&quot;/&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;On board The Nellie waiting for the turn of the tide, Marlow entertains his companions with the tale of a mission he undertook as an employee of a Belgian trading company, traveling up the Congo river. This entertainment, the framed story in Joseph Conrad&amp;#8217;s &lt;a href=&quot;http://en.wikipedia.org/wiki/Heart_of_Darkness&quot; title=&quot;Heart of Darkness, Wikipedia&quot;&gt;Heart of Darkness&lt;/a&gt;, quickly becomes very dark indeed, as Marlow presses on through disease, destruction and death, increasingly preoccupied with tracing the elusive Mr Kurtz, until eventually, when it seems he can go no further, he comes to a clearing. Looking through his glasses he sees the slope of a hill on which stands a house. There was no enclosure or fence of any kind, says Marlow, but there had been one apparently, for near the house half-a-dozen slim posts remained in a row, roughly trimmed, and with their upper ends ornamented with round carved balls. The occupant of this house, a harlequin figure, a jester at the court of King Kurtz if you like, also appears in Terry Jones&amp;#8217; &lt;a href=&quot;http://www.fluidinfo.com/terry/2009/03/02/the-entrepreneurial-spirit-in-literature/&quot;&gt;fluidinfo blog&lt;/a&gt;, and it was this blog article which sent me back to Conrad, his character Marlow, and his terrible journey.&lt;/p&gt;
&lt;p&gt;&lt;span id=&quot;continue-reading&quot;/&gt;&lt;/p&gt;
&lt;p&gt;The unnamed harlequin figure Marlow encounters seems unaffected by the madness around him and &lt;a href=&quot;http://jon.es/terry.html&quot;&gt;Terry Jones&lt;/a&gt; finds similarities between his attitude and that of an entrepreneur, quoting Marlow &amp;#8230; The glamour of youth enveloped his parti-coloured rags, his destitution, his loneliness, the essential desolation of his futile wanderings. For months &amp;#8212; for years &amp;#8212; his life hadn&amp;#8217;t been worth a day&amp;#8217;s purchase; and there he was gallantly, thoughtlessly alive, to all appearances indestructible solely by the virtue of his few years and of his unreflecting audacity &amp;#8230; words I found interesting in the context of the &lt;a href=&quot;http://www.fluidinfo.com/terry/&quot; title=&quot;Terry Jones&#x27;s fluidinfo blog&quot;&gt;fluidinfo blog&lt;/a&gt;, which I have followed since hearing Terry Jones &lt;a href=&quot;http://www.pyconuk.org/talks_2007.html#36&quot;&gt;speak at PyCon UK&lt;/a&gt; a couple of years ago.&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://www.fluidinfo.com&quot;&gt;&lt;img src=&quot;http://www.fluidinfo.com/images/fi-logo-cropped.png&quot; alt=&quot;fluidinfo logo&quot; style=&quot;float:right;&quot;/&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Terry Jones is &lt;a href=&quot;http://twitter.com/terrycojones/status/1581462570&quot;&gt;obsessed&lt;/a&gt; with connections and with organising the internet &amp;#8212; an investigation which begins with the realisation that organising is the wrong word. Library style portals pioneered in the early days of the web by the likes of alta vista and yahoo! &amp;#8212; these facades have crumbled, broken up by their brittle hierarchies and the inefficiency of dictionary search. In their place an army of robots follows links and crunches data, maintaining google&amp;#8217;s ever growing index. Yet even this empire will fall. Already the cracks begin to show: google urges us to organise, to use canonical resource locators, &lt;a href=&quot;http://is.gd/jlio&quot;&gt;http://is.gd/jlio&lt;/a&gt;; instead, we reduce and redirect. Quotation and association lie at the heart of the web and better tools are being invented for labelling, sharing and shaping the flow of information. At the conference these were the ideas which Terry Jones conveyed to me and others in that enclosed room in the basement of the Birmingham Conservatoire, ideas which seemed novel at the time, yet which now seem to have gathered momentum. I hope his company, &lt;a href=&quot;http://www.fluidinfo.com&quot; title=&quot;Fluidinfo, the next everything&quot;&gt;Fluidinfo&lt;/a&gt; can exploit his vision.&lt;/p&gt;
&lt;div class=&quot;amazon&quot;&gt;&lt;a href=&quot;http://www.amazon.com/gp/product/0811214133?tag=wordalig-20&quot;&gt;
&lt;img src=&quot;http://wordaligned.org/images/books/rings-of-saturn-cover.jpg&quot; alt=&quot;Rings of Saturn cover&quot;/&gt;&lt;/a&gt;&lt;/div&gt;

&lt;p&gt;It came as something of a shock, though, to see the connection between Terry Jones and Joseph Conrad. How can Marlow&amp;#8217;s harlequin remain unscathed by his circumstances? Because he is young and a fool. J&amp;oacute;sef Teodor Konrad Korzeniowksi, the Polish-born seaman, who would later become Joseph Conrad the great English writer &amp;#8212; Korzeniowksi experienced first hand the full horror of the entrepreneurialism which led to gross exploitation of the Congo; and by coincidence, when I read Terry Jones&amp;#8217; blog post, I had just finished re-reading WG Sebald&amp;#8217;s masterpiece, &lt;a href=&quot;http://www.amazon.com/gp/product/0811214133?tag=wordalig-20&quot; title=&quot;The Rings of Saturn, on Amazon, another great river&quot;&gt;The Rings of Saturn&lt;/a&gt;, a book which touches on the life of Korzeniowksi amongst many other things. Like Marlow&amp;#8217;s story, WG Sebald&amp;#8217;s book centres on a voyage, in this case one undertaken by the author on foot through Suffolk in 1992, a date close to the birth of the web. Like the modern day blogger, Sebald quotes, pastes in images, connects. Unlike most bloggers, Sebald has the genius to assemble these parts into something beautiful and profound. &lt;/p&gt;
&lt;p&gt;Sebald had hoped his walk would dispel the emptiness which takes hold of him whenever he has completed a long stint of work, but, walking for hours on end through the countryside, he finds himself preoccupied  with the traces of destruction, reaching far into the past, that were evident even in that remote place. He finds Suffolk to be thinly-populated and declining fast. The North Sea has been over-fished and eats into the coastline. Blighted towns suffer from poverty, unemployment and neglect, while once great houses decay, their gardens becoming &lt;a href=&quot;http://www.flickr.com/photos/thomasguest/sets/72157617288800804/&quot;&gt;overgrown&lt;/a&gt;, their owners becoming eccentric, then mad.&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://www.flickr.com/photos/thomasguest/3455678986/&quot; title=&quot;Today there is no trace of it by Thomas Guest, on Flickr&quot;&gt;&lt;img src=&quot;http://farm4.static.flickr.com/3543/3455678986_823c0b3abf_m.jpg&quot; width=&quot;223&quot; height=&quot;240&quot; alt=&quot;Today there is no trace of it&quot; /&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;J&amp;oacute;sef Teodor Konrad Korzeniowksi, Sebald writes, became an employee of the Soci&amp;eacute;t&amp;eacute; Anonyme Belge pour le Commerce du Haut-Congo, an organisation whose legendary profits were built on a system of slave labour which was sanctioned by the shareholders and all the Europeans contracted to work in the new colony. On reaching Matadi, a desolate settlement (as Marlow later describes in Heart of Darkness), Korzeniowksi comes on a place where those who were racked by illness, starvation and toil had withdrawn to die. I began to distinguish the gleam of the eyes under the trees, says Marlow. Then, glancing down, I saw a face near my hand. The black bones reclined at full length with one shoulder against the tree, and slowly the eyelids and the sunken eyes looked up at me, enormous and vacant, a kind of blind, white flicker in the depths of the orbs, which died out slowly. &lt;/p&gt;
&lt;p&gt;Korzeniowksi fell ill and would continue no further, though it would be some months before his return to Europe, and from then on protracted bouts of despair would alternate with his writing; but Marlow continues up-river, finally arriving at the clearing described at the start of this article, where he meets the young man whose spirit, to Terry Jones, has so much in common with entrepreneurialism &amp;#8230; I saw my mistake, says Marlow. These round knobs were not ornamental but symbolic; they were expressive and puzzling, striking and disturbing &amp;#8212; food for thought and also for the vultures if there had been any looking down from the sky; but at all events for such ants as were industrious enough to ascend the pole. They would have been even more impressive, those heads on stakes, if their faces had not been turned to the house. Only one, the first I had made out, was facing my way. I was not so shocked as you may think. The start back I had given was really nothing but a movement of surprise. I had expected to see a knob of wood there, you know. I returned deliberately to the first I had seen &amp;#8212; and there it was, black, dried, sunken, with closed eyelids &amp;#8212; a head that seemed to sleep at the top of that pole, and, with the shrunken dry lips showing a narrow white line of the teeth, was smiling, too, smiling continuously at some endless and jocose dream of that eternal slumber.&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://jon.es/terry.html&quot;&gt;&lt;img src=&quot;http://jon.es/images/idiot-only.png&quot; alt=&quot;When I grow up I&#x27;m going to be...&quot;/&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;You&amp;#8217;ll find &lt;a href=&quot;http://www.amazon.com/gp/product/0811214133?tag=wordalig-20&quot; title=&quot;The Rings of Saturn, on Amazon, another great river&quot;&gt;The Rings of Saturn&lt;/a&gt; filed under fiction but in fact it&amp;#8217;s a circular journey which combines autobiography, biography, and history into a strange and moving whole. It is a book which defies categorisation but that won&amp;#8217;t stop me from tagging it: compelling, profound, recommended.&lt;/p&gt;</description>
<dc:date>2009-04-28</dc:date>
<guid>http://wordaligned.org/articles/the-rings-of-saturn</guid>
<author>tag@wordaligned.org (Thomas Guest)</author>
<link>http://wordaligned.org/articles/the-rings-of-saturn</link>
<category>Reviews</category>
</item>

<item>
<title>Review: Expert Python Programming</title>
<description>&lt;p&gt;&lt;a href=&quot;http://www.packtpub.com/expert-python-programming/book&quot;&gt;&lt;img height=&quot;262px&quot; src=&quot;http://wordaligned.org/images/books/expert-python-programming.jpg&quot; alt=&quot;Expert Python Programming cover&quot;/&gt;&lt;/a&gt;
&lt;a href=&quot;http://ziade.org&quot;&gt;&lt;img height=&quot;262px&quot; src=&quot;http://tarekziade.files.wordpress.com/2008/09/tarekgotchi.png&quot; alt=&quot;Tarek Ziad&amp;eacute;&quot;/&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;If you follow &lt;a href=&quot;http://planet.python.org&quot;&gt;Python blogs&lt;/a&gt; you&amp;#8217;ll have seen &lt;a href=&quot;http://www.google.com/search?q=expert+python+programming+review&quot; title=&quot;Packt sent review copies to all these people&quot;&gt;more than one review&lt;/a&gt; of Tarek Ziad&amp;eacute;&amp;#8217;s book, &lt;a href=&quot;http://www.packtpub.com/expert-python-programming/book&quot;&gt;Expert Python Programming&lt;/a&gt;. As a result of these reviews I&amp;#8217;d decided that, although the book looked interesting, I wouldn&amp;#8217;t be investing in a copy for myself; but when the &lt;a href=&quot;http://www.packtpub.com&quot;&gt;publishers&lt;/a&gt; contacted me directly with the offer of a free review copy, I accepted.&lt;/p&gt;
&lt;p&gt;&lt;span id=&quot;continue-reading&quot;/&gt;&lt;/p&gt;
&lt;p&gt;You may wonder: Why the need for a book on &lt;strong&gt;expert&lt;/strong&gt; Python programming? Doesn&amp;#8217;t Python value simplicity and transparency above all else? (Language lawyers and &lt;a href=&quot;http://en.wikipedia.org/wiki/Perl#Perl_golf&quot;&gt;golfers&lt;/a&gt;, look elsewhere!) Why any &lt;strong&gt;book&lt;/strong&gt; on Python, when the online documentation is so well put together?&lt;/p&gt;
&lt;p&gt;Yes, that&amp;#8217;s what I thought too, but the fact is, Python has steadily expanded over a series of point releases. The standard &lt;a href=&quot;http://docs.python.org/tutorial&quot;&gt;tutorial&lt;/a&gt; omits important new(-ish) features such as decorators and properties, and its treatment of generators and special methods is light. Although the language reference covers these topics, it&amp;#8217;s no user guide.&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://www.packtpub.com/expert-python-programming/book&quot;&gt;Expert Python Programming&lt;/a&gt; starts well, picking up where the Python &lt;a href=&quot;http://docs.python.org/tutorial&quot;&gt;tutorial&lt;/a&gt; leaves off. It soon becomes evident Tarek Ziad&amp;eacute; is indeed an expert Python programmer. He walks through some nice real-world examples. He presents guidelines and advanced idioms few Pythonistas would dispute. He points to tools, modules and articles hosted on and away from &lt;a href=&quot;http://python.org&quot;&gt;python.org&lt;/a&gt; with accuracy.&lt;/p&gt;
&lt;p&gt;Unfortunately the details let the book down. Graphics are poor quality. Some screen shots are barely readable. Here&amp;#8217;s a broken code sample &amp;#8212; it&amp;#8217;s not the only one.&lt;/p&gt;
&lt;div class=&quot;typocode&quot;&gt;

&lt;pre class=&quot;prettyprint&quot;&gt;&amp;gt;&amp;gt;&amp;gt; def sum(sequence):   # better !
...     total = 0
...     for arg in args:
...         total += arg
...     return total

&lt;/pre&gt;

&lt;/div&gt;

&lt;p&gt;(While I&amp;#8217;m nit-picking, I wish books didn&amp;#8217;t resort to comments for call-out text, and I&amp;#8217;d prefer an example which doesn&amp;#8217;t shadow a built-in function).&lt;/p&gt;
&lt;p&gt;I&amp;#8217;m less bothered by the &lt;a href=&quot;http://atomisator.ziade.org/query?component=Expert+Python+Programming+Book&amp;amp;order=priority&amp;amp;report=9&amp;amp;owner=tarek&amp;amp;col=id&amp;amp;col=summary&amp;amp;col=status&amp;amp;col=type&amp;amp;col=priority&amp;amp;col=milestone&quot;&gt;grammatical errors and typos&lt;/a&gt;. Tarek Ziad&amp;eacute; writes clearly and engagingly. The book is easy to read. That said, I won&amp;#8217;t let him get away with this pronouncement on Test-Driven Development (TDD).&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;[TDD] is widely used in the Python community, and probably more so in communities that work with statically typed languages. This may be due to the fact that developers think that most tests are done by the compiler, which checks many things when it produces a binary.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ol&gt;
&lt;li&gt;I&amp;#8217;m sure he means &amp;#8220;more so &lt;strong&gt;than&lt;/strong&gt; in communities &amp;#8230;&amp;#8221;. &lt;/li&gt;
&lt;li&gt;The negative spin may well irritate some readers unnecessarily. &lt;/li&gt;
&lt;li&gt;Which is a shame, since I agree with the point he&amp;#8217;s trying to make, that &lt;a href=&quot;http://mindview.net/WebLog/log-0025&quot; title=&quot;Bruce Eckel&#x27;s essay on testing and static typing&quot;&gt;strong testing beats static typing&lt;/a&gt;.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Further in, the book covers more general software engineering discipline, with chapters on packaging and distribution, version control, project tracking, documentation, optimisation etc. As ever, Tarek Ziad&amp;eacute; provides some welcome pointers to Python best practices, but I see little point in (e.g.) supplying sample &lt;a href=&quot;http://trac.edgewall.org/&quot;&gt;Trac&lt;/a&gt; configuration file listings &amp;#8212; it would be better to direct readers to up to date online documentation.&lt;/p&gt;
&lt;p&gt;Once you get beyond the core language, Python becomes a sizable topic. It must have been hard to decide what belongs in a book for expert Python programmers, and what to leave out. I do think there should have been more about Python 3.0. I would also suggest coverage of embedding and extending &amp;#8212; of interfacing with other languages.&lt;/p&gt;
&lt;p&gt;In summary, then, I enjoyed &lt;a href=&quot;http://www.packtpub.com/expert-python-programming/book&quot;&gt;Expert Python Programming&lt;/a&gt; and learned a few things from it. I don&amp;#8217;t think I&amp;#8217;ll return to it often, but it has provided some useful pointers. With careful editing and design it could have been much better.&lt;/p&gt;
&lt;hr /&gt;
&lt;p&gt;At a slight tangent, but still on the topic of expert Python programming, I recommend David M. Beazley&amp;#8217;s  &lt;a href=&quot;http://dabeaz.com/coroutines/&quot; title=&quot;A Curious Course on Coroutines and Concurrency&quot;&gt;&amp;#8220;A Curious Course on Coroutines and Concurrency&amp;#8221;&lt;/a&gt;, originally presented at PyCon&amp;#8217;09. It sort-of follows on from his equally good &lt;a href=&quot;http://www.dabeaz.com/generators/&quot;&gt;&amp;#8220;Generator Tricks for Systems Programmers&amp;#8221;&lt;/a&gt; PyCon&amp;#8217;08 presentation but this time he&amp;#8217;s pushing rather than pulling.&lt;/p&gt;
&lt;blockquote&gt;&lt;p&gt;&lt;a href=&quot;http://www.dabeaz.com&quot; title=&quot;Is David working on Tubes?&quot;&gt;&lt;img src=&quot;http://www.dabeaz.com/images/Davetubes.jpg&quot; alt=&quot;David Beazley&quot;/&gt;&lt;/a&gt;&lt;/p&gt;&lt;p&gt;Dave working on his latest project &amp;#8212; &amp;#8220;you know, it&amp;#8217;s a series of tubes.&amp;#8221;&lt;/p&gt;&lt;/blockquote&gt;</description>
<dc:date>2009-04-16</dc:date>
<guid>http://wordaligned.org/articles/review-expert-python-programming</guid>
<author>tag@wordaligned.org (Thomas Guest)</author>
<link>http://wordaligned.org/articles/review-expert-python-programming</link>
<category>Reviews</category>
</item>

<item>
<title>Spolsky podcast causes exercise bike incident</title>
<description>&lt;p&gt;&lt;a href=&quot;http://www.objectmentor.com/omTeam/martin_r.html&quot;&gt;&lt;img src=&quot;http://www.objectmentor.com/Images/photo_martin_r.jpg&quot; alt=&quot;Robert C. Martin&quot; width=&quot;192&quot; height=&quot;256&quot;/&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Robert C. Martin opens &lt;a href=&quot;http://blog.objectmentor.com/articles/2009/01/31/quality-doesnt-matter-that-much-jeff-and-joel&quot;&gt;a rant&lt;/a&gt; on his Object Mentor blog with one of the best sentences I&amp;#8217;ve read in a while.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;I was riding my exercise bike, listening to Stack Overflow #38 when I heard Jeff Atwood and Joel Spolsky say &amp;#8220;Quality just doesn&amp;#8217;t matter that much.&amp;#8221; &lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;I&amp;#8217;ve never been one for exercise bikes or podcasts but I&amp;#8217;m guessing Robert Martin tuned in for some light entertainment rather than provocation. As it turned out, though:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;I nearly fell off my bike.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Happily no real harm was done and Robert Martin recovered sufficiently to post &lt;a href=&quot;http://blog.objectmentor.com/articles/2009/01/31/quality-doesnt-matter-that-much-jeff-and-joel&quot;&gt;his response&lt;/a&gt; to the &lt;a href=&quot;http://blog.stackoverflow.com/2009/01/podcast-38/&quot;&gt;podcast&lt;/a&gt;. The debate continues in the &lt;a href=&quot;http://blog.objectmentor.com/articles/2009/01/31/quality-doesnt-matter-that-much-jeff-and-joel#comments&quot;&gt;comments&lt;/a&gt; on this article and &lt;a href=&quot;http://glyph.twistedmatrix.com/2009/02/joel-un-test.html&quot;&gt;elsewhere&lt;/a&gt;. I don&amp;#8217;t want to weigh into this particular argument myself, but out of curiosity I did listen to exactly what Atwood and Spolsky had to say around 42 minutes into the show (yes, a &lt;a href=&quot;http://www.joelonsoftware.com/items/2009/01/31.html&quot;&gt;transcript of the relevant segment exists&lt;/a&gt;, but I wanted to listen to the original; having done so, I don&amp;#8217;t think I&amp;#8217;ll bother with the rest, thanks). Spolsky does almost all of the talking. Whilst managing to sound calm and thoughtful, his actual words are plain rude.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;[&amp;#8230;] it seems to me like a lot of the Object Oriented Design principles you&amp;#8217;re hearing lately from people like &lt;strong&gt;Robert Martin&lt;/strong&gt; and Kent Beck and so forth have gone off the deep end into architecture for architecture&amp;#8217;s sake [&amp;#8230;] They&amp;#8217;ve just gone off the deep end, and &lt;strong&gt;I don&amp;#8217;t think these people write very much code&lt;/strong&gt; if they&amp;#8217;re coming up with these principles, to be honest, it doesn&amp;#8217;t even make sense.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;(Emphasis mine.)&lt;/p&gt;
&lt;p&gt;&lt;span id=&quot;continue-reading&quot;/&gt;&lt;/p&gt;
&lt;p&gt;I think it&amp;#8217;s Spolsky&amp;#8217;s suggestion that people like Robert Martin don&amp;#8217;t write much code which bugs Martin the most, and I&amp;#8217;m not surprised. Listening to the podcast, I didn&amp;#8217;t hear anyone actually say &amp;#8220;Quality doesn&amp;#8217;t matter&amp;#8221;. Maybe I didn&amp;#8217;t listen long enough, but I wonder if it&amp;#8217;s actually Martin&amp;#8217;s spin on what&amp;#8217;s been said. Robert Martin is a fervent promoter of code quality. His view (as I understand it) is that there are no shortcuts, and that test driven development is a great way to deliver quality.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;You see, I think quality matters. I think the quality of my code matters, even at the smallest scale. I think the quality of my systems matters. I think the quality of my tests matters. And&amp;#8230; I think the quality of my advice matters.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;div class=&quot;amazon&quot;&gt;&lt;a href=&quot;http://www.amazon.com/gp/product/0135974445?ie=UTF8&amp;amp;tag=wordalig-20&quot;&gt;&lt;img src=&quot;http://wordaligned.org/images/books/agile-software-development.jpg&quot; alt=&quot;Agile Software Design cover&quot;/&gt;&lt;/a&gt;&lt;/div&gt;

&lt;p&gt;Reading this prompts me to mention a book I&amp;#8217;ve been wanting to discuss here for a while &amp;#8212; &lt;a href=&quot;http://www.amazon.com/gp/product/0135974445?ie=UTF8&amp;amp;tag=wordalig-20&quot;&gt;&amp;#8220;Agile Software Development: Principles, Patterns, and Practices&amp;#8221;&lt;/a&gt;, by Robert C. Martin. It&amp;#8217;s a book I don&amp;#8217;t hesistate to recommend: packed with code, knowledge and character, it demonstrates real world software development by example. It&amp;#8217;s arguably a better guide to design patterns for C++ and Java programmers than the more famous &lt;a href=&quot;http://en.wikipedia.org/wiki/Design_Patterns&quot;&gt;&amp;#8220;Gang of Four&amp;#8221;&lt;/a&gt; book. It&amp;#8217;s also a wide-ranging and ambitious book. You&amp;#8217;ll find a manifesto, checklists of principles and practices, cartoons, quotations, a dialogue between pair-programmers, an Appendix on UML, even a satirical short story.&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://www.amazon.com/gp/product/0135974445?ie=UTF8&amp;amp;tag=wordalig-20&quot;&gt;Agile Software Development&lt;/a&gt; tells it like it is. It&amp;#8217;s as a survival guide for working programmers who want to do the best they can. Programmers who use C++, Java and UML. Programmers who suffer constant pressure from pointy-haired bosses. Programmers who resist the urge to add global variables to solve their immediate problems, who introduce interfaces to improve architecture, who write Java code which generates more boilerplate Java. Programmers who care.&lt;/p&gt;
&lt;p&gt;Yet I have reservations. Agile Software Development is far from perfect. The mix of fonts on the front cover is a fair indication of what&amp;#8217;s inside: the book is poorly designed. The book promotes clean, well-factored code, yet this advice doesn&amp;#8217;t seem to have been applied to itself. In the preface Robert Martin describes the historical forces which have shaped the book &amp;#8212; an article from here, some chapters from there, a change of direction &amp;#8212; it&amp;#8217;s reminiscent of a stop-start software project, and too much of that history shows.  Reading the book I also tripped over several typos and the occasional broken code sample. Sad to say, but the flaws in this book have coloured my judgement of what Robert Martin has to say about code quality.&lt;/p&gt;
&lt;p&gt;Robert Martin suggests Spolsky&amp;#8217;s comments are:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;a symptom of someone has focussed on business and lost his technical chops.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Certainly Joel Spolsky seems focused on business and his business revolves around the &lt;a href=&quot;http://www.joelonsoftware.com&quot;&gt;Joel-on-Software&lt;/a&gt; brand. Whether or not you buy into that brand, he&amp;#8217;s a skilful writer. The material on his website is always carefully written and well presented.&lt;/p&gt;
&lt;hr /&gt;
&lt;div class=&quot;amazon&quot;&gt;&lt;a href=&quot;http://www.amazon.com/Clean-Code-Handbook-Software-Craftsmanship/dp/0132350882&quot;&gt;&lt;img src=&quot;http://wordaligned.org/images/books/clean-code.jpg&quot; alt=&quot;Clean Code cover&quot;/&gt;&lt;/a&gt;&lt;/div&gt;

&lt;p&gt;&lt;a href=&quot;http://accu.org/index.php/conferences/accu_conference_2009&quot;&gt;&lt;img src=&quot;http://accu.org/content/images/conferences/2009/accu2009web.png&quot; alt=&quot;ACCU 2009&quot;/&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Robert C. Martin will be opening &lt;a href=&quot;http://accu.org/index.php/conferences/accu_conference_2009&quot;&gt;ACCU 2009&lt;/a&gt; with a keynote presentation entitled &amp;#8220;The Birth of Software Craftsmanship&amp;#8221;. I&amp;#8217;d love to be there to hear him speak. I see he has a new book out, &lt;a href=&quot;http://www.amazon.com/Clean-Code-Handbook-Software-Craftsmanship/dp/0132350882&quot;&gt;Clean Code: A Handbook of Agile Software Craftsmanship&lt;/a&gt;. Should I read it?&lt;/p&gt;
&lt;h5&gt;&lt;a name=&quot;feedback&quot;&gt;Feedback&lt;/a&gt;&lt;/h5&gt;
&lt;div id=&quot;feedback_div&quot;&gt;&lt;ol id=&quot;feedback&quot; class=&quot;feedback&quot;&gt;&lt;li class=&quot;feedbackitem&quot;&gt;&lt;div class=&quot;author&quot;&gt;&lt;cite&gt;Greg Wilson&lt;/cite&gt; 2009-02-03&lt;/div&gt;&lt;div class=&quot;content&quot;&gt;&lt;p&gt;Well, I liked it: &lt;a href=&quot;http://pyre.third-bit.com/blog/archives/1763.html&quot;&gt;http://pyre.third-bit.com/blog/archives/1763.html&lt;/a&gt;.&lt;/p&gt;&lt;/div&gt;&lt;/li&gt;&lt;/ol&gt;&lt;/div&gt;</description>
<dc:date>2009-02-03</dc:date>
<guid>http://wordaligned.org/articles/spolsky-podcast</guid>
<author>tag@wordaligned.org (Thomas Guest)</author>
<link>http://wordaligned.org/articles/spolsky-podcast</link>
<category>Reviews</category>
</item>

<item>
<title>Life, user manuals, recursive pictures</title>
<description>&lt;h3 id=&quot;reading-what-to-read&quot;&gt;Reading what to read&lt;/h3&gt;
&lt;p&gt;Recently, scouring &lt;a href=&quot;http://www.reddit.com/r/programming&quot;&gt;proggit&lt;/a&gt; for something worth reading, I found myself &lt;a href=&quot;http://www.reddit.com/r/programming/comments/6rc96/list_of_nontechnical_books_recommended_by_knuth/&quot;&gt;directed&lt;/a&gt; to Don Knuth&amp;#8217;s website and looking at &lt;strong&gt;his&lt;/strong&gt; list of &lt;a href=&quot;http://www-cs-faculty.stanford.edu/~knuth/retd.html&quot; title=&quot;List of nontechnical books recommended by Don Knuth&quot;&gt;recommended nontechnical books&lt;/a&gt;. Topping this list, to my surprise and delight, I found:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Life A User&amp;#8217;s Manual&lt;/strong&gt; by Georges Perec (perhaps the greatest 20th century novel).&lt;/p&gt;
&lt;/blockquote&gt;
&lt;div class=&quot;amazon&quot;&gt;&lt;a href=&quot;http://www.amazon.com/gp/product/0002719991?ie=UTF8&amp;amp;tag=wordalig-20&quot;&gt;&lt;img src=&quot;http://wordaligned.org/images/books/life-a-users-manual.jpg&quot; alt=&quot;Life A User&#x27;s Manual&quot;/&gt;&lt;/a&gt;&lt;/div&gt;

&lt;p&gt;Knuth may be an expert on sorting but ranking novels by their greatness is an invidious task. Perec&amp;#8217;s masterpiece isn&amp;#8217;t that well-known, in English-speaking countries at least, hence my surprise: few who have read the book would dispute the position claimed for it.&lt;/p&gt;
&lt;p&gt;The book visits the rooms of a Parisian apartment block, 11 Rue Simon-Crubellier, on June 23 1978, describing the inhabitants and their stories. There&amp;#8217;s a fascination with detail and lists, with what exactly can be seen in each room, and I&amp;#8217;ll admit this detail perplexed me the first time I read the book &amp;#8212; what could be the significance of all of these &lt;strong&gt;things&lt;/strong&gt;?&lt;/p&gt;
&lt;p&gt;On re-reading, I savour the details and the strange patterns they form. Early on, we look at the framed posters hanging on the wall of Madame de Beaumont&amp;#8217;s drawing room.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;One of [the posters] depicts four greedy-looking monks sitting at a table around a Camembert cheese on the label of which four greedy-looking monks &amp;#8212; the very same &amp;#8212; are again at a table around, etc. The scene is repeated distinctly four times over.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;What a wonderful example of visual recursion!&lt;/p&gt;
&lt;p&gt;&lt;span id=&quot;continue-reading&quot;/&gt;&lt;/p&gt;
&lt;h3 id=&quot;recursive-product-packaging&quot;&gt;Recursive product packaging&lt;/h3&gt;
&lt;p&gt;I&amp;#8217;ve searched shelves and the internet for a good example of recursive product packaging, like the label on the Camembert cheese in the poster, but without much luck&lt;a id=&quot;fn1link&quot; href=&quot;http://wordaligned.org/articles/recursive-pictures#fn1&quot;&gt;&lt;sup&gt;&lt;a href=&quot;https://blog.codeship.com/building-minimal-docker-containers-for-go-applications/&quot;&gt;1&lt;/a&gt;&lt;/sup&gt;&lt;/a&gt;. I felt sure I&amp;#8217;d seen some reflexive cereal boxes. Maybe this kind of visual pun has gone out of fashion?&lt;/p&gt;
&lt;p&gt;I did find some great &lt;a href=&quot;http://www.letyrosemiophile.com/&quot; title=&quot;Cheesy site but great labels&quot;&gt;cheese label collections&lt;/a&gt; assembled and put online by dedicated &lt;a href=&quot;http://www.google.com/search?q=tyrosemiophile&quot;&gt;tyrosemiophiles&lt;/a&gt;. Here&amp;#8217;s a greedy-looking monk. And here&amp;#8217;s a donkey-riding monk holding out a Camembert cheese on the label of which you can just make out a donkey-riding monk, the very same.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://wordaligned.org/images/camembert-monks.jpg&quot; alt=&quot;Camembert labels with monks&quot;/&gt;&lt;/p&gt;
&lt;h3 id=&quot;fractals&quot;&gt;Fractals&lt;/h3&gt;
&lt;p&gt;&lt;a href=&quot;http://en.wikipedia.org/wiki/Fractal&quot; title=&quot;Sierpinski Triangle, on Wikipedia&quot;&gt;&lt;img style=&quot;float:right;&quot; src=&quot;http://upload.wikimedia.org/wikipedia/commons/thumb/4/45/Sierpinski_triangle.svg/200px-Sierpinski_triangle.svg.png&quot; alt=&quot;Sierpinski Triangle&quot;/&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;In the world of mathematics, &lt;a href=&quot;http://en.wikipedia.org/wiki/Fractal&quot;&gt;fractals&lt;/a&gt; are self-similar shapes. However close you zoom in on them, they look the same. The recursive definition of the Sierpinski triangle is immediately obvious &amp;#8212; it&amp;#8217;s a triangle evenly divided into four Sierpinski triangles. What&amp;#8217;s more remarkable is that the repeating landscapes found in the most &lt;a href=&quot;http://en.wikipedia.org/wiki/Mandelbrot_set&quot;&gt;famous fractal of them all&lt;/a&gt; are revealed by similarly simple mathematics.&lt;/p&gt;
&lt;object width=&quot;425&quot; height=&quot;344&quot;&gt;&lt;param name=&quot;movie&quot; value=&quot;http://www.youtube.com/v/G_GBwuYuOOs&amp;amp;hl=en&amp;amp;fs=1&quot;&gt;&lt;/param&gt;&lt;param name=&quot;allowFullScreen&quot; value=&quot;true&quot;&gt;&lt;/param&gt;&lt;embed src=&quot;http://www.youtube.com/v/G_GBwuYuOOs&amp;amp;hl=en&amp;amp;fs=1&quot; type=&quot;application/x-shockwave-flash&quot; allowfullscreen=&quot;true&quot; width=&quot;425&quot; height=&quot;344&quot;&gt;&lt;/embed&gt;&lt;/object&gt;

&lt;h3 id=&quot;fractals-in-nature&quot;&gt;Fractals in nature&lt;/h3&gt;
&lt;p&gt;A coastline, for example, continues looks like a coastline as you zoom in on it. Here&amp;#8217;s some self-similar broccoli.&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://www.flickr.com/photos/thomasguest/2857208130/&quot; title=&quot;Fractal Vegetable by Thomas Guest, on Flickr&quot;&gt;&lt;img src=&quot;http://farm4.static.flickr.com/3149/2857208130_14760d2a1e_m.jpg&quot; width=&quot;240&quot; height=&quot;180&quot; alt=&quot;fractal-vegetable&quot; /&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h3 id=&quot;windows-in-windows&quot;&gt;Windows in windows&lt;/h3&gt;
&lt;p&gt;Point a webcam at a screen which monitors it, and you&amp;#8217;ll see an obvious example of visual recursion. &lt;/p&gt;
&lt;p&gt;Virtualization software allows you to create a machine within a machine. A host operating system window can display within it a complete graphical user interface for a guest operating system.&lt;/p&gt;
&lt;p&gt;Would it be possible to take this a level deeper? Using &lt;a href=&quot;http://www.parallels.com&quot;&gt;Parallels Desktop&lt;/a&gt; on my OS X host, running Windows XP as a guest, I installed &lt;a href=&quot;http://www.vmware.com&quot;&gt;VMware Player&lt;/a&gt; virtualization software for Windows. Next I downloaded and started up &lt;a href=&quot;http://www.vmware.com/appliances/directory/308&quot;&gt;vmTrac&lt;/a&gt;, a 113Mb VMware appliance which packages Trac, Subversion and Lighttpd on a FreeBSD core. The result appears below. I&amp;#8217;ve used Internet Explorer to access Trac, which runs as a web application on FreeBSD, itself running as a Windows XP guest, and Windows XP is a guest on OS X. And I&amp;#8217;m using Google Chrome to display this very article.&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://www.flickr.com/photos/thomasguest/2865035348/&quot; title=&quot;Windows in Windows by Thomas Guest, on Flickr&quot;&gt;&lt;img src=&quot;http://farm4.static.flickr.com/3023/2865035348_ddfe1b7ed7.jpg&quot; width=&quot;500&quot; height=&quot;313&quot; alt=&quot;windows-in-windows&quot; /&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h3 id=&quot;recursive-paintings-and-prints&quot;&gt;Recursive paintings and prints&lt;/h3&gt;
&lt;p&gt;The fine art world enjoys a tradition of pictures within pictures. &amp;#8220;Circle Limit II&amp;#8221;, a woodcut from the online &lt;a href=&quot;http://www.mcescher.com/&quot;&gt;Escher picture gallery&lt;/a&gt;, depicts fishes whose scales are smaller fishes.&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://www.mcescher.com/Gallery&quot;&gt;&lt;img src=&quot;http://www.mcescher.com/Gallery/recogn-bmp/LW433.jpg&quot; alt=&quot;Circle Limit II&quot;/&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Vel&amp;aacute;zquez&amp;#8217;s masterpiece, &lt;a href=&quot;http://en.wikipedia.org/wiki/Las_Meninas&quot;&gt;Las Meninas&lt;/a&gt;, may not be recursive, but it&amp;#8217;s certainly self-referential. We can&amp;#8217;t see the contents of the large canvas in the picture (unless you believe the mirror reflects a portion of it) but the artist working on it is Vel&amp;aacute;zquez himself.&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://en.wikipedia.org/wiki/Las_Meninas&quot;&gt;&lt;img src=&quot;http://upload.wikimedia.org/wikipedia/commons/thumb/a/a4/Velazquez-Meninas.jpg/526px-Velazquez-Meninas.jpg&quot; alt=&quot;Las Meninas&quot;/&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h3 id=&quot;valenes-masterpiece&quot;&gt;Valene&amp;#8217;s masterpiece&lt;/h3&gt;
&lt;p&gt;A fictional painter, Serge Valene, the longest-standing inhabitant of 11 Rue Simon-Crubellier, narrates &lt;a href=&quot;http://www.amazon.com/gp/product/0002719991?ie=UTF8&amp;amp;tag=wordalig-20&quot;&gt;Life A User&amp;#8217;s Manual&lt;/a&gt;. Actually, &lt;strong&gt;depicts&lt;/strong&gt; would be a better word, for the book is conceived as a painting showing what would be seen if you removed the facade of the building and peered into each of the rooms. In the central chapter, 51, Valene imagines himself working on just such a painting.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;He would be standing beside his almost finished painting, and he would be precisely in the process of painting himself, sketching in with the tip of his brush the minute silhouette of a painter in a long grey smock and a violet scarf, with his palette in his hand, painting again the infinitesimal figurine of a painter painting, once again one of these nested reflections he would have wanted to pursue to infinite depths, as if his eyes and his hand had unlimited magnifying power.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;div class=&quot;amazon&quot;&gt;&lt;a href=&quot;http://www.amazon.com/gp/product/0002719991?ie=UTF8&amp;amp;tag=wordalig-20&quot;&gt;&lt;img src=&quot;http://pagesperso-orange.fr/jb.guinot/Images/CouvVME2.jpg&quot; alt=&quot;Life A User&#x27;s Manual&quot;/&gt;&lt;/a&gt;&lt;/div&gt;

&lt;p&gt;I don&amp;#8217;t think it spoils the book to tell you he never completes this ambitious canvas. In fact he gets no further than drawing a few charcoal lines, the sketch of a cross-section of the building which no figure, now, will ever inhabit.&lt;/p&gt;
&lt;p&gt;This sketch appears as one of several appendices to the book, annotated with the names of who lived in each room, and when. It may not be finished but it does provide a key to one of the algorithms used to generate the book&amp;#8217;s structure, and, stepping outside the fiction, &lt;a href=&quot;http://www.amazon.com/gp/product/0002719991?ie=UTF8&amp;amp;tag=wordalig-20&quot;&gt;the book&lt;/a&gt; itself is finished and complete.&lt;/p&gt;
&lt;p&gt;Via &lt;a href=&quot;http://wordaligned.org/&quot;&gt;Word Aligned&lt;/a&gt; (via &lt;a href=&quot;http://www-cs-faculty.stanford.edu/~knuth/retd.html&quot; title=&quot;List of nontechnical books recommended by Don Knuth&quot;&gt;Knuth&lt;/a&gt; (via &lt;a href=&quot;http://www.reddit.com/r/programming/comments/6rc96/list_of_nontechnical_books_recommended_by_knuth/&quot;&gt;reddit&lt;/a&gt;)).&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://www.amazon.com/gp/product/0002719991?ie=UTF8&amp;amp;tag=wordalig-20&quot;&gt;Life, A User&amp;#8217;s Manual&lt;/a&gt;. &lt;/p&gt;
&lt;p&gt;Recommended!&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://pagesperso-orange.fr/jb.guinot/pages/construction.html&quot;&gt;&lt;img src=&quot;http://pagesperso-orange.fr/jb.guinot/Images/planVME.gif&quot; alt=&quot;Knight&#x27;s tour of 11 Rue Simon-Crubellier&quot;/&gt;&lt;/a&gt;&lt;/p&gt;
&lt;hr /&gt;
&lt;p&gt;&lt;a id=&quot;fn1&quot; href=&quot;http://wordaligned.org/articles/recursive-pictures#fn1link&quot;&gt;&lt;a href=&quot;https://blog.codeship.com/building-minimal-docker-containers-for-go-applications/&quot;&gt;1&lt;/a&gt;&lt;/a&gt; Update: happily Stephan Schroevers &lt;a href=&quot;http://www.haloscan.com/comments/wordaligned/recursive_pictures/#34601&quot;&gt;did rather better&lt;/a&gt;. I should have searched for &lt;a href=&quot;http://www.google.com/search?q=droste+effect&quot;&gt;&amp;#8220;Droste effect&amp;#8221;&lt;/a&gt;, or even &lt;a href=&quot;http://www.google.com/search?q=mise+en+abyme&quot;&gt;&amp;#8220;mise en abyme&amp;#8221;&lt;/a&gt;.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;The effect is named after a particular image, that appeared, with variations, on the tins and boxes of Droste cocoa powder, one of the main Dutch brands. It displays a nurse carrying a serving tray with a cup of hot chocolate and a box of the same brand. &amp;#8212; &lt;a href=&quot;http://en.wikipedia.org/wiki/Droste_effect&quot;&gt;The Droste effect, Wikipedia&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;a href=&quot;http://en.wikipedia.org/wiki/Droste_effect&quot;&gt;&lt;img src=&quot;http://upload.wikimedia.org/wikipedia/commons/6/62/Droste.jpg&quot; alt=&quot;Droste Cocoa powder&quot;/&gt;&lt;/a&gt;&lt;/p&gt;</description>
<dc:date>2008-09-17</dc:date>
<guid>http://wordaligned.org/articles/recursive-pictures</guid>
<author>tag@wordaligned.org (Thomas Guest)</author>
<link>http://wordaligned.org/articles/recursive-pictures</link>
<category>Reviews</category>
</item>

<item>
<title>Essential Python Reading List</title>
<description>&lt;p&gt;&lt;img src=&quot;http://wordaligned.org/images/buttons/python.jpg&quot; alt=&quot;Snake pic&quot; style=&quot;float:right;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;Here&amp;#8217;s my essential Python reading list.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;The Zen of Python&lt;/li&gt;
&lt;li&gt;Python Tutorial&lt;/li&gt;
&lt;li&gt;Python Library Reference&lt;/li&gt;
&lt;li&gt;Python Reference Manual&lt;/li&gt;
&lt;li&gt;The Python Cookbook&lt;/li&gt;
&lt;li&gt;Code Like a Pythonista: Idiomatic Python&lt;/li&gt;
&lt;li&gt;Functional Programming HOWTO&lt;/li&gt;
&lt;li&gt;Itertools functions&lt;/li&gt;
&lt;li&gt;Python library source code&lt;/li&gt;
&lt;li&gt;What&amp;#8217;s New?&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;I&amp;#8217;ve tried to order the items so you can pause or stop reading at any point: at every stage you&amp;#8217;ll have learned about as much possible about Python for the effort you&amp;#8217;ve put in.&lt;/p&gt;
&lt;p&gt;&lt;span id=&quot;continue-reading&quot;/&gt;&lt;/p&gt;
&lt;h4 id=&quot;the-zen-of-python&quot;&gt;The Zen of Python&lt;/h4&gt;
&lt;p&gt;The Zen of Python is so short I can include it here in its entirety. Typing &lt;code&gt;import this&lt;/code&gt; in an interpreted session gives a pythonic spin on &amp;#8220;Hello, world&amp;#8221;.&lt;/p&gt;
&lt;pre&gt;
&amp;gt;&amp;gt;&amp;gt; import this
The Zen of Python, by Tim Peters

Beautiful is better than ugly.
Explicit is better than implicit.
Simple is better than complex.
Complex is better than complicated.
Flat is better than nested.
Sparse is better than dense.
Readability counts.
Special cases aren&#x27;t special enough to break the rules.
Although practicality beats purity.
Errors should never pass silently.
Unless explicitly silenced.
In the face of ambiguity, refuse the temptation to guess.
There should be one-- and preferably only one --obvious way to do it.
Although that way may not be obvious at first unless you&#x27;re Dutch.
Now is better than never.
Although never is often better than *right* now.
If the implementation is hard to explain, it&#x27;s a bad idea.
If the implementation is easy to explain, it may be a good idea.
Namespaces are one honking great idea -- let&#x27;s do more of those!
&lt;/pre&gt;

&lt;p&gt;If this doesn&amp;#8217;t ring true, Python isn&amp;#8217;t for you.&lt;/p&gt;
&lt;h4 id=&quot;python-tutorial&quot;&gt;Python Tutorial&lt;/h4&gt;
&lt;p&gt;Your next stop should be the Python tutorial. It&amp;#8217;s prominently available at the top of the online documentation tree, with the encouraging prompt:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;start here&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;The latest version (by which I mean the version corresponding to the most recent stable release of Python) can be found on the web at &lt;a href=&quot;http://docs.python.org&quot;&gt;http://docs.python.org&lt;/a&gt;, but I recommend you find and bookmark the same page from your local Python installation: it will be available offline, pages will load fractionally quicker, and you&amp;#8217;re sure to be reading about the version of Python you&amp;#8217;re actually running. (Plus, as I&amp;#8217;ll suggest later, it&amp;#8217;s well worth becoming familiar with the contents of your Python installation).&lt;/p&gt;
&lt;p&gt;And with this tutorial, you&amp;#8217;ll be &lt;em&gt;running&lt;/em&gt; code right from the start. No need to page through syntax definitions or battle with &lt;a href=&quot;http://wordaligned.org/articles/koenigs-first-rule-of-debugging.html#a-problem-on-line-106&quot;&gt;compiler errors&lt;/a&gt;.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Since the best way to learn a language is to use it, the tutorial invites you to play with the Python interpreter as you read.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;If you have a programming background you can complete the tutorial in a morning and be using Python by the afternoon; and if you haven&amp;#8217;t, Python makes an excellent first language.&lt;/p&gt;
&lt;p&gt;A tutorial cannot cover everything, of course, and this one recognises that and points you towards further reading. The next place to look, it says, is the Python Library Reference. I agree.&lt;/p&gt;
&lt;h4 id=&quot;python-library-reference&quot;&gt;Python Library Reference&lt;/h4&gt;
&lt;p&gt;The &lt;a href=&quot;http://docs.python.org&quot;&gt;documentation index&lt;/a&gt; suggests you:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;keep this under your pillow&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;It&amp;#8217;s a reference. It documents use of the standard libraries which came with your Python installation. I&amp;#8217;m not suggesting you read it from cover to cover but you do need to know where it is and what&amp;#8217;s in it.&lt;/p&gt;
&lt;p&gt;You should &lt;em&gt;definitely&lt;/em&gt; read the opening sections which cover the built-in objects, functions and types. I also suggest you get used to accessing the same information from within the Python interpreter using &lt;code&gt;help&lt;/code&gt;: it may not be hyperlinked or prettily laid out, but the information is right where you need it.&lt;/p&gt;
&lt;pre&gt;
&amp;gt;&amp;gt;&amp;gt; help(dict)
Help on class dict in module __builtin__:

class dict(object)
 |  dict() -&amp;gt; new empty dictionary.
 |  dict(mapping) -&amp;gt; new dictionary initialized from a mapping object&#x27;s
 |      (key, value) pairs.
 |  dict(seq) -&amp;gt; new dictionary initialized as if via:
 |      d = {}
 |      for k, v in seq:
 |          d[k] = v
 |  dict(**kwargs) -&amp;gt; new dictionary initialized with the name=value pairs
 |      in the keyword argument list.  For example:  dict(one=1, two=2)
&lt;/pre&gt;

&lt;h4 id=&quot;python-reference-manual&quot;&gt;Python Reference Manual&lt;/h4&gt;
&lt;p&gt;The &lt;a href=&quot;http://docs.python.org/ref/ref.html&quot;&gt;Language Reference&lt;/a&gt; claims to be:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;for language lawyers&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;but I&amp;#8217;m not sure that&amp;#8217;s true. Readable and clear, it offers a great insight into the language&amp;#8217;s design. Again, you may not want to read it straight through, but I suggest you skim read it now and return to it if you find yourself confused by Python&amp;#8217;s inner workings.&lt;/p&gt;
&lt;h4 id=&quot;the-python-cookbook&quot;&gt;The Python Cookbook&lt;/h4&gt;
&lt;div class=&quot;amazon&quot;&gt;&lt;a href=&quot;http://www.amazon.com/gp/product/0596007973?ie=UTF8&amp;amp;tag=wordalig-20&amp;amp;linkCode=as2&amp;amp;camp=1789&amp;amp;creative=9325&amp;amp;creativeASIN=0596007973&quot;&gt;&lt;img src=&quot;http://wordaligned.org/images/books/python-cookbook.jpg&quot; alt=&quot;Python Cookbook cover&quot;/&gt;&lt;/a&gt;&lt;/div&gt;

&lt;p&gt;The &lt;a href=&quot;http://www.amazon.com/gp/product/0596007973?ie=UTF8&amp;amp;tag=wordalig-20&amp;amp;linkCode=as2&amp;amp;camp=1789&amp;amp;creative=9325&amp;amp;creativeASIN=0596007973&quot;&gt;Python Cookbook&lt;/a&gt; is the first slab of treeware I&amp;#8217;m recommending. Yes, Active State provides a &lt;a href=&quot;http://aspn.activestate.com/ASPN/Python/Cookbook/&quot;&gt;website&lt;/a&gt; for the book, which has even more recipes than the book and is well worth a visit, but I&amp;#8217;d say you want the printed edition. It&amp;#8217;s nicely laid out and provides clear examples of how to use Python for common programming tasks. Alternative approaches are discussed. You can dip in to it or read the sections most relevant to your particular domain. This book teaches you idiomatic Python by example and, remarkably, it actually &lt;em&gt;benefits&lt;/em&gt; from being written by a large team of authors. The editors have done an excellent job.&lt;/p&gt;
&lt;p&gt;Incidentally, if you&amp;#8217;re wondering why I claim Python is a &lt;a href=&quot;http://wordaligned.org/articles/pitching-python-in-three-syllables.html&quot;&gt;high-level&lt;/a&gt; language and C++ isn&amp;#8217;t, just compare the &lt;a href=&quot;http://www.oreilly.com/catalog/pythoncook2/toc.html&quot;&gt;contents&lt;/a&gt; of the Python Cookbook with the &lt;a href=&quot;http://www.oreilly.com/catalog/cplusplusckbk/toc.html&quot;&gt;contents&lt;/a&gt; of its C++ counterpart. Both books weigh in at ~600 pages, but the C++ one barely gets beyond compiling a program and reading from a file.&lt;/p&gt;
&lt;h4 id=&quot;code-like-a-pythonista-idiomatic-python&quot;&gt;Code Like a Pythonista: Idiomatic Python&lt;/h4&gt;
&lt;p&gt;This one&amp;#8217;s a &lt;a href=&quot;http://python.net/~goodger/projects/pycon/2007/idiomatic/&quot;&gt;presentation&lt;/a&gt; David Goodger gave at a conference last year. I wish he&amp;#8217;d written it and I&amp;#8217;d read it sooner. &lt;span /&gt;If you care about code layout, how you name things etc. but don&amp;#8217;t want to waste time arguing about such things, then you probably want to go with the native language conventions. Python has a well-defined style and this presentation describes it well, connecting and summarising the contents of several other references.&lt;/p&gt;
&lt;h4 id=&quot;functional-programming-howto&quot;&gt;Functional Programming HOWTO&lt;/h4&gt;
&lt;p&gt;The &lt;a href=&quot;http://docs.python.org/dev/&quot;&gt;next version&lt;/a&gt; of the Python documentation (for versions 2.6 and later) has a HOWTOs section. A. M. Kuchling&amp;#8217;s &lt;a href=&quot;http://docs.python.org/dev/howto/functional.html&quot;&gt;Functional Programming HOWTO&lt;/a&gt; is a MUSTREAD, especially for anyone coming from a language with weak support for FP. Python is far from being a pure functional programming language but features like list comprehensions, iterators, generators, even decorators, draw direct inspiration from functional programming.&lt;/p&gt;
&lt;h4 id=&quot;itertools-functions&quot;&gt;Itertools functions&lt;/h4&gt;
&lt;p&gt;If you took my advice and skim-read the Library Reference, you may have skipped past a small module (mis?)filed in the &lt;a href=&quot;http://docs.python.org/lib/numeric.html&quot;&gt;Numeric and Mathematical Modules&lt;/a&gt; section. Now&amp;#8217;s the time to go back and study it. It won&amp;#8217;t take long, but these &lt;a href=&quot;http://docs.python.org/lib/itertools-functions.html&quot;&gt;itertools functions&lt;/a&gt; are, to me, the epitome of elegance and power. I use them every day, wish they were promoted to builtins, and most of my interpreted Python sessions start:&lt;/p&gt;
&lt;div class=&quot;typocode&quot;&gt;

&lt;pre class=&quot;prettyprint&quot;&gt;&amp;gt;&amp;gt;&amp;gt; from itertools import *

&lt;/pre&gt;

&lt;/div&gt;

&lt;h4 id=&quot;python-library-source-code&quot;&gt;Python library source code&lt;/h4&gt;
&lt;p&gt;The pure-python modules and test code in your Python installation are packed with good, &lt;a href=&quot;http://wordaligned.org/articles/readable-code.html&quot;&gt;readable code&lt;/a&gt;. If you&amp;#8217;re looking for example code using a particular module, have a look at that module&amp;#8217;s unit tests.&lt;/p&gt;
&lt;h4 id=&quot;whats-new&quot;&gt;What&amp;#8217;s New?&lt;/h4&gt;
&lt;p&gt;I&amp;#8217;ve mentioned Python versions a few times in this article. Although Python takes stability and backwards compatibility seriously, the language has updated every year for as long as I&amp;#8217;ve been using it. Generally, the changes are backwards compatible so, for example, 2.1 code should work fine in 2.5, but it&amp;#8217;s important to stay current.&lt;/p&gt;
&lt;p&gt;Do you write code like this?&lt;/p&gt;
&lt;div class=&quot;typocode&quot;&gt;

&lt;pre class=&quot;prettyprint&quot;&gt;anag_dict = {}

words_fp = open(&quot;wordlist.txt&quot;, &quot;rt&quot;)

for line in words_fp.readlines():
    word = line.strip().lower()
    chars = []
    for ch in word:
        chars.append(ch)
    chars.sort()
    key = &quot;&quot;.join(chars)
    anag_dict.setdefault(key, []).append(word)

words_fp.close()

anagrams = []
for words in anag_dict.values():
    if len(words) &amp;gt; 1:
        anagrams.append(words)

&lt;/pre&gt;

&lt;/div&gt;

&lt;p&gt;Then you should find out about list comprehensions, the built in &lt;code&gt;sorted&lt;/code&gt; function, and &lt;code&gt;defaultdicts&lt;/code&gt; &amp;#8212; introduced in Python 2.0, 2.4, 2.5 respectively!&lt;/p&gt;
&lt;div class=&quot;typocode&quot;&gt;

&lt;pre class=&quot;prettyprint&quot;&gt;from collections import defaultdict

anag_dict = defaultdict(list)

with open(&quot;wordlist.txt&quot;, &quot;rt&quot;) as words_fp:
    for line in words_fp:
        word = line.strip().lower()
        key = &quot;&quot;.join(sorted(word))
        anag_dict[key].append(word)

anagrams = [words for words in anag_dict.itervalues() 
            if len(words) &amp;gt; 1]

&lt;/pre&gt;

&lt;/div&gt;

&lt;p&gt;The &lt;code&gt;with&lt;/code&gt; statement, incidentally, appears in 2.6, which is in alpha as I write this. Get it now by:&lt;/p&gt;
&lt;div class=&quot;typocode&quot;&gt;

&lt;pre class=&quot;prettyprint&quot;&gt;from __future__ import with_statement

&lt;/pre&gt;

&lt;/div&gt;

&lt;p&gt;Anyway, the point of all this is that A. M. Kuchling writes up what&amp;#8217;s new in each Python revision: think of it as the release notes. As an example, here&amp;#8217;s &lt;a href=&quot;http://docs.python.org/whatsnew/whatsnew25.html&quot;&gt;What&amp;#8217;s New in Python 2.5&lt;/a&gt;. Essential reading.&lt;/p&gt;
&lt;h4 id=&quot;other-books&quot;&gt;Other Books?&lt;/h4&gt;
&lt;p&gt;I&amp;#8217;ve only mentioned one book on this reading list. There are plenty of other decent Python books but I don&amp;#8217;t regard them as essential. In fact, I&amp;#8217;d rather invest in an excellent general programming title than (for example) &lt;a href=&quot;http://www.oreilly.com/catalog/python3/&quot;&gt;Programming Python&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Why? Well, partly because of the speed at which the language progresses. Thus the second edition of the &lt;a href=&quot;http://www.amazon.com/gp/product/0596007973?ie=UTF8&amp;amp;tag=wordalig-20&amp;amp;linkCode=as2&amp;amp;camp=1789&amp;amp;creative=9325&amp;amp;creativeASIN=0596007973&quot;&gt;Python Cookbook&lt;/a&gt; &amp;#8212; the single book I regard as essential &amp;#8212; did a great job of being 2.4 compliant before 2.4 was even released, which definitely extended its shelf-life; but it has nothing to say about Python 2.5 features, let alone Python 2.6 and the transition to Python 3.0. And partly because the books all too easily become too thick for comfortable use. &lt;span /&gt;Python famously comes with batteries included, but full details of their use belongs online.&lt;/p&gt;
&lt;div class=&quot;amazon&quot;&gt;&lt;a href=&quot;http://www.amazon.com/gp/product/0672328623?ie=UTF8&amp;amp;tag=wordalig-20&amp;amp;linkCode=as2&amp;amp;camp=1789&amp;amp;creative=9325&amp;amp;creativeASIN=0672328623&quot;&gt;&lt;img src=&quot;http://wordaligned.org/images/books/python-essential-reference.jpg&quot; alt=&quot;Python Essential Reference cover&quot;/&gt;&lt;/a&gt;&lt;/div&gt;

&lt;p&gt;I do own a copy of &lt;a href=&quot;http://www.amazon.com/gp/product/0672328623?ie=UTF8&amp;amp;tag=wordalig-20&amp;amp;linkCode=as2&amp;amp;camp=1789&amp;amp;creative=9325&amp;amp;creativeASIN=0672328623&quot;&gt;Python Essential Reference&lt;/a&gt; by David Beazley. It&amp;#8217;s the second edition and is now woefully out of date (covering Python up to version 2.1). I did get good use out of it, though. It&amp;#8217;s well designed, beautifully written and laid out, and, weighing in at fewer than 400 pages, comfortable to read and carry. Somehow it manages (managed, I should say) to pack everything in: it&amp;#8217;s concise, and it recognises that the online documentation should be the source of authoritative answers. Despite this, I haven&amp;#8217;t bought the third edition. Partly because I don&amp;#8217;t really need it, partly because it&amp;#8217;s now a Python point revision or two out of date, and partly because it&amp;#8217;s expanded to 644 pages.&lt;/p&gt;
&lt;h4 id=&quot;the-reading-list-with-links&quot;&gt;The Reading List, with Links&lt;/h4&gt;
&lt;ol&gt;
&lt;li&gt;&lt;a href=&quot;http://www.python.org/dev/peps/pep-0020/&quot;&gt;The Zen of Python&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://docs.python.org/tut/tut.html&quot;&gt;Python Tutorial&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://docs.python.org/lib/lib.html&quot;&gt;Python Library Reference&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://docs.python.org/ref/ref.html&quot;&gt;Python Reference Manual&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://www.amazon.com/gp/product/0596007973?ie=UTF8&amp;amp;tag=wordalig-20&amp;amp;linkCode=as2&amp;amp;camp=1789&amp;amp;creative=9325&amp;amp;creativeASIN=0596007973&quot;&gt;The Python Cookbook&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://python.net/~goodger/projects/pycon/2007/idiomatic/&quot;&gt;Code Like a Pythonista: Idiomatic Python&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://docs.python.org/dev/howto/functional.html&quot;&gt;Functional Programming HOWTO&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://docs.python.org/lib/itertools-functions.html&quot;&gt;Itertools functions&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://svn.python.org/view/python/trunk/Lib/&quot;&gt;Python library source code&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://docs.python.org/whatsnew/whatsnew25.html&quot;&gt;What&amp;#8217;s New&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;div class=&quot;amazon&quot;&gt;&lt;a href=&quot;http://www.amazon.com/gp/product/0262011530?ie=UTF8&amp;amp;tag=wordalig-20&amp;amp;linkCode=as2&amp;amp;camp=1789&amp;amp;creative=9325&amp;amp;creativeASIN=0262011530&quot;&gt;&lt;img src=&quot;http://wordaligned.org/images/books/sicp.jpg&quot; alt=&quot;SICP cover picture&quot;/&gt;&lt;/a&gt;&lt;/div&gt;

&lt;p&gt;There&amp;#8217;s nothing controversial here. The Zen of Python should whet your appetite, and the next three items are exactly what you&amp;#8217;ll find at the top of the Python documentation &lt;a href=&quot;http://docs.python.org&quot;&gt;home page&lt;/a&gt;. Others may argue &lt;a href=&quot;http://www.amazon.com/gp/product/0596100469?ie=UTF8&amp;amp;tag=wordalig-20&amp;amp;linkCode=as2&amp;amp;camp=1789&amp;amp;creative=9325&amp;amp;creativeASIN=0596100469&quot;&gt;Python in a Nutshell&lt;/a&gt; deserves a place, or indeed the hefty &lt;a href=&quot;http://www.oreilly.com/catalog/python3/&quot;&gt;Programming Python&lt;/a&gt;, and they&amp;#8217;re certainly good books.&lt;/p&gt;
&lt;p&gt;I&amp;#8217;d be more &lt;a href=&quot;javascript:HaloScan(&#x27;essential-python-reading-list&#x27;);&quot;&gt;interested to find out&lt;/a&gt; which non-Python books have improved your Python programming the most. For myself, I&amp;#8217;ll predictably pick &lt;a href=&quot;http://mitpress.mit.edu/sicp/full-text/book/book.html&quot;&gt;Structure and Interpretation of Computer Programs&lt;/a&gt;.&lt;/p&gt;
&lt;hr /&gt;
&lt;p&gt;The &lt;a href=&quot;http://codekata.pragprog.com/2007/01/kata_six_anagra.html&quot;&gt;anagrams puzzle&lt;/a&gt; comes from Dave Thomas&amp;#8217;s &lt;a href=&quot;http://codekata.pragprog.com/&quot;&gt;CodeKata&lt;/a&gt;, a nice collection of programming exercises. The solutions presented here gloss over a few details and make assumptions about the input. Is &amp;#8220;face&amp;#8221; an anagram of &amp;#8220;caf&amp;eacute;&amp;#8221;, for example? For that matter, what about &amp;#8220;cafe&amp;#8221; and &amp;#8220;caf&amp;eacute;&amp;#8221;. Or &amp;#8220;isn&amp;#8217;t&amp;#8221; and &amp;#8220;tins&amp;#8221;? What if the word list contains duplicates? These issues aren&amp;#8217;t particularly hard to solve but they do highlight the dangers of coding up a solution without fully specifying the problem, and indeed the difference between a &amp;#8220;working&amp;#8221; solution and a finished one.&lt;/p&gt;
&lt;p&gt;However, I just wanted a short program to highlight advances in recent versions of Python, and in that light, here&amp;#8217;s another variant. (My thanks to &lt;a href=&quot;http://gedmin.as/&quot;&gt;Marius Gedminas&lt;/a&gt; for spotting a bug in the code I originally posted here.)&lt;/p&gt;
&lt;div class=&quot;typocode&quot;&gt;

&lt;pre class=&quot;prettyprint&quot;&gt;from itertools import groupby, ifilter, imap
from operator import itemgetter
from string import (ascii_lowercase, ascii_uppercase,
                    punctuation, maketrans, translate)

key = sorted
second = itemgetter(1)

to_lower = maketrans(ascii_uppercase, ascii_lowercase)

data = open(&quot;wordlist.txt&quot;, &quot;rt&quot;).read()
translated = translate(data, to_lower, deletions=punctuation) 
words = set(translated.split())
sorted_words = sorted(words, key=key)
grouped_words = imap(list, imap(second, groupby(sorted_words, key)))
anagrams = ifilter(lambda words: len(words) &amp;gt; 1, grouped_words)

&lt;/pre&gt;

&lt;/div&gt;</description>
<dc:date>2008-02-01</dc:date>
<guid>http://wordaligned.org/articles/essential-python-reading-list</guid>
<author>tag@wordaligned.org (Thomas Guest)</author>
<link>http://wordaligned.org/articles/essential-python-reading-list</link>
<category>Reviews</category>
</item>

<item>
<title>PyCon UK: statistics, pictures and perennial problems</title>
<description>&lt;p&gt;I&amp;#8217;m delighted to have attended &lt;a href=&quot;http://pyconuk.org/index.html&quot;&gt;PyCon UK&lt;/a&gt;, even if only for a day. It&amp;#8217;s given me lots to think about.&lt;/p&gt;
&lt;p&gt;The organisers had kept the prices &lt;em&gt;very&lt;/em&gt; low, a decision which must have helped encourage a stronger turn out than they&amp;#8217;d even hoped for. They had no problem accomodating the excess numbers: everything ran on time without anyone appearing over-stressed.&lt;/p&gt;
&lt;p&gt;I liked the venue, even if it suffered the same over-heating problem I recall from more than one &lt;a href=&quot;http://accu.org&quot;&gt;ACCU&lt;/a&gt; conference. One nice side-effect of the combination of a generous gap in the schedule and proximity to the &lt;a href=&quot;http://www.bmag.org.uk/&quot;&gt;Birmingham Museum and Art Gallery&lt;/a&gt; was that I could cool off by visiting the Paula Rego exhibition (even if it meant going past a puerile rugby world cup roadshow).&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://www.bmag.org.uk/images/events/regol.jpg&quot; alt=&quot;Paula Rego picture&quot; /&gt;&lt;/p&gt;
&lt;p&gt;I half wish I&amp;#8217;d got my act together a little sooner and put forward a presentation myself. On the other hand, that would have meant missing someone else&amp;#8217;s session. In the event, I managed to squeeze in a 5 minute &lt;a href=&quot;http://wordaligned.org/articles/pitching-python-in-three-syllables.html&quot;&gt;lightning talk&lt;/a&gt;, which solved the problem of missing action elsewhere and meant I could reach everyone at once &amp;#8212; and I didn&amp;#8217;t even have to fret about that other perennial conference problem, of trying to connect a laptop to a projector (no time for that in 5 mins).&lt;/p&gt;
&lt;p&gt;I&amp;#8217;ve invented some statistics about the conference.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;123% better attended than first predicted&lt;/li&gt;
&lt;li&gt;72% of laptops used were apple macs&lt;/li&gt;
&lt;li&gt;50% of keynote speakers were female&lt;/li&gt;
&lt;li&gt;20% of conference organisers were female&lt;/li&gt;
&lt;li&gt;Less than 1% of the remaining delegates were female&lt;/li&gt;
&lt;li&gt;Sessions were 99% punctual&lt;/li&gt;
&lt;li&gt;Virgin trains to and from Bristol were 68% punctual&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://beautifulcode.oreillynet.com/&quot;&gt;Beautiful Code&lt;/a&gt;, a book I&amp;#8217;d hoped to browse at the book-stand before buying, was 100% sold out just 10% into the conference&lt;/li&gt;
&lt;/ol&gt;</description>
<dc:date>2007-09-10</dc:date>
<guid>http://wordaligned.org/articles/pyconuk-stats-pics-probs</guid>
<author>tag@wordaligned.org (Thomas Guest)</author>
<link>http://wordaligned.org/articles/pyconuk-stats-pics-probs</link>
<category>Reviews</category>
</item>

<item>
<title>Space sensitive programming</title>
<description>&lt;p&gt;I recently started reading &lt;a href=&quot;http://www.introductiontoalgorithms.com/&quot;&gt;&amp;#8220;Introduction to Algorithms&amp;#8221;&lt;/a&gt;, a classic text on the subject of computer algorithms. Algorithms are described using a home-brewed pseudocode, about which the book says:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;We use the following conventions in our pseudocode.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Indentation indicates block structure. &amp;#8230; Using indentation instead of conventional indicators of block structure, such as &lt;strong&gt;begin&lt;/strong&gt; and &lt;strong&gt;end&lt;/strong&gt; statements, greatly reduces clutter while preserving, or even enhancing clarity. &lt;sup&gt;&lt;a href=&quot;http://wordaligned.org/articles/space-sensitive-programming#footnote2&quot;&gt;&lt;a href=&quot;http://wordaligned.org/articles/personal-version-control.html&quot;&gt;2&lt;/a&gt;&lt;/a&gt;&lt;/sup&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/blockquote&gt;
&lt;p&gt;Sounds good. But before we get too excited, the referenced footnote says:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;a id=&quot;footnote2&quot;&gt;&lt;sup&gt;2&lt;/sup&gt;&lt;/a&gt;In real programming languages, it is generally not advisable to use indentation alone to indicate block structure, since levels of indentation are hard to determine when code is split across pages.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;I&amp;#8217;ll stick with Python&amp;#8217;s conventions on this one. I can take the page-split hit &amp;#8212; which I&amp;#8217;d never noticed, to be honest. &lt;span /&gt;Reduced clutter. Enhanced clarity. Win win.&lt;/p&gt;</description>
<dc:date>2007-08-10</dc:date>
<guid>http://wordaligned.org/articles/space-sensitive-programming</guid>
<author>tag@wordaligned.org (Thomas Guest)</author>
<link>http://wordaligned.org/articles/space-sensitive-programming</link>
<category>Reviews</category>
</item>

<item>
<title>Evolving Python in and for the real world</title>
<description>&lt;p&gt;When I first became interested in Python &amp;#8212; and in particular interested enough to discover the &lt;a href=&quot;http://www.python.org/dev/peps/&quot;&gt;PEPs&lt;/a&gt; &amp;#8212; I wondered what exactly Python 3000 was. From what I could make out Python 3000 seemed to be more of philosophical than practical importance. I assumed the term provided a framework for discussing how Python might have been given the luxury of hindsight; if only we didn&amp;#8217;t have to worry about backwards compatibility; if only we could break existing code; if only &amp;#8230;&lt;/p&gt;
&lt;p&gt;&lt;span id=&quot;continue-reading&quot;/&gt;&lt;/p&gt;
&lt;h4 id=&quot;warts-wrinkles-backwards-compatibility&quot;&gt;Warts, wrinkles, backwards compatibility&lt;/h4&gt;
&lt;p&gt;I guess I was wrong. &lt;a href=&quot;http://www.python.org/dev/peps/pep-3000/&quot;&gt;Python 3000&lt;/a&gt; is real and it is happening. The benevolent dictator for life is exercising his prerogative and pushing through some &lt;a href=&quot;http://www.artima.com/weblogs/viewpost.jsp?thread=208549&quot;&gt;dictatorial changes&lt;/a&gt;.  Python&amp;#8217;s warts and wrinkles aren&amp;#8217;t being quietly tolerated or even deprecated. Instead, the language as a whole will be forked.&lt;/p&gt;
&lt;p&gt;There&amp;#8217;s been plenty of reaction to this in the &lt;a href=&quot;http://lambda-the-ultimate.org/node/2302&quot;&gt;usual places&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Undoubtedly if you need to maintain two parallel versions of a Python application, things will get messy; and simply leaping from Python 2.x to Python 3.x is going to require a lot more care than, say, hopping from 2.5 to 2.6.&lt;/p&gt;
&lt;p&gt;That said, I think the move is the right thing for Python. For one thing, Python builds on a stable subset of a stable platform (i.e. C) and you can easily download and build any released version of Python &lt;sup&gt;&lt;a href=&quot;http://wordaligned.org/articles/evolving-python-in-and-for-the-real-world#footnote1&quot;&gt;&lt;a href=&quot;http://en.wikipedia.org/wiki/Optimization_(computer_science)#Quotes&quot;&gt;1&lt;/a&gt;&lt;/a&gt;&lt;/sup&gt;, which in turn means you can avoid fiddling with code you don&amp;#8217;t want to touch simply by bundling it with the version of Python it was developed against.&lt;/p&gt;
&lt;p&gt;It&amp;#8217;s a brave move too. All of a sudden everyone loves &lt;code&gt;reduce&lt;/code&gt;. All of a sudden everyone has a suggestion to make.&lt;/p&gt;
&lt;p&gt;I applaud Python 3000 because software should be soft, including the language it&amp;#8217;s written in. Every week Isobel has to learn 10 spellings, which usually centre on the same vowel sounds spelled in different ways: try, sigh, pie, why? &lt;strong&gt;Why?&lt;/strong&gt; Backwards compatibility&lt;sup&gt;&lt;a href=&quot;http://wordaligned.org/articles/evolving-python-in-and-for-the-real-world#footnote2&quot;&gt;&lt;a href=&quot;http://www.pragmaticprogrammer.com/titles/ruby/index.html&quot;&gt;2&lt;/a&gt;&lt;/a&gt;&lt;/sup&gt;. She has to cope with inconsistent English but I&amp;#8217;d rather she didn&amp;#8217;t have to learn about two types of classes, &amp;#8220;classic&amp;#8221; and &amp;#8220;new-style&amp;#8221;. I don&amp;#8217;t want her to have to prefer &lt;code&gt;xrange&lt;/code&gt; to &lt;code&gt;range&lt;/code&gt;, &lt;code&gt;itertools.imap&lt;/code&gt; to &lt;code&gt;map&lt;/code&gt; and so on. And however important it might be for a programmer to appreciate integral arithmetic, I&amp;#8217;d prefer the division symbol to indicate division, not division and truncation.&lt;/p&gt;
&lt;p&gt;I suspect the decision to push towards Python 3000 was one more easily taken by a dictator than by a committee, but I do find it encouraging that someone so intimately involved with the language can step back from the code-face and realise the importance of putting things right. As a programmer, I know how it feels to be responsible for a bug in code which got shipped &amp;#8212; however successful that code might be. This too must motivate Guido van Rossum.&lt;/p&gt;
&lt;h4 id=&quot;design-by-committee&quot;&gt;Design by Committee&lt;/h4&gt;
&lt;p&gt;Committees can make bold decisions too. The best true story I&amp;#8217;ve ever read on the subject of computer language evolution has to be Bjarne Stroustrup&amp;#8217;s &lt;a href=&quot;http://www.research.att.com/~bs/dne.html&quot;&gt;&amp;#8220;The Design and Evolution of C++&amp;#8221;&lt;/a&gt; (also known as the D&amp;amp;E book). It&amp;#8217;s not intended for students who want learn how to program in C++, but I regard it essential reading for anyone who really wants to make sense of the language (just as Isobel will need to appreciate the roots of English if she ever wants to really get to grips with it). The D&amp;amp;E book story ends in 1994 but C++ has continued to evolve. Stroustrup has started work on bringing the story up to date, and you can find a draft of his paper &amp;#8220;Evolving a language in and for the real world: C++ 1991-2006&amp;#8221; &lt;a href=&quot;http://www.research.att.com/~bs/hopl-almost-final.pdf&quot;&gt;here&lt;/a&gt;. On the subject of committees, responsibility, and real world pressures, he writes:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Changing the definition of a widely used language is very different from simple design from first principles. Whenever we have a &amp;#8220;good idea&amp;#8221;, however major or minor, we must remember that:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;there are millions of lines of code &amp;#8220;out there&amp;#8221; &amp;#8212; most will not be rewritten however much gain might result from a rewrite&lt;/li&gt;
&lt;li&gt;there are millions of programmers &amp;#8220;out there&amp;#8221; &amp;#8212;  won&amp;#8217;t take out time to learn something new unless they consider it essential&lt;/li&gt;
&lt;li&gt;there are decade old compilers still in use &amp;#8212; programmers can&amp;#8217;t use a language feature that doesn&amp;#8217;t compile on every platform they support&lt;/li&gt;
&lt;li&gt;there are many millions of outdated textbooks out there &amp;#8212; many will still be in use in five years&amp;#8217; time&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;The committee considers these factors and obviously that gives a somewhat conservative bias. Among other things, the members of the committee are indirectly responsible for well over a million lines of code (as members of their organizations).&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Yet despite these pressures, the C++ committee agreed to delay standarising C++ by a whole year so that the fabulous &lt;a href=&quot;http://www.sgi.com/tech/stl/&quot;&gt;STL&lt;/a&gt; could be formally incorporated into the language. I think it&amp;#8217;s not overstating things to say that the subsequent success of the STL has exposed problems in the C++ language itself, and that addressing these problems is the focus of its next formal revision, C++09. It&amp;#8217;s also clear, though, that the C++ standards committee will make every effort to ensure C++09 is backwards compatible; meaning that it&amp;#8217;s going to include all the old baggage and introduce a whole lot more.&lt;/p&gt;
&lt;p&gt;Although I&amp;#8217;m far from being a C++ language lawyer, I know C++ well enough to wield it safely. I also know C++ well enough to see that C++09 will squarely hit all the right targets: it&amp;#8217;s going to allow us to write more compact, more readable, more efficient C++, and compiler error messages are going to make a lot more sense (once implementations are brought up to date, that is). That said, I think the ever growing C++ legacy is going to become a huge barrier to entry: if you haven&amp;#8217;t grown up with C++, it&amp;#8217;s going to be increasingly hard to use it, and it&amp;#8217;s going to be a less-favoured choice for green field development. &lt;/p&gt;
&lt;h4 id=&quot;a-prediction&quot;&gt;A prediction&lt;/h4&gt;
&lt;p&gt;I would be surprised if Isobel or any of her classmates ever learn to program in C++. I expect a good few of them to learn Python.&lt;/p&gt;
&lt;h4 id=&quot;the-real-world&quot;&gt;The real world?&lt;/h4&gt;
&lt;p&gt;Stroustrup says the task facing a &amp;#8220;real world&amp;#8221; language like C++ isn&amp;#8217;t as easy as a &amp;#8220;simple design from first principles&amp;#8221;. Well, I strive for &lt;a href=&quot;http://wiki.hsr.ch/SimpleCode/&quot;&gt;simplicity&lt;/a&gt; but, paradoxically, there&amp;#8217;s nothing easy about it. &lt;span /&gt;In my experience simplicity must be discovered, not designed. Thus a simple design derives from &amp;ndash; and may indeed break &amp;ndash; a more complex one. That&amp;#8217;s what Python 3000 is doing.&lt;/p&gt;
&lt;hr /&gt;
&lt;p&gt;&lt;a id=&quot;footnote1&quot;&gt;&lt;a href=&quot;http://en.wikipedia.org/wiki/Optimization_(computer_science)#Quotes&quot;&gt;1&lt;/a&gt;&lt;/a&gt;
Even in this digital age, not quite any released version. The README in the Python downloads ftp site says: &lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;If you find an older Python release (e.g. 0.9.8), we&amp;#8217;re interested in getting a copy!  mailto:webmaster@python.org&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;a id=&quot;footnote2&quot;&gt;&lt;a href=&quot;http://www.pragmaticprogrammer.com/titles/ruby/index.html&quot;&gt;2&lt;/a&gt;&lt;/a&gt;
The written form of human languages &lt;em&gt;can&lt;/em&gt; be radically revised. In 1928 &lt;a href=&quot;http://www.allaboutturkey.com/ataturk.htm&quot;&gt;Kemal Atat&amp;uuml;rk&lt;/a&gt; didn&amp;#8217;t just change the way Turkish was spelled: he changed the alphabet too.&lt;/p&gt;</description>
<dc:date>2007-06-22</dc:date>
<guid>http://wordaligned.org/articles/evolving-python-in-and-for-the-real-world</guid>
<author>tag@wordaligned.org (Thomas Guest)</author>
<link>http://wordaligned.org/articles/evolving-python-in-and-for-the-real-world</link>
<category>Reviews</category>
</item>

<item>
<title>The Heroic Programmer</title>
<description>&lt;p&gt;I recently chanced on a series of articles by &lt;a href=&quot;http://pragdave.pragprog.com&quot;&gt;Dave Thomas&lt;/a&gt; on
his approach to &lt;a href=&quot;http://pragdave.pragprog.com/pragdave/writing_a_book/index.html&quot;&gt;writing a book&lt;/a&gt;. I first came across Dave
Thomas and co-author Andy Hunt when I read &lt;a href=&quot;http://www.pragmaticprogrammer.com/ppbook/index.shtml&quot;&gt;&amp;#8220;The Pragmatic Programmer:
From Journeyman to Master&amp;#8221;&lt;/a&gt; &amp;#8212; a book which I rate as one of the
best general programming titles &amp;#8212; so I read the articles with interest.&lt;/p&gt;
&lt;p&gt;&lt;span id=&quot;continue-reading&quot;/&gt;&lt;/p&gt;
&lt;h3 id=&quot;the-heros-journey&quot;&gt;The Hero&amp;#8217;s Journey&lt;/h3&gt;
&lt;p&gt;In the &lt;a href=&quot;http://pragdave.pragprog.com/pragdave/2007/03/sywtwab_2_the_h.html&quot;&gt;second article&lt;/a&gt; Thomas suggests that all good technical books
tell the same story, that of the hero&amp;#8217;s journey: just as Odysseus
had to overcome a sequence of monsters on his way home from
the battle of Troy, so the modern reader must undertake a similar
voyage. In Thomas&amp;#8217;s own words:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;The reader joins the book already faced with a major challenge &amp;#8212;
they need to learn some new technique or technology. They need to
make a commitment to follow the path. Along the way, they need to
learn stuff, try things, conquering increasingly difficult concepts
and challenges. Eventually they graduate; they&amp;#8217;ve learned what they
came to learn. But they journey doesn&amp;#8217;t end there. Like the hero,
they then have to come home, bringing back what they learned.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;It might seem strange to find anything heroic in, for example,
&lt;a href=&quot;http://pragmaticprogrammer.com/titles/textmate/index.html&quot;&gt;learning how to use an editor&lt;/a&gt; however powerful that editor might
be, but I agree with &lt;a href=&quot;http://pragdave.pragprog.com&quot;&gt;Thomas&lt;/a&gt;&amp;#8217;s point: compelling technical writing
should tell a story. Should that story always fit the hero&amp;#8217;s journey
archetype? I&amp;#8217;m less sure &lt;a href=&quot;http://wordaligned.org/articles/the-heroic-programmer#footnote&quot;&gt;&lt;a href=&quot;http://wordaligned.org/articles/a-tale-of-two-upgrades.html&quot;&gt;1&lt;/a&gt;&lt;/a&gt;, but it&amp;#8217;s certainly a pattern
I&amp;#8217;ve often (subconsciously) used myself.&lt;/p&gt;
&lt;h3 id=&quot;flawed-heroes&quot;&gt;Flawed Heroes&lt;/h3&gt;
&lt;p&gt;Unlike Odysseus, modern literary heroes are flawed. They don&amp;#8217;t have
superhuman powers and their story doesn&amp;#8217;t always end happily ever after.
Modern technical authors understand this. You can&amp;#8217;t teach anyone how
to &lt;a href=&quot;http://norvig.com/21-days.html&quot;&gt;program in 21 days&lt;/a&gt; and a reader would be right to suspect a book
which makes such a claim. The language used in the design patterns
literature acknowledges this element of compromise explicitly: a
solution to a problem emerges from conflicting forces, and will have
consequences.&lt;/p&gt;
&lt;p&gt;Similarly &lt;span /&gt;&amp;#8220;pragmatic&amp;#8221; is hardly a quality traditionally associated
with heroism, yet it is the prominent word in the title of Thomas and
Hunt&amp;#8217;s most famous book, and indeed in their publishing
business. Software development isn&amp;#8217;t really about perfection, it&amp;#8217;s
about resolving problems and reaching working solutions; and by doing
this well, perhaps we too can be &lt;a href=&quot;http://www.lyricsdownload.com/stranglers-no-more-heroes-lyrics.html&quot;&gt;heroes&lt;/a&gt;.&lt;/p&gt;
&lt;hr /&gt;
&lt;p&gt;&lt;a id=&quot;footnote&quot;&gt;&lt;a href=&quot;http://wordaligned.org/articles/a-tale-of-two-upgrades.html&quot;&gt;1&lt;/a&gt;&lt;/a&gt;
There&amp;#8217;s much comedy, pathos and failure to be found in the real world
of software development, and even the occasional tragedy &amp;#8212; perhaps
these stories aren&amp;#8217;t appropriate for &lt;em&gt;technical&lt;/em&gt; books, but they&amp;#8217;re well
worth telling. Certainly much software development could be
characterised as farce: the repetition of the same old jokes and
pratfalls.&lt;/p&gt;</description>
<dc:date>2007-04-21</dc:date>
<guid>http://wordaligned.org/articles/the-heroic-programmer</guid>
<author>tag@wordaligned.org (Thomas Guest)</author>
<link>http://wordaligned.org/articles/the-heroic-programmer</link>
<category>Reviews</category>
</item>

<item>
<title>Why Software Development isn&#8217;t Like Construction</title>
<description>&lt;p&gt;In &lt;a href=&quot;http://www.cc2e.com&quot;&gt;&amp;#8220;Code Complete&amp;#8221;&lt;/a&gt;, Steve McConnell says software development is like
construction. In this article, I disagree.&lt;/p&gt;
&lt;p&gt;&lt;span id=&quot;continue-reading&quot;/&gt;&lt;/p&gt;
&lt;h3 id=&quot;code-complete&quot;&gt;Code Complete&lt;/h3&gt;
&lt;p&gt;Steve McConnell&amp;#8217;s &lt;a href=&quot;http://www.cc2e.com&quot;&gt;&amp;#8220;Code Complete&amp;#8221;&lt;/a&gt; had been recommended to me
by several people whose opinions I trust, so I was looking forward to
reading it. It&amp;#8217;s a substantial and well-researched book based on the
premise that software development is like construction &amp;#8212; indeed the
subtitle of the book is &amp;#8220;A practical handbook of software
construction&amp;#8221;.&lt;/p&gt;
&lt;p&gt;I didn&amp;#8217;t like it.&lt;/p&gt;
&lt;p&gt;In a book of this size which dares to discuss &amp;#8212; in some depth &amp;#8212;
sensitive topics such as code layout, naming conventions, editors, and
the relative merits of programming languages, I&amp;#8217;d expect to disagree
with the author on a few details. That&amp;#8217;s all part of the fun of
engaging with a book. In this case, though, the central theme of the book
turned me off: software development &lt;strong&gt;isn&amp;#8217;t&lt;/strong&gt; like construction, or at
least it shouldn&amp;#8217;t be. The metaphor is a dangerous one.&lt;/p&gt;
&lt;h3 id=&quot;metaphors-for-software-development&quot;&gt;Metaphors for software development&lt;/h3&gt;
&lt;p&gt;McConnell&amp;#8217;s claim isn&amp;#8217;t surprising or novel. Indeed, perhaps the most
common metaphor for the process of software development is
&lt;strong&gt;construction&lt;/strong&gt;. Thus software &lt;strong&gt;architects&lt;/strong&gt; design the software,
&lt;strong&gt;project managers&lt;/strong&gt; organise &lt;strong&gt;resources&lt;/strong&gt; and keep a check on costs
and timescales, and software &lt;strong&gt;engineers&lt;/strong&gt; get on with doing the actual
&lt;strong&gt;building&lt;/strong&gt;. Well written software has a discernable &lt;strong&gt;structure&lt;/strong&gt;, as
does a building.  And so on.&lt;/p&gt;
&lt;p&gt;McConnell devotes Chapter 2 of Code Complete to a discussion of
metaphors in general and metaphors for software development in
particular. He notes software development is a young field and that
consequently there&amp;#8217;s no standard set of metaphors. He therefore goes
on to evaluate a list of the more common ones.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;software penmanship: writing code&lt;/li&gt;
&lt;li&gt;software farming: growing a system&lt;/li&gt;
&lt;li&gt;software oyster farming: system accretion&lt;/li&gt;
&lt;li&gt;software construction: building a system&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;writing-and-growing&quot;&gt;Writing and growing&lt;/h3&gt;
&lt;p&gt;The writing metaphor is quickly dismissed. It doesn&amp;#8217;t really tell us
much. Well of course we write software. Similarly, the farming
metaphor has little to offer: farmers can&amp;#8217;t arrange for favourable
weather, but we have greater control over the factors affecting
software development.&lt;/p&gt;
&lt;h3 id=&quot;accretion&quot;&gt;Accretion&lt;/h3&gt;
&lt;p&gt;McConnell approves of the &amp;#8220;oyster farming&amp;#8221; metaphor, but it&amp;#8217;s the point at
which I started to question his opinions. He says:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Accretion describes the way an oyster makes a pearl, by gradually
adding small amounts of calcium carbonate &amp;#8230; Other words closely
related to accretion are &amp;#8220;incremental&amp;#8221;, &amp;#8220;adaptive&amp;#8221;, and
&amp;#8220;evolutionary&amp;#8221; &amp;#8230; You first make the simplest possible version of
the system that will run &amp;#8230; You add a little code at a time until
you have a fully working system.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;I think this is a misrepresentation of incremental software
development (a technique I favour). Yes, the idea is to start with the
simplest possible version of the system, and to gradually add to this;
but the important point is to have a fully working system at all
stages, and to continually review the plans for this system. In this
way, we keep the software malleable and can deliver what&amp;#8217;s really of
most use, and can continue to make such deliveries in future.&lt;/p&gt;
&lt;p&gt;Incremental software development doesn&amp;#8217;t look to deliver a shiny,
hard, pearl. We&amp;#8217;re aiming for something more flexible.&lt;/p&gt;
&lt;h3 id=&quot;construction&quot;&gt;Construction&lt;/h3&gt;
&lt;p&gt;McConnell suggests the image of &lt;strong&gt;building&lt;/strong&gt; software is more
useful than that of &lt;strong&gt;writing&lt;/strong&gt; or &lt;strong&gt;growing&lt;/strong&gt;, and that it&amp;#8217;s compatible
with the idea of accretion while providing more detailed guidance.&lt;/p&gt;
&lt;p&gt;For example: just as constructing a shed merits a different approach to
constructing a sky-scraper, so constructing a simple program is different
to constructing a sophisticated software system.&lt;/p&gt;
&lt;p&gt;He elaborates:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Greater complexity and size imply greater consequences in both
activities &amp;#8230;  Ripping out a wall and moving it six inches is
expensive &amp;#8230; To move a wall six inches costs more if the wall is
load bearing than if it&amp;#8217;s merely a partition between rooms.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&quot;software-is-soft-buildings-arent&quot;&gt;Software is soft, buildings aren&amp;#8217;t&lt;/h3&gt;
&lt;p&gt;There&amp;#8217;s some truth in what McConnell says, but I still think the
software-as-construction metaphor is misleading.&lt;/p&gt;
&lt;p&gt;A building is solid, physical, heavy. You can&amp;#8217;t pick it up and move
it. You can&amp;#8217;t push it down a wire. You can&amp;#8217;t clone it. You can&amp;#8217;t
replicate bits of it for reuse. You can&amp;#8217;t really reconfigure it. You
can&amp;#8217;t put the roof on before you&amp;#8217;ve built the walls, and you&amp;#8217;re
in trouble if you decide you want to deepen the foundations once the
building is finished. As McConnell says, simply moving a load-bearing
wall six old-fashioned inches is expensive.&lt;/p&gt;
&lt;p&gt;A computer program is less tangible, more intellectual. It comprises,
quite literally, a set of written instructions.&lt;/p&gt;
&lt;p&gt;We describe software which performs well as solid and resilient, but
really it&amp;#8217;s fluid and supple. Software should be soft. You can copy it
with one action and erase it with another.  And it&amp;#8217;s never really
finished in the way a building is.&lt;/p&gt;
&lt;p&gt;A well written program builds upon layers of abstraction. By designing
the layers correctly, they can be modified independently: changing the
memory management layer should be no more difficult than changing the
user interface. If we find ourselves struggling to move a load-bearing
wall, it&amp;#8217;s a sign we&amp;#8217;ve gone wrong.&lt;/p&gt;
&lt;h3 id=&quot;a-better-metaphor&quot;&gt;A better metaphor&lt;/h3&gt;
&lt;p&gt;McConnell rejects the software-as-writing metaphor for good reason,
but if we look again, it can point us in the right direction. Software
development &lt;strong&gt;is&lt;/strong&gt; writing. It&amp;#8217;s communication: between the
developers on a team, between the team and the machine.&lt;/p&gt;
&lt;p&gt;The layers of abstraction I mentioned in the previous section are
linguistic.  Each layer is interpreted using the language of the
layer below.&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://mitpress.mit.edu/sicp&quot;&gt;&amp;#8220;Structure and Interpretation of Computer Programs&amp;#8221;&lt;/a&gt;, a more
profound and ambitious investigation of the art of computer
programming than &lt;a href=&quot;http://www.cc2e.com&quot;&gt;&amp;#8220;Code Complete&amp;#8221;&lt;/a&gt; &amp;#8212; a better &lt;strong&gt;written&lt;/strong&gt; book &amp;#8212; has
&lt;a href=&quot;http://mitpress.mit.edu/sicp/full-text/book/book-Z-H-25.html&quot;&gt;this&lt;/a&gt; to say.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;We must constantly turn to new languages in order to express our
ideas more effectively. Establishing new languages is a powerful
strategy for controlling complexity in engineering design; we can
often enhance our ability to deal with a complex problem by adopting
a new language that enables us to describe (and hence to think
about) the problem in a different way, using primitives, means of
combination, and means of abstraction that are particularly well
suited to the problem at hand.&lt;/p&gt;
&lt;p&gt;&amp;#8230;.&lt;/p&gt;
&lt;p&gt;To appreciate this point is to
change our images of ourselves as programmers. We come to see
ourselves as designers of languages, rather than only users of
languages designed by others.&lt;/p&gt;
&lt;/blockquote&gt;</description>
<dc:date>2007-03-14</dc:date>
<guid>http://wordaligned.org/articles/why-software-development-isnt-like-construction</guid>
<author>tag@wordaligned.org (Thomas Guest)</author>
<link>http://wordaligned.org/articles/why-software-development-isnt-like-construction</link>
<category>Reviews</category>
</item>

<item>
<title>Review of Pete Becker&#8217;s TR1 Book</title>
<description>&lt;p&gt;If you&amp;#8217;re a C++ programmer, you should know that &lt;a href=&quot;http://www.petebecker.com&quot;&gt;Pete Becker&lt;/a&gt;
has written a tutorial and reference &lt;a href=&quot;http://www.petebecker.com/tr1book&quot;&gt;book&lt;/a&gt; on the first C++ Library
Technical Report (more commonly known as &lt;a href=&quot;http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2005/n1745.pdf&quot;&gt;TR1&lt;/a&gt;).  I recently
reviewed this book for &lt;a href=&quot;http://accu.org&quot;&gt;ACCU&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;&lt;span id=&quot;continue-reading&quot;/&gt;&lt;/p&gt;
&lt;h4 id=&quot;book-details&quot;&gt;Book Details&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Title:&lt;/strong&gt; The C++ Standard Library Extensions: A Tutorial and Reference&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Author:&lt;/strong&gt; Pete Becker&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Publisher:&lt;/strong&gt; Addison Wesley Professional&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;ISBN:&lt;/strong&gt; ISBN-13: 978-0-321-15962-5&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&quot;review&quot;&gt;Review&lt;/h4&gt;
&lt;p&gt;The standard C++ library is a fine thing but there are some notable
omissions and weaknesses: there are no hashed containers, few smart
pointers, no standard regular expression library; support for gluing
functions and algorithms could be improved on; and so on. The first
C++ Library Technical Report (&lt;a href=&quot;http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2005/n1745.pdf&quot;&gt;TR1&lt;/a&gt;) addresses these issues and many
more. In 2006 the TR1 library was approved by ISO, and you can already
find TR1 implementations. &lt;a href=&quot;http://www.petebecker.com&quot;&gt;Pete Becker&lt;/a&gt;&amp;#8217;s book provides a comprehensive
and accurate reference guide for the TR1 library.&lt;/p&gt;
&lt;p&gt;The book styles itself as the perfect companion to Josuttis&amp;#8217; &lt;a href=&quot;http://www.josuttis.com/libbook/&quot;&gt;&amp;#8220;The C++
Standard Library&amp;#8221;&lt;/a&gt;, and that&amp;#8217;s what
I hoped for &amp;#8212; a book which would cut through the standardese and
provide clear instructions on how I could benefit from TR1. In the
main, it succeeds. There&amp;#8217;s plenty of example code, and there needs to
be &amp;#8212; TR1 gives the standard C++ library a sizeable
&lt;a href=&quot;http://boost.org&quot;&gt;boost&lt;/a&gt;. The code is clearly written and described,
and available for download from the author&amp;#8217;s website. The examples I
tried (using GCC 4.01) worked, though I had to fiddle a little with
include paths.  Pete Becker has first-hand knowledge of implementing
TR1, giving this book an authorative tone. I can imagine this book
becoming &lt;em&gt;The&lt;/em&gt; TR1 Book and I would certainly recommend it.&lt;/p&gt;
&lt;p&gt;I do have some niggles, though. More attention could have been given
to the layout. The code examples often break awkwardly across pages
and some form of syntax highlighting would have made them more
readable.  I can&amp;#8217;t understand why the output from these programs was
either omitted or buried in a paragraph of explanatory text. Code
comments were abused throughout the book to provide a running
commentary. E.g.&lt;/p&gt;
&lt;div class=&quot;typocode&quot;&gt;

&lt;pre class=&quot;prettyprint&quot;&gt;tuple&amp;lt;&amp;gt; t0;        // default constructor
tuple&amp;lt;int&amp;gt; t2(3);  // element initialised to 3

&lt;/pre&gt;

&lt;/div&gt;

&lt;p&gt;I realise this is common practice in programming books, but I&amp;#8217;d like
to see authors and publishers find a better way to annotate code.&lt;/p&gt;
&lt;p&gt;These are niggles, though. My only real complaint was that many of the
examples failed to show the benefits of using TR1. Much of TR1 is
designed to make C++ easier to use; it&amp;#8217;s easier to manage dynamically
allocated objects, it&amp;#8217;s easier to bind function arguments, it&amp;#8217;s easier
to wrap functions for use in standard algorithms. The examples showed
how to get TR1 code up and running, but sometimes failed to explain
why.&lt;/p&gt;</description>
<dc:date>2006-12-14</dc:date>
<guid>http://wordaligned.org/articles/review-of-pete-beckers-tr1-book</guid>
<author>tag@wordaligned.org (Thomas Guest)</author>
<link>http://wordaligned.org/articles/review-of-pete-beckers-tr1-book</link>
<category>Reviews</category>
</item>

</channel>
</rss>
