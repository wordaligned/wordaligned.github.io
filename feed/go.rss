<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:dc="http://purl.org/dc/elements/1.1/" >
<channel>
<title>Word Aligned</title>
<link>http://wordaligned.org</link>
<description>tales from the code face</description>
<dc:creator>tag@wordaligned.org</dc:creator>
<language>en-gb</language>
<item>
<title>Go! Steady. Ready?</title>
<description>&lt;p&gt;I&amp;#8217;m looking forward to &lt;a href="http://accu.org/index.php/conferences/accu_conference_2016/accu2016_sessions#Go!_Steady._Ready?"&gt;talking about Go&lt;/a&gt; at the &lt;a href="http://accu.org/index.php/conferences/accu_conference_2016"&gt;ACCU 2016 Conference&lt;/a&gt; this Friday. If you&amp;#8217;d like to find out what connects an Easter egg with &lt;a href="https://en.wikipedia.org/wiki/Eadweard_Muybridge#Stanford_and_horse_gaits"&gt;flying horses&lt;/a&gt; and the runner in the green vest, then come along. Expect live coding, concurrent functions and answers.
&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;&amp;gt;&amp;gt;&amp;gt; import antigravity
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;a data-flickr-embed="true"  href="https://www.flickr.com/photos/thomasguest/25883297343/in/dateposted-friend/" title="muybridge-horse"&gt;&lt;img src="https://farm2.staticflickr.com/1707/25883297343_356cc33871.jpg" width="500" height="310" alt="muybridge-horse"&gt;&lt;/a&gt;&lt;script async src="http://wordaligned.org//embedr.flickr.com/assets/client-code.js" charset="utf-8"&gt;&lt;/script&gt;
&lt;/p&gt;
&lt;p&gt;&lt;a data-flickr-embed="true"  href="https://www.flickr.com/photos/thomasguest/17301552044/in/datetaken/" title="Tyntesfield 10k 2014"&gt;&lt;img src="https://farm6.staticflickr.com/5449/17301552044_92e033c6d2_z.jpg" width="547" height="640" alt="Tyntesfield 10k 2014"&gt;&lt;/a&gt;&lt;script async src="http://wordaligned.org//embedr.flickr.com/assets/client-code.js" charset="utf-8"&gt;&lt;/script&gt;
&lt;/p&gt;</description>
<dc:date>2016-04-18</dc:date>
<guid>http://wordaligned.org/articles/go-steady-ready</guid>
<author>tag@wordaligned.org (Thomas Guest)</author>
<link>http://wordaligned.org/articles/go-steady-ready</link>
<category>Go</category>
</item>

<item>
<title>Gofmt knows best</title>
<description>&lt;div class="toc"&gt;
&lt;h2&gt;Contents&lt;/h2&gt;
&lt;ul&gt;
 &lt;li&gt;&lt;a href="http://wordaligned.org/articles/gofmt-knows-best#toceveryones-favourite" name="toc0" id="toc0"&gt;Everyone&amp;#8217;s favourite&lt;/a&gt;
 &lt;/li&gt;

 &lt;li&gt;&lt;a href="http://wordaligned.org/articles/gofmt-knows-best#tocgo-knows-best" name="toc1" id="toc1"&gt;Go knows best&lt;/a&gt;
 &lt;/li&gt;

 &lt;li&gt;&lt;a href="http://wordaligned.org/articles/gofmt-knows-best#tocwhen-formatters-fail" name="toc2" id="toc2"&gt;When formatters fail&lt;/a&gt;
 &lt;/li&gt;

 &lt;li&gt;&lt;a href="http://wordaligned.org/articles/gofmt-knows-best#tocdecluttered-java" name="toc3" id="toc3"&gt;Decluttered Java&lt;/a&gt;
 &lt;/li&gt;

 &lt;li&gt;&lt;a href="http://wordaligned.org/articles/gofmt-knows-best#toctetrominoes" name="toc4" id="toc4"&gt;Tetrominoes&lt;/a&gt;
 &lt;/li&gt;

 &lt;li&gt;&lt;a href="http://wordaligned.org/articles/gofmt-knows-best#tocobfuscation" name="toc5" id="toc5"&gt;Obfuscation&lt;/a&gt;
 &lt;/li&gt;

 &lt;li&gt;&lt;a href="http://wordaligned.org/articles/gofmt-knows-best#tocdepth-first-search" name="toc6" id="toc6"&gt;Depth First Search&lt;/a&gt;
 &lt;/li&gt;

 &lt;li&gt;&lt;a href="http://wordaligned.org/articles/gofmt-knows-best#tocconclusion" name="toc7" id="toc7"&gt;Conclusion&lt;/a&gt;
 &lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;h2&gt;&lt;a href="http://wordaligned.org/articles/gofmt-knows-best#toc0" name="toceveryones-favourite" id="toceveryones-favourite"&gt;Everyone&amp;#8217;s favourite&lt;/a&gt;&lt;/h2&gt;
&lt;blockquote&gt;&lt;p&gt;Gofmt&amp;#8217;s style is no one&amp;#8217;s favorite, yet gofmt is everyone&amp;#8217;s favorite.
   &amp;#8212; &lt;a href="https://go-proverbs.github.io"&gt;Rob Pike&lt;/a&gt;
&lt;/p&gt;
&lt;/blockquote&gt;&lt;p&gt;Code formatting tools are nothing new but Go notches them up a level. Your Go installation comes with an automated formatter, &lt;a href="https://golang.org/cmd/gofmt/"&gt;gofmt&lt;/a&gt;, and this tool has been used to layout the entire code base. As a result, Go code looks uniform and familiar. The recommendation is to gofmt your own code, ideally on save and certainly before submitting for review.
&lt;/p&gt;
&lt;div class="typocode"&gt;

&lt;pre class="prettyprint"&gt;(add-hook 'before-save-hook 'gofmt-before-save)

&lt;/pre&gt;

&lt;/div&gt;

&lt;p&gt;&lt;a href="http://clang.llvm.org/docs/ClangFormatStyleOptions.html"&gt;Formatting tools for other languages&lt;/a&gt; require configuration. You must instruct the tool about your preferences for spaces and braces. Gofmt is inflexible and this is a strength.
&lt;/p&gt;
&lt;p&gt;The language designers did Go a favour by supplying and promoting gofmt early on, before alternative style guides had been developed and adopted. There can be no more arguments about tabs vs spaces, for example. Code reviews must focus on content rather than layout.
&lt;/p&gt;
&lt;p&gt;There are also more subtle benefits. Certain kinds of manual layout are fragile: the insertion of space to vertically align assignment statements, for example. A code formatter gets it right every time.
&lt;/p&gt;

&lt;h2&gt;&lt;a href="http://wordaligned.org/articles/gofmt-knows-best#toc1" name="tocgo-knows-best" id="tocgo-knows-best"&gt;Go knows best&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;As writers &amp;#8212; and programmers are, fundamentally, &lt;a href="http://wordaligned.org/articles/lessons-from-the-oulipo"&gt;writers&lt;/a&gt; &amp;#8212; maybe we don&amp;#8217;t want our work to look uniform or familiar. Maybe we prefer more control over what we produce. Maybe sometimes, we&amp;#8217;d like to surprise or provoke.
&lt;/p&gt;
&lt;p&gt;Does the regularity gofmt imposes render our code bland, even boring?
&lt;/p&gt;
&lt;p&gt;I&amp;#8217;ve heard this point extended to be a criticism of Go in general: that the language restricts what you can do because the language designers know best, and that it&amp;#8217;s for your own good.
&lt;/p&gt;
&lt;p&gt;Well, if I&amp;#8217;ve ever submitted extravagently formatted code for review, it&amp;#8217;s been slapped back. Substantial programs are developed by teams who adopt idiom and share style rules for good reason. It&amp;#8217;s how we work together. Imagine how much easier it would be if the third party code in your code base was also written to your preferred style. Go gives you that, so long as you prefer its native style.
&lt;/p&gt;
&lt;p&gt;Gofmt does not completely over-ride a programmer&amp;#8217;s choices. Two programs which are semantically identical but laid out differently will probably still be laid out differently after a pass through gofmt.
&lt;/p&gt;

&lt;h2&gt;&lt;a href="http://wordaligned.org/articles/gofmt-knows-best#toc2" name="tocwhen-formatters-fail" id="tocwhen-formatters-fail"&gt;When formatters fail&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Formatting sometimes fails. Some examples follow.
&lt;/p&gt;

&lt;h3&gt;&lt;a href="http://wordaligned.org/articles/gofmt-knows-best#toc3" name="tocdecluttered-java" id="tocdecluttered-java"&gt;Decluttered Java&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Here&amp;#8217;s some creatively formatted Java. Of course it&amp;#8217;s a joke, and a funny one, but a language like Python, and indeed go, gets the last laugh. It &lt;strong&gt;is&lt;/strong&gt; possible to get rid of braces and semicolons and your code &lt;strong&gt;will&lt;/strong&gt; look better for it.
&lt;/p&gt;
&lt;div&gt;&lt;blockquote class="twitter-tweet" data-lang="en"&gt;&lt;p lang="en" dir="ltr"&gt;I finally figured out how to get those pesky semicolons and curly braces out of my Java code &lt;a href="http://t.co/Ns96HdCuKO"&gt;pic.twitter.com/Ns96HdCuKO&lt;/a&gt;&lt;/p&gt;&amp;mdash; Uncle Bob&amp;#39;s Nephew (@thedirtycoder) &lt;a href="https://twitter.com/thedirtycoder/status/569339014085517312"&gt;February 22, 2015&lt;/a&gt;&lt;/blockquote&gt;&lt;script async src="http://wordaligned.org//platform.twitter.com/widgets.js" charset="utf-8"&gt;&lt;/script&gt;&lt;/div&gt;


&lt;h3&gt;&lt;a href="http://wordaligned.org/articles/gofmt-knows-best#toc4" name="toctetrominoes" id="toctetrominoes"&gt;Tetrominoes&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Here&amp;#8217;s an equally witty but perfectly sensible use of non-standard layout.
&lt;/p&gt;
&lt;blockquote class="twitter-tweet" data-cards="hidden" data-lang="en"&gt;&lt;p lang="en" dir="ltr"&gt;I always love it when code is formatted in the shape of the problem it&amp;#39;s solving.&lt;a href="https://t.co/XC7J2cSENj"&gt;pic.twitter.com/XC7J2cSENj&lt;/a&gt;&lt;/p&gt;&amp;mdash; Mathias Verraes (@mathiasverraes) &lt;a href="https://twitter.com/mathiasverraes/status/669490082022367232"&gt;November 25, 2015&lt;/a&gt;&lt;/blockquote&gt;

&lt;p&gt;Mathias is referring to some tetrominoes &amp;#8212; tetris shapes &amp;#8212; coded in &lt;a href="http://elm-lang.org"&gt;elm&lt;/a&gt; by &lt;a href="https://github.com/jcollard/elmtris/blob/master/src/Tetromino.elm"&gt;Joseph Collard&lt;/a&gt;.
&lt;/p&gt;
&lt;div class="typocode"&gt;

&lt;pre class="prettyprint"&gt;-- A Tetromino is a list of Locations. By definition, a valid tetromino
-- should contain exactly 4 different locations
type Tetromino = [Location]

line : Tetromino
line = [(0,0), (1,0), (2,0), (3,0)]

square : Tetromino
square = [(0,0), (1,0),
          (0,1), (1,1)]

spiece : Tetromino
spiece = [       (1,0), (2,0),
          (0,1), (1,1)]

jpiece : Tetromino
jpiece = [       (1,0),
                 (1,1),
          (0,2), (1,2)]

&lt;/pre&gt;

&lt;/div&gt;

&lt;p&gt;For brevity, I&amp;#8217;ve left out the Z and L pieces. I&amp;#8217;ve also omitted comments from the original, which I would suggest are redundant since the code has been painstakingly formatted to indicate the shape of the pieces.
&lt;/p&gt;
&lt;p&gt;The same tetrominoes in hand-formatted Go read:
&lt;/p&gt;
&lt;div class="typocode"&gt;

&lt;pre class="prettyprint"&gt;package tetris

type Tetronimo [4][2]int

var (
    Line   = Tetronimo   {{0, 0}, {1, 0}, {2, 0}, {3, 0}}
    
    Square = Tetronimo   {{0, 0}, {1, 0}, 
                          {0, 1}, {1, 1}}
    
    Spiece = Tetronimo   {        {1, 0}, {2, 0}, 
                          {0, 1}, {1, 1}}
    
    Jpiece = Tetronimo   {        {1, 0}, 
                                  {1, 1}, 
                          {0, 2}, {1, 2}}
)

&lt;/pre&gt;

&lt;/div&gt;

&lt;p&gt;Gofmt spoils them:
&lt;/p&gt;
&lt;div class="typocode"&gt;

&lt;pre class="prettyprint"&gt;package tetris

type Tetronimo [4][2]int

var (
	Line = Tetronimo{{0, 0}, {1, 0}, {2, 0}, {3, 0}}
    
	Square = Tetronimo{{0, 0}, {1, 0},
		{0, 1}, {1, 1}}
    
	Spiece = Tetronimo{{1, 0}, {2, 0},
		{0, 1}, {1, 1}}
    
	Jpiece = Tetronimo{{1, 0},
		{1, 1},
		{0, 2}, {1, 2}}
)

&lt;/pre&gt;

&lt;/div&gt;


&lt;h3&gt;&lt;a href="http://wordaligned.org/articles/gofmt-knows-best#toc5" name="tocobfuscation" id="tocobfuscation"&gt;Obfuscation&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Here&amp;#8217;s a tiny rectangular program &lt;a href="http://accu.org/index.php/journals/256"&gt;submitted by Thaddaeus Frogley&lt;/a&gt; to the International Obfuscated C Code Contest in 2001. It&amp;#8217;s &lt;strong&gt;meant&lt;/strong&gt; to be hard to read and the compact layout helps, by hindering.
&lt;/p&gt;
&lt;div class="typocode"&gt;

&lt;pre class="prettyprint"&gt;/*(c) 2001 Thad */
#include&amp;lt;string.h&amp;gt;
#include &amp;lt;stdio.h&amp;gt;
#define abc stdout
int main(int a,ch\
ar*b){char*c="??="
"??(??/??/??)??'{"
"??!??&amp;gt;??-";while(
!((a=fgetc(stdin))
==EOF))fputc((b=s\
trchr(c,a))?fputc(
fputc(077,abc),abc
),"=(/)'&amp;lt;!&amp;gt;""-"??(
b-c??):a, abc);??&amp;gt;

&lt;/pre&gt;

&lt;/div&gt;

&lt;p&gt;In the author&amp;#8217;s own words:
&lt;/p&gt;
&lt;blockquote&gt;&lt;p&gt; I wanted to create a piece of code that could be considered to be &amp;#8220;art&amp;#8221; on multiple levels.
&lt;/p&gt;
&lt;/blockquote&gt;&lt;p&gt;He&amp;#8217;s succeeded. It&amp;#8217;s impossible to translate this program into Go so I cannot gofmt it. If, instead, I try &lt;a href="http://clang.llvm.org/docs/ClangFormatStyleOptions.html"&gt;clang-format&lt;/a&gt;, the resulting code &lt;strong&gt;no longer compiles&lt;/strong&gt;! Obfuscation has bamboozled the formatter.
&lt;/p&gt;
&lt;div class="typocode"&gt;

&lt;pre class="prettyprint"&gt;/*(c) 2001 Thad */
#include &amp;lt;stdio.h&amp;gt;
#include &amp;lt;string.h&amp;gt;
#define abc stdout
int main(int a, ch\
ar *b) {
  char *c = "??="
            "??(??/??/??)??'{"
            "??!??&amp;gt;??-";
  while (!((a = fgetc(stdin)) == EOF))fputc((b=s\
trchr(c,a))?fputc(
fputc(077,abc),abc
),"=(/)'&amp;lt;!&amp;gt;""-"??(
b-c??):a, abc);
? ? &amp;gt;

&lt;/pre&gt;

&lt;/div&gt;


&lt;h3&gt;&lt;a href="http://wordaligned.org/articles/gofmt-knows-best#toc6" name="tocdepth-first-search" id="tocdepth-first-search"&gt;Depth First Search&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Finally, here&amp;#8217;s a recursive depth first search from the &lt;a href="https://github.com/boostorg/graph/blob/develop/include/boost/graph/depth_first_search.hpp#L181"&gt;boost graph library&lt;/a&gt;
&lt;/p&gt;
&lt;div class="typocode"&gt;

&lt;pre class="prettyprint"&gt;template &amp;lt;class IncidenceGraph, class DFSVisitor, class ColorMap,
          class TerminatorFunc&amp;gt;
void depth_first_visit_impl
  (const IncidenceGraph&amp;amp; g,
   typename graph_traits&amp;lt;IncidenceGraph&amp;gt;::vertex_descriptor u,
   DFSVisitor&amp;amp; vis,  // pass-by-reference here, important!
   ColorMap color, TerminatorFunc func)
{
  typedef typename graph_traits&amp;lt;IncidenceGraph&amp;gt;::vertex_descriptor Vertex;
  typedef typename property_traits&amp;lt;ColorMap&amp;gt;::value_type ColorValue;
  typedef color_traits&amp;lt;ColorValue&amp;gt; Color;
  typename graph_traits&amp;lt;IncidenceGraph&amp;gt;::out_edge_iterator ei, ei_end;
  
  put(color, u, Color::gray());          vis.discover_vertex(u, g);
  
  if (!func(u, g))
    for (boost::tie(ei, ei_end) = out_edges(u, g); ei != ei_end; ++ei) {
      Vertex v = target(*ei, g);           vis.examine_edge(*ei, g);
      ColorValue v_color = get(color, v);
      if (v_color == Color::white()) {     vis.tree_edge(*ei, g);
      depth_first_visit_impl(g, v, vis, color, func);
      } else if (v_color == Color::gray()) vis.back_edge(*ei, g);
      else                                 vis.forward_or_cross_edge(*ei, g);
      call_finish_edge(vis, *ei, g);
    }
  put(color, u, Color::black());         vis.finish_vertex(u, g);
}

&lt;/pre&gt;

&lt;/div&gt;

&lt;p&gt;Clients of the function supply a visitor, &lt;code&gt;vis&lt;/code&gt;, which is called back as vertices and edges are discovered and classified. These callbacks are carefully placed on the right hand side, visually distinguishing the core traversal from associated events. Note too the alignment, with edge events indented to the right of vertex events. Again, a code formatter tramples over this elegantly shaped code:
&lt;/p&gt;
&lt;div class="typocode"&gt;

&lt;pre class="prettyprint"&gt;template &amp;lt;class IncidenceGraph, class DFSVisitor, class ColorMap,
          class TerminatorFunc&amp;gt;
void depth_first_visit_impl(
    const IncidenceGraph &amp;amp;g,
    typename graph_traits&amp;lt;IncidenceGraph&amp;gt;::vertex_descriptor u,
    DFSVisitor &amp;amp;vis, // pass-by-reference here, important!
    ColorMap color, TerminatorFunc func) {
  typedef typename graph_traits&amp;lt;IncidenceGraph&amp;gt;::vertex_descriptor Vertex;
  typedef typename property_traits&amp;lt;ColorMap&amp;gt;::value_type ColorValue;
  typedef color_traits&amp;lt;ColorValue&amp;gt; Color;
  typename graph_traits&amp;lt;IncidenceGraph&amp;gt;::out_edge_iterator ei, ei_end;
  
  put(color, u, Color::gray());
  vis.discover_vertex(u, g);
  
  if (!func(u, g))
    for (boost::tie(ei, ei_end) = out_edges(u, g); ei != ei_end; ++ei) {
      Vertex v = target(*ei, g);
      vis.examine_edge(*ei, g);
      ColorValue v_color = get(color, v);
      if (v_color == Color::white()) {
        vis.tree_edge(*ei, g);
        depth_first_visit_impl(g, v, vis, color, func);
      } else if (v_color == Color::gray())
        vis.back_edge(*ei, g);
      else
        vis.forward_or_cross_edge(*ei, g);
      call_finish_edge(vis, *ei, g);
    }
  put(color, u, Color::black());
  vis.finish_vertex(u, g);
}

&lt;/pre&gt;

&lt;/div&gt;


&lt;h2&gt;&lt;a href="http://wordaligned.org/articles/gofmt-knows-best#toc7" name="tocconclusion" id="tocconclusion"&gt;Conclusion&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Creative code formatting does have a place. Generally, though, gofmt gets it right: an automated tool can and should take care of formatting our code base, and the benefits are amplified if the tool is inflexible. With formatting solved we can focus our creative energy where it counts. 
&lt;/p&gt;</description>
<dc:date>2016-03-07</dc:date>
<guid>http://wordaligned.org/articles/gofmt-knows-best</guid>
<author>tag@wordaligned.org (Thomas Guest)</author>
<link>http://wordaligned.org/articles/gofmt-knows-best</link>
<category>Go</category>
</item>

<item>
<title>Code Reviews - the rules</title>
<description>&lt;p&gt;The rule is: no code gets checked in without a review.
&lt;/p&gt;
&lt;p&gt;It&amp;#8217;s not always easy to get a reviewer to sign off a changelist. Does the code build? In all configurations and on all platforms? Do the tests pass? Are all new code paths covered? Does the commit message describe the change? Does the formatting match the style guide? Does the code match its surroundings? How about documentation, compiler warnings, license requirements?
&lt;/p&gt;
&lt;p&gt;Is the change really necessary? Could it have been realised more simply?
&lt;/p&gt;
&lt;p&gt;Certainly the reviewer&amp;#8217;s task is easier if the task has been &lt;a href="http://wordaligned.org/articles/programming-paired-and-shared"&gt;paired on&lt;/a&gt;. Small and self-contained changelists are more straightforward. Removing code, too, should be less contentious.
&lt;/p&gt;
&lt;p&gt;Depending on infrastructure, some checklist items can be automated. Ideally the changelist has already been though CI, for example, ticking the builds-cleanly and passes-its-tests boxes.
&lt;/p&gt;
&lt;p&gt;So far, so what? (So obvious!)
&lt;/p&gt;
&lt;p&gt;Here&amp;#8217;s another rule, and one I&amp;#8217;ve not seen written down before.
&lt;/p&gt;
&lt;p&gt;When I review code I might well consider how I would have made the change. That doesn&amp;#8217;t mean I&amp;#8217;ll insist the submitter does things my way. In the absence of &lt;a href="https://blog.golang.org/go-fmt-your-code" title="go fmt your code"&gt;automated formatters&lt;/a&gt; there will be more than one acceptable way to lay out the code. Sometimes there&amp;#8217;s little reason to prefer an explicit loop over an algorithm + lambda combination, or vice-versa. &lt;a href="http://wordaligned.org/articles/go-for-short-variable-names"&gt;Short names&lt;/a&gt; work for me but not for everyone. It&amp;#8217;s hard to argue against test coverage, but is more always better?
&lt;/p&gt;
&lt;p&gt;In such cases I won&amp;#8217;t try to impose my own style on the changelist. Instead, the question becomes: &lt;strong&gt;does the code match the standards we, as a team, have set&lt;/strong&gt;? Or, &lt;strong&gt;do these changes merit a place in our codebase&lt;/strong&gt;?
&lt;/p&gt;
&lt;p&gt;It&amp;#8217;s a simple principle but not an obvious one. It helps me review fairly and also to learn from others on my team.
&lt;/p&gt;
&lt;p&gt;There &lt;strong&gt;is&lt;/strong&gt; more than one way to do it!
&lt;/p&gt;</description>
<dc:date>2015-08-05</dc:date>
<guid>http://wordaligned.org/articles/code-reviews--the-rules</guid>
<author>tag@wordaligned.org (Thomas Guest)</author>
<link>http://wordaligned.org/articles/code-reviews--the-rules</link>
<category>Go</category>
</item>

<item>
<title>Go for short variable names</title>
<description>&lt;p&gt;Recently Brad Fitzpatrick promoted the &lt;a href="http://golang.org/s/style" title="Go style guide"&gt;Go style guide&lt;/a&gt; on twitter, which prompted Tim Penhey to take issue with its advice on variable naming.
&lt;/p&gt;
&lt;div&gt;&lt;blockquote class="twitter-tweet" lang="en"&gt;&lt;p&gt;&lt;a href="https://twitter.com/bradfitz"&gt;@bradfitz&lt;/a&gt; sorry, but can&amp;#39;t agree with &amp;#8220;use short variable names over descriptive ones&amp;#8221; &lt;a href="https://twitter.com/search?q=%23golang&amp;amp;src=hash"&gt;#golang&lt;/a&gt; &lt;a href="https://twitter.com/search?q=%23styleguide&amp;amp;src=hash"&gt;#styleguide&lt;/a&gt; /cc &lt;a href="https://twitter.com/sidneidasilva"&gt;@sidneidasilva&lt;/a&gt;&lt;/p&gt;&amp;mdash; Tim Penhey (@howbazaar) &lt;a href="https://twitter.com/howbazaar/statuses/437893595857571840"&gt;February 24, 2014&lt;/a&gt;&lt;/blockquote&gt;&lt;script async src="http://wordaligned.org//platform.twitter.com/widgets.js" charset="utf-8"&gt;&lt;/script&gt;&lt;/div&gt;

&lt;p&gt;A brief and inconclusive exchange followed. Twitter&amp;#8217;s fine for opinions and one-liners but flawed for discussions &amp;#8212; even when the subject happens to be brevity.
&lt;/p&gt;
&lt;p&gt;I&amp;#8217;m not going to tweet about it, but I like Go and I like its style. I&amp;#8217;d rather read code which uses short variable names. Long descriptive names, which may appear to provide more information, often obscure the structure and flow of the code. The narrower the scope, the shorter names can be; so the style guide implicitly sanctions short functions and shuns globals. All good.
&lt;/p&gt;
&lt;p&gt;How short is short?
&lt;/p&gt;
&lt;div&gt;&lt;blockquote class="twitter-tweet" data-conversation="none" lang="en"&gt;&lt;p&gt;&lt;a href="https://twitter.com/golang"&gt;@golang&lt;/a&gt; where does it stop? In our project we have &amp;#8220;c, ch, d, m, s, st&amp;#8221; and they point and say &amp;#8220;style guide says it is fine&amp;#8221;.&lt;/p&gt;&amp;mdash; Tim Penhey (@howbazaar) &lt;a href="https://twitter.com/howbazaar/statuses/438084788038037505"&gt;February 24, 2014&lt;/a&gt;&lt;/blockquote&gt;&lt;/div&gt;

&lt;p&gt;Those variables are certainly short rather than descriptive but they aren&amp;#8217;t scary: &lt;code&gt;c&lt;/code&gt; could be a character; &lt;code&gt;ch&lt;/code&gt; for channel, maybe, or another character; &lt;code&gt;d&lt;/code&gt; for data, difference or distance; &lt;code&gt;m&lt;/code&gt;, midpoint; &lt;code&gt;s&lt;/code&gt; string; &lt;code&gt;st&lt;/code&gt; state. All guesses, of course, but in context I&amp;#8217;d expect to see &amp;#8212; in the space of just a few lines of code &amp;#8212; where each variable lives and how it&amp;#8217;s used, a more clear and correct indication of what it means than a lengthy name could ever be.
&lt;/p&gt;
&lt;p&gt;Single character variables are just fine, says the &lt;a href="http://golang.org/s/style" title="Go style guide"&gt;style guide&lt;/a&gt;:
&lt;/p&gt;
&lt;blockquote&gt;&lt;p&gt;Prefer c to lineCount. Prefer i to sliceIndex.
&lt;/p&gt;
&lt;/blockquote&gt;&lt;p&gt;Some languages allow you to go further. Omit a variable in Perl and it defaults to being what you&amp;#8217;d like it to be. Usually.
&lt;/p&gt;
&lt;p&gt;A single character variable name is an extreme form of abbreviation. It works nicely for small things, like pixels and characters.
&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;Pixel pixel, pel, px, &lt;b&gt;p&lt;/b&gt;;
Character character, char, ch, &lt;b&gt;c&lt;/b&gt;;&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Some less terse abbreviations hurt my ear: &lt;code&gt;mngr&lt;/code&gt;, &lt;code&gt;svr&lt;/code&gt;, &lt;code&gt;cnt&lt;/code&gt;.
&lt;/p&gt;
&lt;p&gt;The style guide is, after all, a guide, and common sense applies.
   Some abbreviations are ugly and others save so little space they aren&amp;#8217;t worth it.
&lt;/p&gt;
&lt;p&gt;Go&amp;#8217;s advice on naming tips a hat to the language&amp;#8217;s C heritage and to C&amp;#8217;s great application, UNIX, which is unsurprising when you realise one of Go&amp;#8217;s prominent contributors, Ken Thompson, had a hand in both. When Thompson was asked what he would do differently if he were redesigning UNIX &lt;a href="http://en.wikiquote.org/wiki/Kenneth_Thompson#Attributed" title="Ken Thompson, quoted in The UNIX Programming Environment (Kernighan, Pike)"&gt;he replied&lt;/a&gt;: 
&lt;/p&gt;
&lt;blockquote&gt;&lt;p&gt;I&amp;#8217;d spell &lt;a href="http://unixhelp.ed.ac.uk/CGI/man-cgi?creat" title="man 2 creat"&gt;creat&lt;/a&gt; with an &amp;#8220;e&amp;#8221;.
&lt;/p&gt;
&lt;/blockquote&gt;&lt;p&gt;So, working on Go, &lt;a href="https://code.google.com/p/go/source/detail?r=4a3f6bbb5f0c6021279ccb3c23558b3c480d995f" title="Spell it with an e"&gt;he did&lt;/a&gt;.
&lt;/p&gt;</description>
<dc:date>2014-03-06</dc:date>
<guid>http://wordaligned.org/articles/go-for-short-variable-names</guid>
<author>tag@wordaligned.org (Thomas Guest)</author>
<link>http://wordaligned.org/articles/go-for-short-variable-names</link>
<category>Go</category>
</item>

</channel>
</rss>
