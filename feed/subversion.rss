<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:dc="http://purl.org/dc/elements/1.1/" >
<channel>
<title>Word Aligned</title>
<link>http://wordaligned.org</link>
<description>tales from the code face</description>
<dc:creator>tag@wordaligned.org</dc:creator>
<language>en-gb</language>
<item>
<title>Steady on Subversion</title>
<description>&lt;p&gt;&lt;a href="http://subversion.tigris.org"&gt;&lt;img src="http://subversion.tigris.org/images/subversion_logo_hor-468x64.png" width="468px" height="64px" alt="Subversion banner"/&gt;&lt;/a&gt;
&lt;/p&gt;

&lt;h3&gt;My secret shame&lt;/h3&gt;
&lt;p&gt;In a world of distributed version control systems I&amp;#8217;m ashamed to confess I still use &lt;a href="http://subversion.tigris.org"&gt;Subversion&lt;/a&gt;. We use it at work, exclusively. I use it at home, by default. Worse still, in a small way, I help promote and perpetuate this antiquated version control system: if you want to &lt;a href="http://www.google.com/search?q=mirror+subversion+repository"&gt;mirror a Subversion repository&lt;/a&gt; or set up a &lt;a href="http://www.google.com/search?q=subversion+pre-commit+hook"&gt;Subversion pre-commit hook&lt;/a&gt;, you may well find some faded notes I wrote on these subjects.
&lt;/p&gt;
&lt;p&gt;Whisper the words. &lt;span style="font-size:8px"&gt;I still like Subversion.&lt;/span&gt;
&lt;/p&gt;
&lt;p&gt;What do I like most? The command to revert a change. Merge it backwards.
&lt;/p&gt;
&lt;div class="typocode"&gt;

&lt;pre class="prettyprint"&gt;$ svn merge --change -666

&lt;/pre&gt;

&lt;/div&gt;

&lt;p&gt;Branches and tags are one and the same. For someone who grew up with &lt;a href="http://www.nongnu.org/cvs/"&gt;CVS&lt;/a&gt;, that&amp;#8217;s quite a relief. Anyone can grasp the versioned file tree model. No one wants their version control system to surprise them. My boss, who doesn&amp;#8217;t get to program as much as he&amp;#8217;d like, has discovered a &lt;a href="http://versionsapp.com/"&gt;shiny Subversion client&lt;/a&gt; &amp;#8212; and he doesn&amp;#8217;t even use Windows. The sales team, who do use Windows, can use Subversion to collaborate on their office documents. &lt;a href="http://tortoisesvn.tigris.org/"&gt;TortoiseSVN&lt;/a&gt; interfaces to the Word diff tool, a nice touch. And software developers can surely find stable Subversion plug-ins for whatever tools they use.
&lt;/p&gt;
&lt;p&gt;The &lt;a href="http://svnbook.red-bean.com/"&gt;Subversion documentation&lt;/a&gt; is solid and has been for some while. I&amp;#8217;m surprised anyone ever arrives at my website &lt;a href="http://wordaligned.org/tag/subversion/"&gt;seeking tips&lt;/a&gt;, but arrive they do, and in ever-increasing numbers.
&lt;/p&gt;
&lt;p&gt;Subversion does enough. The hard parts of my job are deciding what software to write, writing it, and working as a team. &lt;span /&gt;Version control should be frictionless, the easy bit. Which it is.
&lt;/p&gt;
&lt;span id="continue-reading"/&gt;

&lt;p&gt;Of course Subversion has weak points. It should be faster (whee, see how &lt;a href="http://git-scm.com"&gt;git&lt;/a&gt; flies!) and merging can be irksome (improving on CVS wasn&amp;#8217;t much of a target). But the biggest annoyance I&amp;#8217;ve had with Subversion is caused by its ubiquity and its continuing upgrade trajectory. Somehow I&amp;#8217;ve ended up accessing 1.4 and 1.5 format repositories on a machine which hosts 1.4, 1.5 and 1.6 clients in &lt;code&gt;/usr/local/bin&lt;/code&gt;, &lt;code&gt;/usr/bin&lt;/code&gt; and &lt;code&gt;/opt/local/bin&lt;/code&gt;, not necessarily in that order. Silly me, I&amp;#8217;m sorted now, I think, but I&amp;#8217;d happily see Subversion go into maintenance mode. &lt;span /&gt;For managing change, give me stable software.
&lt;/p&gt;

&lt;h3&gt;Do it the same, but better!&lt;/h3&gt;
&lt;p&gt;As mentioned at the start of this post, though, the world of version control has itself changed. Subversion represents evolution: by being a better CVS, it aimed to supplant its ancestor and become the VCS of choice for open source projects. CVS has indeed been supplanted, but true progress has come from the distributed version control revolution.
&lt;/p&gt;
&lt;p&gt;We&amp;#8217;ve been talking about a single, central source tree which develops in discrete steps. Everyone has a local working copy of the files in this tree, which they keep up to date, routinely merging changes back to base. Check out, check in. It &lt;strong&gt;is&lt;/strong&gt; an easy model to understand, but in practice there can be problems. What happens when you can&amp;#8217;t access the tree? Or when it gets pulled in different directions? Or when you lose track of who merged what where when? Now consider the distributed version control world, where the model extends to multiple trees. Everyone copies the entire repository as needed. Clone, merge.
&lt;/p&gt;
&lt;p&gt;In this distributed world a project needn&amp;#8217;t have a single, central repository&lt;a id="fn1link" href="http://wordaligned.org/articles/steady-on-subversion.html#fn1"&gt;&lt;sup&gt;[1]&lt;/sup&gt;&lt;/a&gt;. What&amp;#8217;s more, there is no single leading distributed version control system. As a result, open source projects are spoiled for choice.
&lt;/p&gt;
&lt;p&gt;&lt;a href="http://git-scm.com/"&gt;&lt;img src="http://wordaligned.org/images/git-logo.png" alt="git logo"/&gt;&lt;/a&gt;&lt;a href="http://bazaar-vcs.org/"&gt;&lt;img src="http://bazaar-vcs.org/bzricons/bazaar-logo.png" alt="Bazaar logo"/&gt;&lt;/a&gt;&lt;a href="http://mercurial.selenic.com"&gt;&lt;img src="http://www.selenic.com/hg-logo/logo-droplets-100.png" alt="Mercurial logo"/&gt;&lt;/a&gt;&lt;a href="http://www.darcs.net"&gt;&lt;img src="http://www.darcs.net/logos/logo.png" alt="Darcs logo"/&gt;&lt;/a&gt;
&lt;/p&gt;
&lt;p&gt;The rise of the DVCS is a fascinating history, though one I&amp;#8217;ve yet to directly engage with &amp;#8212; unless you count the growing collection of DVCSes taking root on my hard disk (none of which shipped with my &lt;a href="http://www.apple.com/macosx/" title="Snow Leopard"&gt;operating system&lt;/a&gt;). I like the feel of &lt;a href="http://git-scm.com"&gt;git&lt;/a&gt;. Python will &lt;a href="http://python.org/dev/peps/pep-0385/" title="PEP 385. Migrating from svn to Mercurial"&gt;migrate to mercurial&lt;/a&gt;. For now, I&amp;#8217;m staying put.
&lt;/p&gt;

&lt;h3&gt;Definitive commentary&lt;/h3&gt;
&lt;p&gt;&lt;a href="http://www.red-bean.com/sussman/"&gt;Ben Collins-Sussman&lt;/a&gt; is one of the original designers and developers of Subversion, and co-author of &lt;a href="http://svnbook.red-bean.com/"&gt;Version Control with Subversion&lt;/a&gt;. His essays on the changing field of version control make fine reading. A couple of years ago he wrote:
&lt;/p&gt;
&lt;blockquote&gt;&lt;p&gt;Today, Subversion has now gone from &amp;#8220;cool subversive product&amp;#8221; to &amp;#8220;the default safe choice&amp;#8221; for both 80% and 20% audiences. The 80% companies who were once using crappy version control (or no version control at all) are now blogging to one another &amp;#8212; web developers giving &amp;#8220;hot tips&amp;#8221; to each other about using version control (and Subversion in particular) to manage their web sites at their small web-development shops. What was once new and hot to 20% people has finally trickled down to everyday-tool status among the 80%.
&lt;/p&gt;
&lt;p&gt;The great irony here &amp;#8230; is that Subversion was originally intended to subvert the open source world. It&amp;#8217;s done that to a reasonable degree, but it&amp;#8217;s proven far more subversive in the corporate world!
&lt;/p&gt;
&lt;p&gt;&amp;#8212; Ben Collins-Sussman, &lt;a href="http://blog.red-bean.com/sussman/?p=79" title="Version Control and the 80%"&gt;Version Control and &amp;#8220;the 80%&amp;#8221;&lt;/a&gt;, October 2007
&lt;/p&gt;
&lt;/blockquote&gt;&lt;p&gt;In April last year he followed up with:
&lt;/p&gt;
&lt;blockquote&gt;&lt;p&gt;[&amp;#8230;] we think that [Subversion] will probably be the &amp;#8220;final&amp;#8221; centralized system that gets written in the open source world &amp;#8212; it represents the end-of-the-line for this model of code collaboration. 
&lt;/p&gt;
&lt;p&gt;It will continue to be used for many years, but specifically it will gain huge mindshare in the corporate world, while (eventually) losing mindshare to distributed systems in the open-source arena &amp;#8230; Subversion isn&amp;#8217;t anywhere near &amp;#8220;fading away&amp;#8221;. Quite the opposite: its adoption is still growing quadratically in the corporate world, with no sign of slowing down. This is happening independently of open source trailblazers losing interest in it. It may end up becoming a mainly &amp;#8220;corporate&amp;#8221; open source project (that is, all development funded by corporations that depend on it), but that&amp;#8217;s a fine way for a piece of mature software to settle down.
&lt;/p&gt;
&lt;p&gt;&amp;#8212; Ben Collins-Sussman, &lt;a href="http://blog.red-bean.com/sussman/?p=90"&gt;Subversion&amp;#8217;s Future&lt;/a&gt;, April 2008
&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3&gt;Long live Subversion&lt;/h3&gt;
&lt;p&gt;Ben Collins-Sussman backs up his essay with &lt;a href="http://subversion.tigris.org/images/svn-dav-securityspace-survey.png"&gt;a graph&lt;/a&gt; showing the increasing numbers of Apache Subversion servers discoverable on the internet. His claims square with my personal experience. I&amp;#8217;m a corporate Subversion user and I don&amp;#8217;t see my employer switching version control systems any time soon (it&amp;#8217;s my decision as much as anyone&amp;#8217;s). What&amp;#8217;s more, Subversion is used in most of the companies I know of, where it has supplanted both legacy and proprietary systems. As stated already, version control isn&amp;#8217;t the hard part of my job, but should I ever need to change jobs, Subversion won&amp;#8217;t stand in my way.
&lt;/p&gt;
&lt;hr /&gt;

&lt;p&gt;&lt;a id="fn1" href="http://wordaligned.org/articles/steady-on-subversion.html#fn1link"&gt;[1]&lt;/a&gt;: A project may well choose to nominate a single central repository as the &amp;#8220;master&amp;#8221; repository. The functionality offered by distributed version control systems is effectively a superset of that offered by centralised ones.
&lt;/p&gt;</description>
<dc:date>2009-10-13</dc:date>
<guid>http://wordaligned.org/articles/steady-on-subversion.html</guid>
<author>tag@wordaligned.org (Thomas Guest)</author>
<link>http://wordaligned.org/articles/steady-on-subversion.html</link>
<category>Subversion</category>
</item>

<item>
<title>File shifting using lftp and rsync</title>
<description>&lt;p&gt;On a daily basis I work on at least three different platforms, hosted locally, virtually, remotely. Shifting files from place to place is a problem I need to resolve every day, and I have more than one solution.
&lt;/p&gt;
&lt;p&gt;I&amp;#8217;m not a fan of file browsers, graphical ftp clients and similar. They clutter the desktop, vary from platform to platform, take ages to drive &amp;#8212; especially with a touch pad &amp;#8212; and prompt for input at all the wrong times. It&amp;#8217;s hard to undo an operation when your pointer slips. By contrast, using simple commands in a shell window puts the power back at your fingertips, whatever platform you&amp;#8217;re on. Recovering from mistakes is as easy as recalling your command history.
&lt;/p&gt;
&lt;span id="continue-reading"/&gt;


&lt;h3&gt;Local File Systems&lt;/h3&gt;
&lt;p&gt;For simple operations on a local file system, I tend to use &lt;code&gt;cp&lt;/code&gt; or Emacs dired mode simply because my immediate context is usually Emacs or a shell window, and often both. For bulky and recursive directory operations, a good starting point is:
&lt;/p&gt;
&lt;div class="typocode"&gt;

&lt;pre class="prettyprint"&gt;$ tar c SRC | tar x -C DST

&lt;/pre&gt;

&lt;/div&gt;

&lt;p&gt;You can vary this command line to reorganise file systems, though sometimes sprinkling a few soft links around may be worth considering.
&lt;/p&gt;

&lt;h3&gt;Remote File Systems&lt;/h3&gt;
&lt;p&gt;Things can get tricky for remote file systems. Preserving permissions and ownership causes problems, as does the security layer. NFS and Samba may seem like the right solutions for a private network but I&amp;#8217;ve grown to regard them as troublesome; they work best on stable networks with well known machines at well-known addresses, and, as usual, I prefer a dynamic model to a static one.
&lt;/p&gt;
&lt;p&gt;Again, command line tools can do the job. To save the overhead of re-entering your username/password credentials, you&amp;#8217;ll want to &lt;a href="http://www.linuxproblem.org/art_9.html"&gt;store SSH keys&lt;/a&gt; on the machines you frequent. The most basic remote copy command is &lt;code&gt;scp&lt;/code&gt;. Use it much like &lt;code&gt;cp&lt;/code&gt;, but specify a destination machine on the command line.
&lt;/p&gt;

&lt;h4&gt;Extended Tar&lt;/h4&gt;
&lt;p&gt;For more complex filesystems, we can extend our &lt;code&gt;tar&lt;/code&gt; command using &lt;code&gt;ssh&lt;/code&gt; on the far side of the pipeline. The following command tars up the local SRC directory then extracts the archive on the REMOTE machine in directory DST.
&lt;/p&gt;
&lt;div class="typocode"&gt;

&lt;pre class="prettyprint"&gt;$ tar c SRC | ssh REMOTE tar x -C DST

&lt;/pre&gt;

&lt;/div&gt;

&lt;p&gt;If this isn&amp;#8217;t possible, I sometimes use &lt;code&gt;netcat&lt;/code&gt; to listen at a port on the remote machine:
&lt;/p&gt;
&lt;div class="typocode"&gt;&lt;div class="codetitle"&gt;Listen to port 2345&lt;/div&gt;

&lt;pre class="prettyprint"&gt;nc -l -p 2345 | tar x -C DST

&lt;/pre&gt;

&lt;/div&gt;

&lt;p&gt;Then, on the source machine, kick off the &lt;code&gt;tar&lt;/code&gt; process:
&lt;/p&gt;
&lt;div class="typocode"&gt;

&lt;pre class="prettyprint"&gt;tar c SRC &amp;gt; /dev/tcp/DOTTED.IP.OF.MIRROR/2345

&lt;/pre&gt;

&lt;/div&gt;


&lt;h4&gt;Lftp&lt;/h4&gt;
&lt;p&gt;Suppose you want or need to transfer files using the venerable FTP protocol. If you haven&amp;#8217;t already discovered &lt;a href="http://lftp.yar.ru/"&gt;lftp&lt;/a&gt;, then it&amp;#8217;s time to investigate. When you connect to a remote machine using &lt;code&gt;lftp&lt;/code&gt; it&amp;#8217;s rather like having a shell session open on that machine: you can navigate using tab completion and the usual shell tools relating to file and directory operations are there, as well as extra goodies like &lt;code&gt;mirror&lt;/code&gt; and a decent help system.
&lt;/p&gt;

&lt;h4&gt;Rsync&lt;/h4&gt;
&lt;p&gt;Rsync is another great command-line file-system shifter. It&amp;#8217;s designed to keep two directory structures in sync, and to do so efficiently by just transmitting deltas between the two. Typically the source and destination directories reside on separate machines, and &lt;code&gt;rsync&lt;/code&gt; is often invoked automatically as a scheduled job. &lt;code&gt;Rsync&lt;/code&gt; forms the backbone of many a backup system. I&amp;#8217;ve often used it to complement more heavy-weight coporate backup systems which would require me to ask an administrator to restore my own files.
&lt;/p&gt;
&lt;p&gt;I use &lt;code&gt;rsync&lt;/code&gt; to post updates to this website, and indeed to mirror this website to other machines I use. My publish script is as simple as:
&lt;/p&gt;
&lt;div class="typocode"&gt;&lt;div class="codetitle"&gt;publish.sh&lt;/div&gt;

&lt;pre class="prettyprint"&gt;#! /bin/sh
rsync -avz www wordaligned@wordaligned.org:~

&lt;/pre&gt;

&lt;/div&gt;

&lt;p&gt;Here, local directory structure &lt;code&gt;www&lt;/code&gt; will be mirrored to &lt;code&gt;~wordaligned/www&lt;/code&gt; on remote machine &lt;code&gt;wordaligned.org&lt;/code&gt;. I supply the remote username &lt;code&gt;wordaligned&lt;/code&gt; explicitly since it differs from my local username &lt;code&gt;tag&lt;/code&gt;. The &lt;code&gt;-v&lt;/code&gt; &lt;em&gt;verbose&lt;/em&gt; option gives me a warm fuzzy feeling that the updates I want to post are indeed being posted, the &lt;code&gt;-z&lt;/code&gt; &lt;em&gt;compress&lt;/em&gt; option reduces network traffic by compressing file data, and the &lt;code&gt;-a&lt;/code&gt; &lt;em&gt;archive&lt;/em&gt; shorthand option recurses and preserves permissions and ownerships.
&lt;/p&gt;
&lt;p&gt;By the way, I&amp;#8217;m implicitly using &lt;code&gt;ssh&lt;/code&gt; (the &lt;code&gt;rsync&lt;/code&gt; default) to access the remote machine. No password is required for user &lt;code&gt;tag&lt;/code&gt; to copy files to user &lt;code&gt;wordaligned&lt;/code&gt;&amp;#8217;s home directory since I&amp;#8217;ve &lt;a href="http://www.linuxproblem.org/art_9.html"&gt;configured SSH&lt;/a&gt; to allow this.
&lt;/p&gt;
&lt;p&gt;&lt;code&gt;Rsync&lt;/code&gt; comes with many more options, but they&amp;#8217;re all well documented. A simple &lt;code&gt;-a&lt;/code&gt; is usually all that&amp;#8217;s required.
&lt;/p&gt;

&lt;h4&gt;More Thoughts on File Shifting&lt;/h4&gt;
&lt;p&gt;At the start of this note I unfairly dismissed GUI driven file system tools. The truth is that I do often use them. &lt;span /&gt;I&amp;#8217;m generally unprincipled and promiscuous when it comes to tool selection: whatever works and is to hand will do. Thus, while both &lt;code&gt;lftp&lt;/code&gt; and &lt;code&gt;rsync&lt;/code&gt; come with a plethora of options &amp;#8212; &lt;code&gt;lftp&lt;/code&gt; does everything any GUI driven FTP client can do, and probably more, and &lt;code&gt;rsync&lt;/code&gt; similarly defeats graphical file browsers &amp;#8212; &lt;span /&gt;the irony is that I only use them for basic stuff, and may well resort to something with a GUI when attempting something out of the ordinary. A bit of interactive pointing and clicking often appeals more than paging through a rather dry manual.
&lt;/p&gt;
&lt;p&gt;What &lt;code&gt;scp&lt;/code&gt; and &lt;code&gt;rsync&lt;/code&gt; won&amp;#8217;t do is find a directory on a remote file system; you can&amp;#8217;t use TAB completion at the far end &lt;a href="http://wordaligned.org/articles/file-shifting-using-lftp-and-rsync.html#footnote1"&gt;&lt;sup&gt;[1]&lt;/sup&gt;&lt;/a&gt;. An interactive &lt;code&gt;lftp&lt;/code&gt; session &lt;em&gt;does&lt;/em&gt; support basic TAB completion on a remote filesystem, but not more powerful tools like &lt;code&gt;find&lt;/code&gt; or &lt;code&gt;locate&lt;/code&gt;.
&lt;/p&gt;
&lt;p&gt;In general you can reduce this problem by adopting a disciplined approach to structuring your workspace on whatever platforms you use. If you find yourself typing a command-line like:
&lt;/p&gt;
&lt;div class="typocode"&gt;

&lt;pre class="prettyprint"&gt;$ scp -r ~/tmp/dev-2008-01-06 cromarty:~/scratch/work-copy2

&lt;/pre&gt;

&lt;/div&gt;

&lt;p&gt;then I&amp;#8217;d suggest something has gone wrong.
&lt;/p&gt;
&lt;p&gt;One way to combat this disorganisation is to place your &lt;a href="http://wordaligned.org/articles/personal-version-control.html"&gt;home directory under version control&lt;/a&gt;. Make sure the version control system you use for this is flexible enough to allow you to rename entries, though. If you do adopt this model, your version control system becomes the home for all your files, and transfers between machines become a matter of check-in, check-out.
&lt;/p&gt;
&lt;p&gt;I use &lt;a href="http://subversion.tigris.org"&gt;Subversion&lt;/a&gt; in this way, to a degree. There are plenty of files, though, which I don&amp;#8217;t version control &amp;#8212; in general, large files or files which only make sense on certain platforms. I&amp;#8217;ve often found it useful to make these available for access via a webserver, either somewhere on a Wiki, or just served by a &lt;a href="http://www.lighttpd.net"&gt;lighttpd&lt;/a&gt; instance with &lt;a href="http://trac.lighttpd.net/trac/wiki/Docs%3AModDirlisting"&gt;directory listing enabled&lt;/a&gt;.
&lt;/p&gt;
&lt;p&gt;&lt;hr /&gt;
   &lt;a id="footnote1"&gt;[1]&lt;/a&gt;
   I had a suspicion when I wrote this I&amp;#8217;d turn out to be wrong! &lt;a href="http://here.the.ycros.be/"&gt;Michael Kedzierski&lt;/a&gt; emailled me:
&lt;/p&gt;
&lt;blockquote&gt;&lt;p&gt;I&amp;#8217;m actually using bash completion on Ubuntu and I get remote-side tab completion with scp, it&amp;#8217;s great.
&lt;/p&gt;
&lt;/blockquote&gt;</description>
<dc:date>2008-01-06</dc:date>
<guid>http://wordaligned.org/articles/file-shifting-using-lftp-and-rsync.html</guid>
<author>tag@wordaligned.org (Thomas Guest)</author>
<link>http://wordaligned.org/articles/file-shifting-using-lftp-and-rsync.html</link>
<category>Subversion</category>
</item>

<item>
<title>Ever wish you&#8217;d branched first?</title>
<description>&lt;p&gt;So you&amp;#8217;re hacking away at a working copy and you want to check things in. &lt;span /&gt;The problem is, your working copy is based on the trunk and your changes don&amp;#8217;t really belong on the trunk.
&lt;/p&gt;
&lt;p&gt;Maybe the development trunk has been locked down for a customer release; maybe you&amp;#8217;ve started work on a simple feature which turns out not to be so simple, and you&amp;#8217;d like to phase your changes in on a private branch; maybe you want to share work-in-progress with another team member &amp;#8212; whatever the reason, you wish you&amp;#8217;d branched the code before you&amp;#8217;d started working on it. 
&lt;/p&gt;
&lt;p&gt;This note describes three ways, ugly, bad and good, to adapt to this situation.
&lt;/p&gt;
&lt;span id="continue-reading"/&gt;


&lt;h4&gt;Brute Ignorance&lt;/h4&gt;
&lt;p&gt;Just check the changes in anyway. In this code snippet and the ones that follow, we&amp;#8217;ll assume your working copy reflects a repository URL &lt;code&gt;svn://svnserver/trunk&lt;/code&gt; and is located in a subdirectory called &lt;code&gt;trunk&lt;/code&gt;.
&lt;/p&gt;
&lt;div class="typocode"&gt;

&lt;pre class="prettyprint"&gt;$ svn commit -m "Changes" trunk

&lt;/pre&gt;

&lt;/div&gt;

&lt;p&gt;Yes, I have seen this done. Sometimes developers use the repository trunk a bit like a private fileshare. Get something working on Windows. Check it in. Then login to a Linux machine, update, see if it works there. Someone else will probably fix up Solaris &amp;#8230; 
&lt;/p&gt;
&lt;p&gt;There has to be a better way. Developers who adopt this technique deserve an &lt;a href="http://wordaligned.org/articles/antisocial-build-orders.html"&gt;ASBO&lt;/a&gt; slapped on them.
&lt;/p&gt;

&lt;h4&gt;Brute Force&lt;/h4&gt;
&lt;p&gt;Make the branch. Check it out. Patch across changes from your working copy.
&lt;/p&gt;
&lt;div class="typocode"&gt;

&lt;pre class="prettyprint"&gt;$ svn copy -m "My new branch" trunk svn://svnserver/branches/new-branch
$ svn checkout svn://svnserver/branches/new-branch

&lt;/pre&gt;

&lt;/div&gt;

&lt;p&gt;The code sample uses the working-copy-to-url flavour of &lt;code&gt;svn copy&lt;/code&gt;, which means you&amp;#8217;ve correctly branched from the BASE revision you were working on. Depending on circumstances, you might have preferred to update your working copy first, or branch from the tip of the trunk using the url-to-url flavour of &lt;code&gt;svn copy&lt;/code&gt;.
&lt;/p&gt;
&lt;p&gt;Patching changes between your two working copies may not be trivial. Some are happiest using a graphical file browser to drag and drop files from &lt;code&gt;trunk&lt;/code&gt; to &lt;code&gt;branch&lt;/code&gt;. &lt;code&gt;Svn diff&lt;/code&gt; followed by &lt;code&gt;patch&lt;/code&gt; &lt;a href="http://wordaligned.org/articles/svn-help-patch.html"&gt;does better&lt;/a&gt;.
&lt;/p&gt;
&lt;div class="typocode"&gt;

&lt;pre class="prettyprint"&gt;$ svn diff trunk | patch -d new-branch -p1

&lt;/pre&gt;

&lt;/div&gt;

&lt;p&gt;Both techniques fail to copy any property changes across though &amp;#8212; and please don&amp;#8217;t try digging into the &lt;code&gt;.svn&lt;/code&gt; directories to remedy this. Again, there&amp;#8217;s a better way.
&lt;/p&gt;

&lt;h4&gt;Branch and Switch and Go&lt;/h4&gt;
&lt;p&gt;The best thing to do is simply create the branch and switch to it. Traffic to and from the server is minimised, local disk access is reduced, no changes are lost.
&lt;/p&gt;
&lt;div class="typocode"&gt;

&lt;pre class="prettyprint"&gt;$ svn copy -m "My new branch" trunk svn://svnserver/branches/new-branch
$ svn switch svn://svnserver/branches/new-branch trunk
$ mv trunk new-branch

&lt;/pre&gt;

&lt;/div&gt;

&lt;p&gt;You&amp;#8217;ll notice that at the final stage we rename our working copy to reflect its new purpose. This isn&amp;#8217;t strictly necessary but may save us from future confusion.
&lt;/p&gt;
&lt;p&gt;Now you&amp;#8217;re on a new branch and can check your changes in as desired.
&lt;/p&gt;</description>
<dc:date>2007-11-27</dc:date>
<guid>http://wordaligned.org/articles/ever-wish-youd-branched-first.html</guid>
<author>tag@wordaligned.org (Thomas Guest)</author>
<link>http://wordaligned.org/articles/ever-wish-youd-branched-first.html</link>
<category>Subversion</category>
</item>

<item>
<title>Anti-Social Build Orders</title>
<description>&lt;pre style="border: 2px solid red; background: white; font-size: 150%;"&gt;
&lt;b&gt;From:&lt;/b&gt; buildmaster@example.com
&lt;b&gt;To:&lt;/b&gt; noah.shortcut@example.com
&lt;b&gt;Cc:&lt;/b&gt; dev@example.com, mr.deadline@example.com
&lt;b&gt;Subject:&lt;/b&gt; Anti Social Build Order

&lt;span style="font-weight: 900; font-variant: small-caps; font-size: 36px;"&gt;Anti Social Build Order&lt;/span&gt;
&lt;b&gt;Rev:&lt;/b&gt; svn://svnserver/trunk@666
&lt;b&gt;Log:&lt;/b&gt; Added files to project
&lt;b&gt;Offense:&lt;/b&gt; Breaking the build
&lt;/pre&gt;

&lt;span id="continue-reading"/&gt;

&lt;p&gt;I wish I could claim this was an original idea. It isn&amp;#8217;t. Automated builds have existed for at least as long as I&amp;#8217;ve been programming, nag emails are a typical notification technique, and I&amp;#8217;m attributing the reuse of the term &lt;a href="http://www.crimereduction.homeoffice.gov.uk/asbos/asbos9.htm"&gt;ASBO&lt;/a&gt; to &lt;a href="http://stonetable.org.uk/"&gt;Matt Bowers&lt;/a&gt;. When I worked for Matt, he awarded a printed Anti Social Build Order in person at one of the development team&amp;#8217;s daily stand up meetings. It was a joke but, from then on, the build pass rate did increase.
&lt;/p&gt;
&lt;p&gt;Name-and-shame tactics aren&amp;#8217;t usually a good idea, even if, as in this case, they&amp;#8217;re humourously cast. Team-work, collective code ownership, that&amp;#8217;s what you want. &lt;code&gt;Svn praise&lt;/code&gt;, not &lt;code&gt;svn blame&lt;/code&gt;.
&lt;/p&gt;
&lt;p&gt;&lt;span /&gt;But anyone who breaks the build &lt;strong&gt;deserves&lt;/strong&gt; an ASBO. It hinders other team members and shows disregard for best practice. In an age of atomic commits, powerful computers, and virtualisation, there can be no excuse. If you&amp;#8217;re developing for multiple platforms, Windows and Linux, say, don&amp;#8217;t assume that GCC and MSVC will agree on what clean code is, and never rely on other team members to correct your mistakes.
&lt;/p&gt;
&lt;p&gt;Even with ASBOs in place, even with a disciplined development team, a build may break. The important thing is to catch this event as soon as it happens; that&amp;#8217;s what the build server is for, and as we can see Example.com has an exemplary build server. The ASBO email above was sent by an automated build process which performs an incremental build each time the repository updates. It identifies the revision when things went wrong and who committed that revision. As a result, Noah has cleaned up the build, but has he cleaned up his act? Certainly, when it came to breaking the build he used to be a serial offender. The introduction of ASBOs will help him reform.
&lt;/p&gt;
&lt;hr/&gt;

&lt;p&gt;&lt;a href="http://accu.org/index.php/journals/347"&gt;Find out&lt;/a&gt; more about Noah Shortcut and Mr Deadline.
&lt;/p&gt;</description>
<dc:date>2007-11-14</dc:date>
<guid>http://wordaligned.org/articles/antisocial-build-orders.html</guid>
<author>tag@wordaligned.org (Thomas Guest)</author>
<link>http://wordaligned.org/articles/antisocial-build-orders.html</link>
<category>Subversion</category>
</item>

<item>
<title>svn help patch</title>
<description>&lt;p&gt;Suppose you want to temporarily revert local changes made to your working
   copy, then later restore your work in progress. There are a few ways to
   do this. Perhaps the simplest would be to move, replicate, then
   revert.
&lt;/p&gt;
&lt;div class="typocode"&gt;

&lt;pre class="prettyprint"&gt;$ mv working_copy working_copy_mine
$ cp -R working_copy_mine working_copy
$ svn revert -R working_copy

&lt;/pre&gt;

&lt;/div&gt;

&lt;p&gt;Now all your changes to &lt;code&gt;working_copy&lt;/code&gt; have been reverted and it
   contains what you originally checked out (the &lt;em&gt;BASE&lt;/em&gt; revision, in
   &lt;a href="http://subversion.tigris.org"&gt;Subversion&lt;/a&gt; terminology, and note that this revision has been
   cached locally in the &lt;code&gt;.svn&lt;/code&gt; directories, so &lt;code&gt;svn revert&lt;/code&gt; has no need
   to visit the server). When you&amp;#8217;re done, tidy up and put your
   modifications back.
&lt;/p&gt;
&lt;div class="typocode"&gt;

&lt;pre class="prettyprint"&gt;$ rm -rf working_copy
$ mv working_copy_mine working_copy

&lt;/pre&gt;

&lt;/div&gt;

&lt;p&gt;If it&amp;#8217;s a large working copy you can save time, disk space and
   keystrokes by avoiding the replication. First, save local differences
   made to your working copy, then revert it.
&lt;/p&gt;
&lt;div class="typocode"&gt;

&lt;pre class="prettyprint"&gt;$ svn diff working_copy &amp;gt; working_copy.patch
$ svn revert -R working_copy

&lt;/pre&gt;

&lt;/div&gt;

&lt;p&gt;Incidentally, you can fiddle around with &lt;code&gt;working_copy&lt;/code&gt; as much as
   you want now; &lt;code&gt;svn revert&lt;/code&gt; will always restore the BASE revision.
&lt;/p&gt;
&lt;p&gt;When done, &lt;code&gt;patch&lt;/code&gt; your changes back in. Note there is no &lt;code&gt;svn patch&lt;/code&gt;
   command; Subversion&amp;#8217;s native command for this kind of thing is
   &lt;code&gt;svn merge&lt;/code&gt; which only works on changes actually committed to the
   repository. Instead, you&amp;#8217;ll have to use good old &lt;code&gt;patch&lt;/code&gt;.
&lt;/p&gt;
&lt;div class="typocode"&gt;

&lt;pre class="prettyprint"&gt;$ patch -p0 working_copy &amp;lt; working_copy.patch

&lt;/pre&gt;

&lt;/div&gt;

&lt;p&gt;&lt;strong&gt;Take care&lt;/strong&gt;, though. If you&amp;#8217;ve modified your working copy&amp;#8217;s
   structure (&lt;code&gt;svn add|delete|move&lt;/code&gt;) or changed its properties (&lt;code&gt;svn
propset|propedit|propdel&lt;/code&gt;), this technique won&amp;#8217;t work. 
&lt;/p&gt;
&lt;p&gt;I&amp;#8217;d also suggest that if you regularly find yourself wanting to
   shuffle tentative changes in this way, you probably ought to be
   committing them on a private code branch where Subversion
   can manage them for you.
&lt;/p&gt;</description>
<dc:date>2007-10-03</dc:date>
<guid>http://wordaligned.org/articles/svn-help-patch.html</guid>
<author>tag@wordaligned.org (Thomas Guest)</author>
<link>http://wordaligned.org/articles/svn-help-patch.html</link>
<category>Subversion</category>
</item>

<item>
<title>Collaborative documentation tools</title>
<description>&lt;p&gt;Version control is one of the unquestioned foundations of software development: while there may be discussion about which version control system to use, whether or not to allow concurrent modification, how to secure access to the system etc., noone would think of undertaking any serious project without using version control. Quite simply it&amp;#8217;s how a team of people can work on the same codebase at the same time.
&lt;/p&gt;
&lt;p&gt;Yet recently I &lt;a href="http://wordaligned.org/articles/a-world-without-version-control.html"&gt;described&lt;/a&gt; a project where version control was not used. Instead, the team relied on ad-hoc file sharing, circulating source files by email and by copying them to a shared folder. Concurrent modifications were prohibited. System integration was left until the last minute. Inevitably the project manager worked through the night to meet the delivery deadline &amp;#8212; a proven technique for bug creation. &lt;span /&gt;What&amp;#8217;s worse, noone on the team really questioned this mode of operation.
&lt;/p&gt;
&lt;span id="continue-reading"/&gt;


&lt;h3&gt;Why?&lt;/h3&gt;
&lt;p&gt;Because the final system was a document. Because the source files (the sections of this document, that is) were edited using Microsoft Word. Because the team &amp;#8212; a combination of sales people, business managers and technical experts &amp;#8212; knew no better way of working &lt;sup&gt;&lt;a href="http://wordaligned.org/articles/collaborative-documentation-tools.html#footnote1"&gt;[1]&lt;/a&gt;&lt;/sup&gt;.
&lt;/p&gt;
&lt;p&gt;The sad truth is, I don&amp;#8217;t know of any documentation system which could have coped with the requirements of this project. Version control isn&amp;#8217;t the problem. Subversion (for example) is more than up to the job of managing the source files, by which I mean not that it allows secure, networked access to the files, backups, revision control and so on &amp;#8212; that&amp;#8217;s a given; but rather that it comes with user-friendly clients such as &lt;a href="http://tortoisesvn.tigris.org/"&gt;TortoiseSVN&lt;/a&gt;. You don&amp;#8217;t need to be a programmer to use TortoiseSVN.
&lt;/p&gt;

&lt;h3&gt;LaTeX and DocBook&lt;/h3&gt;
&lt;p&gt;No, the problem is with the documentation systems themselves. You &lt;em&gt;do&lt;/em&gt; need to be a programmer to work with a system based on &lt;a href="http://www.latex-project.org/"&gt;LaTeX&lt;/a&gt; or on &lt;a href="http://docbook.org"&gt;DocBook&lt;/a&gt; &amp;#8212; or at least to give up Microsoft Word in favour of such a system. Yet the benefits, if you can make the move, &lt;a href="http://wordaligned.org/articles/softdoc.html"&gt;are substantial&lt;/a&gt;: you can assemble documents from separate sections, you can view differences between versions, more than one person can work on the same section at the same time, you can generate various output formats from a single set of sources, branching and merging become possible, as do more sophisticated text transformations, and searching multiple documents becomes a snip.
&lt;/p&gt;

&lt;h3&gt;Google documents&lt;/h3&gt;
&lt;p&gt;I recently tried out the Google documents word processor, which I&amp;#8217;d rather assumed I&amp;#8217;d like. It &lt;em&gt;has&lt;/em&gt; got many things right &amp;#8212; document access, for example. You control who can view the document, who can edit the document, and shared access is as simple as an internet connection. Integration with the email client was equally sweet, assuming you use &lt;a href="http://mail.google.com"&gt;gmail&lt;/a&gt; that is. Document versioning and differencing is also in place. Unfortunately I&amp;#8217;d say there&amp;#8217;s still some way to go with the basic document editing, which I found sluggish and clunky.
&lt;/p&gt;
&lt;p&gt;I wouldn&amp;#8217;t recommend it, at least not yet, but, like the team I described, I don&amp;#8217;t really know of anything better. Collaborative, networked documentation tools are the way forwards, I suggest; and I think these tools could usefully steal many ideas from successful software development tools. They&amp;#8217;re just not there yet.
&lt;/p&gt;
&lt;p&gt;&lt;hr /&gt;
   &lt;a id="footnote1"&gt;[1]&lt;/a&gt;
&lt;/p&gt;
&lt;p&gt;I&amp;#8217;ve experienced worse. At one place I worked software development activities were organised into separate projects. Each project had its own documentation folder on a networked drive; beneath this folder a number of standard subfolders contained design, planning, specification documents and so on. Documents within a project were indexed using a spreadsheet in the top-level folder. A master spreadsheet indexed all the spreadsheets. Each project had a project number. Each document in each project had a document number. There were spreadsheets containing the numbers. Documents included version numbers in their filenames: &lt;code&gt;N237571_tasklist_V37.doc&lt;/code&gt;. To edit a document you had to copy it to its new file name then edit its properties to set the internal version number equal to the internal one, then fill out the document history form. To revert a document, someone had to dig through the backups. Everyone had write access to everything. Concurrent modifications were outlawed. I shudder at the memory.
&lt;/p&gt;</description>
<dc:date>2007-08-10</dc:date>
<guid>http://wordaligned.org/articles/collaborative-documentation-tools.html</guid>
<author>tag@wordaligned.org (Thomas Guest)</author>
<link>http://wordaligned.org/articles/collaborative-documentation-tools.html</link>
<category>Subversion</category>
</item>

<item>
<title>When web search results get read out of context</title>
<description>&lt;p&gt;It&amp;#8217;s always interesting to root around &lt;a href="http://httpd.apache.org/"&gt;httpd&lt;/a&gt; server logs and see which web searches refer readers to &lt;a href="http://wordaligned.org"&gt;Word Aligned&lt;/a&gt;. Occasionally, though, it&amp;#8217;s alarming. Certainly I&amp;#8217;m reminded I ought to keep material up to date, or at least ensure that everything I post includes sufficient date/version information for readers to judge when it might have passed its sell-by date. Should I also make sure nothing here can be taken out of context? After all, many readers aren&amp;#8217;t interested in reading through the whole of an article: they just want the specific advice their web search reveals. How do I &lt;a href="http://www.google.co.uk/search?hl=en&amp;amp;q=test+subversion+pre-commit+hook"&gt;test a Subversion pre-commit hook&lt;/a&gt;? How do I &lt;a href="http://www.google.co.uk/search?hl=en&amp;amp;q=use+spirit+to+parse+a+binary+file"&gt;use Spirit to parse a binary file&lt;/a&gt;? Find me a picture of the &lt;a href="http://www.google.co.uk/search?source=ig&amp;amp;hl=en&amp;amp;q=newport+transporter+bridge+picture"&gt;Newport Transporter bridge&lt;/a&gt;.
&lt;/p&gt;
&lt;p&gt;Here&amp;#8217;s an example. Few people bother to &lt;a href="http://wordaligned.org/articles/rtm-vs-stw.html"&gt;RTM these days when STW&lt;/a&gt; gets the answer more directly, but it still comes as a surprise to me that anyone should ask a question as basic &lt;em&gt;&amp;#8220;How do I comment out code?&amp;#8221;&lt;/em&gt; &amp;#8212; a question which, it turns out, occasionally directs programmers &lt;a href="http://wordaligned.org/ccomments/code_in_comments/howto.html"&gt;here&lt;/a&gt;. I hope these programmers take the time to read the rest of the article, which argues that the version control system is the best home for old code, and that deleting code beats commenting it out.
&lt;/p&gt;</description>
<dc:date>2007-08-07</dc:date>
<guid>http://wordaligned.org/articles/a-web-search-result-is-read-out-of-context.html</guid>
<author>tag@wordaligned.org (Thomas Guest)</author>
<link>http://wordaligned.org/articles/a-web-search-result-is-read-out-of-context.html</link>
<category>Subversion</category>
</item>

<item>
<title>A world without version control</title>
<description>&lt;p&gt;The requirements were open to interpretation but the customer had fixed a delivery date. Everything had to be completed by the end of the month. The team quickly agreed how to tackle the project:
&lt;/p&gt;
&lt;ul&gt;
 &lt;li&gt;
     the system would be broken down into components
 &lt;/li&gt;

 &lt;li&gt;
     development of the components would be shared, but each component would have a single owner who would take primary responsibility for its completion
 &lt;/li&gt;

 &lt;li&gt;
     the project manager would take sole responsibility for integrating the components into the final system
 &lt;/li&gt;

 &lt;li&gt;
     all work would be peer-reviewed
 &lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Because of the short timescales, the team adopted a simple project infrastructure:
&lt;/p&gt;
&lt;ul&gt;
 &lt;li&gt;
     the source for the components would be shared using a combination of email and a networked drive
 &lt;/li&gt;

 &lt;li&gt;
     concurrent modification of the components was prohibited; each component&amp;#8217;s owner took responsibility for evaluating and merging in changes suggested by other team members
 &lt;/li&gt;

 &lt;li&gt;
     change logs would be included in the component headers
 &lt;/li&gt;

 &lt;li&gt;
     version numbers would be included in the component headers, and reinforced using a simple file naming scheme (component_V001, component_V002, component_V003, &amp;#8230;)
 &lt;/li&gt;

 &lt;li&gt;
     final assembly of the components into the finished system would be done at the end of the project
 &lt;/li&gt;

 &lt;li&gt;
     to produce the best possible finished system, final assembly would be left until the penultimate day of the month
 &lt;/li&gt;
&lt;/ul&gt;</description>
<dc:date>2007-08-03</dc:date>
<guid>http://wordaligned.org/articles/a-world-without-version-control.html</guid>
<author>tag@wordaligned.org (Thomas Guest)</author>
<link>http://wordaligned.org/articles/a-world-without-version-control.html</link>
<category>Subversion</category>
</item>

<item>
<title>Source open, problem closed</title>
<description>&lt;p&gt;I &lt;a href="http://wordaligned.org/articles/trac-not-just-a-pretty-interface.html"&gt;wrote&lt;/a&gt; a while back about &lt;a href="http://trac.edgewall.org"&gt;trac&lt;/a&gt;. I continued to be impressed by it. Although it was fiddly to install, I notice that this should be improved by the next &lt;a href="http://trac.edgewall.org/wiki/TracDev/ReleaseNotes/0.11"&gt;point release&lt;/a&gt;, which will be packaged in a &lt;a href="http://peak.telecommunity.com/DevCenter/PythonEggs"&gt;python egg&lt;/a&gt;. And although the version we&amp;#8217;re using is only 0.10.2, it&amp;#8217;s proven itself remarkably solid. In fact we haven&amp;#8217;t encountered any bugs. Or at least we hadn&amp;#8217;t until today, when someone discovered that attempting to attach a small file to a wiki page resulted in an application error.
&lt;/p&gt;
&lt;span id="continue-reading"/&gt;

&lt;p&gt;Up until today we&amp;#8217;d been attaching pictures which had always worked just fine. Attempting to upload a small text file resulted in the web browser showing a big red error page filled with the following stack trace.
&lt;/p&gt;
&lt;div class="typocode"&gt;

&lt;pre class="prettyprint"&gt;Traceback (most recent call last):
  File "/usr/local/lib/python2.5/site-packages/trac/web/main.py", line 387, in dispatch_request
    dispatcher.dispatch(req)
  File "/usr/local/lib/python2.5/site-packages/trac/web/main.py", line 238, in dispatch
    resp = chosen_handler.process_request(req)
  File "/usr/local/lib/python2.5/site-packages/trac/attachment.py", line 361, in process_request
    self._do_save(req, attachment)
  File "/usr/local/lib/python2.5/site-packages/trac/attachment.py", line 449, in _do_save
    size = upload.file.len
AttributeError: 'cStringIO.StringO' object has no attribute 'len'

&lt;/pre&gt;

&lt;/div&gt;

&lt;p&gt;&lt;a href="http://trac.edgewall.org"&gt;Trac&lt;/a&gt; is a popular piece of software, and I had to believe someone else would have run into this bug. Sure enough, googling [&lt;code&gt;AttributeError: 'cStringIO.StringO' object has no attribute 'len'&lt;/code&gt;][Q] led me straight to &lt;a href="http://trac.edgewall.org/ticket/4311"&gt;trac ticket #4311&lt;/a&gt;, and the happy news that this particular problem had been fixed. If you look at the ticket, you&amp;#8217;ll notice that it cross-references the actual &lt;a href="http://trac.edgewall.org/changeset/4459"&gt;repository diff&lt;/a&gt; of the changes which fixed the problem &amp;#8212; a simple three line change to a single file in this case, and a nice demonstration of how &lt;a href="http://trac.edgewall.org"&gt;trac&lt;/a&gt; integrates source control, defect tracking and a wiki.
&lt;/p&gt;
&lt;p&gt;Since I didn&amp;#8217;t want to upgrade our trac installation just yet I applied the patch directly to &lt;code&gt;/usr/local/lib/python2.5/site-packages/trac/attachment.py&lt;/code&gt; (the file identified in the traceback), and all was well.
&lt;/p&gt;
&lt;p&gt;This is of course an every day story from the world of open source software. If you stop and think about it, though, there are several layers of openness.
&lt;/p&gt;
&lt;ol&gt;
 &lt;li&gt;&lt;p&gt;The error message was open and obvious. I didn&amp;#8217;t have to search through a server log. Application developers are usually taught hide tracebacks from end users &amp;#8212; they&amp;#8217;re deemed too frightening.  In this case, though, I didn&amp;#8217;t even have to leave my web browser to diagnose and find a fix to the problem.
&lt;/p&gt;

 &lt;/li&gt;

 &lt;li&gt;&lt;p&gt;Trac opens up its own defect database for public access. As we&amp;#8217;ve seen, this provides a great example of trac in action. &lt;span /&gt;Many closed source projects would regard it as a sign of weakness to publish this kind of information, though I do think (perhaps due to the influence of the open source movement) this attitude is changing.
&lt;/p&gt;

 &lt;/li&gt;

 &lt;li&gt;&lt;p&gt;The source files behind the application were open. All I had to do was tweak one of them using a text editor. No rebuild required.
&lt;/p&gt;

 &lt;/li&gt;
&lt;/ol&gt;</description>
<dc:date>2007-06-27</dc:date>
<guid>http://wordaligned.org/articles/source-open-problem-closed.html</guid>
<author>tag@wordaligned.org (Thomas Guest)</author>
<link>http://wordaligned.org/articles/source-open-problem-closed.html</link>
<category>Subversion</category>
</item>

<item>
<title>The Trouble with Version Numbers</title>
<description>&lt;p&gt;Here&amp;#8217;s an online version of &lt;a href="http://wordaligned.org/docs/software_versioning/index.html"&gt;&amp;#8220;The Trouble with Version Numbers&amp;#8221;&lt;/a&gt;, which was published in &lt;a href="http://accu.org"&gt;CVu&lt;/a&gt; 19.2.
&lt;/p&gt;</description>
<dc:date>2007-04-15</dc:date>
<guid>http://wordaligned.org/articles/the-trouble-with-version-numbers.html</guid>
<author>tag@wordaligned.org (Thomas Guest)</author>
<link>http://wordaligned.org/articles/the-trouble-with-version-numbers.html</link>
<category>Subversion</category>
</item>

<item>
<title>One svnserve, multiple repositories</title>
<description>&lt;p&gt;A note on how a single &lt;code&gt;svnserve&lt;/code&gt; can serve multiple repositories.
&lt;/p&gt;
&lt;span id="continue-reading"/&gt;


&lt;h3&gt;Yellow Dog&lt;/h3&gt;
&lt;p&gt;Let&amp;#8217;s suppose the Yellow Dog project uses &lt;a href="http://subversion.tigris.org"&gt;Subversion&lt;/a&gt;. You&amp;#8217;ve set up a
   Subversion server (let&amp;#8217;s give it a hostname &lt;code&gt;svnserver&lt;/code&gt;), created a
   user &lt;code&gt;svn&lt;/code&gt;, and a repository &lt;code&gt;/home/svn/repository&lt;/code&gt;. Here&amp;#8217;s the
   command you use to start the server:
&lt;/p&gt;
&lt;div class="typocode"&gt;

&lt;pre class="prettyprint"&gt;$ svnserve -d -r /home/svn/repository

&lt;/pre&gt;

&lt;/div&gt;


&lt;h3&gt;Red Bear, Blue Goat&lt;/h3&gt;
&lt;p&gt;&lt;span /&gt;Sometime later, the Red Bear project also decides to use
   Subversion. This project is unrelated to the Yellow Dog project and
   therefore needs its own repository. Similarly, we want a Blue Goat
   repository for yet another unrelated project.
&lt;/p&gt;

&lt;h3&gt;What to do&lt;/h3&gt;
&lt;p&gt;Here&amp;#8217;s what to do.
&lt;/p&gt;
&lt;div class="typocode"&gt;&lt;div class="codetitle"&gt;Creating the new repositories&lt;/div&gt;

&lt;pre class="prettyprint"&gt;$ ssh svn@svnserver
$ mkdir repositories
$ cd repositories
$ svnadmin create red_bear
$ svnadmin create blue_goat

&lt;/pre&gt;

&lt;/div&gt;

&lt;p&gt;Now we should have a directory layout like the following.
&lt;/p&gt;
&lt;div class="typocode"&gt;&lt;div class="codetitle"&gt;The view from /home/svn&lt;/div&gt;

&lt;pre class="prettyprint"&gt;+---repositories
|   +---blue_goat
|   |   +---conf
|   |   +---dav
|   |   +---db
|   |   +---hooks
|   |   \---locks
|   \---red_bear
|       +---conf
|       +---dav
|       +---db
|       +---hooks
|       \---locks
\---repository
    +---conf
    +---dav
    +---db
    +---hooks
    \---locks

&lt;/pre&gt;

&lt;/div&gt;

&lt;p&gt;All we need to do is move the (poorly named) original Yellow Dog
   repository alongside the newer ones. I&amp;#8217;d recommend taking down
   &lt;code&gt;svnserve&lt;/code&gt; first, and of course notifying everyone working on the
   Yellow Dog project &amp;#8212; but the move really will only take a few seconds.
&lt;/p&gt;
&lt;div class="typocode"&gt;&lt;div class="codetitle"&gt;Moving the old repository and restarting the server&lt;/div&gt;

&lt;pre class="prettyprint"&gt;$ killall svnserve
$ mv repository repositories/yellow_dog
$ svnserve -d -r /home/svn/repositories

&lt;/pre&gt;

&lt;/div&gt;


&lt;h3&gt;Inetd mode&lt;/h3&gt;
&lt;p&gt;If you&amp;#8217;re using &lt;code&gt;svnserve&lt;/code&gt; in &lt;code&gt;inetd&lt;/code&gt; mode, most of the above applies
   directly &amp;#8212; you simply adjust the &lt;code&gt;svnserve&lt;/code&gt; configuration file in the
   obvious way to reflect the new repository root.
&lt;/p&gt;

&lt;h3&gt;Repository URLs&lt;/h3&gt;
&lt;p&gt;The new repository URLs are:
&lt;/p&gt;
&lt;ul&gt;
 &lt;li&gt;
     &lt;code&gt;svn://svnserver/yellow_dog&lt;/code&gt;
 &lt;/li&gt;

 &lt;li&gt;
     &lt;code&gt;svn://svnserver/blue_goat&lt;/code&gt;
 &lt;/li&gt;

 &lt;li&gt;
     &lt;code&gt;svn://svnserver/red_bear&lt;/code&gt;
 &lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Note that the old URL for the Yellow Dog project was &lt;code&gt;svn://svnserver&lt;/code&gt;. This
   means that anyone with a Yellow Dog working copy will have to svn switch it.
&lt;/p&gt;
&lt;div class="typocode"&gt;

&lt;pre class="prettyprint"&gt;$ svn switch --relocate svn://svnserver svn://svnserver/yellow_dog

&lt;/pre&gt;

&lt;/div&gt;


&lt;h3&gt;Loose Ends&lt;/h3&gt;
&lt;p&gt;There may be a few scripts kicking around which need to be changed to
   reflect the new layout:
&lt;/p&gt;
&lt;ul&gt;
 &lt;li&gt;
     the repository backup script
 &lt;/li&gt;

 &lt;li&gt;
     the Yellow Dog automated build
 &lt;/li&gt;

 &lt;li&gt;
     any &lt;a href="http://wordaligned.org/articles/personal-overnight-builds.html"&gt;personal build scripts&lt;/a&gt;.
 &lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Nothing should be hard, but with a very little forwarded planning
   you&amp;#8217;ll see no loss of service. Once you&amp;#8217;ve adjusted (if necessary)
   your backup script, I&amp;#8217;d suggest now would be a good time to rehearse
   the recover-from-backup procedure.
&lt;/p&gt;</description>
<dc:date>2007-01-17</dc:date>
<guid>http://wordaligned.org/articles/one-svnserve-multiple-repositories.html</guid>
<author>tag@wordaligned.org (Thomas Guest)</author>
<link>http://wordaligned.org/articles/one-svnserve-multiple-repositories.html</link>
<category>Subversion</category>
</item>

<item>
<title>Retro-fitting coding standards</title>
<description>&lt;div class="toc"&gt;
&lt;h2&gt;Contents&lt;/h2&gt;
&lt;ul&gt;
 &lt;li&gt;&lt;a href="http://wordaligned.org/articles/retro-fitting-coding-standards.html#tocwhat-no-coding-standards" name="toc0" id="toc0"&gt;What, No Coding Standards!?&lt;/a&gt;
 &lt;/li&gt;

 &lt;li&gt;&lt;a href="http://wordaligned.org/articles/retro-fitting-coding-standards.html#tocloss-of-freedom" name="toc1" id="toc1"&gt;Loss of Freedom&lt;/a&gt;
 &lt;/li&gt;

 &lt;li&gt;&lt;a href="http://wordaligned.org/articles/retro-fitting-coding-standards.html#tocask-the-experts" name="toc2" id="toc2"&gt;Ask the Experts&lt;/a&gt;
 &lt;/li&gt;

 &lt;li&gt;&lt;a href="http://wordaligned.org/articles/retro-fitting-coding-standards.html#tocsmall-stuff" name="toc3" id="toc3"&gt;Small Stuff&lt;/a&gt;
 &lt;/li&gt;

 &lt;li&gt;&lt;a href="http://wordaligned.org/articles/retro-fitting-coding-standards.html#tocreuse" name="toc4" id="toc4"&gt;Re-Use&lt;/a&gt;
 &lt;/li&gt;

 &lt;li&gt;&lt;a href="http://wordaligned.org/articles/retro-fitting-coding-standards.html#toclanguage-conventions" name="toc5" id="toc5"&gt;Language Conventions&lt;/a&gt;
 &lt;/li&gt;

 &lt;li&gt;&lt;a href="http://wordaligned.org/articles/retro-fitting-coding-standards.html#tocthe-legacy-issue" name="toc6" id="toc6"&gt;The Legacy Issue&lt;/a&gt;
 &lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;&lt;p&gt;I&amp;#8217;ve worked at more than one organisation where a retrospective
   attempt has been made to set up a coding standard. This article
   discusses why these attempts were made and how they went.
&lt;/p&gt;
&lt;span id="continue-reading"/&gt;


&lt;h3&gt;&lt;a href="http://wordaligned.org/articles/retro-fitting-coding-standards.html#toc0" name="tocwhat-no-coding-standards" id="tocwhat-no-coding-standards"&gt;What, No Coding Standards!?&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;When I say &amp;#8220;a retrospective attempt&amp;#8221;, I mean that plenty of code had
   already been written &amp;#8212; over a number of years, in fact &amp;#8212; with no
   existing coding standard in place. Is this a bad thing? Not
   necessarily. Joel Spolsky&amp;#8217;s 12 point &lt;a href="http://www.joelonsoftware.com/articles/fog0000000043.html"&gt;checklist&lt;/a&gt; on how to
   write better code is generally sound, and in particular I think he
   does well to &lt;strong&gt;not&lt;/strong&gt; say:
&lt;/p&gt;
&lt;blockquote&gt;&lt;p&gt;&amp;#8220;Do you have a Coding Standard, and does everyone follow it?&amp;#8221;
&lt;/p&gt;
&lt;/blockquote&gt;&lt;p&gt;In the cases I&amp;#8217;m describing the code was in no way sub-standard. It
   worked well. Its success had caused the team to grow, with all the
   consequent problems, and in fact it wasn&amp;#8217;t management who imposed
   a coding standard, but the developers themselves who decided they 
   wanted one.
&lt;/p&gt;

&lt;h3&gt;&lt;a href="http://wordaligned.org/articles/retro-fitting-coding-standards.html#toc1" name="tocloss-of-freedom" id="tocloss-of-freedom"&gt;Loss of Freedom&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;&lt;span /&gt;A good coding standard shouldn&amp;#8217;t be there to constrain developers or force
   them to comply to a particular coding style. In fact, most seasoned
   programmers are careful not to waste energy arguing about coding
   styles (which isn&amp;#8217;t to say we don&amp;#8217;t care, or don&amp;#8217;t have opinions
   on such matters &amp;#8212; it&amp;#8217;s just that we prefer not to waste energy).
&lt;/p&gt;
&lt;p&gt;For this very reason, a coding standard can help. By drawing a line
   under arguments about where to place braces, how far to indent, what
   to call things, and then moving on, we allow ourselves to concentrate
   on solving more interesting problems. Even better, if everyone adopts
   a consistent style, it becomes easier to work with code written
   by colleagues.
&lt;/p&gt;
&lt;p&gt;The term &amp;#8220;Coding Standards&amp;#8221; suggests rules and red tape. It&amp;#8217;s perhaps
   the most common term, which is why I&amp;#8217;ve been using it, but I think
   guidelines are what are really required. In fact, as I&amp;#8217;ll explain, we
   don&amp;#8217;t really need guidelines since the experts have already written
   them for us. A &amp;#8220;Style Guide&amp;#8221; describing local conventions should be
   quite enough.
&lt;/p&gt;

&lt;h3&gt;&lt;a href="http://wordaligned.org/articles/retro-fitting-coding-standards.html#toc2" name="tocask-the-experts" id="tocask-the-experts"&gt;Ask the Experts&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;All too often a corporate coding standard reads as an attempt by a
   local expert to lay down rules on how to write good code: when to use
   exceptions, why to pass arguments by constant reference, when to use
   protected data members, etc.  At best, this is a waste of effort, and,
   more likely (unless &lt;a href="http://www.gotw.ca/"&gt;Herb Sutter&lt;/a&gt; or &lt;a href="http://www.aristeia.com/"&gt;Scott Meyers&lt;/a&gt;
   happens to be your local expert), there&amp;#8217;s a high probability these
   home-brewed rules will be wrong.
&lt;/p&gt;
&lt;p&gt;&lt;span /&gt;It&amp;#8217;s far better to provide a well-stocked library than to attempt
   to write your own diluted imitations of Sutter and Meyers.
&lt;/p&gt;
&lt;p&gt;What &lt;a href="http://www.gotw.ca/"&gt;Sutter&lt;/a&gt; and &lt;a href="http://www.aristeia.com/"&gt;Meyers&lt;/a&gt; can&amp;#8217;t do, though, is document your
   local coding style &amp;#8212; by which I mean those finickity things such as
   what &amp;copy; copyright notice goes in a header file, where braces get
   placed, how far to indent, how to name things. That&amp;#8217;s what goes in
   your Style Guide.
&lt;/p&gt;

&lt;h3&gt;&lt;a href="http://wordaligned.org/articles/retro-fitting-coding-standards.html#toc3" name="tocsmall-stuff" id="tocsmall-stuff"&gt;Small Stuff&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;The Style Guide, then, will comprise entirely of what 
   &lt;a href="http://www.gotw.ca/publications/c++cs.htm"&gt;Sutter and Alexandrescu&lt;/a&gt;
   refer to as &amp;#8220;small stuff&amp;#8221;, about which their specific advice is:
&lt;/p&gt;
&lt;blockquote&gt;&lt;p&gt;Item 0. Don&amp;#8217;t sweat the small stuff.
&lt;/p&gt;
&lt;p&gt;&amp;#8212; &lt;a href="http://www.gotw.ca/publications/c++cs.htm"&gt;C++ Coding Standards&lt;/a&gt;, Herb Sutter and Andrei Alexandrescu
&lt;/p&gt;
&lt;/blockquote&gt;&lt;p&gt;By this they mean:
&lt;/p&gt;
&lt;blockquote&gt;&lt;p&gt;Issues that are really just personal taste and don&amp;#8217;t affect correctness
   don&amp;#8217;t belong in a coding standard. Any professional programmer can easily
   read and write code that is formatted a little differently than they&amp;#8217;re
   used to.
&lt;/p&gt;
&lt;/blockquote&gt;&lt;p&gt;Does this imply that even a Style Guide isn&amp;#8217;t worth writing? And if so,
   why ever did the team I was working on want one?
&lt;/p&gt;
&lt;p&gt;I agree with Sutter and Alexandrescu&amp;#8217;s headline advice, but my take on
   it is slightly different: yes, small stuff isn&amp;#8217;t worth fussing over;
   and yes, I&amp;#8217;m capable of resetting my tabwidth to edit a file, and even
   of adopting the brace placement rules and naming conventions in force
   in that file &amp;#8212; but it requires concentration and becomes
   tiresome. What if there are several conflicting styles in a single
   file? I prefer to work on a consistent code base, and so do most
   programmers I&amp;#8217;ve worked with. So some sweating turns out to be
   necessary!
&lt;/p&gt;
&lt;p&gt;In this same section, 
   &lt;a href="http://www.gotw.ca/publications/c++cs.htm"&gt;Sutter and Alexandrescu&lt;/a&gt; manage to
   define a sensible naming convention in a single paragraph: this
   demonstrates the level of detail we&amp;#8217;re looking for. An entire Style
   Guide should fit comfortably on a single page, otherwise 
   it&amp;#8217;s too fussy and won&amp;#8217;t be adopted.
&lt;/p&gt;

&lt;h3&gt;&lt;a href="http://wordaligned.org/articles/retro-fitting-coding-standards.html#toc4" name="tocreuse" id="tocreuse"&gt;Re-Use&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;I hope we&amp;#8217;ve agreed to resist the temptation to write our own feeble
   imitations of 
   &lt;a href="http://www.gotw.ca/publications/c++cs.htm"&gt;&amp;#8220;C++ Coding Standards&amp;#8221;&lt;/a&gt;, 
   &lt;a href="http://www.aristeia.com/books_frames.html"&gt;&amp;#8220;Effective C++&amp;#8221;&lt;/a&gt;, 
   and similar. Out-sourcing this kind of thing is appealing. Surely we 
   could also reuse a coding style we&amp;#8217;ve seen elsewhere?
&lt;/p&gt;

&lt;h3&gt;&lt;a href="http://wordaligned.org/articles/retro-fitting-coding-standards.html#toc5" name="toclanguage-conventions" id="toclanguage-conventions"&gt;Language Conventions&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Up to now I&amp;#8217;ve avoided explicitly mentioned what programming language
   I&amp;#8217;m talking about. If the language were &lt;a href="http://www.java.com/"&gt;Java&lt;/a&gt;,
   then defining our Style Guide really shouldn&amp;#8217;t be an issue: we&amp;#8217;d just
   cross-reference the 
   &lt;a href="http://java.sun.com/docs/codeconv/"&gt;Sun Java Programming Conventions&lt;/a&gt;, 
   configure an &lt;a href="http://eclipse-cs.sourceforge.net/"&gt;Eclipse plugin&lt;/a&gt; 
   to enforce these conventions, share the configuration
   and be done with it.
&lt;/p&gt;
&lt;p&gt;Similarly, &lt;a href="http://python.org"&gt;Python&lt;/a&gt; has a reasonably well-defined
   preferred style &amp;#8212; and its famous space-sensitivity unasks most
   questions about code layout.
&lt;/p&gt;
&lt;p&gt;If it&amp;#8217;s C++ we&amp;#8217;re talking about, the ground rules are less clear, and
   there&amp;#8217;s a whole lot more syntax to fret about. Nonetheless, we could
   draw inspiration from the C++ Standard Library, which follows a
   consistent &amp;#8212; if not formally documented &amp;#8212; naming style. This is exactly
   what &lt;a href="http//boost.org"&gt;Boost&lt;/a&gt; has chosen to do, and indeed parts of &lt;a href="http//boost.org"&gt;Boost&lt;/a&gt; are already
   making their way into the C++ Library. Many of the Boost
   &lt;a href="http://boost.org/more/lib_guide.htm#Guidelines"&gt;guidelines&lt;/a&gt; are specific to the Boost project, but we could
   sensibly extract the short sections on naming and layout to form the
   basis of our own Style Guide.
&lt;/p&gt;
&lt;blockquote&gt;&lt;p&gt;Use the naming conventions of the C++ Standard Library (See Naming
   conventions rationale): 
&lt;/p&gt;
&lt;ul&gt;
 &lt;li&gt;
     Names (except as noted below) should be all lowercase, with words separated by underscores.  &lt;br /&gt;
 &lt;/li&gt;

 &lt;li&gt;
     Acronyms should be treated as ordinary names (e.g. xml_parser instead of XML_parser).  &lt;br /&gt;
 &lt;/li&gt;

 &lt;li&gt;
     Template parameter names begin with an uppercase letter.  &lt;br /&gt;
 &lt;/li&gt;

 &lt;li&gt;
     Macro (gasp!) names all uppercase and begin with BOOST_.
 &lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Choose meaningful names &amp;#8212; explicit is better than implicit, and
   readability counts. There is a strong preference for clear and
   descriptive names, even if lengthy.  &lt;br /&gt;
&lt;/p&gt;
&lt;p&gt;&amp;#8230;  &lt;br /&gt;
&lt;/p&gt;
&lt;ul&gt;
 &lt;li&gt;
     Use fixed-width fonts.
 &lt;/li&gt;

 &lt;li&gt;
     Use spaces rather than tabs.
 &lt;/li&gt;

 &lt;li&gt;
     Limit line lengths to 80 characters.
 &lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;&lt;p&gt;Of course, if we&amp;#8217;re retro-fitting a style guide, it&amp;#8217;s unlikely that we
   can just cut and paste the relevant sections of the Boost one. Another
   great site is Sven Rosvall&amp;#8217;s 
   &lt;a href="http://www.rosvall.ie/CSG/"&gt;Coding Standard Generator&lt;/a&gt;, 
   which allows you to generate your own coding standard by filling out a few forms.
&lt;/p&gt;

&lt;h3&gt;&lt;a href="http://wordaligned.org/articles/retro-fitting-coding-standards.html#toc6" name="tocthe-legacy-issue" id="tocthe-legacy-issue"&gt;The Legacy Issue&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;What if, having got together our one page Style Guide, we find that,
   say, only 50% the codebase fits that style? This is a serious concern,
   and one which threatens the usefulness of the whole exercise.
&lt;/p&gt;
&lt;p&gt;A Style Guide is supposed to make things easier for new team members
   to pick things up &amp;#8212; but if they discover little of the codebase
   follows the guide, then they&amp;#8217;ll ignore it like everyone else seems
   to. Similarly, experienced team members will resent effort spent on
   writing a guide which only looks good on paper, and will ignore
   it too.
&lt;/p&gt;
&lt;p&gt;There&amp;#8217;s no easy way to tackle this issue, but there are a few viable
   approaches:
&lt;/p&gt;
&lt;ol&gt;
 &lt;li&gt;
     Relax the style guide. By loosening it to accomodate everything,
        everything conforms.
 &lt;/li&gt;

 &lt;li&gt;
     Refactor the entire codebase to meet the accepted style.
 &lt;/li&gt;

 &lt;li&gt;
     When working on a file, first refactor it to meet the accepted style.
 &lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;General C++ refactorings &amp;#8212; to change the name of a class, for example
   &amp;#8212; can be surprisingly difficult to automate and guarantee. The
   complexity of the language and its compilation model makes sure of
   that. Nonetheless, it can be done if the benefits are judged
   worthwhile. If you&amp;#8217;re worried that changing code will break it, then
   you probably don&amp;#8217;t have a good suite of regression tests: setting up
   and automating such a suite is &lt;em&gt;far&lt;/em&gt; more important than code style
   issues.
&lt;/p&gt;
&lt;p&gt;Simple refactorings &amp;#8212; to expand tabs to spaces, or to eliminate
   unwanted 
   &lt;a href="http://wordaligned.org/articles/keyword-substitution-just-say-no.html"&gt;Subversion keywords&lt;/a&gt;
    &amp;#8212; are easier to apply. Once done,
   they can be enforced using 
   &lt;a href="http://wordaligned.org/articles/a-subversion-pre-commit-hook.html"&gt;hook scripts&lt;/a&gt;.
&lt;/p&gt;
&lt;p&gt;In practice, a balance between the listed approaches combined with a
   good dose of common sense provides our only way forward. The Style
   Guide should be a living document which always reflects the current
   code base. As is so often the case, we can iterate to get where we want,
   starting from: step zero, no style guide, anything goes.
&lt;/p&gt;</description>
<dc:date>2007-01-11</dc:date>
<guid>http://wordaligned.org/articles/retro-fitting-coding-standards.html</guid>
<author>tag@wordaligned.org (Thomas Guest)</author>
<link>http://wordaligned.org/articles/retro-fitting-coding-standards.html</link>
<category>Subversion</category>
</item>

<item>
<title>Trac &#8212; not just a pretty interface</title>
<description>&lt;p&gt;I&amp;#8217;ve been using &lt;a href="http://trac.edgewall.org"&gt;trac&lt;/a&gt; for a project at work recently, and it really
   does seem to be every bit as good as it looks.
&lt;/p&gt;
&lt;span id="continue-reading"/&gt;


&lt;h3&gt;Tools you can trust&lt;/h3&gt;
&lt;p&gt;I&amp;#8217;ve noted before how important it is to like the tools you use &lt;a href="http://wordaligned.org/articles/google-mail-holiday-auto-responder.html"&gt;every day&lt;/a&gt;.
   Until now, most project management tools left me cold: the
   bug-trackers that provide clunky and restrictive front-ends to a
   database, the meeting schedulers that only run on Windows XP, the
   &lt;span /&gt;project planning tools that are so expensive only higher management
   can afford them, and so sophisticated noone can get them to do what
   they want.
&lt;/p&gt;
&lt;p&gt;&lt;a href="http://trac.edgewall.org"&gt;Trac&lt;/a&gt;, though, is different. As you can see, the trac project team
   eat their own dog food &amp;#8212; the trac home page &lt;em&gt;is&lt;/em&gt; a trac project &amp;#8212; which
   as always is a good sign.
&lt;/p&gt;
&lt;p&gt;Trac is a pleasure to use.
&lt;/p&gt;

&lt;h3&gt;Killer Features&lt;/h3&gt;
&lt;p&gt;&lt;a href="http://trac.edgewall.org"&gt;Trac&lt;/a&gt; grabbed my attention because it looks so good, and I suppose that
   remains one of its killer features.
&lt;/p&gt;
&lt;p&gt;Actually using it, though, what I really like is the way the tools
   integrate with the &lt;a href="http://subversion.tigris.org"&gt;version control system&lt;/a&gt;. Want to &lt;a href="http://trac.edgewall.org/wiki/TracLinks"&gt;link&lt;/a&gt; from a wiki
   page to a repository URL? No problem. Want to &lt;a href="http://trac.edgewall.org/wiki/TracLinks"&gt;link&lt;/a&gt; to a changeset
   associated with a repository revision? Easy peasy. Want a page which
   displays the difference between any two repository revisions? Yep, it
   can do that too.
&lt;/p&gt;
&lt;p&gt;Browse the &lt;a href="http://trac.edgewall.org/timeline"&gt;trac project&amp;#8217;s own timeline&lt;/a&gt;
   to see some of these features in action.
&lt;/p&gt;

&lt;h3&gt;Downsides&lt;/h3&gt;
&lt;p&gt;There are downsides.
&lt;/p&gt;
&lt;ol&gt;
 &lt;li&gt;
     &lt;a href="http://trac.edgewall.org"&gt;trac&lt;/a&gt; was fiddly to install. I needed to get hold of
&lt;a href="http://www.swig.org"&gt;SWIG&lt;/a&gt;, then build the python/subversion
bindings, then choose a database, then install the relevant python
database bindings, then clearsilver, then &amp;#8230; well, you get the
picture.
 &lt;/li&gt;

 &lt;li&gt;
     trac is only at version &lt;a href="http://www.edgewall.org/blog/news/trac_0_10_2.html"&gt;0.10.2&lt;/a&gt;.
 &lt;/li&gt;

 &lt;li&gt;
     trac tries to do everything. It&amp;#8217;s the source browser which thinks
     it&amp;#8217;s a wiki which thinks it&amp;#8217;s a bug-tracker which thinks it&amp;#8217;s a project
     planner.
 &lt;/li&gt;

 &lt;li&gt;
     the only version control system trac works with is &lt;a href="http://subversion.tigris.org"&gt;Subversion&lt;/a&gt;.
 &lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;To answer these points in turn.
&lt;/p&gt;
&lt;ol&gt;
 &lt;li&gt;
     Yes, that is a concern. The lack of a one-click installer may put
     off some users. Trac does not stand alone: it builds on proven
     technologies &amp;#8212; &lt;a href="http://python.org"&gt;Python&lt;/a&gt;, relational databases, web servers.
Besides, you probably &lt;em&gt;can&lt;/em&gt; just grab a trac package for certain Linux
distributions.
 &lt;/li&gt;

 &lt;li&gt;
     I haven&amp;#8217;t seen any problems (yet). As a product, it feels stable and well-tuned.
 &lt;/li&gt;

 &lt;li&gt;
     You don&amp;#8217;t need to use all of trac&amp;#8217;s features. As a Subversion
     repository browser alone it pays its way. As a repository browser combined
     with a wiki, it&amp;#8217;s peerless.
 &lt;/li&gt;

 &lt;li&gt;
     You can make this an upside by upgrading to &lt;a href="http://subversion.tigris.org"&gt;Subversion&lt;/a&gt;!
 &lt;/li&gt;
&lt;/ol&gt;</description>
<dc:date>2006-12-20</dc:date>
<guid>http://wordaligned.org/articles/trac-not-just-a-pretty-interface.html</guid>
<author>tag@wordaligned.org (Thomas Guest)</author>
<link>http://wordaligned.org/articles/trac-not-just-a-pretty-interface.html</link>
<category>Subversion</category>
</item>

<item>
<title>Synchronising Workspaces</title>
<description>&lt;p&gt;Here&amp;#8217;s an interesting &lt;a href="http://www.martinfowler.com/bliki/MultipleDesktops.html"&gt;note&lt;/a&gt; from &lt;a href="http://www.martinfowler.com"&gt;Martin Fowler&lt;/a&gt;, in which he
   describes his use of version control to keep his workspace
   synchronised between different machines. It chimes with something I
   wrote a couple of months back about &lt;a href="http://wordaligned.org/articles/personal-version-control.html"&gt;personal version
control&lt;/a&gt;. Some of what he says makes me think: 
&lt;/p&gt;
&lt;p&gt;&lt;em&gt;In an ideal world, wouldn&amp;#8217;t it be better if his machine were a client, and his workspace on a server?&lt;/em&gt; 
&lt;/p&gt;
&lt;p&gt;This idea is nothing new, and some people
   have heard it so many times before that they no longer believe it. I
   think it&amp;#8217;s happening right now &amp;#8212; it&amp;#8217;s just more of an evolution than
   a revolution.
&lt;/p&gt;</description>
<dc:date>2006-12-14</dc:date>
<guid>http://wordaligned.org/articles/synchronising-workspaces.html</guid>
<author>tag@wordaligned.org (Thomas Guest)</author>
<link>http://wordaligned.org/articles/synchronising-workspaces.html</link>
<category>Subversion</category>
</item>

<item>
<title>Spam, Typo, Subversion Logs</title>
<description>&lt;p&gt;This &lt;a href="http://blog.wordaligned.org"&gt;blog&lt;/a&gt; got hit by some spam promoting online gambling sites,
   even though I&amp;#8217;d cranked up most of the built in anti-spam settings. I
   went across to the &lt;a href="http://www.typosphere.org"&gt;Typo&lt;/a&gt; website looking for advice and discovered:
&lt;/p&gt;
&lt;blockquote&gt;&lt;p&gt;The Typo Trac is currently offline because of a high level of
   spam. It shall return as soon as we&amp;#8217;ve got some more protection
   added to it.
&lt;/p&gt;
&lt;/blockquote&gt;&lt;p&gt;Unfunnily enough, I experimented with an open &lt;a href="http://trac.edgewall.org/"&gt;Trac&lt;/a&gt; project a while
   back and it too received spam contributions cunningly hidden
   where a regular reader wouldn&amp;#8217;t notice.
&lt;/p&gt;
&lt;span id="continue-reading"/&gt;


&lt;h4&gt;Examining the Typo Subversion Logs&lt;/h4&gt;
&lt;p&gt;Fortunately the &lt;a href="http://www.typosphere.org"&gt;Typo&lt;/a&gt; Subversion server remains up and running. I
   took a look at the log files to see if there were any spam-related
   improvements since I&amp;#8217;d originally installed Typo and the latest release
   (4.0.3 at the time of writing). There were a few hits.
&lt;/p&gt;
&lt;div class="typocode"&gt;

&lt;pre class="prettyprint"&gt;$ svn log -r1133:1231 svn://typosphere.org/typo | grep spam
Add spam setting for Akismet key.  I still need to write the Akismet glue code, but it won't work without a key.
Big spam filtering upgrade.
Comments (and trackbacks) that fail the spam check are marked as unpublished
registering of spam/ham classification with akismet). JustPresumedHam
of articles whose classification you have confirmed as well as a simple spam/ham
Use published_at for comment spam checks.  Closes #1089

&lt;/pre&gt;

&lt;/div&gt;


&lt;h4&gt;A Closer Examination&lt;/h4&gt;
&lt;p&gt;This superficial inspection suggests that, out of 99 changes, 4 relate
   to spam &amp;#8212; suggesting that the &lt;a href="http://www.typosphere.org"&gt;Typo&lt;/a&gt; developers spent less than 5%
   of their effort making anti-spam changes in the period concerned.
&lt;/p&gt;
&lt;p&gt;A more useful statistic would be the number of files which were
   modified for anti-spam purposes. It&amp;#8217;s rather harder to extract this
   number using simple shell programs such as &lt;code&gt;grep&lt;/code&gt; so I wrote a
   &lt;a href="http://python.org"&gt;Python&lt;/a&gt; program to analyse the the &lt;a href="http://svnbook.red-bean.com/en/1.2/svn.ref.svn.c.log.html"&gt;svn log&lt;/a&gt; output. I used the
   &lt;code&gt;--xml&lt;/code&gt; option to the &lt;a href="http://svnbook.red-bean.com/en/1.2/svn.ref.svn.c.log.html"&gt;svn log&lt;/a&gt; command to provide me with more
   structured output, and the Python &lt;a href="http://www.python.org/doc/current/lib/module-xml.dom.minidom.html"&gt;minidom&lt;/a&gt; XML module proved more than
   up to the task of parsing this output.
&lt;/p&gt;
&lt;p&gt;Here&amp;#8217;s what this program told me.
&lt;/p&gt;
&lt;div class="typocode"&gt;

&lt;pre class="prettyprint"&gt;$ svn log -r1133:1231 svn://typosphere.org/typo --xml --verbose | \
  process_svn_log.py spam akismet
Found /spam|akismet/i in 9/99 changes affecting 72/270 files.

&lt;/pre&gt;

&lt;/div&gt;

&lt;p&gt;Note that I included &lt;a href="http://akismet.com/"&gt;Akismet&lt;/a&gt; in my pattern match. As I understand
   it, &lt;a href="http://akismet.com/"&gt;Akismet&lt;/a&gt; is a service specifically designed to protect blogs
   against spam.
&lt;/p&gt;
&lt;p&gt;I could dig even deeper and find out how many lines of code were
   changed, but I don&amp;#8217;t think it&amp;#8217;s worth it. This is a pretty blunt tool,
   but it does tell us that some smart programmers are having to spend
   almost as much time fighting dumb spammers as they are writing more
   useful code.
&lt;/p&gt;

&lt;h4&gt;The svn log processor&lt;/h4&gt;
&lt;p&gt;For the record, here&amp;#8217;s my program. It&amp;#8217;s best suited to the job it
   actually did but it&amp;#8217;s simple enough that I&amp;#8217;ll be able to adapt it for
   use elsewhere.
&lt;/p&gt;
&lt;div class="typocode"&gt;&lt;div class="codetitle"&gt;process_svn_log.py&lt;/div&gt;

&lt;pre class="prettyprint"&gt;""" This program filters 'svn log --xml --verbose' output
    for log entries which match patterns.

This output has the form:
&amp;lt;?xml version="1.0"?&amp;gt;
&amp;lt;log&amp;gt;
&amp;lt;logentry
   revision="1133"&amp;gt;
&amp;lt;author&amp;gt;scott&amp;lt;/author&amp;gt;
&amp;lt;date&amp;gt;2006-07-13T17:26:26.186291Z&amp;lt;/date&amp;gt;
&amp;lt;paths&amp;gt;
&amp;lt;path
   action="M"&amp;gt;/trunk/app/views/admin/feedback/list.rhtml&amp;lt;/path&amp;gt;
&amp;lt;/paths&amp;gt;
&amp;lt;msg&amp;gt;Make search+pagination work right&amp;lt;/msg&amp;gt;
&amp;lt;/logentry&amp;gt;
&amp;lt;/log&amp;gt;
"""

def usage(program):
    print """\
Usage: %s PATTERN ...
Searches the output from 'svn log --xml --verbose' for log entries whose
message matches the supplied PATTERN(s) and yields summary statistics.
Example:
svn log -r1133:1231 svn://typosphere.org/typo --xml --verbose | %s spam""" % (
    program, program)

def elements(node, tagname):
    " Return named child elements of a DOM node. "
    return node.getElementsByTagName(tagname)

def count_paths(logentries):
    " Count repository path changes logged. "
    return sum(1
               for logentry in logentries
               for paths in elements(logentry, "paths")
               for path in elements(paths, "path"))

def log_msg_matches(logentry, matcher):
    " Return true if the logentry message matches, false otherwise. "
    msgs = elements(logentry, "msg")
    assert len(msgs) == 1, "Require a single log message per log entry."
    return matcher(msgs[0].childNodes[0].data) is not None

def process(log, patterns):
    " Process the input svn log, looking for messages matching the input patterns. "
    import re
    pattern = "|".join(patterns)
    matcher = re.compile(pattern, re.IGNORECASE).search
    entries = elements(log, "logentry")
    matches = [entry for entry in entries
               if log_msg_matches(entry, matcher)]
    paths = count_paths(entries)
    matching_paths = count_paths(matches)

print "Found /%s/i in %d/%d changes affecting %d/%d files." % (
        pattern, len(matches), len(entries), matching_paths, paths)

def main(argv):
    if len(argv) == 1:
        usage(argv[0])
    else:
        from xml.dom.minidom import parse
        process(parse(sys.stdin), argv[1:])

if __name__ == "__main__":
    import sys
    main(sys.argv)

&lt;/pre&gt;

&lt;/div&gt;</description>
<dc:date>2006-11-27</dc:date>
<guid>http://wordaligned.org/articles/spam-typo-subversion-logs.html</guid>
<author>tag@wordaligned.org (Thomas Guest)</author>
<link>http://wordaligned.org/articles/spam-typo-subversion-logs.html</link>
<category>Subversion</category>
</item>

<item>
<title>Internal Subversion Externals</title>
<description>&lt;p&gt;&lt;a href="http://svnbook.red-bean.com/en/1.2/svn.advanced.externals.html"&gt;Subversion externals&lt;/a&gt; provide a simple way for a project
   to pull together components from more than one repository. This post
   shows how &lt;span /&gt;they can also be used to create modules which
   collect together components from the &lt;em&gt;same&lt;/em&gt; repository.
&lt;/p&gt;
&lt;span id="continue-reading"/&gt;


&lt;h3&gt;An svn:externals example&lt;/h3&gt;
&lt;p&gt;This &lt;a href="http://blog.wordaligned.org"&gt;blog&lt;/a&gt; is built using &lt;a href="http://typosphere.org"&gt;Typo&lt;/a&gt;
   which is itself built on top of the &lt;a href="http://www.rubyonrails.org/"&gt;Ruby on Rails&lt;/a&gt; application framework.
   If we peer into the &lt;a href="http://typosphere.org"&gt;Typo&lt;/a&gt; Subversion repository we can see how a tagged
   version of the &lt;a href="http://www.rubyonrails.org/"&gt;Ruby on Rails&lt;/a&gt; code gets pulled in.
&lt;/p&gt;
&lt;div class="typocode"&gt;

&lt;pre class="prettyprint"&gt;$ svn proplist --verbose svn://typosphere.org/typo/trunk/vendor
Properties on 'svn://typosphere.org/typo/trunk/vendor':
  svn:externals : rails http://dev.rubyonrails.com/svn/rails/tags/rel_1-1-6

&lt;/pre&gt;

&lt;/div&gt;

&lt;p&gt;The &lt;code&gt;proplist&lt;/code&gt; command above lists the &lt;a href="http://svnbook.red-bean.com/en/1.2/svn.advanced.props.html"&gt;properties&lt;/a&gt; which have been
   set on a &lt;a href="http://typosphere.org"&gt;Typo&lt;/a&gt; repository URL, and in this case shows that the
   &lt;code&gt;typo/trunk/vendor&lt;/code&gt; directory has an &lt;code&gt;svn:externals&lt;/code&gt; property linking
   the &lt;a href="http://subversion.tigris.org"&gt;Subversion&lt;/a&gt; URL
   &lt;code&gt;http://dev.rubyonrails.com/svn/rails/tags/rel_1-1-6&lt;/code&gt; to the local
   name &lt;code&gt;rails&lt;/code&gt;. (Don&amp;#8217;t be confused by the &lt;code&gt;http://&lt;/code&gt; protocol in the
   rubyonrails URL &amp;#8212; it&amp;#8217;s still a Subversion repository we&amp;#8217;re linking
   to, it&amp;#8217;s just one that&amp;#8217;s served by Apache.)
&lt;/p&gt;
&lt;p&gt;The &lt;code&gt;rails&lt;/code&gt; directory is not part of the &lt;a href="http://typosphere.org"&gt;Typo&lt;/a&gt; repository, as the following
   listing shows:
&lt;/p&gt;
&lt;div class="typocode"&gt;

&lt;pre class="prettyprint"&gt;$ svn list svn://typosphere.org/typo/trunk/vendor
akismet/
bluecloth/
....
syntax/
uuidtools/

&lt;/pre&gt;

&lt;/div&gt;

&lt;p&gt;When we check out &lt;a href="http://typosphere.org"&gt;Typo&lt;/a&gt;, though, it fetches the tagged version of
   &lt;a href="http://www.rubyonrails.org/"&gt;Ruby on Rails&lt;/a&gt; at URL
   &lt;code&gt;http://dev.rubyonrails.com/svn/rails/tags/rel_1-1-6&lt;/code&gt; and places it in
   a local directory called &lt;code&gt;rails&lt;/code&gt;. Here&amp;#8217;s what we see when we check the
   code out.
&lt;/p&gt;
&lt;div class="typocode"&gt;

&lt;pre class="prettyprint"&gt;$ svn checkout svn://typosphere.org/typo/trunk/vendor

Fetching external item into 'vendor/rails'
A    vendor/rails/cleanlogs.sh
A    vendor/rails/release.rb
....

&lt;/pre&gt;

&lt;/div&gt;


&lt;h3&gt;Some things to notice&lt;/h3&gt;
&lt;p&gt;Note here that we&amp;#8217;re pulling in a tagged version of &lt;a href="http://www.rubyonrails.org/"&gt;Ruby on Rails&lt;/a&gt;
   &amp;#8212; not the main development trunk. The &lt;a href="http://typosphere.org"&gt;Typo&lt;/a&gt; developers
   sensibly choose to develop against a stable version of the Ruby on
   Rails framework. They could even have pulled in a particular Rails
   repository revision by including the revision number in the
   &lt;code&gt;svn:externals&lt;/code&gt; definition (see &lt;code&gt;svn help propset&lt;/code&gt; for details).
&lt;/p&gt;
&lt;p&gt;Note also that the working copy we get in the &lt;code&gt;rails&lt;/code&gt; subdirectory
   retains its association with the host repository at &lt;code&gt;http://dev.rubyonrails.com/svn/rails&lt;/code&gt;: if authorised to do so, we
   could modify this working copy and check changes back in.
&lt;/p&gt;

&lt;h3&gt;A Project Hierarchy&lt;/h3&gt;
&lt;p&gt;Now consider a repository which is arranged into projects named
   &lt;code&gt;blue_goat&lt;/code&gt;, &lt;code&gt;red_bear&lt;/code&gt;, &lt;code&gt;yellow_dog&lt;/code&gt;, &amp;#8230; . Each project has a
   top-level directory beneath which are sub-directories for source code,
   tests, build files and documentation. If we check everything out, we
   end up with a working copy which looks something like this.
&lt;/p&gt;
&lt;div class="typocode"&gt;&lt;div class="codetitle"&gt;full working copy layout&lt;/div&gt;

&lt;pre class="prettyprint"&gt;projects
|-- blue_goat/
|   |-- build/
|   |   `-- build.xml
|   |-- doc/
|   |   `-- user_guide.pdf
|   |-- src/
|   |   `-- BlueGoat.java
|   `-- test/
|       `-- TestBlueGoat.java
|-- red_bear/
|   |-- build/
|   |   `-- Makefile
|   |-- doc/
|   |   |-- note.txt
|   |   |-- spec.html
|   |   `-- user_guide.pdf
|   |-- src/
|   |   |-- main.cpp
|   |   |-- red_bear.cpp
|   |   `-- red_bear.hpp
|   `-- test/
|       `-- regression_test.sh
`-- yellow_dog/
    |-- build/
    |-- doc/
    |   `-- user_guide.rst
    |-- src/
    |   `-- yellow_dog.py
    `-- test/
        `-- test_yellow_dog.py

&lt;/pre&gt;

&lt;/div&gt;

&lt;p&gt;To save on screen space, I&amp;#8217;ve shown only three projects and a tiny
   subset of the files in these projects. In reality, there are tens of
   thousands of files, and, since some of the test files are rather large,
   they occupy several gigabytes on disk.
&lt;/p&gt;
&lt;p&gt;For the developers, this is fine. Typically developers are assigned to
   one project at a time, and they check out a working copy for that
   project only. For the technical author, it&amp;#8217;s a different story.
&lt;/p&gt;

&lt;h3&gt;The Technical Author&lt;/h3&gt;
&lt;p&gt;A single technical author is responsible for the documentation for all
   active projects. Like every one else on the team, the author uses
   version control; in contrast to everyone else on the team, the author
   is interested in just a &lt;em&gt;single&lt;/em&gt; sub-directory of &lt;em&gt;every&lt;/em&gt; project &amp;#8212; namely
   the &lt;code&gt;doc&lt;/code&gt; directory.
&lt;/p&gt;
&lt;p&gt;Here&amp;#8217;s what we can do. First, create and checkout a &lt;code&gt;collected_docs&lt;/code&gt; directory.
&lt;/p&gt;
&lt;div class="typocode"&gt;

&lt;pre class="prettyprint"&gt;$ svn mkdir svn://svnserver/collected_docs -m "Collected documentation."
$ svn co svn://svnserver/collected_docs

&lt;/pre&gt;

&lt;/div&gt;

&lt;p&gt;Now set up the desired links to project subdirectories. We&amp;#8217;ll put them
   in a temporary file for now.
&lt;/p&gt;
&lt;div class="typocode"&gt;

&lt;pre class="prettyprint"&gt;$ cat &amp;gt; /tmp/externals.props
blue_goat svn://svnserver/projects/blue_goat/doc
red_bear svn://svnserver/projects/red_bear/doc
yellow_dog svn://svnserver/projects/yellow_dog/doc

&lt;/pre&gt;

&lt;/div&gt;

&lt;p&gt;Next, use this file to set the &lt;code&gt;svn:externals&lt;/code&gt; property on the new
   &lt;code&gt;collected_docs&lt;/code&gt; directory, and check this change in.
&lt;/p&gt;
&lt;div class="typocode"&gt;

&lt;pre class="prettyprint"&gt;$ svn propset svn:externals -F /tmp/externals.props collected_docs
property 'svn:externals' set on 'collected_docs'

$ svn commit -m "Added links to project documentation."
Sending        collected_docs

Committed revision 4567.

&lt;/pre&gt;

&lt;/div&gt;

&lt;p&gt;When we update &lt;code&gt;collected_docs&lt;/code&gt; we get the documentation directories.
&lt;/p&gt;
&lt;div class="typocode"&gt;

&lt;pre class="prettyprint"&gt;$ svn update

Fetching external item into 'collected_docs/blue_goat'
A    collected_docs/blue_goat/user_guide.pdf
Updated external to revision 4567.

Fetching external item into 'collected_docs/red_bear'
A    collected_docs/red_bear/note.txt
A    collected_docs/red_bear/user_guide.pdf
A    collected_docs/red_bear/spec.html
Updated external to revision 4567.

Fetching external item into 'collected_docs/yellow_dog'
A    collected_docs/yellow_dog/user_guide.rst
Updated external to revision 4567.

Updated to revision 4567.

&lt;/pre&gt;

&lt;/div&gt;

&lt;p&gt;As a result, the technical author&amp;#8217;s working copy contains just what&amp;#8217;s needed.
&lt;/p&gt;
&lt;div class="typocode"&gt;

&lt;pre class="prettyprint"&gt;collected_docs
|-- blue_goat/
|   `-- user_guide.pdf
|-- red_bear/
|   |-- note.txt
|   |-- spec.html
|   `-- user_guide.pdf
`-- yellow_dog/
    `-- user_guide.rst

&lt;/pre&gt;

&lt;/div&gt;

&lt;p&gt;Have we forked the documentation by doing this? No &amp;#8212; the externals
   defintions act like soft links, so any changes made in the &lt;code&gt;collected_docs&lt;/code&gt;
   working copy appear in the project directory like they&amp;#8217;re supposed to, and
   vice-versa.
&lt;/p&gt;

&lt;h3&gt;Limitations&lt;/h3&gt;
&lt;p&gt;As you&amp;#8217;ve probably noticed, even though we used an internal external,
   we still had to supply a fully qualified repository URL. Attempts to
   use a relative path will fail (that&amp;#8217;s to say, we can set the property,
   but an attempt to checkout the external fails complaining about an
   &lt;code&gt;Unrecognized URL scheme&lt;/code&gt;). So if we want to use this technique
   to tag and branch subsets of a repository, we&amp;#8217;ll need to write a wrapper
   script.
&lt;/p&gt;
&lt;p&gt;A second limitation is that if someone decides to move one of the
   externals endpoints, again, our &lt;code&gt;collected_docs&lt;/code&gt; fail to check out.
&lt;/p&gt;
&lt;div class="typocode"&gt;

&lt;pre class="prettyprint"&gt;$ svn move svn://svnserver/projects/yellow_dog/doc \
         svn://svnserver/projects/yellow_dog/documentation \
    --message "No abbreviations, please"

$ svn update collected_docs
...
Fetching external item into 'collected_docs/yellow_dog'
svn: Target path does not exist

&lt;/pre&gt;

&lt;/div&gt;</description>
<dc:date>2006-11-23</dc:date>
<guid>http://wordaligned.org/articles/internal-subversion-externals.html</guid>
<author>tag@wordaligned.org (Thomas Guest)</author>
<link>http://wordaligned.org/articles/internal-subversion-externals.html</link>
<category>Subversion</category>
</item>

<item>
<title>Personal overnight builds</title>
<description>&lt;p&gt;Recently I wrote about &lt;a href="http://wordaligned.org/articles/personal-version-control.html"&gt;personal version control&lt;/a&gt; &amp;#8212; my habit of keeping
   personal configuration files, scripts and similar under version
   control.  One of the scripts which I control in this way is my personal
   overnight build script.
&lt;/p&gt;
&lt;span id="continue-reading"/&gt;


&lt;h3&gt;What&amp;#8217;s an overnight build?&lt;/h3&gt;
&lt;p&gt;A well organised software project typically has an overnight build
   which runs on a dedicated machine (or even dedicated machines) and
   does something like:
&lt;/p&gt;
&lt;ol&gt;
 &lt;li&gt;
     performs a clean check out of all the source code
 &lt;/li&gt;

 &lt;li&gt;
     builds everything
 &lt;/li&gt;

 &lt;li&gt;
     tests everything
 &lt;/li&gt;

 &lt;li&gt;
     collates and publishes test results
 &lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Typically, the overnight build is scheduled to run overnight because:
&lt;/p&gt;
&lt;ol&gt;
 &lt;li&gt;
     it takes a while (since &lt;em&gt;everything&lt;/em&gt; means &lt;em&gt;everything&lt;/em&gt; &amp;#8212; release, debug,
   installer, documentation &amp;#8230;)
 &lt;/li&gt;

 &lt;li&gt;
     the source repository may be in a state of flux during the day
 &lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Sometimes, in addition to this overnight build, an incremental build
   runs during the day &amp;#8212; but that&amp;#8217;s another story.
&lt;/p&gt;

&lt;h3&gt;What&amp;#8217;s a personal overnight build?&lt;/h3&gt;
&lt;p&gt;A personal overnight build does something very similar. The only
   essential difference between my overnight build and the scheduled one
   is that I update a working copy rather than perform a clean
   checkout.
&lt;/p&gt;
&lt;p&gt;In essence, the script I run looks like this:
&lt;/p&gt;
&lt;div class="typocode"&gt;&lt;div class="codetitle"&gt;my_build.sh&lt;/div&gt;

&lt;pre class="prettyprint"&gt;#!/bin/sh
# Change to working copy, capture differences, update, build.
cd /home/tag/dev &amp;amp;&amp;amp; svn diff -u &amp;amp;&amp;amp; svn update &amp;amp;&amp;amp; make all

&lt;/pre&gt;

&lt;/div&gt;

&lt;p&gt;I then create a cronjob to run this build at 3 in the morning on weekdays:
&lt;/p&gt;
&lt;div class="typocode"&gt;&lt;div class="codetitle"&gt;cronjob&lt;/div&gt;

&lt;pre class="prettyprint"&gt;0 3 * * 1-5 /home/tag/bin/my_build.sh &amp;gt; /home/tag/build.log 2&amp;gt;&amp;amp;1

&lt;/pre&gt;

&lt;/div&gt;

&lt;p&gt;(Note, incidentally, that I redirect output to a log file, rather than
   have cron email me the results.)
&lt;/p&gt;

&lt;h3&gt;Why bother?&lt;/h3&gt;
&lt;p&gt;Because &lt;span /&gt;I&amp;#8217;m lazy. I found myself performing the same mechanical
   sequence of actions every morning: check what&amp;#8217;s changed, review the
   changes, update, rebuild. A machine could do it for me &amp;ndash; so now a
   machine does do it for me. I start every day up to date.
&lt;/p&gt;
&lt;p&gt;Of course, there&amp;#8217;s no reason why a personal overnight build should
   only run overnight. Once you have the script in place, you can kick it
   off by hand when you go for lunch, or sit down for a planning meeting.
   Equally, there&amp;#8217;s no reason why a personal build should only run on one
   machine. If you&amp;#8217;re developing portable code you should port it all
   the time.
&lt;/p&gt;</description>
<dc:date>2006-10-09</dc:date>
<guid>http://wordaligned.org/articles/personal-overnight-builds.html</guid>
<author>tag@wordaligned.org (Thomas Guest)</author>
<link>http://wordaligned.org/articles/personal-overnight-builds.html</link>
<category>Subversion</category>
</item>

<item>
<title>From CVS to Subversion</title>
<description>&lt;p&gt;&lt;a href="http://wordaligned.org/docs/cvs2svn/index.html"&gt;&amp;#8220;From CVS to Subversion&amp;#8221;&lt;/a&gt; begins:
&lt;/p&gt;
&lt;blockquote&gt;&lt;p&gt;The time had come to upgrade our source control system. As &lt;a href="http://www.nongnu.org/cvs/"&gt;CVS&lt;/a&gt;
   users, the obvious choice was &lt;a href="http://subversion.tigris.org"&gt;Subversion&lt;/a&gt;. This &lt;a href="http://wordaligned.org/docs/cvs2svn/index.html"&gt;article&lt;/a&gt; describes
   how the upgrade went and provides some practical advice for anyone
   considering making a similar move.
&lt;/p&gt;
&lt;/blockquote&gt;&lt;p&gt;The full article is available &lt;a href="http://wordaligned.org/docs/cvs2svn/index.html"&gt;here&lt;/a&gt; or in
   &lt;a href="http://accu.org"&gt;Overload&lt;/a&gt; 75.
&lt;/p&gt;</description>
<dc:date>2006-10-07</dc:date>
<guid>http://wordaligned.org/articles/from-cvs-to-subversion.html</guid>
<author>tag@wordaligned.org (Thomas Guest)</author>
<link>http://wordaligned.org/articles/from-cvs-to-subversion.html</link>
<category>Subversion</category>
</item>

<item>
<title>Pcl-cvs and Psvn Incompatibilities</title>
<description>&lt;p&gt;I think I &lt;a href="http://wordaligned.org/articles/version-control-for-third-party-software.html"&gt;already mentioned&lt;/a&gt;
   that I&amp;#8217;m using both &lt;a href="http://www.nongnu.org/cvs/"&gt;CVS&lt;/a&gt; and
   &lt;a href="http://subversion.tigris.org"&gt;Subversion&lt;/a&gt; now: &lt;a href="http://subversion.tigris.org"&gt;Subversion&lt;/a&gt; at home, &lt;a href="http://www.nongnu.org/cvs/"&gt;CVS&lt;/a&gt; at work. In
   general the similarities between the two make the context switch
   fairly painless, but there&amp;#8217;s one gotcha which keeps on getting me.
&lt;/p&gt;
&lt;p&gt;I use &lt;a href="http://www.cs.utah.edu/dept/old/texinfo/cvs/pcl-cvs_toc.html"&gt;pcl-cvs&lt;/a&gt; as my &lt;a href="http://www.nongnu.org/cvs/"&gt;CVS&lt;/a&gt; client: it&amp;#8217;s not perfect but it&amp;#8217;s more
   than good enough if you&amp;#8217;re prepared to use the &lt;code&gt;cvs&lt;/code&gt; command line
   client every so often for advanced merging and similar. One of the
   routine &lt;a href="http://www.cs.utah.edu/dept/old/texinfo/cvs/pcl-cvs_toc.html"&gt;pcl-cvs&lt;/a&gt; commands I use is &lt;code&gt;U&lt;/code&gt; which &lt;em&gt;undoes&lt;/em&gt; local
   modifications.
&lt;/p&gt;
&lt;p&gt;I use &lt;a href="http://www.xsteve.at/prg/emacs/psvn.el"&gt;psvn&lt;/a&gt; as my &lt;a href="http://subversion.tigris.org"&gt;Subversion&lt;/a&gt; client: it&amp;#8217;s not perfect but it&amp;#8217;s
   more than good enough if you&amp;#8217;re prepared to use the &lt;code&gt;svn&lt;/code&gt; command line
   client every so often for advanced merging and similar. One of the
   routine commands I use is &lt;code&gt;U&lt;/code&gt;, which &lt;em&gt;updates&lt;/em&gt; everything.
&lt;/p&gt;
&lt;p&gt;Ouch! &lt;code&gt;U&lt;/code&gt; means &lt;em&gt;update&lt;/em&gt; in &lt;a href="http://www.xsteve.at/prg/emacs/psvn.el"&gt;psvn&lt;/a&gt; and &lt;em&gt;undo&lt;/em&gt; in &lt;a href="http://www.cs.utah.edu/dept/old/texinfo/cvs/pcl-cvs_toc.html"&gt;pcl-cvs&lt;/a&gt;. For
   once I&amp;#8217;m glad of the confirmation dialog which appears in the status bar:
&lt;/p&gt;
&lt;blockquote&gt;&lt;p&gt;Undo N files? (yes or no)
&lt;/p&gt;
&lt;/blockquote&gt;&lt;p&gt;That&amp;#8217;s a no! I suppose I could hack the elisp &amp;#8230;
&lt;/p&gt;</description>
<dc:date>2006-10-07</dc:date>
<guid>http://wordaligned.org/articles/pcl-cvs-and-psvn-incompatibilities.html</guid>
<author>tag@wordaligned.org (Thomas Guest)</author>
<link>http://wordaligned.org/articles/pcl-cvs-and-psvn-incompatibilities.html</link>
<category>Subversion</category>
</item>

<item>
<title>Subversion 1.4</title>
<description>&lt;p&gt;&lt;a href="http://subversion.tigris.org"&gt;Subversion&lt;/a&gt; 1.4 has been released, and it looks as though the
   upgrade should be entirely painless.
&lt;/p&gt;
&lt;span id="continue-reading"/&gt;


&lt;h3&gt;Working Copy Improvements&lt;/h3&gt;
&lt;p&gt;I did notice that, with &lt;a href="http://subversion.tigris.org"&gt;Subversion&lt;/a&gt; 1.3, it took longer than I&amp;#8217;d
   have liked to check out working copies containing many tens of
   thousands of files; the reason being the number of files created and
   cached in the hidden &lt;code&gt;.svn&lt;/code&gt; directories.
&lt;/p&gt;
&lt;p&gt;The &lt;a href="http://subversion.tigris.org/svn_1.4_releasenotes.html"&gt;release notes&lt;/a&gt; for &lt;a href="http://subversion.tigris.org"&gt;Subversion&lt;/a&gt; 1.4 claim:
&lt;/p&gt;
&lt;blockquote&gt;&lt;p&gt;Huge working-copy performance improvements.
&lt;/p&gt;
&lt;/blockquote&gt;&lt;p&gt;which later gets elaborated on:
&lt;/p&gt;
&lt;blockquote&gt;&lt;p&gt;The new working copy format allows the client to more quickly search
   a working copy, detect file modifications, manage property metadata,
   and deal with large files. The overall disk footprint is smaller as
   well, with fewer inodes being used.
&lt;/p&gt;
&lt;/blockquote&gt;&lt;p&gt;This looks very promising.
&lt;/p&gt;

&lt;h3&gt;Svnsync&lt;/h3&gt;
&lt;p&gt;I also note the apearance of &lt;code&gt;svnsync&lt;/code&gt;, &amp;#8220;a new repository mirroring
   tool&amp;#8221;, which looks as if it will supercede a lot of home-brewed backup
   scripts, as well as making my
   &lt;a href="http://wordaligned.org/articles/how-to-mirror-a-subversion-repository.html"&gt;notes&lt;/a&gt;
   on mirroring a &lt;a href="http://subversion.tigris.org"&gt;Subversion&lt;/a&gt; repository incomplete.
&lt;/p&gt;</description>
<dc:date>2006-09-30</dc:date>
<guid>http://wordaligned.org/articles/subversion-1-4.html</guid>
<author>tag@wordaligned.org (Thomas Guest)</author>
<link>http://wordaligned.org/articles/subversion-1-4.html</link>
<category>Subversion</category>
</item>

</channel>
</rss>
