<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:dc="http://purl.org/dc/elements/1.1/" >
<channel>
<title>Word Aligned</title>
<link>http://wordaligned.org</link>
<description>tales from the code face</description>
<dc:creator>tag@wordaligned.org</dc:creator>
<language>en-gb</language>
<item>
<title>Bike charts by Google</title>
<description>&lt;p&gt;I&amp;#8217;ve liked the &lt;a href="http://code.google.com/apis/chart/"&gt;Google chart API&lt;/a&gt; ever since &lt;a href="http://wordaligned.org/articles/the-maximum-subsequence-problem.html" title="My first charts using the google API"&gt;I first discovered it&lt;/a&gt;. Pack a text definition of an image into a URL &lt;code&gt;http://chart.apis.google.com/chart?YOUR-IMAGE-HERE&lt;/code&gt; and you&amp;#8217;ll be served up a freshly cooked PNG. It&amp;#8217;s free. There&amp;#8217;s not even a watermark.
&lt;/p&gt;
&lt;img width="320px" height="160px" src="http://chart.apis.google.com/chart?chs=320x160&amp;amp;cht=gom&amp;amp;chd=t:70&amp;amp;chl=Nice!" alt="Swing-o-meter, Nice!"/&gt;

&lt;pre&gt;
http://chart.apis.google.com/chart?  # A chart, please
    &amp;chs=320x160                     # sized 320x160 pixels
    &amp;cht=gom                         # of type swin&lt;b&gt;gom&lt;/b&gt;eter
    &amp;chd=t:70                        # with 70% swing
    &amp;chl=Nice!                       # labeled "Nice!"
&lt;/pre&gt;

&lt;p&gt;Gone are the days when the &lt;a href="http://code.google.com/apis/chart/docs/making_charts.html" title="main entry point to the google chart API docs"&gt;documentation&lt;/a&gt; fitted on a single web-page. The API has fattened up and filled out. Every time I visit something new has been added: &lt;a href="http://code.google.com/apis/chart/docs/gallery/formulas.html" title="or should that be formulas?"&gt;mathematical formulae&lt;/a&gt; written in TeX; a &lt;a href="http://code.google.com/apis/chart/docs/chart_playground.html" title="Live chart playground"&gt;playground&lt;/a&gt; where you can sketch a chart directly; a &lt;a href="http://code.google.com/intl/uk/apis/chart/docs/debugging.html"&gt;validation&lt;/a&gt; option which tells you where you went wrong &amp;#8212; much more helpful than a bare 404.
&lt;/p&gt;
&lt;span id="continue-reading"/&gt;

&lt;p&gt;New to me: &lt;a href="http://code.google.com/apis/chart/docs/gallery/dynamic_icons.html" title="dynamic icons - callouts, bubbles, pins, and other graphics"&gt;dynamic icons&lt;/a&gt;, which let you create &amp;#8220;a variety of interesting callouts, pins, or bubbles that mix text and images&amp;#8221;. 
&lt;/p&gt;
&lt;img src="http://chart.apis.google.com/chart?chst=d_fnote&amp;amp;chld=thought|2|993300|h|We+could+have+|fun+with+this!" alt="here's a thought..."/&gt;

&lt;img src="http://chart.apis.google.com/chart?chst=d_bubble_icon_texts_big&amp;amp;chld=bicycle|bb|ffff33|663300|Classic+Tour+Finishes|Let's+make+some+charts+which+depict|classic+stage+finishes+in+the+Tour+de+France" alt="classic cycle charts"/&gt;

&lt;img src="http://chart.apis.google.com/chart?chst=d_bubble_text_small&amp;amp;chld=bbbr|Good+idea,+go+for+it!|ffff33|663300" alt="Go for it!"/&gt;

&lt;p&gt;Mercurial manxman Mark Cavendish won an incredible &lt;strong&gt;6 stages&lt;/strong&gt; of last year&amp;#8217;s Tour. Here he is, becoming the first Briton ever to win the final showdown on the Champs-&amp;Eacute;lys&amp;eacute;es, and winning it by an immense margin. For me, it was a bitter-sweet moment: that sprint should have put Cav in the green jersey, but he&amp;#8217;d thrown away his chance in the points competition earlier in the race with an &lt;a href="http://tag.wordaligned.org/posts/cav-wants-race"&gt;act of petulance&lt;/a&gt; which I still struggle to understand.
&lt;/p&gt;
&lt;img alt="Cavendish, first on the the Champs-&amp;Eacute;lys&amp;eacute;es" src="http://chart.apis.google.com/chart?&amp;amp;cht=lc&amp;amp;chs=540x280&amp;amp;chls=4,3,0&amp;amp;chd=s:ZZZZZZZZZZZZZZZZZZZ&amp;amp;chco=aaaaaa&amp;amp;chm=B,0000ff,0,0:7,0|B,ffffff,0,6:12,0|B,ff0000,0,12:,0,&amp;amp;chem=y;s=simple_text_icon_left;d=,14,000,bicycle,24,000,FFF;of=0,10;dp=15|y;s=simple_text_icon_left;d=,14,000,helicopter,24,000,FFF;of=0,120;dp=11|y;s=simple_text_icon_left;d=,14,000,bicycle,24,000,FFF;of=0,10;dp=10|y;s=simple_text_icon_left;d=,14,000,bicycle,24,000,FFF;of=0,10;dp=9|y;s=simple_text_icon_left;d=,14,000,bicycle,24,000,FFF;of=0,10;dp=range,3,9,.8|y;s=simple_text_icon_left;d=,14,000,civic-building,24,000,FFF;of=0,14;dp=1"/&gt;

&lt;p&gt;The Champs-&amp;Eacute;lys&amp;eacute;es may have a cobbled surface but it&amp;#8217;s level and straight &amp;#8212; definitely one for the sprinters. How about something twisted and mountainous? This second tableau recreates Fabian Cancellara&amp;#8217;s dare-devil descent during stage 7 of last year&amp;#8217;s tour. Defending the maillot jaune, Cancellara got dropped by the peleton following a wheel change. Watch him weave between team cars and camera bikes at top speed to regain his place. &lt;a href="http://www.youtube.com/watch?v=RxXqQqAc2pA" title="Watch Cancellara's descent on YouTube"&gt;Awesome!&lt;/a&gt;
&lt;/p&gt;
&lt;img alt="Cancellara descending" src="http://chart.apis.google.com/chart?cht=lc&amp;amp;chs=540x280&amp;amp;chls=4,3,0&amp;amp;chd=s:zyxwwvuttsrppponmmlkjihgfedcbaZYXVUUUTSRQONNMLKJIHHHGFEEEDCCCCCBBBBB&amp;amp;chco=aaaaaa&amp;amp;chm=B,ffff33,0,0,0&amp;amp;chem=y;s=simple_text_icon_left;d=,14,000,bicycle,24,000,FFF;of=4,8;dp=11|y;s=simple_text_icon_left;d=,14,000,car-dealer,24,000,FFF;of=0,10;dp=range,15,24,4|y;s=simple_text_icon_left;d=,14,000,helicopter,24,000,FFF;of=0,80;dp=16|y;s=simple_text_icon_left;d=,14,000,motorcycle,24,000,FFF;of=0,6;dp=range,7,21,9|y;s=simple_text_icon_left;d=,14,000,bicycle,24,000,FFF;of=4,8;dp=range,45,60,2"/&gt;

&lt;p&gt;Now for a real classic &amp;#8212; when Stephen Roche dug deep during an epic mountain stage in the 1987 Tour. Pedro Delgado, wearing yellow, had built a substantial lead over his rival on the climb up La Plagne. Yet somehow Roche clawed his way back into contention, appearing at the finish line just 5 seconds down on Delgado. He surprised everyone. He collapsed, exhausted, and had to be given oxygen, but he&amp;#8217;d done enough. Roche went on to win the Tour. &lt;a href="http://www.youtube.com/watch?v=sQojh-wqL04" title="Roche at La Plagne, commentary by Phil Liggett"&gt;Formidable!&lt;/a&gt;
&lt;/p&gt;
&lt;img alt="IT'S STEPHEN ROCHE!" src="http://chart.apis.google.com/chart?cht=lc&amp;amp;chs=540x280&amp;amp;chls=4,3,0&amp;amp;chd=s:ACDEHIJKMOQSTUVXYabcdfghjkmnoppqqrssttuu&amp;amp;chco=aaaaaa&amp;amp;chm=B,ffff33,0,0,0&amp;amp;chem=y;s=simple_text_icon_left;d=,14,000,bicycle,24,000,FFF;of=0,10;dp=29|y;s=simple_text_icon_left;d=,14,000,bicycle,24,000,FFF;of=0,12;dp=32|y;s=simple_text_icon_left;d=,14,000,wc-male,24,000,FFF;of=0,16;dp=35|y;s=simple_text_icon_left;d=,14,000,medical,24,000,FFF;of=0,16;dp=37|y;s=bubble_text_small;d=bbbr,that+looks+like+Stephen+Roche....+IT'S+STEPHEN+ROCHE!,ffff00,000000;of=40,230"/&gt;</description>
<dc:date>2010-02-18</dc:date>
<guid>http://wordaligned.org/articles/bike-charts</guid>
<author>tag@wordaligned.org (Thomas Guest)</author>
<link>http://wordaligned.org/articles/bike-charts</link>
<category>Charts</category>
</item>

<item>
<title>Eurovision 2008 charts</title>
<description>&lt;p&gt;Last time I visited the &lt;a href="http://code.google.com/apis/chart/"&gt;Google chart API&lt;/a&gt; I discovered &lt;a href="http://code.google.com/apis/chart/#maps" title="Google chart API, map section"&gt;maps had been added&lt;/a&gt;. Since then I&amp;#8217;ve been itching to use them. &lt;a href="http://www.eurovision.tv/"&gt;Eurovision 2008&lt;/a&gt; got me scratching that itch.
&lt;/p&gt;
&lt;img title="Serbia scored 160 points" src="http://chart.apis.google.com/chart?cht=t&amp;amp;chtm=europe&amp;amp;chld=FRIEISESGBDKDECHBECYNLSETRILGRPTNOFISIBAHREEMKHULVLTMTPLRORUAZUAALADBYBGMDCZAMGEMESMBDWFBFBBBLBMBNBOJPBIBJBTJMBVBWWSBRBSJEBZRWRELULRLSGWGUGTGSGQGPBHGYGGGFGDGAGNGMGLKWGIGHOMJOHTSVHKHNHMPRPSPWKRPYIQSHPFPGPEPKPHPNPMZMEHEGZAECVNSBETZWSAERMGMFMAMCUZMMMLMOMNMHUSUMMWMVMQMPMSMRAUUGMYMXMZAWAFFJFKFMFONINAVUNCNENFNGNZNPNRNUCKCICOCNCMCLCCCALBCGCFCDCXCRCVCUSZSYKGKESRKIKHKNKMSTSKSJKPSOSNSLSCKZKYSGSDDODMDJYEDZUYYTMUTZLCLATVTWTTLKLITNTOTLTMTJTKTHTFTGTDTCLYVAVCAEVEAGVGAIVIIRITAOANAQASARIMATIOINAXIDPAQA&amp;amp;chd=s:jAKAAAo9AZoeAAZAeA99yAyjAAFUjUKAZAFUFePA9AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA&amp;amp;chco=FFCC00,FFFFFF,000066&amp;amp;chf=bg,s,00FFCC&amp;amp;chs=440x220" alt="Votes for Serbia"/&gt;

&lt;span id="continue-reading"/&gt;

&lt;p&gt;As ever the &lt;a href="http://code.google.com/apis/chart/"&gt;API&lt;/a&gt; is a delight to use, if somewhat restricted. You&amp;#8217;re limited to selecting a geographical area from a small set, but happily this set includes Europe. Chart data is supplied as a string of concatenated &lt;a href="http://www.iso.org/iso/country_codes/iso_3166_code_lists/english_country_names_and_code_elements.htm"&gt;ISO 3166-1 alpha-2&lt;/a&gt; country codes (e.g. &amp;#8220;TV&amp;#8221; for &amp;#8220;Tuvalu&amp;#8221;), and the chart value for each data point (i.e. country) maps to a colour gradient. Your palette is limited: water masses get a fill colour; a pair of colours provides the gradient used for countries in the chart data string; and omitted countries get a default colour.
&lt;/p&gt;
&lt;p&gt;To depict &lt;a href="http://www.eurovision.tv/"&gt;Eurovision&lt;/a&gt; results I chose suitably lurid colours. The results for Serbia, who hosted the event in 2008, are shown at the top of this page. Serbia appears in yellowy-orange, and the mauvey-bluey colours show who voted for Serbia &amp;#8212; the darker the shade, the higher the vote&lt;a id="fn1link" href="http://wordaligned.org/articles/eurovision-2008-charts#fn1"&gt;&lt;sup&gt;[1]&lt;/sup&gt;&lt;/a&gt;.
&lt;/p&gt;

&lt;h3&gt;The Maps&lt;/h3&gt;
&lt;p&gt;Here are the maps in order of &lt;a href="http://www.eurovision.tv/page/the-final-2008"&gt;Eurovision 2008 scores&lt;/a&gt;. Hover your mouse over them to see the country and the score. If you&amp;#8217;re wondering why you can&amp;#8217;t see Israel, it&amp;#8217;s because Israel isn&amp;#8217;t in Europe.
&lt;/p&gt;
&lt;p&gt;&lt;img src="http://chart.apis.google.com/chart?cht=t&amp;amp;chtm=europe&amp;amp;chld=FRIEISESGBDKDECHBECYNLSETRILGRPTNOFISIBAHREEMKHULVLTMTPLROAZUAALADBYBGMDCZAMGECSMESMBDWFBFBBBLBMBNBOJPBIBJBTJMBVBWWSBRBSJEBZRWRELULRLSGWGUGTGSGQGPBHGYGGGFGDGAGNGMGLKWGIGHOMJOHTSVHKHNHMPRPSPWKRPYIQSHPFPGPEPKPHPNPMZMEHEGZAECVNSBETZWSAERMGMFMAMCUZMMMLMOMNMHUSUMMWMVMQMPMSMRAUUGMYMXMZAWAFFJFKFMFONINAVUNCNENFNGNZNPNRNUCKCICOCNCMCLCCCALBCGCFCDCXCRCVCUSZSYKGKESRKIKHKNKMSTSKSJKPSOSNSLSCKZKYSGSDDODMDJYEDZUYYTMUTZLCLATVTWTTLKLITNTOTLTMTJTKTHTFTGTDTCLYVAVCAEVEAGVGAIVIIRITAOANAQASARIMATIOINAXIDPAQA&amp;amp;chd=s:FZAZAAjAPoFAZ9jeZyjUe9ey99oeyo9eZ9eyj9oyoAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA&amp;amp;chco=FFCC00,FFFFFF,000066&amp;amp;chf=bg,s,00FFCC&amp;amp;chs=250x125" title="Russia scored 272 points" alt="Votes for Russia"/&gt;
   &lt;img src="http://chart.apis.google.com/chart?cht=t&amp;amp;chtm=europe&amp;amp;chld=FRIEISESGBDKDECHBECYNLSETRILGRPTNOFISIBAHREEMKHULVLTMTPLRORUAZALADBYBGMDCZAMGECSMESMBDWFBFBBBLBMBNBOJPBIBJBTJMBVBWWSBRBSJEBZRWRELULRLSGWGUGTGSGQGPBHGYGGGFGDGAGNGMGLKWGIGHOMJOHTSVHKHNHMPRPSPWKRPYIQSHPFPGPEPKPHPNPMZMEHEGZAECVNSBETZWSAERMGMFMAMCUZMMMLMOMNMHUSUMMWMVMQMPMSMRAUUGMYMXMZAWAFFJFKFMFONINAVUNCNENFNGNZNPNRNUCKCICOCNCMCLCCCALBCGCFCDCXCRCVCUSZSYKGKESRKIKHKNKMSTSKSJKPSOSNSLSCKZKYSGSDDODMDJYEDZUYYTMUTZLCLATVTWTTLKLITNTOTLTMTJTKTHTFTGTDTCLYVAVCAEVEAGVGAIVIIRITAOANAQASARIMATIOINAXIDPAQA&amp;amp;chd=s:AeZjZjAAFeAAoye9APKPjUUeyeyyPoyoeyjjoZyeUAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA&amp;amp;chco=FFCC00,FFFFFF,000066&amp;amp;chf=bg,s,00FFCC&amp;amp;chs=250x125" title="Ukraine scored 230 points" alt="Votes for Ukraine"/&gt;
   &lt;img src="http://chart.apis.google.com/chart?cht=t&amp;amp;chtm=europe&amp;amp;chld=FRIEISESGBDKDECHBECYNLSETRILPTNOFISIBAHREEMKHULVLTMTPLRORUAZUAALADBYBGMDCZAMGECSMESMBDWFBFBBBLBMBNBOJPBIBJBTJMBVBWWSBRBSJEBZRWRELULRLSGWGUGTGSGQGPBHGYGGGFGDGAGNGMGLKWGIGHOMJOHTSVHKHNHMPRPSPWKRPYIQSHPFPGPEPKPHPNPMZMEHEGZAECVNSBETZWSAERMGMFMAMCUZMMMLMOMNMHUSUMMWMVMQMPMSMRAUUGMYMXMZAWAFFJFKFMFONINAVUNCNENFNGNZNPNRNUCKCICOCNCMCLCCCALBCGCFCDCXCRCVCUSZSYKGKESRKIKHKNKMSTSKSJKPSOSNSLSCKZKYSGSDDODMDJYEDZUYYTMUTZLCLATVTWTTLKLITNTOTLTMTJTKTHTFTGTDTCLYVAVCAEVEAGVGAIVIIRITAOANAQASARIMATIOINAXIDPAQA&amp;amp;chd=s:PUAP9P9Zo9eFjZAAAejZFPoAAKP9PeK9oKyUZoUoe9AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA&amp;amp;chco=FFCC00,FFFFFF,000066&amp;amp;chf=bg,s,00FFCC&amp;amp;chs=250x125" title="Greece scored 218 points" alt="Votes for Greece"/&gt;
   &lt;img src="http://chart.apis.google.com/chart?cht=t&amp;amp;chtm=europe&amp;amp;chld=FRIEISESGBDKDECHBECYNLSETRILGRPTNOFISIBAHREEMKHULVLTMTPLRORUAZUAALADBYBGMDCZGECSMESMBDWFBFBBBLBMBNBOJPBIBJBTJMBVBWWSBRBSJEBZRWRELULRLSGWGUGTGSGQGPBHGYGGGFGDGAGNGMGLKWGIGHOMJOHTSVHKHNHMPRPSPWKRPYIQSHPFPGPEPKPHPNPMZMEHEGZAECVNSBETZWSAERMGMFMAMCUZMMMLMOMNMHUSUMMWMVMQMPMSMRAUUGMYMXMZAWAFFJFKFMFONINAVUNCNENFNGNZNPNRNUCKCICOCNCMCLCCCALBCGCFCDCXCRCVCUSZSYKGKESRKIKHKNKMSTSKSJKPSOSNSLSCKZKYSGSDDODMDJYEDZUYYTMUTZLCLATVTWTTLKLITNTOTLTMTJTKTHTFTGTDTCLYVAVCAEVEAGVGAIVIIRITAOANAQASARIMATIOINAXIDPAQA&amp;amp;chd=s:9AFyAAeA9y9Kyo9AAAZeAAFAAAA9U9AjKAjoK99ZFoAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA&amp;amp;chco=FFCC00,FFFFFF,000066&amp;amp;chf=bg,s,00FFCC&amp;amp;chs=250x125" title="Armenia scored 199 points" alt="Votes for Armenia"/&gt;
   &lt;img src="http://chart.apis.google.com/chart?cht=t&amp;amp;chtm=europe&amp;amp;chld=FRIEISESGBDKDECHBECYNLSETRILGRPTFISIBAHREEMKHULVLTMTPLRORUAZUAALADBYBGMDCZAMGECSMESMBDWFBFBBBLBMBNBOJPBIBJBTJMBVBWWSBRBSJEBZRWRELULRLSGWGUGTGSGQGPBHGYGGGFGDGAGNGMGLKWGIGHOMJOHTSVHKHNHMPRPSPWKRPYIQSHPFPGPEPKPHPNPMZMEHEGZAECVNSBETZWSAERMGMFMAMCUZMMMLMOMNMHUSUMMWMVMQMPMSMRAUUGMYMXMZAWAFFJFKFMFONINAVUNCNENFNGNZNPNRNUCKCICOCNCMCLCCCALBCGCFCDCXCRCVCUSZSYKGKESRKIKHKNKMSTSKSJKPSOSNSLSCKZKYSGSDDODMDJYEDZUYYTMUTZLCLATVTWTTLKLITNTOTLTMTJTKTHTFTGTDTCLYVAVCAEVEAGVGAIVIIRITAOANAQASARIMATIOINAXIDPAQA&amp;amp;chd=s:AjyejyAAKAU9KjKK9AKFoAUeUPoZZZejFZFZAjZUAjAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA&amp;amp;chco=FFCC00,FFFFFF,000066&amp;amp;chf=bg,s,00FFCC&amp;amp;chs=250x125" title="Norway scored 182 points" alt="Votes for Norway"/&gt;
   &lt;img src="http://chart.apis.google.com/chart?cht=t&amp;amp;chtm=europe&amp;amp;chld=FRIEISESGBDKDECHBECYNLSETRILGRPTNOFISIBAHREEMKHULVLTMTPLRORUAZUAALADBYBGMDCZAMGEMESMBDWFBFBBBLBMBNBOJPBIBJBTJMBVBWWSBRBSJEBZRWRELULRLSGWGUGTGSGQGPBHGYGGGFGDGAGNGMGLKWGIGHOMJOHTSVHKHNHMPRPSPWKRPYIQSHPFPGPEPKPHPNPMZMEHEGZAECVNSBETZWSAERMGMFMAMCUZMMMLMOMNMHUSUMMWMVMQMPMSMRAUUGMYMXMZAWAFFJFKFMFONINAVUNCNENFNGNZNPNRNUCKCICOCNCMCLCCCALBCGCFCDCXCRCVCUSZSYKGKESRKIKHKNKMSTSKSJKPSOSNSLSCKZKYSGSDDODMDJYEDZUYYTMUTZLCLATVTWTTLKLITNTOTLTMTJTKTHTFTGTDTCLYVAVCAEVEAGVGAIVIIRITAOANAQASARIMATIOINAXIDPAQA&amp;amp;chd=s:jAKAAAo9AZoeAAZAeA99yAyjAAFUjUKAZAFUFePA9AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA&amp;amp;chco=FFCC00,FFFFFF,000066&amp;amp;chf=bg,s,00FFCC&amp;amp;chs=250x125" title="Serbia scored 160 points" alt="Votes for Serbia"/&gt;
   &lt;img src="http://chart.apis.google.com/chart?cht=t&amp;amp;chtm=europe&amp;amp;chld=FRIEISESGBDKDECHBECYNLSEILGRPTNOFISIBAHREEMKHULVLTMTPLRORUAZUAALADBYBGMDCZAMGECSMESMBDWFBFBBBLBMBNBOJPBIBJBTJMBVBWWSBRBSJEBZRWRELULRLSGWGUGTGSGQGPBHGYGGGFGDGAGNGMGLKWGIGHOMJOHTSVHKHNHMPRPSPWKRPYIQSHPFPGPEPKPHPNPMZMEHEGZAECVNSBETZWSAERMGMFMAMCUZMMMLMOMNMHUSUMMWMVMQMPMSMRAUUGMYMXMZAWAFFJFKFMFONINAVUNCNENFNGNZNPNRNUCKCICOCNCMCLCCCALBCGCFCDCXCRCVCUSZSYKGKESRKIKHKNKMSTSKSJKPSOSNSLSCKZKYSGSDDODMDJYEDZUYYTMUTZLCLATVTWTTLKLITNTOTLTMTJTKTHTFTGTDTCLYVAVCAEVEAGVGAIVIIRITAOANAQASARIMATIOINAXIDPAQA&amp;amp;chd=s:yAAAoUyeyAyAAAAKUAoAAjZAAAAoK9UyAPZAAAeAAUAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA&amp;amp;chco=FFCC00,FFFFFF,000066&amp;amp;chf=bg,s,00FFCC&amp;amp;chs=250x125" title="Turkey scored 138 points" alt="Votes for Turkey"/&gt;
   &lt;img src="http://chart.apis.google.com/chart?cht=t&amp;amp;chtm=europe&amp;amp;chld=FRIEISESGBDKDECHBECYNLSETRILGRPTNOFISIBAHREEMKHULVLTMTPLRORUUAALADBYBGMDCZAMGECSMESMBDWFBFBBBLBMBNBOJPBIBJBTJMBVBWWSBRBSJEBZRWRELULRLSGWGUGTGSGQGPBHGYGGGFGDGAGNGMGLKWGIGHOMJOHTSVHKHNHMPRPSPWKRPYIQSHPFPGPEPKPHPNPMZMEHEGZAECVNSBETZWSAERMGMFMAMCUZMMMLMOMNMHUSUMMWMVMQMPMSMRAUUGMYMXMZAWAFFJFKFMFONINAVUNCNENFNGNZNPNRNUCKCICOCNCMCLCCCALBCGCFCDCXCRCVCUSZSYKGKESRKIKHKNKMSTSKSJKPSOSNSLSCKZKYSGSDDODMDJYEDZUYYTMUTZLCLATVTWTTLKLITNTOTLTMTJTKTHTFTGTDTCLYVAVCAEVEAGVGAIVIIRITAOANAQASARIMATIOINAXIDPAQA&amp;amp;chd=s:AAAAAAFAjAKA9PPAAAFAAAo9UjAjKyyAjoPoyAjAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA&amp;amp;chco=FFCC00,FFFFFF,000066&amp;amp;chf=bg,s,00FFCC&amp;amp;chs=250x125" title="Azerbaijan scored 132 points" alt="Votes for Azerbaijan"/&gt;
   &lt;img src="http://chart.apis.google.com/chart?cht=t&amp;amp;chtm=europe&amp;amp;chld=FRIEISESGBDKDECHBECYNLSETRGRPTNOFISIBAHREEMKHULVLTMTPLRORUAZUAALADBYBGMDCZAMGECSMESMBDWFBFBBBLBMBNBOJPBIBJBTJMBVBWWSBRBSJEBZRWRELULRLSGWGUGTGSGQGPBHGYGGGFGDGAGNGMGLKWGIGHOMJOHTSVHKHNHMPRPSPWKRPYIQSHPFPGPEPKPHPNPMZMEHEGZAECVNSBETZWSAERMGMFMAMCUZMMMLMOMNMHUSUMMWMVMQMPMSMRAUUGMYMXMZAWAFFJFKFMFONINAVUNCNENFNGNZNPNRNUCKCICOCNCMCLCCCALBCGCFCDCXCRCVCUSZSYKGKESRKIKHKNKMSTSKSJKPSOSNSLSCKZKYSGSDDODMDJYEDZUYYTMUTZLCLATVTWTTLKLITNTOTLTMTJTKTHTFTGTDTCLYVAVCAEVEAGVGAIVIIRITAOANAQASARIMATIOINAXIDPAQA&amp;amp;chd=s:eAAAAAPFZKPAAFAPoPZKAAPAPAZeejZUAUKeAePjZyAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA&amp;amp;chco=FFCC00,FFFFFF,000066&amp;amp;chf=bg,s,00FFCC&amp;amp;chs=250x125" title="Israel scored 124 points" alt="Votes for Israel"/&gt;
   &lt;img src="http://chart.apis.google.com/chart?cht=t&amp;amp;chtm=europe&amp;amp;chld=FRIEISESGBDKDECHBECYNLSETRILGRPTNOFISIHREEMKHULVLTMTPLRORUAZUAALADBYBGMDCZAMGECSMESMBDWFBFBBBLBMBNBOJPBIBJBTJMBVBWWSBRBSJEBZRWRELULRLSGWGUGTGSGQGPBHGYGGGFGDGAGNGMGLKWGIGHOMJOHTSVHKHNHMPRPSPWKRPYIQSHPFPGPEPKPHPNPMZMEHEGZAECVNSBETZWSAERMGMFMAMCUZMMMLMOMNMHUSUMMWMVMQMPMSMRAUUGMYMXMZAWAFFJFKFMFONINAVUNCNENFNGNZNPNRNUCKCICOCNCMCLCCCALBCGCFCDCXCRCVCUSZSYKGKESRKIKHKNKMSTSKSJKPSOSNSLSCKZKYSGSDDODMDJYEDZUYYTMUTZLCLATVTWTTLKLITNTOTLTMTJTKTHTFTGTDTCLYVAVCAEVEAGVGAIVIIRITAOANAQASARIMATIOINAXIDPAQA&amp;amp;chd=s:KKAAAKZjAAjyeAAAyey9AZAAAAAAAPAAAAAAFAA9yAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA&amp;amp;chco=FFCC00,FFFFFF,000066&amp;amp;chf=bg,s,00FFCC&amp;amp;chs=250x125" title="Bosnia and Herzegovina scored 110 points" alt="Votes for Bosnia and Herzegovina"/&gt;
   &lt;img src="http://chart.apis.google.com/chart?cht=t&amp;amp;chtm=europe&amp;amp;chld=FRIEISESGBDKDECHBECYNLSETRILGRPTNOFISIBAHREEMKHULTMTPLRORUAZUAALADBYBGMDCZAMGECSMESMBDWFBFBBBLBMBNBOJPBIBJBTJMBVBWWSBRBSJEBZRWRELULRLSGWGUGTGSGQGPBHGYGGGFGDGAGNGMGLKWGIGHOMJOHTSVHKHNHMPRPSPWKRPYIQSHPFPGPEPKPHPNPMZMEHEGZAECVNSBETZWSAERMGMFMAMCUZMMMLMOMNMHUSUMMWMVMQMPMSMRAUUGMYMXMZAWAFFJFKFMFONINAVUNCNENFNGNZNPNRNUCKCICOCNCMCLCCCALBCGCFCDCXCRCVCUSZSYKGKESRKIKHKNKMSTSKSJKPSOSNSLSCKZKYSGSDDODMDJYEDZUYYTMUTZLCLATVTWTTLKLITNTOTLTMTJTKTHTFTGTDTCLYVAVCAEVEAGVGAIVIIRITAOANAQASARIMATIOINAXIDPAQA&amp;amp;chd=s:A9UKyeAAAAAPAAAoAAAAUjAAyjAAAAAAKAAAPAKAPAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA&amp;amp;chco=FFCC00,FFFFFF,000066&amp;amp;chf=bg,s,00FFCC&amp;amp;chs=250x125" title="Latvia scored 83 points" alt="Votes for Latvia"/&gt;
   &lt;img src="http://chart.apis.google.com/chart?cht=t&amp;amp;chtm=europe&amp;amp;chld=FRIEISESGBDKDECHBECYNLSETRILGRPTNOFISIBAHREEMKHULVLTMTPLRORUAZUAALADBYBGMDCZAMCSMESMBDWFBFBBBLBMBNBOJPBIBJBTJMBVBWWSBRBSJEBZRWRELULRLSGWGUGTGSGQGPBHGYGGGFGDGAGNGMGLKWGIGHOMJOHTSVHKHNHMPRPSPWKRPYIQSHPFPGPEPKPHPNPMZMEHEGZAECVNSBETZWSAERMGMFMAMCUZMMMLMOMNMHUSUMMWMVMQMPMSMRAUUGMYMXMZAWAFFJFKFMFONINAVUNCNENFNGNZNPNRNUCKCICOCNCMCLCCCALBCGCFCDCXCRCVCUSZSYKGKESRKIKHKNKMSTSKSJKPSOSNSLSCKZKYSGSDDODMDJYEDZUYYTMUTZLCLATVTWTTLKLITNTOTLTMTJTKTHTFTGTDTCLYVAVCAEVEAGVGAIVIIRITAOANAQASARIMATIOINAXIDPAQA&amp;amp;chd=s:AAAAAAAAAjAAUKUFAAAAAZAAoZZAAjUoAAeAPUyAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA&amp;amp;chco=FFCC00,FFFFFF,000066&amp;amp;chf=bg,s,00FFCC&amp;amp;chs=250x125" title="Georgia scored 83 points" alt="Votes for Georgia"/&gt;
   &lt;img src="http://chart.apis.google.com/chart?cht=t&amp;amp;chtm=europe&amp;amp;chld=FRIEISESGBDKDECHBECYNLSETRILGRNOFISIBAHREEMKHULVLTMTPLRORUAZUAALADBYBGMDCZAMGECSMESMBDWFBFBBBLBMBNBOJPBIBJBTJMBVBWWSBRBSJEBZRWRELULRLSGWGUGTGSGQGPBHGYGGGFGDGAGNGMGLKWGIGHOMJOHTSVHKHNHMPRPSPWKRPYIQSHPFPGPEPKPHPNPMZMEHEGZAECVNSBETZWSAERMGMFMAMCUZMMMLMOMNMHUSUMMWMVMQMPMSMRAUUGMYMXMZAWAFFJFKFMFONINAVUNCNENFNGNZNPNRNUCKCICOCNCMCLCCCALBCGCFCDCXCRCVCUSZSYKGKESRKIKHKNKMSTSKSJKPSOSNSLSCKZKYSGSDDODMDJYEDZUYYTMUTZLCLATVTWTTLKLITNTOTLTMTJTKTHTFTGTDTCLYVAVCAEVEAGVGAIVIIRITAOANAQASARIMATIOINAXIDPAQA&amp;amp;chd=s:oAeoAAUyeAZAAAAAAAAPAAAAAAAAAAPAyAAAAAAFAZAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA&amp;amp;chco=FFCC00,FFFFFF,000066&amp;amp;chf=bg,s,00FFCC&amp;amp;chs=250x125" title="Portugal scored 69 points" alt="Votes for Portugal"/&gt;
   &lt;img src="http://chart.apis.google.com/chart?cht=t&amp;amp;chtm=europe&amp;amp;chld=FRIEESGBDKDECHBECYNLSETRILGRPTNOFISIBAHREEMKHULVLTMTPLRORUAZUAALADBYBGMDCZAMGECSMESMBDWFBFBBBLBMBNBOJPBIBJBTJMBVBWWSBRBSJEBZRWRELULRLSGWGUGTGSGQGPBHGYGGGFGDGAGNGMGLKWGIGHOMJOHTSVHKHNHMPRPSPWKRPYIQSHPFPGPEPKPHPNPMZMEHEGZAECVNSBETZWSAERMGMFMAMCUZMMMLMOMNMHUSUMMWMVMQMPMSMRAUUGMYMXMZAWAFFJFKFMFONINAVUNCNENFNGNZNPNRNUCKCICOCNCMCLCCCALBCGCFCDCXCRCVCUSZSYKGKESRKIKHKNKMSTSKSJKPSOSNSLSCKZKYSGSDDODMDJYEDZUYYTMUTZLCLATVTWTTLKLITNTOTLTMTJTKTHTFTGTDTCLYVAVCAEVEAGVGAIVIIRITAOANAQASARIMATIOINAXIDPAQA&amp;amp;chd=s:AAUe9AAAAAoAUAjojAAAAAAKAeAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA&amp;amp;chco=FFCC00,FFFFFF,000066&amp;amp;chf=bg,s,00FFCC&amp;amp;chs=250x125" title="Iceland scored 64 points" alt="Votes for Iceland"/&gt;
   &lt;img src="http://chart.apis.google.com/chart?cht=t&amp;amp;chtm=europe&amp;amp;chld=FRIEISESGBDECHBECYNLSETRILGRPTNOFISIBAHREEMKHULVLTMTPLRORUAZUAALADBYBGMDCZAMGECSMESMBDWFBFBBBLBMBNBOJPBIBJBTJMBVBWWSBRBSJEBZRWRELULRLSGWGUGTGSGQGPBHGYGGGFGDGAGNGMGLKWGIGHOMJOHTSVHKHNHMPRPSPWKRPYIQSHPFPGPEPKPHPNPMZMEHEGZAECVNSBETZWSAERMGMFMAMCUZMMMLMOMNMHUSUMMWMVMQMPMSMRAUUGMYMXMZAWAFFJFKFMFONINAVUNCNENFNGNZNPNRNUCKCICOCNCMCLCCCALBCGCFCDCXCRCVCUSZSYKGKESRKIKHKNKMSTSKSJKPSOSNSLSCKZKYSGSDDODMDJYEDZUYYTMUTZLCLATVTWTTLKLITNTOTLTMTJTKTHTFTGTDTCLYVAVCAEVEAGVGAIVIIRITAOANAQASARIMATIOINAXIDPAQA&amp;amp;chd=s:AF9APAAAAAZAAAZ9AAAAPAKjKUAAAAAAAAAAKAAAAKAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA&amp;amp;chco=FFCC00,FFFFFF,000066&amp;amp;chf=bg,s,00FFCC&amp;amp;chs=250x125" title="Denmark scored 60 points" alt="Votes for Denmark"/&gt;
   &lt;img src="http://chart.apis.google.com/chart?cht=t&amp;amp;chtm=europe&amp;amp;chld=FRIEISESGBDKDECHBECYNLSETRILGRPTNOFISIBAHREEMKHULVLTMTPLRORUAZUAADBYBGMDCZAMGECSMESMBDWFBFBBBLBMBNBOJPBIBJBTJMBVBWWSBRBSJEBZRWRELULRLSGWGUGTGSGQGPBHGYGGGFGDGAGNGMGLKWGIGHOMJOHTSVHKHNHMPRPSPWKRPYIQSHPFPGPEPKPHPNPMZMEHEGZAECVNSBETZWSAERMGMFMAMCUZMMMLMOMNMHUSUMMWMVMQMPMSMRAUUGMYMXMZAWAFFJFKFMFONINAVUNCNENFNGNZNPNRNUCKCICOCNCMCLCCCALBCGCFCDCXCRCVCUSZSYKGKESRKIKHKNKMSTSKSJKPSOSNSLSCKZKYSGSDDODMDJYEDZUYYTMUTZLCLATVTWTTLKLITNTOTLTMTJTKTHTFTGTDTCLYVAVCAEVEAGVGAIVIIRITAOANAQASARIMATIOINAXIDPAQA&amp;amp;chd=s:AAAAAAAoAAAAFAyAAAUFoA9AAAAAAAFAAAAAAAAAjPAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA&amp;amp;chco=FFCC00,FFFFFF,000066&amp;amp;chf=bg,s,00FFCC&amp;amp;chs=250x125" title="Albania scored 55 points" alt="Votes for Albania"/&gt;
   &lt;img src="http://chart.apis.google.com/chart?cht=t&amp;amp;chtm=europe&amp;amp;chld=FRIEISGBDKDECHBECYNLSETRILGRPTNOFISIBAHREEMKHULVLTMTPLRORUAZUAALADBYBGMDCZAMGECSMESMBDWFBFBBBLBMBNBOJPBIBJBTJMBVBWWSBRBSJEBZRWRELULRLSGWGUGTGSGQGPBHGYGGGFGDGAGNGMGLKWGIGHOMJOHTSVHKHNHMPRPSPWKRPYIQSHPFPGPEPKPHPNPMZMEHEGZAECVNSBETZWSAERMGMFMAMCUZMMMLMOMNMHUSUMMWMVMQMPMSMRAUUGMYMXMZAWAFFJFKFMFONINAVUNCNENFNGNZNPNRNUCKCICOCNCMCLCCCALBCGCFCDCXCRCVCUSZSYKGKESRKIKHKNKMSTSKSJKPSOSNSLSCKZKYSGSDDODMDJYEDZUYYTMUTZLCLATVTWTTLKLITNTOTLTMTJTKTHTFTGTDTCLYVAVCAEVEAGVGAIVIIRITAOANAQASARIMATIOINAXIDPAQA&amp;amp;chd=s:ZAAFFAUUUAAPAoyAFAAAAAAAAAAAAAAF9AAAAFAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA&amp;amp;chco=FFCC00,FFFFFF,000066&amp;amp;chf=bg,s,00FFCC&amp;amp;chs=250x125" title="Spain scored 55 points" alt="Votes for Spain"/&gt;
   &lt;img src="http://chart.apis.google.com/chart?cht=t&amp;amp;chtm=europe&amp;amp;chld=FRIEISESGBDKDECHBECYNLTRILGRPTNOFISIBAHREEMKHULVLTMTPLRORUAZUAALADBYBGMDCZAMGECSMESMBDWFBFBBBLBMBNBOJPBIBJBTJMBVBWWSBRBSJEBZRWRELULRLSGWGUGTGSGQGPBHGYGGGFGDGAGNGMGLKWGIGHOMJOHTSVHKHNHMPRPSPWKRPYIQSHPFPGPEPKPHPNPMZMEHEGZAECVNSBETZWSAERMGMFMAMCUZMMMLMOMNMHUSUMMWMVMQMPMSMRAUUGMYMXMZAWAFFJFKFMFONINAVUNCNENFNGNZNPNRNUCKCICOCNCMCLCCCALBCGCFCDCXCRCVCUSZSYKGKESRKIKHKNKMSTSKSJKPSOSNSLSCKZKYSGSDDODMDJYEDZUYYTMUTZLCLATVTWTTLKLITNTOTLTMTJTKTHTFTGTDTCLYVAVCAEVEAGVGAIVIIRITAOANAQASARIMATIOINAXIDPAQA&amp;amp;chd=s:AAPFAoAAAFAAFAAjZAAAKAFAF9AAAAAPAAAAAAAKAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA&amp;amp;chco=FFCC00,FFFFFF,000066&amp;amp;chf=bg,s,00FFCC&amp;amp;chs=250x125" title="Sweden scored 47 points" alt="Votes for Sweden"/&gt;
   &lt;img src="http://chart.apis.google.com/chart?cht=t&amp;amp;chtm=europe&amp;amp;chld=IEISESGBDKDECHBECYNLSETRILGRPTNOFISIBAHREEMKHULVLTMTPLRORUAZUAALADBYBGMDCZAMGECSMESMBDWFBFBBBLBMBNBOJPBIBJBTJMBVBWWSBRBSJEBZRWRELULRLSGWGUGTGSGQGPBHGYGGGFGDGAGNGMGLKWGIGHOMJOHTSVHKHNHMPRPSPWKRPYIQSHPFPGPEPKPHPNPMZMEHEGZAECVNSBETZWSAERMGMFMAMCUZMMMLMOMNMHUSUMMWMVMQMPMSMRAUUGMYMXMZAWAFFJFKFMFONINAVUNCNENFNGNZNPNRNUCKCICOCNCMCLCCCALBCGCFCDCXCRCVCUSZSYKGKESRKIKHKNKMSTSKSJKPSOSNSLSCKZKYSGSDDODMDJYEDZUYYTMUTZLCLATVTWTTLKLITNTOTLTMTJTKTHTFTGTDTCLYVAVCAEVEAGVGAIVIIRITAOANAQASARIMATIOINAXIDPAQA&amp;amp;chd=s:AoAKZAAAAAUAAAAFKAAAeAAPoAFAAAAAPAAAAUAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA&amp;amp;chco=FFCC00,FFFFFF,000066&amp;amp;chf=bg,s,00FFCC&amp;amp;chs=250x125" title="France scored 47 points" alt="Votes for France"/&gt;
   &lt;img src="http://chart.apis.google.com/chart?cht=t&amp;amp;chtm=europe&amp;amp;chld=FRIEISESGBDKDECHBECYNLSETRILGRPTNOFISIBAHREEMKHULVLTMTPLRUAZUAALADBYBGMDCZAMGECSMESMBDWFBFBBBLBMBNBOJPBIBJBTJMBVBWWSBRBSJEBZRWRELULRLSGWGUGTGSGQGPBHGYGGGFGDGAGNGMGLKWGIGHOMJOHTSVHKHNHMPRPSPWKRPYIQSHPFPGPEPKPHPNPMZMEHEGZAECVNSBETZWSAERMGMFMAMCUZMMMLMOMNMHUSUMMWMVMQMPMSMRAUUGMYMXMZAWAFFJFKFMFONINAVUNCNENFNGNZNPNRNUCKCICOCNCMCLCCCALBCGCFCDCXCRCVCUSZSYKGKESRKIKHKNKMSTSKSJKPSOSNSLSCKZKYSGSDDODMDJYEDZUYYTMUTZLCLATVTWTTLKLITNTOTLTMTJTKTHTFTGTDTCLYVAVCAEVEAGVGAIVIIRITAOANAQASARIMATIOINAXIDPAQA&amp;amp;chd=s:UPA9AAAAAPAAAeAUAAAAAAAAAAAAAAAAAAA9AAAAAFAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA&amp;amp;chco=FFCC00,FFFFFF,000066&amp;amp;chf=bg,s,00FFCC&amp;amp;chs=250x125" title="Romania scored 45 points" alt="Votes for Romania"/&gt;
   &lt;img src="http://chart.apis.google.com/chart?cht=t&amp;amp;chtm=europe&amp;amp;chld=FRIEISESGBDKDECHBECYNLSETRILGRPTNOFISIBAEEMKHULVLTMTPLRORUAZUAALADBYBGMDCZAMGECSMESMBDWFBFBBBLBMBNBOJPBIBJBTJMBVBWWSBRBSJEBZRWRELULRLSGWGUGTGSGQGPBHGYGGGFGDGAGNGMGLKWGIGHOMJOHTSVHKHNHMPRPSPWKRPYIQSHPFPGPEPKPHPNPMZMEHEGZAECVNSBETZWSAERMGMFMAMCUZMMMLMOMNMHUSUMMWMVMQMPMSMRAUUGMYMXMZAWAFFJFKFMFONINAVUNCNENFNGNZNPNRNUCKCICOCNCMCLCCCALBCGCFCDCXCRCVCUSZSYKGKESRKIKHKNKMSTSKSJKPSOSNSLSCKZKYSGSDDODMDJYEDZUYYTMUTZLCLATVTWTTLKLITNTOTLTMTJTKTHTFTGTDTCLYVAVCAEVEAGVGAIVIIRITAOANAQASARIMATIOINAXIDPAQA&amp;amp;chd=s:AAAAAAKPAAAAAAAPAAoyAKAZAAAFFAFAAAAAAKFPKAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA&amp;amp;chco=FFCC00,FFFFFF,000066&amp;amp;chf=bg,s,00FFCC&amp;amp;chs=250x125" title="Croatia scored 44 points" alt="Votes for Croatia"/&gt;
   &lt;img src="http://chart.apis.google.com/chart?cht=t&amp;amp;chtm=europe&amp;amp;chld=FRIEISESGBDKDECHBECYNLSETRILGRPTNOSIBAHREEMKHULVLTMTPLRORUAZUAALADBYBGMDCZAMGECSMESMBDWFBFBBBLBMBNBOJPBIBJBTJMBVBWWSBRBSJEBZRWRELULRLSGWGUGTGSGQGPBHGYGGGFGDGAGNGMGLKWGIGHOMJOHTSVHKHNHMPRPSPWKRPYIQSHPFPGPEPKPHPNPMZMEHEGZAECVNSBETZWSAERMGMFMAMCUZMMMLMOMNMHUSUMMWMVMQMPMSMRAUUGMYMXMZAWAFFJFKFMFONINAVUNCNENFNGNZNPNRNUCKCICOCNCMCLCCCALBCGCFCDCXCRCVCUSZSYKGKESRKIKHKNKMSTSKSJKPSOSNSLSCKZKYSGSDDODMDJYEDZUYYTMUTZLCLATVTWTTLKLITNTOTLTMTJTKTHTFTGTDTCLYVAVCAEVEAGVGAIVIIRITAOANAQASARIMATIOINAXIDPAQA&amp;amp;chd=s:AAjAAAAAAAAjAAAAUAAAyAAFAAKAAAAAUAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA&amp;amp;chco=FFCC00,FFFFFF,000066&amp;amp;chf=bg,s,00FFCC&amp;amp;chs=250x125" title="Finland scored 35 points" alt="Votes for Finland"/&gt;
   &lt;img src="http://chart.apis.google.com/chart?cht=t&amp;amp;chtm=europe&amp;amp;chld=FRIEISESDKDECHBECYNLSETRILGRPTNOFISIBAHREEMKHULVLTMTPLRORUAZUAALADBYBGMDCZAMGECSMESMBDWFBFBBBLBMBNBOJPBIBJBTJMBVBWWSBRBSJEBZRWRELULRLSGWGUGTGSGQGPBHGYGGGFGDGAGNGMGLKWGIGHOMJOHTSVHKHNHMPRPSPWKRPYIQSHPFPGPEPKPHPNPMZMEHEGZAECVNSBETZWSAERMGMFMAMCUZMMMLMOMNMHUSUMMWMVMQMPMSMRAUUGMYMXMZAWAFFJFKFMFONINAVUNCNENFNGNZNPNRNUCKCICOCNCMCLCCCALBCGCFCDCXCRCVCUSZSYKGKESRKIKHKNKMSTSKSJKPSOSNSLSCKZKYSGSDDODMDJYEDZUYYTMUTZLCLATVTWTTLKLITNTOTLTMTJTKTHTFTGTDTCLYVAVCAEVEAGVGAIVIIRITAOANAQASARIMATIOINAXIDPAQA&amp;amp;chd=s:AoAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAeAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA&amp;amp;chco=FFCC00,FFFFFF,000066&amp;amp;chf=bg,s,00FFCC&amp;amp;chs=250x125" title="United Kingdom scored 14 points" alt="Votes for United Kingdom"/&gt;
   &lt;img src="http://chart.apis.google.com/chart?cht=t&amp;amp;chtm=europe&amp;amp;chld=FRIEISESGBDKCHBECYNLSETRILGRPTNOFISIBAHREEMKHULVLTMTPLRORUAZUAALADBYBGMDCZAMGECSMESMBDWFBFBBBLBMBNBOJPBIBJBTJMBVBWWSBRBSJEBZRWRELULRLSGWGUGTGSGQGPBHGYGGGFGDGAGNGMGLKWGIGHOMJOHTSVHKHNHMPRPSPWKRPYIQSHPFPGPEPKPHPNPMZMEHEGZAECVNSBETZWSAERMGMFMAMCUZMMMLMOMNMHUSUMMWMVMQMPMSMRAUUGMYMXMZAWAFFJFKFMFONINAVUNCNENFNGNZNPNRNUCKCICOCNCMCLCCCALBCGCFCDCXCRCVCUSZSYKGKESRKIKHKNKMSTSKSJKPSOSNSLSCKZKYSGSDDODMDJYEDZUYYTMUTZLCLATVTWTTLKLITNTOTLTMTJTKTHTFTGTDTCLYVAVCAEVEAGVGAIVIIRITAOANAQASARIMATIOINAXIDPAQA&amp;amp;chd=s:AAAAAAKAAAAAAAAAAAAAAAAAAAAAAAAAAA9AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA&amp;amp;chco=FFCC00,FFFFFF,000066&amp;amp;chf=bg,s,00FFCC&amp;amp;chs=250x125" title="Germany scored 14 points" alt="Votes for Germany"/&gt;
   &lt;img src="http://chart.apis.google.com/chart?cht=t&amp;amp;chtm=europe&amp;amp;chld=FRIEISESGBDKDECHBECYNLSETRILGRPTNOFISIBAHREEMKHULVLTMTRORUAZUAALADBYBGMDCZAMGECSMESMBDWFBFBBBLBMBNBOJPBIBJBTJMBVBWWSBRBSJEBZRWRELULRLSGWGUGTGSGQGPBHGYGGGFGDGAGNGMGLKWGIGHOMJOHTSVHKHNHMPRPSPWKRPYIQSHPFPGPEPKPHPNPMZMEHEGZAECVNSBETZWSAERMGMFMAMCUZMMMLMOMNMHUSUMMWMVMQMPMSMRAUUGMYMXMZAWAFFJFKFMFONINAVUNCNENFNGNZNPNRNUCKCICOCNCMCLCCCALBCGCFCDCXCRCVCUSZSYKGKESRKIKHKNKMSTSKSJKPSOSNSLSCKZKYSGSDDODMDJYEDZUYYTMUTZLCLATVTWTTLKLITNTOTLTMTJTKTHTFTGTDTCLYVAVCAEVEAGVGAIVIIRITAOANAQASARIMATIOINAXIDPAQA&amp;amp;chd=s:AyAAUAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA&amp;amp;chco=FFCC00,FFFFFF,000066&amp;amp;chf=bg,s,00FFCC&amp;amp;chs=250x125" title="Poland scored 14 points" alt="Votes for Poland"/&gt;
&lt;/p&gt;

&lt;h3&gt;The Script&lt;/h3&gt;
&lt;p&gt;Here&amp;#8217;s the script I used to generate the pictures. It&amp;#8217;s hacky, sub-optimal and packed with workarounds to get the job done. As &lt;a href="http://blog.plover.com/prog/perl/lines.html"&gt;Mark Dominus&lt;/a&gt; puts it:
&lt;/p&gt;
&lt;blockquote&gt;&lt;p&gt;Not everything we do is a brilliant, diamond-like jewel, polished to a luminous gloss with pages torn from one of Donald Knuth&amp;#8217;s books.
&lt;/p&gt;
&lt;/blockquote&gt;&lt;p&gt;I do think the code also shows how adept Python is at working with XML (XHTML in this case) and text processing, and why every programmer should know at least one scripting language.
&lt;/p&gt;
&lt;p&gt;As input it needs:
&lt;/p&gt;
&lt;ul&gt;
 &lt;li&gt;
     the Wikipedia Eurovision 2008 &lt;a href="http://en.wikipedia.org/wiki/Eurovision_Song_Contest_2008"&gt;page&lt;/a&gt;
 &lt;/li&gt;

 &lt;li&gt;
     the official list of &lt;a href="http://www.iso.org/iso/list-en1-semic-2.txt"&gt;ISO-3166 alpha-2 codes&lt;/a&gt;
 &lt;/li&gt;
&lt;/ul&gt;
&lt;div class="typocode"&gt;&lt;div class="codetitle"&gt;Eurovision charts&lt;/div&gt;

&lt;pre class="prettyprint"&gt;'''Generate Eurovision charts using Google chart API.

Method:
* get a mapping between country names and country codes
* find the final results table in the Wikipedia Eurovision page
* extract voting information from this table
* munge all this information into google chart URLs
'''
import string
import xml.dom

def internal_co_name(co_name):
    '''Convert a country name into a form used internally.
    
    We remove punctuation and convert to uppercase. This helps map
    between the official country names and the less standard ones used
    on the Wikipedia page.
    '''
    ascii = string.ascii_letters
    return ''.join(c.upper() for c in co_name if c in ascii)

def country_codes_dict(iso_3166_fp):
    '''Return a dict mapping country names to 3166-1-alpha-2 codes.
    
    We get these from the ISO website in a ISO-8859 encoded text file
    which contains a header followed by records of the form
    AFGHANISTAN;AF
    '''
    import re
    import codecs
    ccode_match = re.compile(r"^([^;]+);(\w\w)", re.UNICODE).match
    lines = codecs.iterdecode(iso_3166_fp, "iso-8859-1")
    co_codes = dict((internal_co_name(m.group(1)), m.group(2))
                    for m in map(ccode_match, lines) if m)
    # Add some shortened forms
    co_codes.update(dict(MACEDONIA="MK", BOSNIA="BA", RUSSIA="RU", MOLDOVA="MD"))
    # Hack! Serbia should be SR but, as at 2008-05-28, the google
    # chart api seems to want the country code for the former Serbian
    # and Montenegro.  This line can be removed once the chart api
    # matches its documentation.
    co_codes["SERBIA"] = "CS"
    return co_codes

def tree_walk(node):
    '''Recursively walk the nodes in a tree.'''
    yield node
    for node1 in node.childNodes:
        for node2 in tree_walk(node1):
            yield node2

def tree_find(root, pred):
    '''Return the first node for which the predicate holds, or None.''' 
    for node in tree_walk(root):
        if pred(node):
            return node

def next_sibling_find(node, pred):
    '''Return the first next-sibling node for which the predicate holds.'''
    while node.nextSibling:
        node = node.nextSibling
        if pred(node):
            return node

def children(node, name):
    '''Return (tag-)named child elements of a node.'''
    return node.getElementsByTagName(name)

def is_text(node):
    return node.nodeType == xml.dom.Node.TEXT_NODE

def is_element(node):
    return node.nodeType == xml.dom.Node.ELEMENT_NODE

def text(node):
    '''Return text from a node of the general form &amp;lt;td&amp;gt;&amp;lt;b&amp;gt;12&amp;lt;/b&amp;gt;&amp;lt;/td&amp;gt; or &amp;lt;td&amp;gt;0&amp;lt;/td&amp;gt;'''
    while not is_text(node) and node.childNodes:
        node = node.childNodes[0]
    return node.data if is_text(node) else None

def country_votes(tr):
    '''Convert a row from the results table.
    
    Returns country name, score and votes for that country.
    '''
    td = children(tr, 'td')
    co_name, score = text(td[0]), int(text(td[1]))
    votes = [int(text(cell)) for cell in td[2:] if text(cell)]
    return co_name, score, votes

def results(wiki_table, co_code_dict):
    '''Extract the results from the Wikipedia results table.
    
    Returns the column headings country codes and a list of votes.
    '''
    import operator
    second = operator.itemgetter(1)
    trs = children(wiki_table, 'tr')
    ths = children(trs[1], 'th')[1:]
    # The title of each column header 'a' element looks like "ESCFranceJ.svg"
    # The [3:-5] slice converts this to "France", and we then look up
    # the 3166 alpha-2 code
    ICN = internal_co_name
    cols = [co_code_dict[ICN(children(th, 'a')[0].getAttribute('title')[3:-5])]
            for th in ths]
    votes = sorted((country_votes(tr) for tr in trs[2:]), 
                   key=second, reverse=True)
    return cols, votes

def results_table(wiki_page):
    '''Return the results table from the Wikipedia Eurovision results.
    
    By inspection, this is the first table after the "Final_2" node.
    '''
    import xml.dom.minidom
    def final_2(n):
        return is_element(n) and n.getAttribute('id') == 'Final_2'
    def htm_table(n):
        return is_element(n) and n.tagName == 'table'
    doc = xml.dom.minidom.parse(wiki_page)
    node = tree_find(children(doc, 'body')[0], final_2)
    return next_sibling_find(node.parentNode, htm_table)

def eurovision_vote_map(co_name, co_codes, scores, hi_score, missing):
    '''Return the URL of a map showing Eurovision votes for a country.
    '''
    # Use simple text encoding
    simple = string.uppercase + string.lowercase + string.digits
    simple_hi_ix = len(simple) - 1
    mapurl = (
        'http://chart.apis.google.com/chart?'
        'cht=t&amp;amp;chtm=europe&amp;amp;'  # Map of Europe
        'chld=%(countries)s&amp;amp;' # String of country codes
        'chd=s:%(values)s&amp;amp;'   # Values for these countries, simple encoding
        'chco=%(def_colour)s,%(lo_colour)s,%(hi_colour)s&amp;amp;'
        'chf=bg,s,%(sea_colour)s&amp;amp;'
        'chs=%(width)dx%(height)d')
    # Use a hack here to highlight the country being voted for.  Don't
    # include this country in the chart data, then it will get the
    # default colour. Assign all missing entries and zero scoring
    # entries the 'lo_colour'.
    omit = internal_co_name(co_name)
    values = ''.join(simple[simple_hi_ix * score // hi_score] for
                     score in scores) + 'A' * (len(missing)//2)
    countries = ''.join(c for c in co_codes if c != omit) + missing
    width, height = 250, 125 # The maximum map size is 440, 220
    def_colour, sea_colour = 'FFCC00', '00FFCC'
    lo_colour, hi_colour = 'FFFFFF', '000066'  
    return mapurl % locals()

def get_map_urls(wiki_results_fp, ccodes_fp):
    '''Return the URLs for Eurovision results charts, ordered by score.
    '''
    wiki_table = results_table(wiki_results_fp)
    co_codes = country_codes_dict(ccodes_fp)
    cols, votes = results(wiki_table, co_codes)
    # We only really need the countries which 1) weren't part of
    # Eurovision and 2) which appear in the Google chart of Europe, but
    # I don't have a definitive list of these. So just treat every
    # country in the world not in Eurovision as missing.
    missing = ''.join(set(co_codes.values()) - set(cols))
    hi_score = max(v for _, _, vv  in votes for v in vv)
    return "\n".join(eurovision_vote_map(co_name, cols, vv, hi_score, missing)
                    for co_name, score, vv in votes)

if __name__ == '__main__':
    # Download from: 
    # http://en.wikipedia.org/wiki/Eurovision_Song_Contest_2008
    # http://www.iso.org/iso/list-en1-semic-2.txt
    # (or use urllib.urlopen on these urls).
    print get_map_urls(open('Eurovision_Song_Contest_2008'),
                       open('list-en1-semic-2.txt'))

&lt;/pre&gt;

&lt;/div&gt;


&lt;h3&gt;Serbia and Montenegro?&lt;/h3&gt;
&lt;p&gt;My program produced bizarre output at first: something was wrong with Serbia, and I assumed I&amp;#8217;d made an &lt;a href="http://wordaligned.org/articles/joined-output-and-the-fencepost-problem.html"&gt;off-by-one error&lt;/a&gt;. As I write this (2008-05-29) there &lt;a href="http://groups.google.com/group/google-chart-api/browse_thread/thread/2e821469f810241e"&gt;seems to be a problem&lt;/a&gt; with the way the google chart API handles the country code for Serbia, &amp;#8220;RS&amp;#8221;. That&amp;#8217;s why I&amp;#8217;ve substituted &amp;#8220;CS&amp;#8221;, the old code for Serbia and Montenegro &amp;#8212; a country which ceased to exist in 2006. I&amp;#8217;ll have to adjust the code as the situation (&lt;a href="http://www.google.co.uk/search?q=3166+serbia+and+montenegro"&gt;both politically and googley&lt;/a&gt;) develops, since the maps which appear on this page are served live by google.
&lt;/p&gt;

&lt;h3&gt;Terry Wogan&lt;/h3&gt;
&lt;p&gt;I&amp;#8217;m not going to draw any conclusions from these charts except to say that I never thought I&amp;#8217;d mention Wogan on this site, let alone link to the &lt;a href="http://www.telegraph.co.uk/opinion/main.jhtml?xml=/opinion/2008/05/26/do2603.xml"&gt;Telegraph&lt;/a&gt;. Eurovision voting is clearly a &lt;a href="http://www.theregister.co.uk/2008/05/06/eurovision_outrage/"&gt;sensitive topic&lt;/a&gt;. I recommend a visit to &lt;a href="http://successfulsoftware.net/2008/05/26/is-the-eurovision-song-contest-rigged/"&gt;this Andy Brice article&lt;/a&gt;, where he uses software similar to his &lt;a href="http://www.perfecttableplan.com/html/visualise_your_plan.html"&gt;wedding table planner&lt;/a&gt; to render some more detailed voting maps. The analogy of all these countries having to sit next to each other for a musical event, like grumpy inlaws at a wedding, made me laugh.
&lt;/p&gt;
&lt;p&gt;Andy Brice&amp;#8217;s pictures were produced with C++ and Qt following the same QA procedure that I used with the code for this article:
&lt;/p&gt;
&lt;blockquote&gt;&lt;p&gt;I wrote some throwaway code to generate these images in C++ and Qt over a few hours on a wet bank holiday Sunday. QA amounted to &amp;#8216;that looks about right&amp;#8217;.
&lt;/p&gt;
&lt;/blockquote&gt;&lt;hr /&gt;

&lt;p&gt;&lt;a id="fn1" href="http://wordaligned.org/articles/eurovision-2008-charts#fn1link"&gt;[1]&lt;/a&gt; Yes, I am colour-blind!
&lt;/p&gt;</description>
<dc:date>2008-05-29</dc:date>
<guid>http://wordaligned.org/articles/eurovision-2008-charts</guid>
<author>tag@wordaligned.org (Thomas Guest)</author>
<link>http://wordaligned.org/articles/eurovision-2008-charts</link>
<category>Charts</category>
</item>

<item>
<title>Scatter pictures with Google Charts</title>
<description>&lt;p&gt;In a recent &lt;a href="http://www.mattcutts.com/blog/pacman-graph-in-google-chart-api/"&gt;post on his blog&lt;/a&gt; Matt Cutts asks:
&lt;/p&gt;
&lt;blockquote&gt;&lt;p&gt;I almost wanted to call this post &amp;#8220;Stupid Google Tricks&amp;#8221; :-) What fun diagrams can you imagine making with the &lt;a href="http://code.google.com/apis/chart/"&gt;Google Charts Service&lt;/a&gt;?
&lt;/p&gt;
&lt;/blockquote&gt;&lt;p&gt;Here&amp;#8217;s a stupid trick: you can use the &lt;a href="http://www.pythonware.com/library/pil/handbook/"&gt;Python Imaging Library&lt;/a&gt; to convert a picture into a URL which &lt;a href="http://code.google.com/apis/chart/"&gt;Google charts&lt;/a&gt; will render as the original picture.
&lt;/p&gt;
&lt;p&gt;Here&amp;#8217;s the original picture:
&lt;/p&gt;
&lt;img src="http://wordaligned.org/images/buttons/spider-bw-61.png" alt="Spider"/&gt;

&lt;p&gt;here&amp;#8217;s the version served up by Google charts:
&lt;/p&gt;
&lt;img src="http://chart.apis.google.com/chart?cht=s&amp;amp;chd=s:DDEEEEEEEEEEEEEFFFFFFFFFFFFFFGGGGGGGGGGGGHHHHHHHHHHHHHHIIIIIIIIIIIIIIIIIJJJJJJJJJJJJJJJKKKKKKKKKKLLLLLLLMMMMMMMMNNNNNNNNNNNNNNOOOOOOOOOOOOOOOOOOOOOOOOOPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQRRRRRRRRRRRRRRRRRRRSSSSSSSSSSSSSSSSSSSSTTTTTTTTTTTTTTTTTTUUUUUUUUUUUUUUUUUVVVVVVVVVVVVVVVVVWWWWWWWWWWWWWWWWWWWWWXXXXXXXXXXXXXXXXXXXXXXXXYYYYYYYYYYYYYYYYYYYYYYYYYYZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaabbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbccccccccccccccccccccccccccddddddddddddddddddddeeeeeeeeeeeeeeeeeeeeeeeefffffffffffffffffffgggggggggggggggghhhhhhhhhhhhhhhhhhhhiiiiiiiiiiiiiiiiiiiiijjjjjjjjjjjjjjjjjjjjjjjjjkkkkkkkkkkkkkkkkkkkkklllllllllllllllllllmmmmmmmmmmmmmmmmmmmmmnnnnnnnnnnnnnnnnnnnnoooooooooooooooooppppppppppppppppppqqqqqqqqqqqqqqqqqqqqrrrrrrrrrrrrrrrrrssssssssssssssssssssttttttttttttttttuuuuuuuuuuuuuuuuvvvvvvvvvvvvvwwwwwwwxxxxxxxyyyyyyyyzzzzzzzzzzzzzzz00000000000000111111111111111122222222222222333333333333444444444555556666777,YWaZYXWVUTSRQPObaZYXWVUTSRQPOsdcbaZUTSRQPutsrqplkjidcbavutsrqponmlkjiedcwvuqponmlkjihdcxwvonjihdcxwjihdcyxjihdcRzjihdcTSRQPNJHihgdcbaZYUTSRQPONMLKJIHGFtsrjihgfedcbaZYXWVUTSONMLKJIHGFEDvutsrqihgfedcbaZYXWVUTKIHGFEDCvutqpmlihgfedcWVUTSwvponmlkjihgfedVUTSRvqponmlkjihedcTSRQrqponmlkjihedSRQPsrqponmlkjedRQPOLysrqponmlkjdcRQPONMLKyxtsrqponmlkdcSRQPONMLKJyxtsrqponmldcbUTSRQPONMLKJyxtsrqponmlihgfedcbaZWVUTSPONMKJIyxwtsrqponmljihgfedcbaZYXWVUTPONJIHxwvutsrqponmkjihgfedcbaZYXWVUONMJIHGvusrqponmlkjifedcbZXONIHGFsrqponmlkjedcONMHGFE65432rqponmlkjedcONMGFED3210qponmlkjiedcONE10nmlkjigfedPONM0zonmlkjihgfedYXVPON0zonmjihgfeZYXWVUTPON0zqponmlihgfaZYXWVUTSRQPO0zyrqpnmlbaZYVUTSRQPOzytsrqpmlkcbaZTSRQPzyxwvutsrqmlkjcbaTSRQyxwvutsnmlkjicbUTSRQponmlkjihdcbWVUTSqponjihgdcbZYXWVUTrqponjihgfedcbaZYXWVsrqpjihgfedcbaZYXsrqjifedcbaZYXTSRQPOsrkjYXWVUTSRQPONsrkjYXWVUTSQPONMsrqkjXWVUONMLsrqkjihsrqkjihsrqjihgVsrqihgfZYXWVUTSsrqhgfeaZYXWVUsrqpogfedcbaZYXWsrqponfedcbaZYrqponmedcbaZonmlkedcbmlkdclkjijih&amp;amp;chm=s,000000,1,2.0,3.0,0&amp;amp;chs=186x186" alt="Google Chart Spider"/&gt;

&lt;p&gt;here&amp;#8217;s the code:
&lt;/p&gt;
&lt;div class="typocode"&gt;

&lt;pre class="prettyprint"&gt;import Image
import string

def scatter_pixels(img_file):
    """Return the URL of a scatter plot of the supplied image
    
    The image will be rendered square and black on white. Adapt the
    code if you want something else.
    """
    # Use simple chart encoding. To make things really simple
    # use a square image where each X or Y position corresponds
    # to a single encode value.
    simple = string.uppercase + string.lowercase + string.digits
    rsimple = simple[::-1] # Google charts Y reverses PIL Y
    w = len(simple)
    W = w * 3
    img = Image.open(img_file).resize((w, w)).convert("1")
    pels = img.load()
    black_pels = [(x, y) for x in range(w) for y in range(w)
                  if pels[x, y] == 0]
    xs = "".join(simple[x] for x, _ in black_pels)
    ys = "".join(rsimple[y] for _, y in black_pels)
    sqside = 3.0
    return (
        "http://chart.apis.google.com/chart?"
        "cht=s&amp;amp;"                          # Draw a scatter graph
        "chd=s:%(xs)s,%(ys)s&amp;amp;"            # using simple encoding and
        "chm=s,000000,1,2.0,%(sqside)r,0&amp;amp;"# square black markers
        "chs=%(W)rx%(W)r"                 # at this size.
        ) % locals()

&lt;/pre&gt;

&lt;/div&gt;

&lt;p&gt;and here&amp;#8217;s the url it generates:
&lt;/p&gt;
&lt;p&gt;&lt;a href="http://chart.apis.google.com/chart?cht=s&amp;amp;chd=s:DDEEEEEEEEEEEEEFFFFFFFFFFFFFFGGGGGGGGGGGGHHHHHHHHHHHHHHIIIIIIIIIIIIIIIIIJJJJJJJJJJJJJJJKKKKKKKKKKLLLLLLLMMMMMMMMNNNNNNNNNNNNNNOOOOOOOOOOOOOOOOOOOOOOOOOPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQRRRRRRRRRRRRRRRRRRRSSSSSSSSSSSSSSSSSSSSTTTTTTTTTTTTTTTTTTUUUUUUUUUUUUUUUUUVVVVVVVVVVVVVVVVVWWWWWWWWWWWWWWWWWWWWWXXXXXXXXXXXXXXXXXXXXXXXXYYYYYYYYYYYYYYYYYYYYYYYYYYZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaabbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbccccccccccccccccccccccccccddddddddddddddddddddeeeeeeeeeeeeeeeeeeeeeeeefffffffffffffffffffgggggggggggggggghhhhhhhhhhhhhhhhhhhhiiiiiiiiiiiiiiiiiiiiijjjjjjjjjjjjjjjjjjjjjjjjjkkkkkkkkkkkkkkkkkkkkklllllllllllllllllllmmmmmmmmmmmmmmmmmmmmmnnnnnnnnnnnnnnnnnnnnoooooooooooooooooppppppppppppppppppqqqqqqqqqqqqqqqqqqqqrrrrrrrrrrrrrrrrrssssssssssssssssssssttttttttttttttttuuuuuuuuuuuuuuuuvvvvvvvvvvvvvwwwwwwwxxxxxxxyyyyyyyyzzzzzzzzzzzzzzz00000000000000111111111111111122222222222222333333333333444444444555556666777,YWaZYXWVUTSRQPObaZYXWVUTSRQPOsdcbaZUTSRQPutsrqplkjidcbavutsrqponmlkjiedcwvuqponmlkjihdcxwvonjihdcxwjihdcyxjihdcRzjihdcTSRQPNJHihgdcbaZYUTSRQPONMLKJIHGFtsrjihgfedcbaZYXWVUTSONMLKJIHGFEDvutsrqihgfedcbaZYXWVUTKIHGFEDCvutqpmlihgfedcWVUTSwvponmlkjihgfedVUTSRvqponmlkjihedcTSRQrqponmlkjihedSRQPsrqponmlkjedRQPOLysrqponmlkjdcRQPONMLKyxtsrqponmlkdcSRQPONMLKJyxtsrqponmldcbUTSRQPONMLKJyxtsrqponmlihgfedcbaZWVUTSPONMKJIyxwtsrqponmljihgfedcbaZYXWVUTPONJIHxwvutsrqponmkjihgfedcbaZYXWVUONMJIHGvusrqponmlkjifedcbZXONIHGFsrqponmlkjedcONMHGFE65432rqponmlkjedcONMGFED3210qponmlkjiedcONE10nmlkjigfedPONM0zonmlkjihgfedYXVPON0zonmjihgfeZYXWVUTPON0zqponmlihgfaZYXWVUTSRQPO0zyrqpnmlbaZYVUTSRQPOzytsrqpmlkcbaZTSRQPzyxwvutsrqmlkjcbaTSRQyxwvutsnmlkjicbUTSRQponmlkjihdcbWVUTSqponjihgdcbZYXWVUTrqponjihgfedcbaZYXWVsrqpjihgfedcbaZYXsrqjifedcbaZYXTSRQPOsrkjYXWVUTSRQPONsrkjYXWVUTSQPONMsrqkjXWVUONMLsrqkjihsrqkjihsrqjihgVsrqihgfZYXWVUTSsrqhgfeaZYXWVUsrqpogfedcbaZYXWsrqponfedcbaZYrqponmedcbaZonmlkedcbmlkdclkjijih&amp;amp;chm=s,000000,1,2.0,3.0,0&amp;amp;chs=186x186"&gt;http://chart.apis.google.com/chart?cht=s&amp;amp;chd=s:DDEEEEEEE&amp;#8230;&amp;amp;chs=186x186&lt;/a&gt;
&lt;/p&gt;
&lt;hr /&gt;

&lt;p style="font-size:75%"&gt;&lt;strong&gt;Smallprint&lt;/strong&gt;. Google charts may return a 400 error for an image with a long URL (meaning lots of black pixels in this case). The upper limit on URL length doesn&amp;#8217;t seem to be &lt;a href="http://code.google.com/apis/chart/"&gt;documented&lt;/a&gt; but a quick &lt;a href="http://groups.google.com/group/google-chart-api/search?group=google-chart-api&amp;amp;q=url+length&amp;amp;qt_g=Search+this+group"&gt;trawl through topics on the google charts group&lt;/a&gt; suggests others have bumped into it too. Connoisseurs of whacky pictures should pay &lt;a href="http://www.romancortes.com/blog/homer-css/"&gt;CSS Homer Simpson&lt;/a&gt; a visit.&lt;/p&gt;</description>
<dc:date>2008-04-25</dc:date>
<guid>http://wordaligned.org/articles/scatter-pictures-with-google-charts</guid>
<author>tag@wordaligned.org (Thomas Guest)</author>
<link>http://wordaligned.org/articles/scatter-pictures-with-google-charts</link>
<category>Charts</category>
</item>

<item>
<title>Drawing Chessboards</title>
<description>&lt;div class="toc"&gt;
&lt;h2&gt;Contents&lt;/h2&gt;
&lt;ul&gt;
 &lt;li&gt;&lt;a href="http://wordaligned.org/articles/drawing-chessboards#tocthe-python-imaging-library" name="toc0" id="toc0"&gt;The Python Imaging Library&lt;/a&gt;
 &lt;/li&gt;

 &lt;li&gt;&lt;a href="http://wordaligned.org/articles/drawing-chessboards#tocimagemagick" name="toc1" id="toc1"&gt;ImageMagick&lt;/a&gt;
 &lt;/li&gt;

 &lt;li&gt;&lt;a href="http://wordaligned.org/articles/drawing-chessboards#tocgoogle-chart-api" name="toc2" id="toc2"&gt;Google Chart API&lt;/a&gt;
 &lt;/li&gt;

 &lt;li&gt;&lt;a href="http://wordaligned.org/articles/drawing-chessboards#tocascii-text" name="toc3" id="toc3"&gt;ASCII Text&lt;/a&gt;
 &lt;/li&gt;

 &lt;li&gt;&lt;a href="http://wordaligned.org/articles/drawing-chessboards#tocunicode-block-elements" name="toc4" id="toc4"&gt;Unicode Block Elements&lt;/a&gt;
 &lt;/li&gt;

 &lt;li&gt;&lt;a href="http://wordaligned.org/articles/drawing-chessboards#tocand-more" name="toc5" id="toc5"&gt;And more&lt;/a&gt;
 &lt;/li&gt;

 &lt;li&gt;&lt;a href="http://wordaligned.org/articles/drawing-chessboards#tocwhy" name="toc6" id="toc6"&gt;Why?&lt;/a&gt;
 &lt;/li&gt;

 &lt;li&gt;&lt;a href="http://wordaligned.org/articles/drawing-chessboards#tocteaser" name="toc7" id="toc7"&gt;Teaser&lt;/a&gt;
 &lt;/li&gt;

 &lt;li&gt;&lt;a href="http://wordaligned.org/articles/drawing-chessboards#tocthanks" name="toc8" id="toc8"&gt;Thanks&lt;/a&gt;
 &lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;&lt;p&gt;I wanted a picture of a chessboard. Rather than boot up some drawing software and cut and paste black and white squares I decided to write a program to create the picture.
&lt;/p&gt;
&lt;p&gt;If you&amp;#8217;d like to know &lt;strong&gt;why&lt;/strong&gt; anyone would ever create work for themselves in this way, skip to the end of this article, where you&amp;#8217;ll find justification and a more challenging &lt;a href="http://wordaligned.org/articles/drawing-chessboards.html#why"&gt;follow-on problem&lt;/a&gt;. Otherwise, please read on from top to bottom in the usual way.
&lt;/p&gt;

&lt;h3&gt;&lt;a href="http://wordaligned.org/articles/drawing-chessboards#toc0" name="tocthe-python-imaging-library" id="tocthe-python-imaging-library"&gt;The Python Imaging Library&lt;/a&gt;&lt;/h3&gt;
&lt;img style="border-style:double;" src="http://wordaligned.org/images/chessboard-pil.png" alt="Chessboard created by PIL"/&gt;

&lt;p&gt;Fredrik Lundh&amp;#8217;s &lt;a href="http://effbot.org/imagingbook/pil-index.htm"&gt;Python Imaging Library&lt;/a&gt; (commonly known as &lt;a href="http://effbot.org/imagingbook/pil-index.htm"&gt;PIL&lt;/a&gt;) must surely rank as one of the most popular Python libraries which doesn&amp;#8217;t come as standard&lt;sup&gt;&lt;a id="fn1link" href="http://wordaligned.org/articles/drawing-chessboards.html#fn1"&gt;[1]&lt;/a&gt;&lt;/sup&gt;. It&amp;#8217;s a fabulous tool which I&amp;#8217;ve used to create the graphic above (though note that the double border around this graphic and subsequent ones is applied by a CSS style property). Here&amp;#8217;s how.
   &lt;span id="continue-reading"/&gt;
&lt;/p&gt;
&lt;div class="typocode"&gt;&lt;div class="codetitle"&gt;PIL chessboard&lt;/div&gt;

&lt;pre class="prettyprint"&gt;def draw_chessboard(n=8, pixel_width=200):
    "Draw an n x n chessboard using PIL."
    import Image, ImageDraw
    from itertools import cycle
    def sq_start(i):
        "Return the x/y start coord of the square at column/row i."
        return i * pixel_width / n
    
    def square(i, j):
        "Return the square corners, suitable for use in PIL drawings" 
        return map(sq_start, [i, j, i + 1, j + 1])
    
    image = Image.new("L", (pixel_width, pixel_width))
    draw_square = ImageDraw.Draw(image).rectangle
    squares = (square(i, j)
               for i_start, j in zip(cycle((0, 1)), range(n))
               for i in range(i_start, n, 2))
    for sq in squares:
        draw_square(sq, fill='white')
    image.save("chessboard-pil.png")

&lt;/pre&gt;

&lt;/div&gt;

&lt;p&gt;Note:
&lt;/p&gt;
&lt;ul&gt;
 &lt;li&gt;
     We don&amp;#8217;t draw any black squares, instead relying on the default image background being black.
 &lt;/li&gt;

 &lt;li&gt;
     The &amp;#8220;L&amp;#8221; image type (Luminance?) specifies a greyscale image.
 &lt;/li&gt;

 &lt;li&gt;
     PIL adopts the usual raster graphics convention, of the origin being in the top-left corner.
 &lt;/li&gt;

 &lt;li&gt;
     As we progress &lt;strong&gt;down&lt;/strong&gt; the board row by row, the first white square alternates between being the first and second square of each row. &lt;code&gt;Itertools.cycle((0, 1))&lt;/code&gt; achieves this nicely. 
 &lt;/li&gt;

 &lt;li&gt;
     A regular 8 x 8 chessboard will, then, have a black square at the bottom left, which is the usual convention. For odd values of n the bottom-left square would be white.
 &lt;/li&gt;

 &lt;li&gt;
     There may be rounding problems with this code if the supplied pixel width isn&amp;#8217;t an integral multiple of &lt;code&gt;n&lt;/code&gt;. It&amp;#8217;s probably better to guarantee the image size, rather than round down the board size.
 &lt;/li&gt;

 &lt;li&gt;
     It would be better to parametrise the output file name, or even return the created image to clients. For now, we&amp;#8217;ll just save to a fixed-name PNG.
 &lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;&lt;a href="http://wordaligned.org/articles/drawing-chessboards#toc1" name="tocimagemagick" id="tocimagemagick"&gt;ImageMagick&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;PIL is a general purpose image processing library and it takes a little head-scratching and maths before we can even create something as simple as a chessboard. &lt;a href="http://www.imagemagick.org/script/index.php"&gt;ImageMagick&lt;/a&gt; provides tools to perform a similar job from the command-line, making the chessboard a one-liner.
&lt;/p&gt;
&lt;div class="typocode"&gt;&lt;div class="codetitle"&gt;ImageMagick chessboard&lt;/div&gt;

&lt;pre class="prettyprint"&gt;$ N=8
$ PIXEL_WIDTH=200
$ convert -size $((N*15))x$((N*15)) pattern:checkerboard \
  -monochrome -resize $PIXEL_WIDTH chessboard-magick.png

&lt;/pre&gt;

&lt;/div&gt;

&lt;img style="border-style:double;float:right;margin-left:4px;" src="http://wordaligned.org/images/chessboard-magick.png" alt="Chessboard created by ImageMagick"/&gt;

&lt;p&gt;Here, the checkerboard pattern is an ImageMagick built-in which, inspecting its output, happens to generate 15x15 squares (hence the 15&amp;#8217;s in the script above). The &lt;code&gt;-monochrome&lt;/code&gt; filter renders the pattern in black and white, rather than its native light- on dark-grey. The &lt;code&gt;-size&lt;/code&gt; and &lt;code&gt;-resize&lt;/code&gt; parameters should need no further explanation. The ((double parentheses)) perform Bash shell arithmetic.
&lt;/p&gt;
&lt;p&gt;&lt;a href="http://www.imagemagick.org/script/index.php"&gt;ImageMagick&lt;/a&gt; masquerades as a shell tool but really it&amp;#8217;s a powerful and fully featured programmer&amp;#8217;s imaging tool &amp;#8212; a bit like a command-line version of &lt;a href="http://www.gimp.org"&gt;Gimp&lt;/a&gt;&lt;a id="fn2link" href="http://wordaligned.org/articles/drawing-chessboards#fn2"&gt;&lt;sup&gt;[2]&lt;/sup&gt;&lt;/a&gt;. Although well documented, my gut reaction is that it pushes the command-line interface too far. For more advanced image mangling, you&amp;#8217;ll probably need a program to generate the one-liner needed to drive &lt;code&gt;convert&lt;/code&gt;. Despite this reservation, it does the simple things simply, and it can do complex things too. Recommended!
&lt;/p&gt;

&lt;h3&gt;&lt;a href="http://wordaligned.org/articles/drawing-chessboards#toc2" name="tocgoogle-chart-api" id="tocgoogle-chart-api"&gt;Google Chart API&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;For a bit of fun, we can persuade Google to render the chessboard for us &amp;#8212; in this case as a scatter plot using a square black markers&lt;a id="fn3link" href="http://wordaligned.org/articles/drawing-chessboards#fn3"&gt;&lt;sup&gt;[3]&lt;/sup&gt;&lt;/a&gt;. We flip the PIL processing around, drawing black squares on the (default) white background, and using the usual plotting convention which places the origin at the bottom left.
&lt;/p&gt;
&lt;div class="typocode"&gt;&lt;div class="codetitle"&gt;Google chart chessboard&lt;/div&gt;

&lt;pre class="prettyprint"&gt;def chessboard_url(n=8, pixel_width=200):
    "Returns the URL of a chessboard graphic."
    def sq_midpt(i):
        "Return the x/y midpt of a square in column/row i."
        # For text encoding, the graphic's logical width is 100
        return (0.5 + i) * 100. / n
    
    xys = [(sq_midpt(i), sq_midpt(j))
           for i_start, j in zip(cycle((0, 1)), range(n))
           for i in range(i_start, n, 2)]
    fields = dict(width=pixel_width, sqside=pixel_width/n,
                  xs=",".join("%.02f" % x for x, _ in xys),
                  ys=",".join("%.02f" % y for _, y in xys))
    return (
        "http://chart.apis.google.com/chart?"
        "cht=s&amp;amp;"                        # Draw a scatter graph
        "chd=t:%(xs)s|%(ys)s&amp;amp;"          # using text encoding and
        "chm=s,000000,1,2.0,%(sqside)r&amp;amp;"# square black markers
        "chs=%(width)rx%(width)r"       # at this size.
        ) % fields

&lt;/pre&gt;

&lt;/div&gt;

&lt;p&gt;Note that we plot our chart on a logical 100 x 100 rectangle, the coordinate space mandated by the encoding we&amp;#8217;ve chosen, then resize it to the physical dimensions supplied by the client.
&lt;/p&gt;
&lt;p&gt;This function actually returns the URL of a PNG which the &lt;a href="http://code.google.com/apis/chart/"&gt;Google chart API&lt;/a&gt; serves up. Paste this URL into your browser address bar to see the graphic, or curl it to a local file.
&lt;/p&gt;
&lt;p&gt;&lt;a href="http://chart.apis.google.com/chart?cht=s&amp;amp;chd=t:6.25,31.25,56.25,81.25,18.75,43.75,68.75,93.75,6.25,31.25,56.25,81.25,18.75,43.75,68.75,93.75,6.25,31.25,56.25,81.25,18.75,43.75,68.75,93.75,6.25,31.25,56.25,81.25,18.75,43.75,68.75,93.75|6.25,6.25,6.25,6.25,18.75,18.75,18.75,18.75,31.25,31.25,31.25,31.25,43.75,43.75,43.75,43.75,56.25,56.25,56.25,56.25,68.75,68.75,68.75,68.75,81.25,81.25,81.25,81.25,93.75,93.75,93.75,93.75&amp;amp;chm=s,000000,1,2.0,25.0&amp;amp;chs=200x200"&gt;http://chart.apis.google.com/chart?cht=s&amp;amp;chd=t:6.25,31.25&amp;#8230;&amp;amp;chs=200x200&lt;/a&gt;
&lt;/p&gt;
&lt;div class="typocode"&gt;

&lt;pre class="prettyprint"&gt;$ url=`python chessboard_url.py`
$ curl $url &amp;gt; chessboard.png

&lt;/pre&gt;

&lt;/div&gt;

&lt;p&gt;We could embed the image into HTML using the IMG element, which is how I&amp;#8217;ve embedded the image which you should see below.
&lt;/p&gt;
&lt;div class="typocode"&gt;

&lt;pre class="prettyprint"&gt;&amp;gt;&amp;gt;&amp;gt; from cgi import escape
&amp;gt;&amp;gt;&amp;gt; img = '&amp;lt;img src="%s" alt="chessboard graphic"/&amp;gt;'
&amp;gt;&amp;gt;&amp;gt; img % escape(chessboard_url())

&lt;/pre&gt;

&lt;/div&gt;

&lt;img src="http://chart.apis.google.com/chart?cht=s&amp;amp;chd=t:6.25,31.25,56.25,81.25,18.75,43.75,68.75,93.75,6.25,31.25,56.25,81.25,18.75,43.75,68.75,93.75,6.25,31.25,56.25,81.25,18.75,43.75,68.75,93.75,6.25,31.25,56.25,81.25,18.75,43.75,68.75,93.75|6.25,6.25,6.25,6.25,18.75,18.75,18.75,18.75,31.25,31.25,31.25,31.25,43.75,43.75,43.75,43.75,56.25,56.25,56.25,56.25,68.75,68.75,68.75,68.75,81.25,81.25,81.25,81.25,93.75,93.75,93.75,93.75&amp;amp;chm=s,000000,1,2.0,25.0&amp;amp;chs=200x200" alt="Chessboard chart" style="float:right;border-style:double;margin-left:4px;"/&gt;

&lt;p&gt;As you can see, we have plenty of options, but unfortunately the image itself isn&amp;#8217;t suitable. You can&amp;#8217;t get rid of the axes &amp;#8212; or at least, I haven&amp;#8217;t found a way to &amp;#8212; and the rendered chart has some padding to the top and the right. And worse, we&amp;#8217;re pretty much at the end of the line for this hack: if we wanted to do something more interesting, such as place pieces on the board, we&amp;#8217;re out of luck. 
&lt;/p&gt;
&lt;p&gt;Of course this isn&amp;#8217;t a flaw in the &lt;a href="http://code.google.com/apis/chart/"&gt;Google Chart API&lt;/a&gt;: we&amp;#8217;ve actually asked it to draw a scatter plot of the centres of black squares on a chessboard, using square black markers, a job it&amp;#8217;s done well enough. Some examples showing the proper use of Google charts can be found in an &lt;a href="http://wordaligned.org/articles/the-maximum-subsequence-problem.html"&gt;article I wrote about maximum sum subsequences&lt;/a&gt;.
&lt;/p&gt;

&lt;h3&gt;&lt;a href="http://wordaligned.org/articles/drawing-chessboards#toc3" name="tocascii-text" id="tocascii-text"&gt;ASCII Text&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;The chart URL might be considered a text encoding of the image; the actual graphic is returned by a server. There are other, more direct, textual representations.
&lt;/p&gt;
&lt;div class="typocode"&gt;&lt;div class="codetitle"&gt;ASCII art chessboard&lt;/div&gt;

&lt;pre class="prettyprint"&gt;def outer_join(sep, ss):
    """Like string.join, but encloses the result with outer separators.
    
    Example:
    &amp;gt;&amp;gt;&amp;gt; outer_join('|', ['1', '2', '3'])
    '|1|2|3|'
    """
    return "%s%s%s" % (sep, sep.join(ss), sep)
    
def ascii_chessboard(n=8):
    """Draws an ASCII art chessboard.
    
    Returns a string representation of an n x n board.
    """
    from itertools import islice, cycle
    divider = outer_join("+", "-" * n) + "\n"
    row0 = outer_join("|", islice(cycle(" B"), n)) + "\n"
    row1 = outer_join("|", islice(cycle("B "), n)) + "\n"
    return outer_join(divider, islice(cycle([row0, row1]), n))

&lt;/pre&gt;

&lt;/div&gt;

&lt;p&gt;I suspect this code was easier for me to write than it is for you to read! It treats the chessboard as a sequence of alternating rows of alternating squares, which are then joined together for output.
&lt;/p&gt;
&lt;div class="typocode"&gt;

&lt;pre class="prettyprint"&gt;&amp;gt;&amp;gt;&amp;gt; print ascii_chessboard(8)
+-+-+-+-+-+-+-+-+
| |B| |B| |B| |B|
+-+-+-+-+-+-+-+-+
|B| |B| |B| |B| |
+-+-+-+-+-+-+-+-+
| |B| |B| |B| |B|
+-+-+-+-+-+-+-+-+
|B| |B| |B| |B| |
+-+-+-+-+-+-+-+-+
| |B| |B| |B| |B|
+-+-+-+-+-+-+-+-+
|B| |B| |B| |B| |
+-+-+-+-+-+-+-+-+
| |B| |B| |B| |B|
+-+-+-+-+-+-+-+-+
|B| |B| |B| |B| |
+-+-+-+-+-+-+-+-+

&lt;/pre&gt;

&lt;/div&gt;

&lt;p&gt;Not pretty, but such graphics may be useful in source code, which is typically viewed in a plain-text editor, and where ASCII art provides a way of embedding pictures right where they&amp;#8217;re needed. 
&lt;/p&gt;
&lt;p&gt;On which point: if you&amp;#8217;re working through &amp;#8220;Structure and Interpretation of Computer Programs&amp;#8221; you may like to know the book is &lt;a href="http://www.neilvandyke.org/sicp-texi/"&gt;available in Texinfo format&lt;/a&gt;, with the pictures all rendered in ASCII art. So you can split your editor window and run the code on one side, while browsing the book on the other. Here&amp;#8217;s one of the figures:
&lt;/p&gt;
&lt;pre&gt;
*Figure 4.6:* The `or' combination of two queries is produced by
operating on the stream of frames in parallel and merging the
results.
    
            +---------------------------+
            |          (or A B)         |
            |    +---+                  |
 input      | +-&amp;gt;| A |------------+     |  output
 stream of  | |  +---+            V     |  stream of
 frames     | |    ^          +-------+ |  frames
 -------------*    |          | merge +---------------&amp;gt;
            | |    |          +-------+ |
            | |    |              ^     |
            | |    |   +---+      |     |
            | +-------&amp;gt;| B +------+     |
            |      |   +---+            |
            |      |     ^              |
            |      |     |              |
            |      +--*--+              |
            +---------|-----------------+
                      |
                  data base
&lt;/pre&gt;

&lt;p&gt;Even though I own a copy of the book and the &lt;a href="http://mitpress.mit.edu/sicp/full-text/book/book.html"&gt;full text is available on-line&lt;/a&gt;, this primitive info version has become my preferred format when actually running the code examples and exercises.
&lt;/p&gt;

&lt;h3&gt;&lt;a href="http://wordaligned.org/articles/drawing-chessboards#toc4" name="tocunicode-block-elements" id="tocunicode-block-elements"&gt;Unicode Block Elements&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Most programming languages may be &lt;a href="http://wordaligned.org/articles/a-yen-for-more-symbols.html"&gt;stuck in ASCII&lt;/a&gt;, but we needn&amp;#8217;t restict ourselves in this way. I found some block elements in the &lt;a href="http://www.unicode.org/charts/symbols.html"&gt;Geometrical Symbols&lt;/a&gt; section of the Unicode code charts (&lt;a href="http://www.unicode.org/charts/PDF/U2580.pdf"&gt;Unicode Block Elements (PDF)&lt;/a&gt;). Here&amp;#8217;s a pre-rendered block of text composed of the light and dark shade block characters, U+2591 LIGHT SHADE and U+2593 DARK SHADE.
&lt;/p&gt;
&lt;pre&gt;
&amp;#x2591;&amp;#x2593;&amp;#x2591;&amp;#x2593;&amp;#x2591;&amp;#x2593;&amp;#x2591;&amp;#x2593;
&amp;#x2593;&amp;#x2591;&amp;#x2593;&amp;#x2591;&amp;#x2593;&amp;#x2591;&amp;#x2593;&amp;#x2591;
&amp;#x2591;&amp;#x2593;&amp;#x2591;&amp;#x2593;&amp;#x2591;&amp;#x2593;&amp;#x2591;&amp;#x2593;
&amp;#x2593;&amp;#x2591;&amp;#x2593;&amp;#x2591;&amp;#x2593;&amp;#x2591;&amp;#x2593;&amp;#x2591;
&amp;#x2591;&amp;#x2593;&amp;#x2591;&amp;#x2593;&amp;#x2591;&amp;#x2593;&amp;#x2591;&amp;#x2593;
&amp;#x2593;&amp;#x2591;&amp;#x2593;&amp;#x2591;&amp;#x2593;&amp;#x2591;&amp;#x2593;&amp;#x2591;
&amp;#x2591;&amp;#x2593;&amp;#x2591;&amp;#x2593;&amp;#x2591;&amp;#x2593;&amp;#x2591;&amp;#x2593;
&amp;#x2593;&amp;#x2591;&amp;#x2593;&amp;#x2591;&amp;#x2593;&amp;#x2591;&amp;#x2593;&amp;#x2591;
&lt;/pre&gt;


&lt;h3&gt;&lt;a href="http://wordaligned.org/articles/drawing-chessboards#toc5" name="tocand-more" id="tocand-more"&gt;And more&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;I can think of plenty of other ways to draw a chessboard. My favourite &lt;a href="http://wordaligned.org/articles/drawing-software-design.htmls"&gt;drawing&lt;/a&gt; environments are the &lt;a href="http://blogoscoped.com/archive/2008-02-11-n78.html"&gt;pencil and paper&lt;/a&gt;, and the pen and whiteboard; combine the former with a scanner and the latter with a digital camera and you&amp;#8217;ve got an easy route to an electronic version of your design.
&lt;/p&gt;
&lt;p&gt;For an HTML document I suspect &lt;a href="http://www.w3.org/Graphics/SVG/"&gt;SVG&lt;/a&gt; would be a good choice, but I don&amp;#8217;t know enough about SVG to state this with confidence. I bet you could go a long way with &lt;a href="http://www.w3.org/Style/CSS/"&gt;CSS&lt;/a&gt; too. &lt;a href="http://en.wikipedia.org/wiki/Chessboard"&gt;Wikipedia&amp;#8217;s chess board&lt;/a&gt; is a table built on top of two small images, a light and a dark square, which I guess saves on bandwidth.
&lt;/p&gt;

&lt;h3&gt;&lt;a href="http://wordaligned.org/articles/drawing-chessboards#toc6" name="tocwhy" id="tocwhy"&gt;Why?&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Why ever bother programming when all we want is a simple graphic?
&lt;/p&gt;
&lt;p&gt;Well, for one thing, there&amp;#8217;s not &lt;strong&gt;that&lt;/strong&gt; much programming. The actual work of pushing pixels around is done by &lt;a href="http://code.google.com/apis/chart/"&gt;Google&lt;/a&gt;, or &lt;a href="http://effbot.org/imagingbook/pil-index.htm"&gt;PIL&lt;/a&gt;, or &lt;a href="http://www.imagemagick.org/script/index.php"&gt;ImageMagick&lt;/a&gt;.
&lt;/p&gt;
&lt;p&gt;Once we&amp;#8217;ve got a program written, it should be easy to adapt it. We&amp;#8217;ve already put in hooks to specify the number of squares and the image dimensions. It&amp;#8217;s equally easy to, for example, write out a JPEG rather than a PNG, or use different colours.
&lt;/p&gt;
&lt;p&gt;A programmatic solution is dynamic. Google&amp;#8217;s chart API generates pictures on the fly, based on data points, ranges etc. which clients choose as and when. It&amp;#8217;s rather  like lazy-evaluation: pre-rendering all possibilities isn&amp;#8217;t just expensive, it&amp;#8217;s out of the question.
&lt;/p&gt;

&lt;h3&gt;&lt;a href="http://wordaligned.org/articles/drawing-chessboards#toc7" name="tocteaser" id="tocteaser"&gt;Teaser&lt;/a&gt;&lt;/h3&gt;
&lt;img src="http://tbn0.google.com/images?q=tbn:AmRSkxMo-1W5iM:http://web.usna.navy.mil/~wdj/images_chess/chess011.gif" alt="Lurid chessboard" style="float:right;margin-left:4px;"/&gt;

&lt;p&gt;That&amp;#8217;s quite enough pixels and characters for now, so this article will have to appear in two parts. If I&amp;#8217;ve still not convinced you of the merits of creating images programmatically, please consider the following puzzle.
&lt;/p&gt;
&lt;p&gt;&lt;span /&gt;How would you draw a position reached in a game of chess, showing both the board and the pieces?
&lt;/p&gt;
&lt;p&gt;And if I &lt;strong&gt;have&lt;/strong&gt; convinced you, this exercise makes for a good workout.
&lt;/p&gt;
&lt;p&gt;Some Q&amp;amp;A&amp;#8217;s.
&lt;/p&gt;
&lt;ul&gt;
 &lt;li&gt;
     &lt;strong&gt;Q&lt;/strong&gt;: What position, exactly?
 &lt;/li&gt;

 &lt;li&gt;
     &lt;strong&gt;A&lt;/strong&gt;: Any!
 &lt;/li&gt;

 &lt;li&gt;
     &lt;strong&gt;Q&lt;/strong&gt;: How will the position be described?
 &lt;/li&gt;

 &lt;li&gt;
     &lt;strong&gt;A&lt;/strong&gt;: Your choice &amp;#8212; it&amp;#8217;s an interesting part of the puzzle.
 &lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;A great starting point would be to solve the puzzle using an ASCII art representation.
&lt;/p&gt;
&lt;p&gt;You can find my solution in &lt;a href="http://wordaligned.org/articles/drawing-chess-positions.html"&gt;this follow-up article&lt;/a&gt;.
&lt;/p&gt;

&lt;h3&gt;&lt;a href="http://wordaligned.org/articles/drawing-chessboards#toc8" name="tocthanks" id="tocthanks"&gt;Thanks&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Thanks to &lt;a href="http://gedmin.as"&gt;Marius Gedminas&lt;/a&gt; and Johannes Hoff for their help bug-fixing this article.
&lt;/p&gt;
&lt;hr /&gt;

&lt;p&gt;&lt;a id="fn1" href="http://wordaligned.org/articles/drawing-chessboards#fn1link"&gt;[1]&lt;/a&gt;
   I&amp;#8217;m confused about where exactly PIL belongs; the official homepage seems to be on the PythonWare website (&lt;a href="http://www.pythonware.com/library/pil/handbook/"&gt;http://www.pythonware.com/library/pil/handbook/&lt;/a&gt;), but I usually head for the Effbot site, &lt;a href="http://effbot.org/imagingbook/"&gt;http://effbot.org/imagingbook/&lt;/a&gt;. I think the sites mirror the same information, so it boils down to whether you prefer a blue or green theme, and how off-putting you find all the ads-by-google.
&lt;/p&gt;
&lt;p&gt;&lt;a id="fn2" href="http://wordaligned.org/articles/drawing-chessboards#fn2link"&gt;[2]&lt;/a&gt;
   Actually, you can use &lt;a href="http://www.gimp.org/tutorials/Basic_Batch/"&gt;Gimp from the command-line&lt;/a&gt;, and it comes with some tools for creating and editing batch files, and indeed for creating a personal suite of image processing scripts. I&amp;#8217;ve never used &lt;a href="http://www.gimp.org"&gt;Gimp&lt;/a&gt; in this way, so I can&amp;#8217;t say much more about this.
&lt;/p&gt;
&lt;p&gt;&lt;a id="fn3" href="http://wordaligned.org/articles/drawing-chessboards#fn3link"&gt;[3]&lt;/a&gt;
   In theory you could use the Google Chart API to render any image in a pointillist manner: just plot enough pixels in the right places.
&lt;/p&gt;</description>
<dc:date>2008-03-18</dc:date>
<guid>http://wordaligned.org/articles/drawing-chessboards</guid>
<author>tag@wordaligned.org (Thomas Guest)</author>
<link>http://wordaligned.org/articles/drawing-chessboards</link>
<category>Charts</category>
</item>

<item>
<title>The Maximum Sum contiguous subsequence problem</title>
<description>&lt;div class="toc"&gt;
&lt;h2&gt;Contents&lt;/h2&gt;
&lt;ul&gt;
 &lt;li&gt;&lt;a href="http://wordaligned.org/articles/the-maximum-subsequence-problem#tocwelcome-to-the-pearly-gates" name="toc0" id="toc0"&gt;Welcome to the Pearly Gates&lt;/a&gt;
 &lt;/li&gt;

 &lt;li&gt;&lt;a href="http://wordaligned.org/articles/the-maximum-subsequence-problem#tocprogramming-pearl" name="toc1" id="toc1"&gt;Programming Pearl&lt;/a&gt;
 &lt;/li&gt;

 &lt;li&gt;&lt;a href="http://wordaligned.org/articles/the-maximum-subsequence-problem#toclinear-solution" name="toc2" id="toc2"&gt;Linear Solution&lt;/a&gt;
 &lt;/li&gt;

 &lt;li&gt;&lt;a href="http://wordaligned.org/articles/the-maximum-subsequence-problem#tocstreaming-solution" name="toc3" id="toc3"&gt;Streaming Solution&lt;/a&gt;
 &lt;/li&gt;

 &lt;li&gt;&lt;a href="http://wordaligned.org/articles/the-maximum-subsequence-problem#tocstream-accumulate" name="toc4" id="toc4"&gt;Stream Accumulate&lt;/a&gt;
 &lt;/li&gt;

 &lt;li&gt;&lt;a href="http://wordaligned.org/articles/the-maximum-subsequence-problem#tocstream-floor" name="toc5" id="toc5"&gt;Stream Floor&lt;/a&gt;
 &lt;/li&gt;

 &lt;li&gt;&lt;a href="http://wordaligned.org/articles/the-maximum-subsequence-problem#tocstream-diff" name="toc6" id="toc6"&gt;Stream Diff&lt;/a&gt;
 &lt;/li&gt;

 &lt;li&gt;&lt;a href="http://wordaligned.org/articles/the-maximum-subsequence-problem#tocstreams-and-collections" name="toc7" id="toc7"&gt;Streams and Collections&lt;/a&gt;
 &lt;/li&gt;

 &lt;li&gt;&lt;a href="http://wordaligned.org/articles/the-maximum-subsequence-problem#tocstream-on" name="toc8" id="toc8"&gt;Stream on&amp;#8230;&lt;/a&gt;
 &lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;h3&gt;&lt;a href="http://wordaligned.org/articles/the-maximum-subsequence-problem#toc0" name="tocwelcome-to-the-pearly-gates" id="tocwelcome-to-the-pearly-gates"&gt;Welcome to the Pearly Gates&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;The Pearly Gates club never closes. Its public entrance, a revolving door, just keeps on spinning. With each rotation some punters enter and others leave. The club&amp;#8217;s owners would like to track this traffic. Specifically, they&amp;#8217;d like to know the maximum increase in people entering the club over a given period.
&lt;/p&gt;
&lt;p&gt;The starting point is to track the people who enter/leave with each spin of the door. Here&amp;#8217;s a 5 minute sample of that information. Negative numbers mean more people left than entered during a particular cycle.
&lt;/p&gt;
&lt;div class="typocode"&gt;&lt;div class="codetitle"&gt;Entries Log&lt;/div&gt;

&lt;pre class="prettyprint"&gt;0 1 2 -3 3 -1 0 -4 0 -1 -4 2 4 1 1 3 1 0 -2 -3 -3 -2 3 1 1 4 5 -3 -2 -1 ...

&lt;/pre&gt;

&lt;/div&gt;

&lt;p&gt;Here&amp;#8217;s the same information plotted on a graph.
&lt;/p&gt;
&lt;img alt="Graph of entries to Pearly Gates club" src="http://chart.apis.google.com/chart?
cht=lc
&amp;amp;chtt=Entries+to+the+Pearly+Gates+club
&amp;amp;chs=500x200
&amp;amp;chxt=x,y
&amp;amp;chxl=0:|0min|1min|2min|3min|4min|5min
&amp;amp;chxr=1,-5.0,6.0
&amp;amp;chd=t:45.5,45.5|45.5,54.5,63.6,18.2,72.7,36.4,45.5,9.1,45.5,36.4,9.1,63.6,81.8,54.5,54.5,72.7,54.5,45.5,27.3,18.2,18.2,27.3,72.7,54.5,54.5,81.8,90.9,18.2,27.3,36.4
&amp;amp;chco=BBBBBB,0000CC
&amp;amp;chls=1,1,0|4,1,0
" /&gt;

&lt;p&gt;The archetypal problem we&amp;#8217;d like to solve can be stated:
&lt;/p&gt;
&lt;blockquote&gt;&lt;p&gt;&lt;strong&gt;Given a sequence of numbers, find the maximum sum of a contiguous subsequence of those numbers.&lt;/strong&gt; 
&lt;/p&gt;
&lt;/blockquote&gt;&lt;p&gt;As an example, the maximum sum contiguous subsequence of 0, -1, &lt;strong&gt;2, -1, 3&lt;/strong&gt;, -1, 0 would be 4 (= 2 + -1 + 3).
&lt;/p&gt;
&lt;p&gt;This problem is generally known as &lt;strong&gt;the maximum sum contiguous subsequence problem&lt;/strong&gt; and if you haven&amp;#8217;t encountered it before, I&amp;#8217;d recommend trying to solve it before reading on. Even if you have encountered it before, I&amp;#8217;ll invite you to read on anyway &amp;#8212; it&amp;#8217;s well worth another look.
&lt;/p&gt;
&lt;span id="continue-reading"/&gt;


&lt;h3&gt;&lt;a href="http://wordaligned.org/articles/the-maximum-subsequence-problem#toc1" name="tocprogramming-pearl" id="tocprogramming-pearl"&gt;Programming Pearl&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;The maximum sum contiguous subsequence problem appears in Jon Bentley&amp;#8217;s &lt;a href="http://www.cs.bell-labs.com/cm/cs/pearls/"&gt;&amp;#8220;Programming Pearls&amp;#8221;&lt;/a&gt;. He first presents a brute force solution which examines all possible contiguous subsequences of the initial sequence and returns the maximum sum of these subsequences.
&lt;/p&gt;
&lt;p&gt;A Python implementation might read:
&lt;/p&gt;
&lt;div class="typocode"&gt;

&lt;pre class="prettyprint"&gt;def generate_pairs(n):
    "Generate all pairs (i, j) such that 0 &amp;lt;= i &amp;lt;= j &amp;lt; n"
    for i in range(n):
        for j in range(i, n):
            yield i, j

def max_sum_subsequence(seq):
    "Return the max-sum contiguous subsequence of the input sequence."
    return max(sum(seq[i:j])
               for i, j in generate_pairs(len(seq) + 1))

&lt;/pre&gt;

&lt;/div&gt;

&lt;p&gt;It&amp;#8217;s a straightforward piece of code, though note the &lt;code&gt;+ 1&lt;/code&gt; which ensures that we slice to the end of &lt;code&gt;seq&lt;/code&gt;, and also that we include empty slices, which sum to &lt;code&gt;0&lt;/code&gt;, handling the case when every item in the sequence is negative. The trouble is, the algorithm is of cubic complexity: to process just 6 hours of logged activity takes over 2 minutes on a 2GHz Intel Core Duo MacBook, and the cubic nature of the algorithm means we&amp;#8217;d quickly fail to process more substantial log files in real time.
&lt;/p&gt;
&lt;img alt="Graph plotting accumulated entries to the Pearly Gates club" src="http://chart.apis.google.com/chart?
cht=lc
&amp;amp;chtt=Accumulated+entries+to+the+Pearly+Gates+club
&amp;amp;chs=500x250
&amp;amp;chxt=x,y
&amp;amp;chxl=0:|0min|1min|2min|3min|4min|5min
&amp;amp;chxr=1,-8.0,10.0
&amp;amp;chd=t:44.4,50.0,55.6,27.8,61.1,38.9,44.4,22.2,44.4,38.9,22.2,55.6,66.7,50.0,50.0,61.1,50.0,44.4,33.3,27.8,27.8,33.3,61.1,50.0,50.0,66.7,72.2,27.8,33.3,38.9|44.4,50.0,61.1,44.4,61.1,55.6,55.6,33.3,33.3,27.8,5.6,16.7,38.9,44.4,50.0,66.7,72.2,72.2,61.1,44.4,27.8,16.7,33.3,38.9,44.4,66.7,94.4,77.8,66.7,61.1
&amp;amp;chco=CCCCCC,CC0000
&amp;amp;chls=3,1,0|3,1,0
&amp;amp;chdl=Entries|Accum.+Entries
" /&gt;

&lt;p&gt;A simple optimisation eliminates the repeated calls to &lt;code&gt;sum&lt;/code&gt; by accumulating the input sequence &amp;#8212; the red line in the graph above. Subtracting element &lt;code&gt;i-1&lt;/code&gt; from element &lt;code&gt;j&lt;/code&gt; of this cumulative sequence gives us the sum of elements in the range i, j of the original sequence. We won&amp;#8217;t study the code for this quadratic solution &amp;#8212; it doesn&amp;#8217;t add much to our analysis. Again, some care is needed to avoid &lt;a href="http://wordaligned.org/articles/joined-output-and-the-fencepost-problem.html"&gt;fencepost problems&lt;/a&gt;.
&lt;/p&gt;
&lt;p&gt;We won&amp;#8217;t look at the divide-and-conquer NlogN solution either. It&amp;#8217;s hard to understand, and we can do far better.
&lt;/p&gt;

&lt;h3&gt;&lt;a href="http://wordaligned.org/articles/the-maximum-subsequence-problem#toc2" name="toclinear-solution" id="toclinear-solution"&gt;Linear Solution&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;There is a linear solution. The idea is to scan the sequence from start to finish keeping track of &lt;code&gt;maxsofar&lt;/code&gt;, the maximum sum of a contiguous subsequence seen so far, and &lt;code&gt;maxendinghere&lt;/code&gt;, the maximum sum of a contiguous subsequence which ends at the current position. Bentley&amp;#8217;s pseudo-code reads:
&lt;/p&gt;
&lt;div class="typocode"&gt;

&lt;pre class="prettyprint"&gt;maxsofar = 0
maxendinghere = 0
for i = [0, n)
    /* invariant: maxendinghere and maxsofar are accurate
       are accurate for x[0..i-1] */
    maxendinghere = max(maxendinghere + x[i], 0)
    maxsofar = max(maxsofar, maxendinghere)

&lt;/pre&gt;

&lt;/div&gt;

&lt;p&gt;This translates directly into Python.
&lt;/p&gt;
&lt;div class="typocode"&gt;

&lt;pre class="prettyprint"&gt;def max_sum_subsequence(seq):
    maxsofar = 0
    maxendinghere = 0
    for s in seq:
        # invariant: maxendinghere and maxsofar are accurate
        # are accurate up to s
        maxendinghere = max(maxendinghere + s, 0)
        maxsofar = max(maxsofar, maxendinghere)
    return maxsofar

&lt;/pre&gt;

&lt;/div&gt;

&lt;p&gt;Now, this is a fabulous solution. Bentley describes it as subtle. Such a succinct code snippet hardly &lt;strong&gt;looks&lt;/strong&gt; subtle, but I agree, the loop body &lt;strong&gt;does&lt;/strong&gt; take a bit of understanding:
&lt;/p&gt;
&lt;div class="typocode"&gt;

&lt;pre class="prettyprint"&gt;maxendinghere = max(maxendinghere + s, 0)
maxsofar = max(maxsofar, maxendinghere)

&lt;/pre&gt;

&lt;/div&gt;

&lt;p&gt;&lt;strong&gt;Why does this work?&lt;/strong&gt; 
&lt;/p&gt;
&lt;p&gt;Well, essentially maxendinghere is what&amp;#8217;s accumulating the subsequences &amp;#8212; it keeps rolling the next element into itself. Should this accumulated sum ever become negative we know that the subsequence-which-ends-here we&amp;#8217;re currently tracking is worse than the empty subsequence-which-restarts-here; so we can reset our subsequence accumulator, and the first clause of the loop invariant still holds. Combine this with the observation that maxsofar tracks peaks in maxendinghere and we&amp;#8217;re done.
&lt;/p&gt;
&lt;p&gt;The loop-invariant comment provides a good example of how comments can help us understand an algorithm, even though the code is minimal and the variable names are well-chosen.
&lt;/p&gt;

&lt;h3&gt;&lt;a href="http://wordaligned.org/articles/the-maximum-subsequence-problem#toc3" name="tocstreaming-solution" id="tocstreaming-solution"&gt;Streaming Solution&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;I prefer to think of this problem in terms of streams &amp;#8212; lazily evaluated sequences. Think of our log file as generating a stream of numbers:
&lt;/p&gt;
&lt;div class="typocode"&gt;

&lt;pre class="prettyprint"&gt;... 0 1 2 -3 3 -1 0 -4 0 -1 -4 2 4 1 1 3 1 0 -2 -3 -3 -2 3 1 1 4 5 -3 -2 -1 ...

&lt;/pre&gt;

&lt;/div&gt;

&lt;p&gt;The first thing we do is transform this stream to generate another stream, the cumulative sum of numbers seen so far. It&amp;#8217;s an integration of sorts. You&amp;#8217;ll remember we already used this stream, or an in-memory version of it, in our quadratic solution to the problem: the difference between points on it yields subsequence-sums.
&lt;/p&gt;

&lt;h4&gt;&lt;a href="http://wordaligned.org/articles/the-maximum-subsequence-problem#toc4" name="tocstream-accumulate" id="tocstream-accumulate"&gt;Stream Accumulate&lt;/a&gt;&lt;/h4&gt;
&lt;p&gt;We generate the accumulated stream from our original stream like this:
&lt;/p&gt;
&lt;div class="typocode"&gt;

&lt;pre class="prettyprint"&gt;def stream_accumulate(stream):
    total = 0
    for s in stream:
        total += s
        yield total

&lt;/pre&gt;

&lt;/div&gt;

&lt;p&gt;The graph below samples the first five minutes of this stream. The red line accumulates values from the pale grey line.
&lt;/p&gt;
&lt;img alt="Graph plotting accumulated entries to the Pearly Gates club" src="http://chart.apis.google.com/chart?
cht=lc
&amp;amp;chs=500x250
&amp;amp;chxt=x,y
&amp;amp;chxl=0:|0min|1min|2min|3min|4min|5min
&amp;amp;chxr=1,-8.0,10.0
&amp;amp;chd=t:44.4,50.0,55.6,27.8,61.1,38.9,44.4,22.2,44.4,38.9,22.2,55.6,66.7,50.0,50.0,61.1,50.0,44.4,33.3,27.8,27.8,33.3,61.1,50.0,50.0,66.7,72.2,27.8,33.3,38.9|44.4,50.0,61.1,44.4,61.1,55.6,55.6,33.3,33.3,27.8,5.6,16.7,38.9,44.4,50.0,66.7,72.2,72.2,61.1,44.4,27.8,16.7,33.3,38.9,44.4,66.7,94.4,77.8,66.7,61.1
&amp;amp;chm=x,FFCC33,1,10.0,20.0|x,FFCC33,1,26.0,20.0
&amp;amp;chco=CCCCCC,CC0000
&amp;amp;chls=3,1,0|3,1,0
&amp;amp;chdl=Entries|Accum.+Entries
" /&gt;

&lt;p&gt;These accumulated numbers represent the number of members who have entered the club since we started tracking them. On our graph, the maximum sum contiguous subsequence is simply the greatest Y-increase between any two points on this graph. X&amp;#8217;s mark these points on the graph above. (Note: it&amp;#8217;s &lt;strong&gt;not&lt;/strong&gt; the Y-range of the graph we want since our X-values are time-ordered, and we require X1 &amp;lt;= X2). 
&lt;/p&gt;

&lt;h4&gt;&lt;a href="http://wordaligned.org/articles/the-maximum-subsequence-problem#toc5" name="tocstream-floor" id="tocstream-floor"&gt;Stream Floor&lt;/a&gt;&lt;/h4&gt;
&lt;p&gt;A second transformation yields the floor of the accumulated stream.
&lt;/p&gt;
&lt;div class="typocode"&gt;

&lt;pre class="prettyprint"&gt;import sys

def stream_floor(stream):
    m = 0
    for s in stream:
        m = min(m, s)
        yield m

&lt;/pre&gt;

&lt;/div&gt;

&lt;p&gt;(Note that, for our purposes, the floor of the stream isn&amp;#8217;t exactly the stream of minimum values taken by the stream &amp;#8212; we enforce a baseline at zero. It would be better to allow clients of this function to supply an optional baseline value, but I wanted the simplest possible code that shows the idea.)
&lt;/p&gt;
&lt;p&gt;Here&amp;#8217;s a graph plotting the accumulated entries alongside the floor of these entries.
&lt;/p&gt;
&lt;img alt="Graph plotting accumulated entries and floor of accumulated entries to the Pearly Gates club" src="http://chart.apis.google.com/chart?
cht=lc
&amp;amp;chs=500x250
&amp;amp;chxt=x,y
&amp;amp;chxl=0:|0min|1min|2min|3min|4min|5min
&amp;amp;chxr=1,-8.0,10.0
&amp;amp;chd=t:44.4,50.0,61.1,44.4,61.1,55.6,55.6,33.3,33.3,27.8,5.6,16.7,38.9,44.4,50.0,66.7,72.2,72.2,61.1,44.4,27.8,16.7,33.3,38.9,44.4,66.7,94.4,77.8,66.7,61.1|44.4,44.4,44.4,44.4,44.4,44.4,44.4,33.3,33.3,27.8,5.6,5.6,5.6,5.6,5.6,5.6,5.6,5.6,5.6,5.6,5.6,5.6,5.6,5.6,5.6,5.6,5.6,5.6,5.6,5.6
&amp;amp;chco=CC0000,333333
&amp;amp;chls=3,1,0|3,1,0
&amp;amp;chm=b,CCCCCC,0,1,0
&amp;amp;chdl=Accum.+Entries|Floor+Accum.+Entries
" /&gt;

&lt;p&gt;We&amp;#8217;re very close to what we want now. We can track Y-increases on the graph just by generating the difference between the accumulated stream and its floor &amp;#8212; the shading on the graph.
&lt;/p&gt;

&lt;h4&gt;&lt;a href="http://wordaligned.org/articles/the-maximum-subsequence-problem#toc6" name="tocstream-diff" id="tocstream-diff"&gt;Stream Diff&lt;/a&gt;&lt;/h4&gt;
&lt;p&gt;Here&amp;#8217;s an implementation of &lt;code&gt;stream_diff&lt;/code&gt;. We can&amp;#8217;t just plug a minus sign &amp;#8220;-&amp;#8221; into the mapping function, so we have to use the less wieldy &lt;code&gt;operator.sub&lt;/code&gt;.
&lt;/p&gt;
&lt;div class="typocode"&gt;

&lt;pre class="prettyprint"&gt;import itertools
import operator

def stream_diff(s, t):
    return itertools.imap(operator.sub, s, t)

&lt;/pre&gt;

&lt;/div&gt;

&lt;p&gt;Alternatively, we could generate the new stream with an explicit loop:
&lt;/p&gt;
&lt;div class="typocode"&gt;

&lt;pre class="prettyprint"&gt;import itertools

def stream_diff(s, t):
    for ss, tt in itertools.izip(s, t):
        yield ss - tt

&lt;/pre&gt;

&lt;/div&gt;

&lt;p&gt;The final graph shows us the difference between the accumulated entry count and its floor. I&amp;#8217;ve also added the ceiling of this stream as a thick red line (I&amp;#8217;m sure you can figure out how to implement &lt;code&gt;stream_ceiling&lt;/code&gt;), and this ceiling represents the stream of maximum sum contiguous subsequences. 
&lt;/p&gt;
&lt;img alt="Graph plotting Max-ends-here and Max-so-far" src="http://chart.apis.google.com/chart?
cht=lc
&amp;amp;chtt=Maximum+Subsequences+at+the+Pearly+Gates+club
&amp;amp;chs=500x250
&amp;amp;chxt=x,y
&amp;amp;chxl=0:|0min|1min|2min|3min|4min|5min
&amp;amp;chxr=1,0.0,17.0
&amp;amp;chd=t:0.0,5.9,17.6,17.6,17.6,17.6,17.6,17.6,17.6,17.6,17.6,17.6,35.3,41.2,47.1,64.7,70.6,70.6,70.6,70.6,70.6,70.6,70.6,70.6,70.6,70.6,94.1,94.1,94.1,94.1|0.0,5.9,17.6,0.0,17.6,11.8,11.8,0.0,0.0,0.0,0.0,11.8,35.3,41.2,47.1,64.7,70.6,70.6,58.8,41.2,23.5,11.8,29.4,35.3,41.2,64.7,94.1,76.5,64.7,58.8|0.0,0.0
&amp;amp;chco=aa0000,333333
&amp;amp;chls=4,1,0|2,1,0
&amp;amp;chm=b,CCCCCC,1,2,0
&amp;amp;chdl=Max-so-far|Max-ending-here
" /&gt;

&lt;p&gt;We&amp;#8217;ve re-labelled the lines &lt;code&gt;Max-so-far&lt;/code&gt; and &lt;code&gt;Max-ending-here&lt;/code&gt; because they&amp;#8217;re the stream of values taken by the variables &lt;code&gt;maxsofar&lt;/code&gt; and &lt;code&gt;maxendinghere&lt;/code&gt; during Bentley&amp;#8217;s clever solution to the maximum sum contiguous subsequence problem. I think we&amp;#8217;re in a better position to understand how this solution works now.
&lt;/p&gt;

&lt;h3&gt;&lt;a href="http://wordaligned.org/articles/the-maximum-subsequence-problem#toc7" name="tocstreams-and-collections" id="tocstreams-and-collections"&gt;Streams and Collections&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Please don&amp;#8217;t imagine these streams are bloated. &lt;span /&gt;They may be infinite (remember the Pearly Gates club never closes!) but that doesn&amp;#8217;t mean they take up much space. The graphs shown represent snapshots of their activity, and at no point do our presented algorithms actually store a five minute buffer of entries.
&lt;/p&gt;
&lt;p&gt;A final solution to the maximum sum contiguous subsequence problem reads like this. We&amp;#8217;ve pushed the general purpose stream transformation functions into a separate module, &lt;code&gt;stream.py&lt;/code&gt;.
&lt;/p&gt;
&lt;div class="typocode"&gt;

&lt;pre class="prettyprint"&gt;import itertools
import stream

def max_sum_subsequence_stream(ss):
    "Return the stream of max sum contiguous subsequences of the input iterable."
    accu1, accu2 = itertools.tee(stream.accumulate(ss))
    return stream.ceil(stream.diff(accu1, 
                       stream.floor(accu2, baseline=0)))

def max_sum_subsequence(ss):
    "Return the max sum of a contiguous subsequence of the input iterable."
    return stream.last(max_sum_subsequence_stream(ss))

&lt;/pre&gt;

&lt;/div&gt;

&lt;p&gt;The iterable supplied to &lt;code&gt;max_sum_subsequence&lt;/code&gt; has its last value read, and should therefore be bounded if we want the function to return. We haven&amp;#8217;t supplied arguments to extract a portion of this iterable (to generate maximum subsequences for the club on a particular day, for example) because that&amp;#8217;s what &lt;code&gt;itertools.islice&lt;/code&gt; is for.
&lt;/p&gt;
&lt;p&gt;Note that &lt;code&gt;max_sum_subsequence_stream()&lt;/code&gt; may be more useful to clients than &lt;code&gt;max_sum_subsequence()&lt;/code&gt;. Suppose, for example, we&amp;#8217;re only interested when the maximum sum subsequence exceeds 100. We can do this directly by connecting &lt;code&gt;itertools.dropwhile()&lt;/code&gt; to our function.
&lt;/p&gt;
&lt;div class="typocode"&gt;

&lt;pre class="prettyprint"&gt;def max_subseq_exceeds(seq, limit=100):
    max_sub_s = max_sum_subsequence_stream(seq)
    return itertools.dropwhile(lambda s: s &amp;lt;= limit, max_sub_s)

&lt;/pre&gt;

&lt;/div&gt;

&lt;p&gt;Perhaps we&amp;#8217;d like to know if the maximum sum subsequence reaches a plateau; that is, it stays on a level for a while.
&lt;/p&gt;
&lt;p&gt;Here&amp;#8217;s the stream module.
&lt;/p&gt;
&lt;div class="typocode"&gt;&lt;div class="codetitle"&gt;stream.py&lt;/div&gt;

&lt;pre class="prettyprint"&gt;"General purpose stream generation functions."
import itertools

def floor(stream, baseline=None):
    """Generate the stream of minimum values from the input stream.
    
    The baseline, if supplied, is an upper limit for the floor.
    &amp;gt;&amp;gt;&amp;gt; ff = floor((1, 2, -2, 3))
    &amp;gt;&amp;gt;&amp;gt; assert list(ff) == [1, 1, -2, -2]
    &amp;gt;&amp;gt;&amp;gt; ff = floor((1, 2, -2, 3), 0)
    &amp;gt;&amp;gt;&amp;gt; assert list(ff) == [0, 0, -2, -2]    
    """
    stream = iter(stream)
    m = baseline
    if m is None:
        try:
            m = stream.next()
            yield m
        except StopIteration:
            pass
    for s in stream:
        m = min(m, s)
        yield m

def ceil(stream):
    """Generate the stream of maximum values from the input stream.
    
    &amp;gt;&amp;gt;&amp;gt; top = ceil([0, -1, 2, -2, 3])
    &amp;gt;&amp;gt;&amp;gt; assert list(top) == [0, 0, 2, 2, 3]
    """
    stream = iter(stream)
    try:
        M = stream.next()
        yield M
    except StopIteration:
        pass
    for s in stream:
        M = max(M, s)
        yield M

def accumulate(stream):
    """Generate partial sums from the stream.
    
    &amp;gt;&amp;gt;&amp;gt; accu = accumulate([1, 2, 3, 4])
    &amp;gt;&amp;gt;&amp;gt; assert list(accu) == [1, 3, 6, 10]
    """
    total = 0
    for s in stream:
        total += s
        yield total

def diff(s, t):
    """Generate the differences between two streams
    
    If the streams are of unequal length, the shorter is truncated.
    &amp;gt;&amp;gt;&amp;gt; dd = diff([2, 4, 6, 8], [1, 2, 3])
    &amp;gt;&amp;gt;&amp;gt; assert list(dd) == [1, 2, 3]
    """
    import operator
    return itertools.imap(operator.sub, s, t)

def last(stream, default=None):
    """Return the last item in the stream or the default if the stream is empty.
    
    &amp;gt;&amp;gt;&amp;gt; last('abc')
    'c'
    &amp;gt;&amp;gt;&amp;gt; last([], default=-1)
    -1
    """
    s = default
    for s in stream:
        pass
    return s

if __name__ == "__main__":
    import doctest
    doctest.testmod()

&lt;/pre&gt;

&lt;/div&gt;


&lt;h3&gt;&lt;a href="http://wordaligned.org/articles/the-maximum-subsequence-problem#toc8" name="tocstream-on" id="tocstream-on"&gt;Stream on&amp;#8230;&lt;/a&gt;&lt;/h3&gt;
&lt;ol&gt;
 &lt;li&gt;&lt;p&gt;The maximum sum contiguous subsequence problem is described in &lt;a href="http://www.cs.bell-labs.com/cm/cs/pearls/"&gt;&amp;#8220;Programming Pearls&amp;#8221;&lt;/a&gt; by Jon Bentley. 
&lt;/p&gt;

 &lt;/li&gt;

 &lt;li&gt;&lt;p&gt;My favourite introduction to computer programming, &amp;#8220;Structure and Interpretation of Computer Programs&amp;#8221;, has &lt;a href="http://mitpress.mit.edu/sicp/full-text/book/book-Z-H-24.html#%_sec_3.5"&gt;lots to say about streams&lt;/a&gt;, and suggests they have a role in concurrent programming and modelling time. 
&lt;/p&gt;

 &lt;/li&gt;

 &lt;li&gt;&lt;p&gt;Streams are a natural fit with functional programming, and well supported by languages like &lt;a href="http://www.schemers.org"&gt;Scheme&lt;/a&gt; and &lt;a href="http://haskell.org"&gt;Haskell&lt;/a&gt;. Python also handles them nicely: look into &lt;a href="http://www.python.org/dev/peps/pep-0255/"&gt;generators&lt;/a&gt;, &lt;a href="http://www.python.org/dev/peps/pep-0289/"&gt;generator expressions&lt;/a&gt;, the &lt;a href="http://docs.python.org/lib/module-itertools.html"&gt;itertools module&lt;/a&gt;, and study &lt;code&gt;test_generators.py&lt;/code&gt; carefully.
&lt;/p&gt;

 &lt;/li&gt;

 &lt;li&gt;&lt;p&gt;If you liked this article, try more Word Aligned articles &lt;a href="http://wordaligned.org/tag/streams/"&gt;tagged &amp;#8220;streams&amp;#8221;&lt;/a&gt;. And if you like puzzles, there are more articles &lt;a href="http://wordaligned.org/tag/puzzles/"&gt;tagged &amp;#8220;puzzles&amp;#8221;&lt;/a&gt; too.
&lt;/p&gt;

 &lt;/li&gt;

 &lt;li&gt;&lt;p&gt;The graphs in this article are generated using the &lt;a href="http://code.google.com/apis/chart/"&gt;Google chart API&lt;/a&gt;, which is both useful and &lt;span /&gt;a fine example of how to design and document a programming interface.
&lt;/p&gt;

 &lt;/li&gt;
&lt;/ol&gt;</description>
<dc:date>2007-12-17</dc:date>
<guid>http://wordaligned.org/articles/the-maximum-subsequence-problem</guid>
<author>tag@wordaligned.org (Thomas Guest)</author>
<link>http://wordaligned.org/articles/the-maximum-subsequence-problem</link>
<category>Charts</category>
</item>

<item>
<title>So many feeds, so little news</title>
<description>&lt;p&gt;I consume the internet using &lt;a href="http://www.mozilla.com/firefox/"&gt;a web browser&lt;/a&gt; and &lt;a href="http://reader.google.com"&gt;a feed reader&lt;/a&gt;. Here&amp;#8217;s the pseudo-code:
&lt;/p&gt;
&lt;div class="typocode"&gt;

&lt;pre class="prettyprint"&gt;find www -follow -type feed -print | sort

&lt;/pre&gt;

&lt;/div&gt;


&lt;h4&gt;Find&lt;/h4&gt;
&lt;p&gt;The &lt;code&gt;find&lt;/code&gt; process seeds itself. When I read something I like I follow promising links; and if I &lt;em&gt;do&lt;/em&gt; like what I then find, I click the feed icon in the browser address bar, and my preferences arrange for the feed to be filed by my news reader.
&lt;/p&gt;
&lt;img style="float:right;padding:10px;" width="50%" src="http://www.cricketschirping.com/processing/GraphLayout/GraphLayout.png" alt="Part of a graph" /&gt;

&lt;p&gt;So I&amp;#8217;m recursively walking a massive directed graph. The further I explore, the more there is to be explored. I haven&amp;#8217;t yet added the same node twice (I do at least remember where I&amp;#8217;ve been and what I&amp;#8217;ve already added) but it&amp;#8217;s only a matter of time (and now I think about it, I &lt;em&gt;have&lt;/em&gt; added planets which syndicate feeds I&amp;#8217;ve already subscribed to).
&lt;/p&gt;
&lt;p&gt;Should I tire of this auto-discovery, my feed reader will happily, and with unnerving accuracy, offer its own recommendations.
&lt;/p&gt;

&lt;h4&gt;Sort&lt;/h4&gt;
&lt;p&gt;The subsequent &lt;code&gt;sort&lt;/code&gt; isn&amp;#8217;t too bad. My reader supports various filing and filtering and viewing operations.
&lt;/p&gt;

&lt;h4&gt;Uniq&lt;/h4&gt;
&lt;p&gt;What I&amp;#8217;m starting to want, though, is &lt;code&gt;uniq&lt;/code&gt;.
&lt;/p&gt;
&lt;div class="typocode"&gt;

&lt;pre class="prettyprint"&gt;find www -type feed -follow -print | sort | uniq

&lt;/pre&gt;

&lt;/div&gt;

&lt;p&gt;Last week half a dozen feeds I subscribe to reported that &lt;a href="http://www.python.org/news/index.html#Fri07Dec20071020-0800"&gt;Python3.0a2 had been released&lt;/a&gt;; none added much news to that headline. Similarly lots of people told me about the &lt;a href="http://code.google.com/apis/chart/"&gt;google chart API launch&lt;/a&gt; &amp;#8212; though in in this case, some had something &lt;a href="http://www.dougma.com/archives/56"&gt;original&lt;/a&gt; to report. It&amp;#8217;s fuzzy &lt;code&gt;uniq&lt;/code&gt; I need, a filter which kills hollow echoes and keeps thoughtful commentary.
&lt;/p&gt;
&lt;p&gt;My feed reader shows me what&amp;#8217;s been updated. It can&amp;#8217;t show me what&amp;#8217;s new.
&lt;/p&gt;</description>
<dc:date>2007-12-11</dc:date>
<guid>http://wordaligned.org/articles/so-many-feeds-so-little-news</guid>
<author>tag@wordaligned.org (Thomas Guest)</author>
<link>http://wordaligned.org/articles/so-many-feeds-so-little-news</link>
<category>Charts</category>
</item>

</channel>
</rss>
