<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:dc="http://purl.org/dc/elements/1.1/" >
<channel>
<title>Word Aligned</title>
<link>http://wordaligned.org</link>
<description>tales from the code face</description>
<dc:creator>tag@wordaligned.org</dc:creator>
<language>en-gb</language>
<item>
<title>Folded files and rainbow code</title>
<description>&lt;p&gt;In one of my first programming jobs I worked at a software house which grew its own tools. We had a home made version control system, build system, test harness and programming language. We even had our own editor!
&lt;/p&gt;
&lt;p&gt;The language was C, lightly extended to support the primitive types of our particular problem domain. The editor was more esoteric. You drove it using the numeric keypad and it modeled source code as nested blocks:
&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;files contained blocks of:&lt;/li&gt;
&lt;ul&gt;&lt;li&gt;includes&lt;/li&gt;
&lt;li&gt;documentation&lt;/li&gt;
&lt;li&gt;data&lt;/li&gt;
&lt;li&gt;functions&lt;/li&gt;&lt;/ul&gt;
&lt;li&gt;functions contained groups of:&lt;/li&gt;
&lt;ul&gt;&lt;li&gt;parameters:&lt;/li&gt;
&lt;ul&gt;&lt;li&gt;in parameters&lt;/li&gt;
&lt;li&gt;out parameters&lt;/li&gt;&lt;/ul&gt;
&lt;li&gt;initialisation blocks&lt;/li&gt;
&lt;li&gt;assertions&lt;/li&gt;
&lt;li&gt;code blocks&lt;/li&gt;
&lt;li&gt;loops&lt;/li&gt;
&lt;li&gt;machine dependent sections&lt;/li&gt;
&lt;li&gt;returns&lt;/li&gt;&lt;/ul&gt;&lt;/ul&gt;

&lt;p&gt;The editor facilitated navigation of this nested structure, with keypresses to &lt;a href="http://en.wikipedia.org/wiki/Code_folding"&gt;fold and unfold&lt;/a&gt;.
&lt;/p&gt;
&lt;p&gt;You don&amp;#8217;t need to write your own editor to get the benefits of code folding: most editors support it to some degree. With this particular editor, however, folding reached its apotheosis. You could crimp and tuck and pleat, nesting layer upon layer within a single source file.
&lt;/p&gt;
&lt;p&gt;&lt;a href="http://www.flickr.com/photos/cobbphoto/4534419314/" title="Origami Dragon by g cobb, on Flickr"&gt;&lt;img src="http://farm5.staticflickr.com/4001/4534419314_705521d064.jpg" width="500" height="334" alt="Origami Dragon"&gt;&lt;/a&gt;
&lt;/p&gt;
&lt;span id="continue-reading"/&gt;

&lt;p&gt;The house editor wasn&amp;#8217;t mandated but the fold tokens it automatically placed in special comments made it challenging to work with anything else &lt;a id="fn1link" href="http://wordaligned.org/articles/folded-files-and-rainbow-code#fn1"&gt;&lt;sup&gt;[1]&lt;/sup&gt;&lt;/a&gt;. 
&lt;/p&gt;
&lt;p&gt;Folding made it easy to work with large files and long, complex functions. Looking back, I&amp;#8217;d say it made it &lt;strong&gt;too&lt;/strong&gt; easy &amp;#8212; I&amp;#8217;ve come to prefer other ways of organising code &amp;#8212; but at the time I saw things differently. We all did. What interests me now is the effect an editor has on the shape of your code.
&lt;/p&gt;
&lt;p&gt;A wide editing pane renders long lines comfortably. Code completion makes forgettable names workable. Smart indentation keeps your code legal even as you type. Cut and paste allows you to replicate an existing function and tweak it for a new use case. Undo, redo and autosave are like version control made simple.
&lt;/p&gt;
&lt;p&gt;The folding editor failed to seduce everyone. One colleague grumbled it lacked syntax highlighting. Well, it probably came from an age before coloured pixels, and, similarly dated, at the time, I couldn&amp;#8217;t see the need.
&lt;/p&gt;
&lt;p&gt;These days I find it hard to operate without syntax highlighting: code doesn&amp;#8217;t even look like code if imports, literals, comments etc. aren&amp;#8217;t visually distinct. Yet there are &lt;a href="http://en.wikipedia.org/wiki/Rob_Pike"&gt;elite programmers&lt;/a&gt; who write their own programming languages using their &lt;a href="http://acme.cat-v.org/faq"&gt;own editors&lt;/a&gt; who find syntax highlighting a distraction.
&lt;/p&gt;
&lt;iframe width="500" height="281" src="http://www.youtube.com/embed/dP1xVpMPn8M?rel=0" frameborder="0" allowfullscreen&gt;&lt;/iframe&gt;

&lt;p&gt;Walking round the office where I work I see a diversity of editors. There are split screens and floating windows, stacked up toolbars, icons piled high. Helicopter views expose the jagged outlines of source code seen from a distance. Lenses zoom in on regions of interest. Tokens glow like plankton in deep sea colour schemes.
&lt;/p&gt;
&lt;p&gt;&lt;a href="http://www.flickr.com/photos/76798465@N00/4169369269/" title="More phytoplankton zooplankton by willapalens, on Flickr"&gt;&lt;img src="http://farm3.staticflickr.com/2663/4169369269_ac9a8bf641.jpg" width="500" height="375" alt="More phytoplankton zooplankton"&gt;&lt;/a&gt;
&lt;/p&gt;
&lt;p&gt;It&amp;#8217;s good practice to develop code on multiple platforms even if your product targets just one. Different compilers and hardware exercise your software in different ways, making it resilient and portable. I wonder too if multiple editors scrutinize your software from different perspectives, keeping it flexible and clean.
&lt;/p&gt;
&lt;p style="text-align:center"&gt;&amp;sect;&lt;/p&gt;

&lt;p&gt;My thanks to &lt;a href="http://www.flickr.com/photos/cobbphoto"&gt;Gary Cobb&lt;/a&gt; for permission to use his origami dragon snap, and to &lt;a href="http://www.flickr.com/photos/76798465@N00"&gt;willapalens&lt;/a&gt; for the plankton. The video clip is by &lt;a href="http://swtch.com/~rsc"&gt;Russ Cox&lt;/a&gt;, acme fanatic and &lt;a href="http://golang.org"&gt;go developer&lt;/a&gt;.
&lt;/p&gt;
&lt;p&gt;&lt;hr /&gt;
   &lt;a id="fn1" href="http://wordaligned.org/articles/folded-files-and-rainbow-code#fn1link"&gt;[1]&lt;/a&gt;: Programmers relish challenges and one seasoned emacs user had put together an emacs mode to cope with the folds.
&lt;/p&gt;</description>
<dc:date>2013-01-23</dc:date>
<guid>http://wordaligned.org/articles/folded-files-and-rainbow-code</guid>
<author>tag@wordaligned.org (Thomas Guest)</author>
<link>http://wordaligned.org/articles/folded-files-and-rainbow-code</link>
<category>Editors</category>
</item>

<item>
<title>Accidental Emacs</title>
<description>&lt;div class="toc"&gt;
&lt;h2&gt;Contents&lt;/h2&gt;
&lt;ul&gt;
 &lt;li&gt;&lt;a href="http://wordaligned.org/articles/accidental-emacs#tocemacs-the-operating-system" name="toc0" id="toc0"&gt;Emacs the Operating System&lt;/a&gt;
 &lt;/li&gt;

 &lt;li&gt;&lt;a href="http://wordaligned.org/articles/accidental-emacs#tocwindow-management" name="toc1" id="toc1"&gt;Window Management&lt;/a&gt;
 &lt;/li&gt;

 &lt;li&gt;&lt;a href="http://wordaligned.org/articles/accidental-emacs#tocremote-editing" name="toc2" id="toc2"&gt;Remote Editing&lt;/a&gt;
 &lt;/li&gt;

 &lt;li&gt;&lt;a href="http://wordaligned.org/articles/accidental-emacs#tocbinary-editing" name="toc3" id="toc3"&gt;Binary Editing&lt;/a&gt;
 &lt;/li&gt;

 &lt;li&gt;&lt;a href="http://wordaligned.org/articles/accidental-emacs#tocarchive-editing" name="toc4" id="toc4"&gt;Archive Editing&lt;/a&gt;
 &lt;/li&gt;

 &lt;li&gt;&lt;a href="http://wordaligned.org/articles/accidental-emacs#tocdired-mode" name="toc5" id="toc5"&gt;Dired Mode&lt;/a&gt;
 &lt;/li&gt;

 &lt;li&gt;&lt;a href="http://wordaligned.org/articles/accidental-emacs#tockeyboard-macros" name="toc6" id="toc6"&gt;Keyboard Macros&lt;/a&gt;
 &lt;/li&gt;

 &lt;li&gt;&lt;a href="http://wordaligned.org/articles/accidental-emacs#tocan-ide-for-dynamic-languages" name="toc7" id="toc7"&gt;An IDE for Dynamic Languages&lt;/a&gt;
 &lt;/li&gt;

 &lt;li&gt;&lt;a href="http://wordaligned.org/articles/accidental-emacs#toccode-completion-for-cheats" name="toc8" id="toc8"&gt;Code completion for cheats&lt;/a&gt;
 &lt;/li&gt;

 &lt;li&gt;&lt;a href="http://wordaligned.org/articles/accidental-emacs#tocemail-surfing-media-editing" name="toc9" id="toc9"&gt;Email, Surfing, Media Editing&lt;/a&gt;
 &lt;/li&gt;

 &lt;li&gt;&lt;a href="http://wordaligned.org/articles/accidental-emacs#tocnotes" name="toc10" id="toc10"&gt;Notes&lt;/a&gt;
 &lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;&lt;p&gt;&lt;a href="http://homepage.mac.com/zenitani/emacs-e.html" title="Carbon Emacs for Mac OS X page"&gt;&lt;img style="float:left;" src="http://wordaligned.org/images/carbon-emacs-doc.png" alt="Carbon Emacs"/&gt;&lt;/a&gt;
&lt;/p&gt;
&lt;p&gt;Nice to see Emacs &lt;a href="http://www.informit.com/articles/article.aspx?p=1193856" title="After pencil and paper, Donald Knuth likes Emacs"&gt;getting&lt;/a&gt; a &lt;a href="http://wrds.wordpress.com/2007/05/18/ten-mostly-false-ideas-about-emacs/" title="Alexandru Laz&amp;#259;r on Emacs misconceptions"&gt;bit&lt;/a&gt; of &lt;a href="http://steve-yegge.blogspot.com/2008/03/js2-mode-new-javascript-mode-for-emacs.html" title="Steve Yegge writes elisp enabling Emacs customisation using JavaScript."&gt;press&lt;/a&gt; &lt;a href="http://www.johndcook.com/blog/2008/04/27/one-program-to-rule-them-all/" title="John D. Cook discusses life in a software application"&gt;recently&lt;/a&gt;. I&amp;#8217;ve used it for almost 20 years now and it dominates my time at the keyboard. It isn&amp;#8217;t perfect and I&amp;#8217;m reluctant to recommend it but I wouldn&amp;#8217;t want to be without it. Let me explain.
&lt;/p&gt;
&lt;p&gt;The best thing about &lt;a href="http://www.gnu.org/software/emacs/"&gt;Emacs&lt;/a&gt; is that it can do &lt;strong&gt;everything&lt;/strong&gt; (including the things it can&amp;#8217;t do yet). The worst thing about Emacs is finding out how it does &lt;strong&gt;anything&lt;/strong&gt;. I wouldn&amp;#8217;t call it discoverable. In fact, on several occasions, I&amp;#8217;ve learned about Emacs by accident: you press the wrong key combination (easy to do when you&amp;#8217;re holding down a couple of keys and stretching for a third) and, look, something interesting happens!
&lt;/p&gt;
&lt;p&gt;The rest of this article describes a few of these happy accidents: modes I never knew about and tricks I wish I&amp;#8217;d learned earlier.
&lt;/p&gt;
&lt;span id="continue-reading"/&gt;


&lt;h3&gt;&lt;a href="http://wordaligned.org/articles/accidental-emacs#toc0" name="tocemacs-the-operating-system" id="tocemacs-the-operating-system"&gt;Emacs the Operating System&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;&lt;a href="http://wordaligned.org/images/welcome-to-emacs.png" title="Emacs splash screen"&gt;&lt;img style="float:right;padding-left:10px;" src="http://wordaligned.org/images/welcome-to-emacs.jpg" alt="Emacs splash screen"/&gt;&lt;/a&gt;
&lt;/p&gt;
&lt;p&gt;Whenever I see the Emacs splash screen (click on the graphic for a close-up) I&amp;#8217;m amazed anyone ever gets past it. Computer users want instant gratification and a familiar interface &amp;#8212; thus the encouraging tip:
&lt;/p&gt;
&lt;blockquote&gt;&lt;p&gt;You can do basic editing with the menu bar and scroll bar using the mouse.
&lt;/p&gt;
&lt;/blockquote&gt;&lt;p&gt;Unhappily the rest of the screen discredits this friendly proposition. Where are the menu and scroll bars&lt;a id="fn1link" href="http://wordaligned.org/articles/accidental-emacs#fn1"&gt;&lt;sup&gt;[1]&lt;/sup&gt;&lt;/a&gt;, and what&amp;#8217;s with all the &lt;code&gt;Control&lt;/code&gt; this and &lt;code&gt;Meta&lt;/code&gt; that? If the scratchy artwork and bizarre mix of font styles don&amp;#8217;t put new users off, the remaining content surely will, with its dark warnings about sessions crashing and how to recover&lt;a id="fn2link" href="http://wordaligned.org/articles/accidental-emacs#fn2"&gt;&lt;sup&gt;[2]&lt;/sup&gt;&lt;/a&gt;.
&lt;/p&gt;
&lt;p&gt;Best of all, though, is the opening proposition:
&lt;/p&gt;
&lt;blockquote&gt;&lt;p&gt;GNU Emacs is one component of the GNU operating system
&lt;/p&gt;
&lt;/blockquote&gt;&lt;p&gt;which I read as a straight-faced rebuttal of the old gag:
&lt;/p&gt;
&lt;blockquote&gt;&lt;p&gt;It is a common joke, both among fans and detractors of Emacs, to describe it as an operating system masquerading as an editor&lt;a id="fn3link" href="http://wordaligned.org/articles/accidental-emacs#fn3"&gt;&lt;sup&gt;[3]&lt;/sup&gt;&lt;/a&gt;.
&lt;/p&gt;
&lt;/blockquote&gt;&lt;p&gt;GNU hasn&amp;#8217;t quite become an operating system but it does supply most of the standard Unix tools and Emacs works beautifully with them &amp;#8212; even on (Cyg-)Windows. &lt;code&gt;META-!&lt;/code&gt; executes a single shell command, for example. &lt;code&gt;META-|&lt;/code&gt; executes a shell command on the current region and puts the output in a temporary buffer. &lt;code&gt;META-X grep&lt;/code&gt; and &lt;code&gt;META-X grep-find&lt;/code&gt; build search on top of &lt;code&gt;grep&lt;/code&gt; and &lt;code&gt;find&lt;/code&gt;. &lt;code&gt;META-X shell&lt;/code&gt; opens up a shell window within Emacs, meaning you can run shell commands and process their output using the standard editor commands. Emacs info is a better man page browser than info. And so on.
&lt;/p&gt;
&lt;div class="typocode"&gt;&lt;div class="codetitle"&gt;OS integration examples&lt;/div&gt;

&lt;pre class="prettyprint"&gt;META-!
META-|
META-X grep
META-X grep-find
META-X shell

&lt;/pre&gt;

&lt;/div&gt;

&lt;p&gt;When Emacs shells out to external tools their execution is never hidden from you, so you lose none of the power of these tools. The converse of this also holds: if you don&amp;#8217;t know how to use &lt;code&gt;grep&lt;/code&gt; and &lt;code&gt;find&lt;/code&gt;, even basic search commands in Emacs will seem &lt;a href="http://wordaligned.org/articles/ignoring-svn-directories.html"&gt;cryptic and hard to customise&lt;/a&gt;. Emacs is, above all else, customisable. In fact, most of Emacs is customisation, and you&amp;#8217;ll soon give up on it if you can&amp;#8217;t accept this&lt;a id="fn4link" href="http://wordaligned.org/articles/accidental-emacs#fn4"&gt;&lt;sup&gt;[4]&lt;/sup&gt;&lt;/a&gt;.
&lt;/p&gt;

&lt;h3&gt;&lt;a href="http://wordaligned.org/articles/accidental-emacs#toc1" name="tocwindow-management" id="tocwindow-management"&gt;Window Management&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Over at Coding Horror, Jeff Atwood talks about &lt;a href="http://www.codinghorror.com/blog/archives/000928.html"&gt;&amp;#8220;large display paradox&amp;#8221;&lt;/a&gt;:
&lt;/p&gt;
&lt;blockquote&gt;&lt;p&gt;One of the &lt;i&gt;advantages&lt;/i&gt; of small monitors, ironically, is that &lt;b&gt;because they&amp;#8217;re small, they nudge users into a simpler, windowless method of working&lt;/b&gt;. Instead of wasting time sizing, moving, and z-ordering windows, users only need to deal with one maximized window at a time. They can flip between maximized applications in much the same way they change channels on the television. But once your display gets to 1600 x 1200 or beyond, this easy one-app-per-display model isn&amp;#8217;t feasible any more &amp;#8230;&lt;/p&gt;
&lt;p&gt;That&amp;#8217;s the &lt;b&gt;large display paradox&lt;/b&gt;. Having all that space can make you &lt;i&gt;less&lt;/i&gt; productive due to all the window manipulation excise you have to deal with to make effective use of it.&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;Well, I reckon Emacs has this problem cracked. On a small screen you can use a single maximised window: &lt;code&gt;CTRL-X B&lt;/code&gt; switches editor buffers (a bit like tabbed browsing) and &lt;code&gt;CTRL-X CTRL-B&lt;/code&gt; gets you a buffer management window. On a large screen &lt;code&gt;CTRL-X 3&lt;/code&gt; splits the enclosing window vertically, and &lt;code&gt;CTRL-X 2&lt;/code&gt; splits it horizontally. Repeat these commands to slice up your work space. &lt;code&gt;CTRL-X 1&lt;/code&gt; gets you back to a single window. The same commands work when you haven&amp;#8217;t got a proper windowing environment &amp;#8212; on a stripped down server for example, or one which hasn&amp;#8217;t booted properly. Very handy! 
&lt;/p&gt;
&lt;div class="typocode"&gt;&lt;div class="codetitle"&gt;Buffer and window management&lt;/div&gt;

&lt;pre class="prettyprint"&gt;CTRL-X B
CTRl-X CTRL-B
CTRL-X 3
CTRL-X 2
CTRL-X 1

&lt;/pre&gt;

&lt;/div&gt;


&lt;h3&gt;&lt;a href="http://wordaligned.org/articles/accidental-emacs#toc2" name="tocremote-editing" id="tocremote-editing"&gt;Remote Editing&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;If, for example, the stripped down server discussed in the previous section allows SSH access or similar, you don&amp;#8217;t need to install or run Emacs natively. Just use &lt;a href="http://www.gnu.org/software/tramp"&gt;tramp mode&lt;/a&gt; (&lt;strong&gt;T&lt;/strong&gt;ransparent &lt;strong&gt;R&lt;/strong&gt;emote file &lt;strong&gt;A&lt;/strong&gt;ccess, &lt;strong&gt;M&lt;/strong&gt;ultiple &lt;strong&gt;P&lt;/strong&gt;rotocol). Quoting from the &lt;a href="http://www.gnu.org/software/tramp"&gt;manual&lt;/a&gt;:
&lt;/p&gt;
&lt;blockquote&gt;&lt;p&gt;To access the file &lt;code&gt;localname&lt;/code&gt; on the remote machine &lt;code&gt;machine&lt;/code&gt; you would specify the filename /machine:localname.
   &amp;#8230;
&lt;/p&gt;
&lt;/blockquote&gt;&lt;p&gt;You can specify protocol (ftp, rsh, smb etc.) and user name too:
&lt;/p&gt;
&lt;blockquote&gt;&lt;p&gt;So, to connect to the machine &lt;code&gt;melancholia&lt;/code&gt; as &lt;code&gt;daniel&lt;/code&gt;, using the &lt;code&gt;ssh&lt;/code&gt; method to transfer files, and edit &lt;code&gt;.emacs&lt;/code&gt; in my home directory I would specify the filename &lt;code&gt;/ssh:daniel@melancholia:.emacs&lt;/code&gt;.
&lt;/p&gt;
&lt;/blockquote&gt;&lt;p&gt;You can omit both username and protocol: the former defaults to your current username, the latter to SSH. As usual, there are plenty of configuration options. I haven&amp;#8217;t touched any of them. Tramp mode just works: if I can access a remote machine, I can edit files on it and transfer files to and from it just as if it were local.
&lt;/p&gt;
&lt;div class="typocode"&gt;&lt;div class="codetitle"&gt;Remote editing example&lt;/div&gt;

&lt;pre class="prettyprint"&gt;Find file: /ssh:daniel@melancholia:.emacs

&lt;/pre&gt;

&lt;/div&gt;


&lt;h3&gt;&lt;a href="http://wordaligned.org/articles/accidental-emacs#toc3" name="tocbinary-editing" id="tocbinary-editing"&gt;Binary Editing&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Programmers often need to view the raw bytes packed into a file, and occasionally to edit these byte values. That&amp;#8217;s what &lt;a href="http://www.gnu.org/software/emacs/manual/html_node/emacs/Editing-Binary-Files.html"&gt;Hexl mode&lt;/a&gt; is for. &lt;code&gt;META-X hexl-find-file&lt;/code&gt; opens a file in this mode and &lt;code&gt;META-X hexl-mode&lt;/code&gt; switches a buffer to this mode.
&lt;/p&gt;
&lt;div class="typocode"&gt;

&lt;pre class="prettyprint"&gt;META-X hexl-find-file
META-X hexl-mode

&lt;/pre&gt;

&lt;/div&gt;


&lt;h3&gt;&lt;a href="http://wordaligned.org/articles/accidental-emacs#toc4" name="tocarchive-editing" id="tocarchive-editing"&gt;Archive Editing&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Did you know that Emacs can work on &lt;code&gt;.zip&lt;/code&gt;, &lt;code&gt;.tar&lt;/code&gt;, &lt;code&gt;.tgz&lt;/code&gt; etc archives directly? I found out when I opened one by accident: Emacs presents you with a view of the archive and you can browse files, edit them, rename them, remove them from the archive, and save the modified archive without ever having to manually extract it. No special knowledge required: it just works, a bit like &lt;code&gt;dired-mode&lt;/code&gt;.
&lt;/p&gt;

&lt;h3&gt;&lt;a href="http://wordaligned.org/articles/accidental-emacs#toc5" name="tocdired-mode" id="tocdired-mode"&gt;Dired Mode&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;If you open a directory with Emacs it puts you in &lt;a href="http://www.gnu.org/software/emacs/manual/html_node/emacs/Dired.html"&gt;dired-mode&lt;/a&gt;, the Emacs take on Windows Explorer, OS X Finder and so on. Many of the Emacs users I know don&amp;#8217;t use this mode, preferring either the native system file manager or plain old terminal windows for file operations (copy, move, list, &amp;#8230;) but I use it all the time and it&amp;#8217;s led to many happy Emacs accidents.
&lt;/p&gt;
&lt;p&gt;As an example, suppose you have a directory full of files with &lt;code&gt;names-like-this&lt;/code&gt;, and you want to rename all the files to use &lt;code&gt;names_like_this&lt;/code&gt; instead. Just switch to editable dired mode, run a standard search and replace to swap hyphens for underscores, then save the directory.
&lt;/p&gt;
&lt;p&gt;As a second example, suppose you want to view thumbnails of all the .png files in a directory. Use a pattern match &lt;code&gt;% m png&lt;/code&gt; to &amp;#8220;mark&amp;#8221; them (i.e. select them) then &lt;code&gt;CTRL-t d&lt;/code&gt; to display them. Now you can visit the thumbnails, removing, renaming, copying the associated files.
&lt;/p&gt;
&lt;p&gt;Cryptic, yes, but powerful, and no mouse required &amp;#8212; handy for laptops.
&lt;/p&gt;

&lt;h3&gt;&lt;a href="http://wordaligned.org/articles/accidental-emacs#toc6" name="tockeyboard-macros" id="tockeyboard-macros"&gt;Keyboard Macros&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;You can hear when someone sitting nearby doesn&amp;#8217;t know about editor macros or is using an editor which doesn&amp;#8217;t support them. The tedious repetition of the same sequence of keystrokes grows audible.
&lt;/p&gt;
&lt;p&gt;In Emacs you start recording a &lt;a href="http://www.gnu.org/software/emacs/manual/html_node/emacs/Keyboard-Macros.html"&gt;keyboard macro&lt;/a&gt; with &lt;code&gt;CTRL-X (&lt;/code&gt; and finish recording with &lt;code&gt;CTRL-X )&lt;/code&gt;. Everything typed between these bracketed commands has been recorded as a keyboard macro which &lt;code&gt;CTRL-X e&lt;/code&gt; executes and then &lt;code&gt;e&lt;/code&gt; repeats. If typing all those &lt;code&gt;eeeeee&lt;/code&gt;&amp;#8217;s is repetitive, supply a repeat count. A repeat count of 0 processes the whole buffer, and is often what&amp;#8217;s wanted.
&lt;/p&gt;
&lt;p&gt;There&amp;#8217;s far more to keyboard macros but this basic use alone will save your fingers and your sanity.
&lt;/p&gt;
&lt;div class="typocode"&gt;

&lt;pre class="prettyprint"&gt;CTRL-X (
CTRL-X )
CTRL-X e

&lt;/pre&gt;

&lt;/div&gt;


&lt;h3&gt;&lt;a href="http://wordaligned.org/articles/accidental-emacs#toc7" name="tocan-ide-for-dynamic-languages" id="tocan-ide-for-dynamic-languages"&gt;An IDE for Dynamic Languages&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Emacs has a proven architecture: a compact, stable core which is dynamically configured by a huge library of scripts. These scripts are written in elisp. You can edit, reload and add to them at any point, without the need to &lt;a href="http://steve-yegge.blogspot.com/2007/01/pinocchio-problem.html"&gt;reboot the main application&lt;/a&gt;. Rebooting wouldn&amp;#8217;t be such a big thing, though &amp;#8212; Emacs starts up in less than a couple of seconds &amp;#8212; what&amp;#8217;s important is that Emacs is dynamic to the core.
&lt;/p&gt;
&lt;p&gt;So it&amp;#8217;s not surprising Emacs has great modes for dynamic languages like Python, Ruby, Scheme. Here&amp;#8217;s how to develop Python code using Emacs:
&lt;/p&gt;
&lt;ul&gt;
 &lt;li&gt;
     Pull up a full-screen window
 &lt;/li&gt;

 &lt;li&gt;
     Split the window vertically
 &lt;/li&gt;

 &lt;li&gt;
     Use one side for the code you&amp;#8217;re working on
 &lt;/li&gt;

 &lt;li&gt;
     Use the other side to run an interpreted session
 &lt;/li&gt;

 &lt;li&gt;
     Switch sides as desired
 &lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;You continually select regions of code to execute. You step
   into the interpreter and use the Python &lt;code&gt;help&lt;/code&gt; command to get help on
   modules and functions &amp;#8212; including the ones you&amp;#8217;re creating right now.
   You rework a function in one window then exercise it in the other. You
   sketch experimental code, run it, rub it out.
&lt;/p&gt;
&lt;p&gt;The same technique works for Scheme and Ruby, and is likely to work for any other dynamic language. The gap between writing and running code disappears.
&lt;/p&gt;
&lt;p&gt;As computers grow more powerful, specialised programmers&amp;#8217; IDEs do what they can to support this style of working for compiled languages. I understand Eclipse parses, compiles, and executes Java code as you write it, and it&amp;#8217;s certainly an impressive piece of software. I&amp;#8217;d be interested to know how it fares with C++.
&lt;/p&gt;
&lt;p&gt;Emacs also works well enough with compiled languages. I&amp;#8217;ve heard Make described as &lt;a href="http://en.wikipedia.org/wiki/REPL"&gt;REPL&lt;/a&gt; for compiled languages, and &lt;code&gt;make -k&lt;/code&gt; is the default Emacs compile command. The usual IDE things are available. For more interactive probing of a compiled executable, &lt;code&gt;META-X gdb&lt;/code&gt; is about as good an interface to GDB as I&amp;#8217;ve seen. But I can&amp;#8217;t (for example) imagine Emacs persuading anyone to dispense with Visual Studio for .Net development.
&lt;/p&gt;

&lt;h3&gt;&lt;a href="http://wordaligned.org/articles/accidental-emacs#toc8" name="toccode-completion-for-cheats" id="toccode-completion-for-cheats"&gt;Code completion for cheats&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;This article cherry-picks a few Emacs modes you may not have discovered which I find invaluable. I haven&amp;#8217;t bothered listing the basics of how to open or close files, without which you won&amp;#8217;t get anywhere. One basic command I &lt;strong&gt;do&lt;/strong&gt; want to mention is &lt;code&gt;META-/&lt;/code&gt;, which dynamically expands whatever you&amp;#8217;re typing whatever mode you&amp;#8217;re in. I think of it as code completion for cheats, since it doesn&amp;#8217;t parse any source code and it works equally well on any type of file type. It&amp;#8217;s as useful as shell TAB-completion and I discovered it by accident.
&lt;/p&gt;

&lt;h3&gt;&lt;a href="http://wordaligned.org/articles/accidental-emacs#toc9" name="tocemail-surfing-media-editing" id="tocemail-surfing-media-editing"&gt;Email, Surfing, Media Editing&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;You can&amp;#8217;t edit photo, video or audio content in Emacs (perhaps I should say I don&amp;#8217;t know of an Emacs mode for doing so&lt;a id="fn5link" href="http://wordaligned.org/articles/accidental-emacs#fn5"&gt;&lt;sup&gt;[5]&lt;/sup&gt;&lt;/a&gt;). I don&amp;#8217;t use Emacs for spreadsheets or other &amp;#8220;office&amp;#8221; documents. You can use Emacs for ascii-art (&lt;a href="http://www.cinsk.org/emacs/emacs-artist.html"&gt;and here&amp;#8217;s a great flash animation showing someone do just that&lt;/a&gt;) but ascii-art doesn&amp;#8217;t look much good outside source code.
&lt;/p&gt;
&lt;p&gt;&lt;a href="http://homepage.mac.com/zenitani/emacs-e.html" title="Carbon Emacs for Mac OS X page"&gt;&lt;img style="float:left;" src="http://wordaligned.org/images/carbon-emacs.png" alt="Carbon Emacs"/&gt;&lt;/a&gt;
   &lt;a href="http://www.mozilla.com/firefox/" title="Firefox home page"&gt;&lt;img style="float:right;" src="http://wordaligned.org/images/firefox.png" alt="Firefox logo"/&gt;&lt;/a&gt;
&lt;/p&gt;
&lt;p&gt;Hardcore Emacs users swear by their editor as an email client and even use it as a web browser. I prefer the comfort of my second most used application, &lt;a href="http://www.mozilla.com/firefox/"&gt;Firefox&lt;/a&gt;. Come to think of it, Firefox adopts a lot of what&amp;#8217;s good about Emacs: the tabbed window, for example, which reinvents multiple buffers for the web browser; the clean, simple look&lt;a id="fn6link" href="http://wordaligned.org/articles/accidental-emacs#fn6"&gt;&lt;sup&gt;[6]&lt;/sup&gt;&lt;/a&gt;; the extensible architecture.
&lt;/p&gt;
&lt;p&gt;Funnily enough, you &lt;strong&gt;can&lt;/strong&gt; work with photo, video and audio using Firefox; and boring old online office suites have been news for a long while. Amazingly, you can continue to edit your rich media content even if you switch to Internet Explorer, without the need to relearn anything; a transition which puts the &lt;a href="http://en.wikipedia.org/wiki/Editor_war"&gt;Vi/Emacs wars&lt;/a&gt; into perspective. Could the web browser be the one true editor of the future?
&lt;/p&gt;
&lt;hr /&gt;


&lt;h3&gt;&lt;a href="http://wordaligned.org/articles/accidental-emacs#toc10" name="tocnotes" id="tocnotes"&gt;Notes&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;My thanks to &lt;a href="http://www.iwebthereforeiam.com/"&gt;Hugh Brown&lt;/a&gt; for pointing out a couple of errors with the original version of this article.
&lt;/p&gt;
&lt;p&gt;&lt;a id="fn1" href="http://wordaligned.org/articles/accidental-emacs#fn1link"&gt;[1]&lt;/a&gt; OK, so my &lt;code&gt;.emacs&lt;/code&gt; disables the scroll bar and menu bar before this splash screen appears, but telling people what their mouse is for hardly seems necessary.
&lt;/p&gt;
&lt;p&gt;&lt;a id="fn2" href="http://wordaligned.org/articles/accidental-emacs#fn2link"&gt;[2]&lt;/a&gt; I can&amp;#8217;t remember when Emacs last crashed on me. It&amp;#8217;s one of the three applications I auto-start on login and I usually leave it running until I shutdown. On occasion I&amp;#8217;ve forced it to quit but this has always been down to my own error, for example coding and executing (within Emacs) a tight loop.
&lt;/p&gt;
&lt;div class="amazon"&gt;&lt;a href="http://www.amazon.com/gp/product/0131429019?ie=UTF8&amp;amp;tag=wordalig-20"&gt;&lt;img src="http://wordaligned.org/images/books/taoup.jpg" alt="The Art of Unix Programming"/&gt;&lt;/a&gt;&lt;/div&gt;

&lt;p&gt;&lt;a id="fn3" href="http://wordaligned.org/articles/accidental-emacs#fn3link"&gt;[3]&lt;/a&gt; &lt;a href="http://catb.org/~esr/writings/taoup/html/ch13s02.html#emacs_editing"&gt;Quoted&lt;/a&gt; from Eric S. Raymond&amp;#8217;s excellent book &lt;a href="http://catb.org/~esr/writings/taoup/"&gt;&amp;#8220;The Art of Unix Programming&amp;#8221;&lt;/a&gt; 
&lt;/p&gt;
&lt;p&gt;&lt;a id="fn4" href="http://wordaligned.org/articles/accidental-emacs#fn4link"&gt;[4]&lt;/a&gt; In &lt;a href="http://catb.org/~esr/writings/taoup/"&gt;&amp;#8220;The Art of Unix Programming&amp;#8221;&lt;/a&gt; Eric S. Raymond discusses the question: &lt;a href="http://catb.org/~esr/writings/taoup/html/ch13s03.html#id2967765"&gt;&amp;#8220;Is Emacs an Argument against the Unix Tradition?&amp;#8221;&lt;/a&gt;. This is a rather long quotation to include here, I know, but I&amp;#8217;m sure the author wouldn&amp;#8217;t want me to alter his words in any way. I highly recommend the book and suggest you &lt;a href="http://www.amazon.com/gp/product/0131429019?ie=UTF8&amp;amp;tag=wordalig-20"&gt;buy a copy&lt;/a&gt; to read in full.
&lt;/p&gt;
&lt;blockquote&gt;&lt;p&gt;The central tension in the Unix tradition has always been between doing more with less and doing more with more.  It recurs in a
lot of different contexts, often as a struggle between designs that
have the quality of clean minimalism and others that choose expressive
range and power even at the cost of high complexity.  For both sides,
the arguments for or against Emacs have
exemplified this tension since it was first ported to Unix in the
early 1980s.&lt;/p&gt;&lt;p&gt;Programs that are both as useful and as large as
Emacs make Unix programmers uncomfortable
precisely because they force us to face the tension.  They suggest
that old-school Unix minimalism is valuable as a discipline, but
that we may have fallen into the error of dogmatism.&lt;/p&gt;&lt;p&gt;There are two ways Unix programmers can address this problem.
One is to deny that large is actually large. The other is to develop
a way of thinking about complexity that is not a dogma.&lt;/p&gt;&lt;p&gt;Our thought experiment with replacing Lisp and the extension
libraries gives us a new perspective on the oft-heard charge that
Emacs is bloated because its extension
library is so large.  Perhaps this is as unfair as charging that
&lt;code&gt;/bin/sh&lt;/code&gt; is bloated because the collection
of all shellscripts on a system is large.
Emacs could be considered a virtual machine
or framework around a collection of small, sharp tools (the modes)
that happen to be written in Lisp&lt;/p&gt;&lt;p&gt;On this view, the main difference between the shell and
Emacs is that Unix distributors don&amp;#8217;t ship
all the world&amp;#8217;s shellscripts along with the shell.  Objecting to
Emacs because having a general-purpose
language in it feels like bloat is approximately as silly as refusing
to use shellscripts because shell has conditionals and for loops.
Just as one doesn&amp;#8217;t have to learn shell to use shellscripts, one
doesn&amp;#8217;t have to learn Lisp to use Emacs.  If
Emacs has a design problem, it&amp;#8217;s not so
much the Lisp interpreter (the framework part) as the fact that the
mode library is an untidy heap of historical accretions &amp;#8212; but
that&amp;#8217;s a source of complexity users can ignore, because they won&amp;#8217;t be
affected by what they don&amp;#8217;t use.&lt;/p&gt;&lt;p&gt;This mode of argument is very comforting.  It can be applied to
other tool-integration frameworks, such as the (uncomfortably large)
GNOME and KDE desktop projects.  There is some force to it.
And yet, we should be suspicious of any &amp;#8216;perspective&amp;#8217; that
offers to resolve all our doubts so neatly; it might be a
rationalization, not a rationale.&lt;/p&gt;&lt;p&gt;Therefore, let&amp;#8217;s avoid the possibility of falling into denial
and accept that Emacs is both useful
and large &amp;#8212; that it &lt;span class="emphasis"&gt;&lt;em&gt;is&lt;/em&gt;&lt;/span&gt; an argument against
Unix minimalism.  What does our analysis of the kinds of complexity in
it, and the motives for it, suggest beyond that?  And is there reason
to believe that those lessons generalize?&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;a id="fn5" href="http://wordaligned.org/articles/accidental-emacs#fn5link"&gt;[5]&lt;/a&gt; So now I know better! In a &lt;a href="http://www.haloscan.com/comments/wordaligned/accidental_emacs/#19336"&gt;comment&lt;/a&gt; on this site, Johan Lindstrom says you can edit video using Emacs, &lt;a href="http://1010.co.uk/gneve.html"&gt;http://1010.co.uk/gneve.html&lt;/a&gt;, and in an email Arnold M&amp;#xe1;ty&amp;#xe1;si pointed me at this &lt;a href="http://www.youtube.com/watch?v=0vumR5Hcz7s"&gt;YouTube GNEVE demo&lt;/a&gt;, while over at reddit another &lt;a href="http://reddit.com/r/programming/info/6igup/comments/"&gt;comment&lt;/a&gt; mentions an audio editing mode, &lt;a href="http://delysid.org/emacs/ecasound-el.html"&gt;http://delysid.org/emacs/ecasound-el.html&lt;/a&gt;.
&lt;/p&gt;
&lt;p&gt;&lt;a id="fn6" href="http://wordaligned.org/articles/accidental-emacs#fn6link"&gt;[6]&lt;/a&gt; Splash screen excluded!
&lt;/p&gt;</description>
<dc:date>2008-05-06</dc:date>
<guid>http://wordaligned.org/articles/accidental-emacs</guid>
<author>tag@wordaligned.org (Thomas Guest)</author>
<link>http://wordaligned.org/articles/accidental-emacs</link>
<category>Editors</category>
</item>

</channel>
</rss>
