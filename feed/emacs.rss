<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:dc="http://purl.org/dc/elements/1.1/" >
<channel>
<title>Word Aligned</title>
<link>http://wordaligned.org</link>
<description>tales from the code face</description>
<dc:creator>tag@wordaligned.org</dc:creator>
<language>en-gb</language>
<item>
<title>&#8220;Solutions&#8221;</title>
<description>&lt;p&gt;I like working around enthusiasts and optimists but that doesn&amp;#8217;t mean I want to use chirpy or bombastic software.
&lt;/p&gt;
&lt;p&gt;These days I build programs using visual studio. Sure, it&amp;#8217;s a decent tool but part of me cringes every time I&amp;#8217;m asked to open a &lt;strong&gt;&amp;#8220;Solution&amp;#8221;&lt;/strong&gt; especially when what I get seems more like a &lt;strong&gt;&amp;#8220;Muddle&amp;#8221;&lt;/strong&gt;. A progress bar slides into action after my program links: &lt;strong&gt;&amp;#8220;Updating Intellisense &amp;#8230;&amp;#8221;&lt;/strong&gt;
&lt;/p&gt;
&lt;p&gt;Who coined that galumphing portmanteau? It means auto-completion and I don&amp;#8217;t want to know it&amp;#8217;s going on &amp;#8212; especially since I edit code using &lt;a href="http://wordaligned.org/articles/accidental-emacs.html"&gt;Emacs&lt;/a&gt;.
&lt;/p&gt;
&lt;p&gt;Perforce is new to me and I lean on a &lt;a href="http://www.perforce.com/product/components/perforce-visual-client" title="P4V"&gt;graphical client&lt;/a&gt; so heavily I sometimes trip over it. So when I&amp;#8217;m trying to dance round client workspaces and their half-baked integration with microsoft &lt;del&gt;muddles&lt;/del&gt; solutions, the last thing I want is to be asked to &lt;strong&gt;&amp;#8220;Choose a Favorite Connection&amp;#8221;&lt;/strong&gt;. When it comes to Perforce Servers I don&amp;#8217;t have favourites let alone favorites. Sorry.
&lt;/p&gt;</description>
<dc:date>2013-04-17</dc:date>
<guid>http://wordaligned.org/articles/solutions</guid>
<author>tag@wordaligned.org (Thomas Guest)</author>
<link>http://wordaligned.org/articles/solutions</link>
<category>Emacs</category>
</item>

<item>
<title>Accidental Emacs</title>
<description>&lt;div class="toc"&gt;
&lt;h2&gt;Contents&lt;/h2&gt;
&lt;ul&gt;
 &lt;li&gt;&lt;a href="http://wordaligned.org/articles/accidental-emacs#tocemacs-the-operating-system" name="toc0" id="toc0"&gt;Emacs the Operating System&lt;/a&gt;
 &lt;/li&gt;

 &lt;li&gt;&lt;a href="http://wordaligned.org/articles/accidental-emacs#tocwindow-management" name="toc1" id="toc1"&gt;Window Management&lt;/a&gt;
 &lt;/li&gt;

 &lt;li&gt;&lt;a href="http://wordaligned.org/articles/accidental-emacs#tocremote-editing" name="toc2" id="toc2"&gt;Remote Editing&lt;/a&gt;
 &lt;/li&gt;

 &lt;li&gt;&lt;a href="http://wordaligned.org/articles/accidental-emacs#tocbinary-editing" name="toc3" id="toc3"&gt;Binary Editing&lt;/a&gt;
 &lt;/li&gt;

 &lt;li&gt;&lt;a href="http://wordaligned.org/articles/accidental-emacs#tocarchive-editing" name="toc4" id="toc4"&gt;Archive Editing&lt;/a&gt;
 &lt;/li&gt;

 &lt;li&gt;&lt;a href="http://wordaligned.org/articles/accidental-emacs#tocdired-mode" name="toc5" id="toc5"&gt;Dired Mode&lt;/a&gt;
 &lt;/li&gt;

 &lt;li&gt;&lt;a href="http://wordaligned.org/articles/accidental-emacs#tockeyboard-macros" name="toc6" id="toc6"&gt;Keyboard Macros&lt;/a&gt;
 &lt;/li&gt;

 &lt;li&gt;&lt;a href="http://wordaligned.org/articles/accidental-emacs#tocan-ide-for-dynamic-languages" name="toc7" id="toc7"&gt;An IDE for Dynamic Languages&lt;/a&gt;
 &lt;/li&gt;

 &lt;li&gt;&lt;a href="http://wordaligned.org/articles/accidental-emacs#toccode-completion-for-cheats" name="toc8" id="toc8"&gt;Code completion for cheats&lt;/a&gt;
 &lt;/li&gt;

 &lt;li&gt;&lt;a href="http://wordaligned.org/articles/accidental-emacs#tocemail-surfing-media-editing" name="toc9" id="toc9"&gt;Email, Surfing, Media Editing&lt;/a&gt;
 &lt;/li&gt;

 &lt;li&gt;&lt;a href="http://wordaligned.org/articles/accidental-emacs#tocnotes" name="toc10" id="toc10"&gt;Notes&lt;/a&gt;
 &lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;&lt;p&gt;&lt;a href="http://homepage.mac.com/zenitani/emacs-e.html" title="Carbon Emacs for Mac OS X page"&gt;&lt;img style="float:left;" src="http://wordaligned.org/images/carbon-emacs-doc.png" alt="Carbon Emacs"/&gt;&lt;/a&gt;
&lt;/p&gt;
&lt;p&gt;Nice to see Emacs &lt;a href="http://www.informit.com/articles/article.aspx?p=1193856" title="After pencil and paper, Donald Knuth likes Emacs"&gt;getting&lt;/a&gt; a &lt;a href="http://wrds.wordpress.com/2007/05/18/ten-mostly-false-ideas-about-emacs/" title="Alexandru Laz&amp;#259;r on Emacs misconceptions"&gt;bit&lt;/a&gt; of &lt;a href="http://steve-yegge.blogspot.com/2008/03/js2-mode-new-javascript-mode-for-emacs.html" title="Steve Yegge writes elisp enabling Emacs customisation using JavaScript."&gt;press&lt;/a&gt; &lt;a href="http://www.johndcook.com/blog/2008/04/27/one-program-to-rule-them-all/" title="John D. Cook discusses life in a software application"&gt;recently&lt;/a&gt;. I&amp;#8217;ve used it for almost 20 years now and it dominates my time at the keyboard. It isn&amp;#8217;t perfect and I&amp;#8217;m reluctant to recommend it but I wouldn&amp;#8217;t want to be without it. Let me explain.
&lt;/p&gt;
&lt;p&gt;The best thing about &lt;a href="http://www.gnu.org/software/emacs/"&gt;Emacs&lt;/a&gt; is that it can do &lt;strong&gt;everything&lt;/strong&gt; (including the things it can&amp;#8217;t do yet). The worst thing about Emacs is finding out how it does &lt;strong&gt;anything&lt;/strong&gt;. I wouldn&amp;#8217;t call it discoverable. In fact, on several occasions, I&amp;#8217;ve learned about Emacs by accident: you press the wrong key combination (easy to do when you&amp;#8217;re holding down a couple of keys and stretching for a third) and, look, something interesting happens!
&lt;/p&gt;
&lt;p&gt;The rest of this article describes a few of these happy accidents: modes I never knew about and tricks I wish I&amp;#8217;d learned earlier.
&lt;/p&gt;
&lt;span id="continue-reading"/&gt;


&lt;h3&gt;&lt;a href="http://wordaligned.org/articles/accidental-emacs#toc0" name="tocemacs-the-operating-system" id="tocemacs-the-operating-system"&gt;Emacs the Operating System&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;&lt;a href="http://wordaligned.org/images/welcome-to-emacs.png" title="Emacs splash screen"&gt;&lt;img style="float:right;padding-left:10px;" src="http://wordaligned.org/images/welcome-to-emacs.jpg" alt="Emacs splash screen"/&gt;&lt;/a&gt;
&lt;/p&gt;
&lt;p&gt;Whenever I see the Emacs splash screen (click on the graphic for a close-up) I&amp;#8217;m amazed anyone ever gets past it. Computer users want instant gratification and a familiar interface &amp;#8212; thus the encouraging tip:
&lt;/p&gt;
&lt;blockquote&gt;&lt;p&gt;You can do basic editing with the menu bar and scroll bar using the mouse.
&lt;/p&gt;
&lt;/blockquote&gt;&lt;p&gt;Unhappily the rest of the screen discredits this friendly proposition. Where are the menu and scroll bars&lt;a id="fn1link" href="http://wordaligned.org/articles/accidental-emacs#fn1"&gt;&lt;sup&gt;[1]&lt;/sup&gt;&lt;/a&gt;, and what&amp;#8217;s with all the &lt;code&gt;Control&lt;/code&gt; this and &lt;code&gt;Meta&lt;/code&gt; that? If the scratchy artwork and bizarre mix of font styles don&amp;#8217;t put new users off, the remaining content surely will, with its dark warnings about sessions crashing and how to recover&lt;a id="fn2link" href="http://wordaligned.org/articles/accidental-emacs#fn2"&gt;&lt;sup&gt;[2]&lt;/sup&gt;&lt;/a&gt;.
&lt;/p&gt;
&lt;p&gt;Best of all, though, is the opening proposition:
&lt;/p&gt;
&lt;blockquote&gt;&lt;p&gt;GNU Emacs is one component of the GNU operating system
&lt;/p&gt;
&lt;/blockquote&gt;&lt;p&gt;which I read as a straight-faced rebuttal of the old gag:
&lt;/p&gt;
&lt;blockquote&gt;&lt;p&gt;It is a common joke, both among fans and detractors of Emacs, to describe it as an operating system masquerading as an editor&lt;a id="fn3link" href="http://wordaligned.org/articles/accidental-emacs#fn3"&gt;&lt;sup&gt;[3]&lt;/sup&gt;&lt;/a&gt;.
&lt;/p&gt;
&lt;/blockquote&gt;&lt;p&gt;GNU hasn&amp;#8217;t quite become an operating system but it does supply most of the standard Unix tools and Emacs works beautifully with them &amp;#8212; even on (Cyg-)Windows. &lt;code&gt;META-!&lt;/code&gt; executes a single shell command, for example. &lt;code&gt;META-|&lt;/code&gt; executes a shell command on the current region and puts the output in a temporary buffer. &lt;code&gt;META-X grep&lt;/code&gt; and &lt;code&gt;META-X grep-find&lt;/code&gt; build search on top of &lt;code&gt;grep&lt;/code&gt; and &lt;code&gt;find&lt;/code&gt;. &lt;code&gt;META-X shell&lt;/code&gt; opens up a shell window within Emacs, meaning you can run shell commands and process their output using the standard editor commands. Emacs info is a better man page browser than info. And so on.
&lt;/p&gt;
&lt;div class="typocode"&gt;&lt;div class="codetitle"&gt;OS integration examples&lt;/div&gt;

&lt;pre class="prettyprint"&gt;META-!
META-|
META-X grep
META-X grep-find
META-X shell

&lt;/pre&gt;

&lt;/div&gt;

&lt;p&gt;When Emacs shells out to external tools their execution is never hidden from you, so you lose none of the power of these tools. The converse of this also holds: if you don&amp;#8217;t know how to use &lt;code&gt;grep&lt;/code&gt; and &lt;code&gt;find&lt;/code&gt;, even basic search commands in Emacs will seem &lt;a href="http://wordaligned.org/articles/ignoring-svn-directories.html"&gt;cryptic and hard to customise&lt;/a&gt;. Emacs is, above all else, customisable. In fact, most of Emacs is customisation, and you&amp;#8217;ll soon give up on it if you can&amp;#8217;t accept this&lt;a id="fn4link" href="http://wordaligned.org/articles/accidental-emacs#fn4"&gt;&lt;sup&gt;[4]&lt;/sup&gt;&lt;/a&gt;.
&lt;/p&gt;

&lt;h3&gt;&lt;a href="http://wordaligned.org/articles/accidental-emacs#toc1" name="tocwindow-management" id="tocwindow-management"&gt;Window Management&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Over at Coding Horror, Jeff Atwood talks about &lt;a href="http://www.codinghorror.com/blog/archives/000928.html"&gt;&amp;#8220;large display paradox&amp;#8221;&lt;/a&gt;:
&lt;/p&gt;
&lt;blockquote&gt;&lt;p&gt;One of the &lt;i&gt;advantages&lt;/i&gt; of small monitors, ironically, is that &lt;b&gt;because they&amp;#8217;re small, they nudge users into a simpler, windowless method of working&lt;/b&gt;. Instead of wasting time sizing, moving, and z-ordering windows, users only need to deal with one maximized window at a time. They can flip between maximized applications in much the same way they change channels on the television. But once your display gets to 1600 x 1200 or beyond, this easy one-app-per-display model isn&amp;#8217;t feasible any more &amp;#8230;&lt;/p&gt;
&lt;p&gt;That&amp;#8217;s the &lt;b&gt;large display paradox&lt;/b&gt;. Having all that space can make you &lt;i&gt;less&lt;/i&gt; productive due to all the window manipulation excise you have to deal with to make effective use of it.&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;Well, I reckon Emacs has this problem cracked. On a small screen you can use a single maximised window: &lt;code&gt;CTRL-X B&lt;/code&gt; switches editor buffers (a bit like tabbed browsing) and &lt;code&gt;CTRL-X CTRL-B&lt;/code&gt; gets you a buffer management window. On a large screen &lt;code&gt;CTRL-X 3&lt;/code&gt; splits the enclosing window vertically, and &lt;code&gt;CTRL-X 2&lt;/code&gt; splits it horizontally. Repeat these commands to slice up your work space. &lt;code&gt;CTRL-X 1&lt;/code&gt; gets you back to a single window. The same commands work when you haven&amp;#8217;t got a proper windowing environment &amp;#8212; on a stripped down server for example, or one which hasn&amp;#8217;t booted properly. Very handy! 
&lt;/p&gt;
&lt;div class="typocode"&gt;&lt;div class="codetitle"&gt;Buffer and window management&lt;/div&gt;

&lt;pre class="prettyprint"&gt;CTRL-X B
CTRl-X CTRL-B
CTRL-X 3
CTRL-X 2
CTRL-X 1

&lt;/pre&gt;

&lt;/div&gt;


&lt;h3&gt;&lt;a href="http://wordaligned.org/articles/accidental-emacs#toc2" name="tocremote-editing" id="tocremote-editing"&gt;Remote Editing&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;If, for example, the stripped down server discussed in the previous section allows SSH access or similar, you don&amp;#8217;t need to install or run Emacs natively. Just use &lt;a href="http://www.gnu.org/software/tramp"&gt;tramp mode&lt;/a&gt; (&lt;strong&gt;T&lt;/strong&gt;ransparent &lt;strong&gt;R&lt;/strong&gt;emote file &lt;strong&gt;A&lt;/strong&gt;ccess, &lt;strong&gt;M&lt;/strong&gt;ultiple &lt;strong&gt;P&lt;/strong&gt;rotocol). Quoting from the &lt;a href="http://www.gnu.org/software/tramp"&gt;manual&lt;/a&gt;:
&lt;/p&gt;
&lt;blockquote&gt;&lt;p&gt;To access the file &lt;code&gt;localname&lt;/code&gt; on the remote machine &lt;code&gt;machine&lt;/code&gt; you would specify the filename /machine:localname.
   &amp;#8230;
&lt;/p&gt;
&lt;/blockquote&gt;&lt;p&gt;You can specify protocol (ftp, rsh, smb etc.) and user name too:
&lt;/p&gt;
&lt;blockquote&gt;&lt;p&gt;So, to connect to the machine &lt;code&gt;melancholia&lt;/code&gt; as &lt;code&gt;daniel&lt;/code&gt;, using the &lt;code&gt;ssh&lt;/code&gt; method to transfer files, and edit &lt;code&gt;.emacs&lt;/code&gt; in my home directory I would specify the filename &lt;code&gt;/ssh:daniel@melancholia:.emacs&lt;/code&gt;.
&lt;/p&gt;
&lt;/blockquote&gt;&lt;p&gt;You can omit both username and protocol: the former defaults to your current username, the latter to SSH. As usual, there are plenty of configuration options. I haven&amp;#8217;t touched any of them. Tramp mode just works: if I can access a remote machine, I can edit files on it and transfer files to and from it just as if it were local.
&lt;/p&gt;
&lt;div class="typocode"&gt;&lt;div class="codetitle"&gt;Remote editing example&lt;/div&gt;

&lt;pre class="prettyprint"&gt;Find file: /ssh:daniel@melancholia:.emacs

&lt;/pre&gt;

&lt;/div&gt;


&lt;h3&gt;&lt;a href="http://wordaligned.org/articles/accidental-emacs#toc3" name="tocbinary-editing" id="tocbinary-editing"&gt;Binary Editing&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Programmers often need to view the raw bytes packed into a file, and occasionally to edit these byte values. That&amp;#8217;s what &lt;a href="http://www.gnu.org/software/emacs/manual/html_node/emacs/Editing-Binary-Files.html"&gt;Hexl mode&lt;/a&gt; is for. &lt;code&gt;META-X hexl-find-file&lt;/code&gt; opens a file in this mode and &lt;code&gt;META-X hexl-mode&lt;/code&gt; switches a buffer to this mode.
&lt;/p&gt;
&lt;div class="typocode"&gt;

&lt;pre class="prettyprint"&gt;META-X hexl-find-file
META-X hexl-mode

&lt;/pre&gt;

&lt;/div&gt;


&lt;h3&gt;&lt;a href="http://wordaligned.org/articles/accidental-emacs#toc4" name="tocarchive-editing" id="tocarchive-editing"&gt;Archive Editing&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Did you know that Emacs can work on &lt;code&gt;.zip&lt;/code&gt;, &lt;code&gt;.tar&lt;/code&gt;, &lt;code&gt;.tgz&lt;/code&gt; etc archives directly? I found out when I opened one by accident: Emacs presents you with a view of the archive and you can browse files, edit them, rename them, remove them from the archive, and save the modified archive without ever having to manually extract it. No special knowledge required: it just works, a bit like &lt;code&gt;dired-mode&lt;/code&gt;.
&lt;/p&gt;

&lt;h3&gt;&lt;a href="http://wordaligned.org/articles/accidental-emacs#toc5" name="tocdired-mode" id="tocdired-mode"&gt;Dired Mode&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;If you open a directory with Emacs it puts you in &lt;a href="http://www.gnu.org/software/emacs/manual/html_node/emacs/Dired.html"&gt;dired-mode&lt;/a&gt;, the Emacs take on Windows Explorer, OS X Finder and so on. Many of the Emacs users I know don&amp;#8217;t use this mode, preferring either the native system file manager or plain old terminal windows for file operations (copy, move, list, &amp;#8230;) but I use it all the time and it&amp;#8217;s led to many happy Emacs accidents.
&lt;/p&gt;
&lt;p&gt;As an example, suppose you have a directory full of files with &lt;code&gt;names-like-this&lt;/code&gt;, and you want to rename all the files to use &lt;code&gt;names_like_this&lt;/code&gt; instead. Just switch to editable dired mode, run a standard search and replace to swap hyphens for underscores, then save the directory.
&lt;/p&gt;
&lt;p&gt;As a second example, suppose you want to view thumbnails of all the .png files in a directory. Use a pattern match &lt;code&gt;% m png&lt;/code&gt; to &amp;#8220;mark&amp;#8221; them (i.e. select them) then &lt;code&gt;CTRL-t d&lt;/code&gt; to display them. Now you can visit the thumbnails, removing, renaming, copying the associated files.
&lt;/p&gt;
&lt;p&gt;Cryptic, yes, but powerful, and no mouse required &amp;#8212; handy for laptops.
&lt;/p&gt;

&lt;h3&gt;&lt;a href="http://wordaligned.org/articles/accidental-emacs#toc6" name="tockeyboard-macros" id="tockeyboard-macros"&gt;Keyboard Macros&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;You can hear when someone sitting nearby doesn&amp;#8217;t know about editor macros or is using an editor which doesn&amp;#8217;t support them. The tedious repetition of the same sequence of keystrokes grows audible.
&lt;/p&gt;
&lt;p&gt;In Emacs you start recording a &lt;a href="http://www.gnu.org/software/emacs/manual/html_node/emacs/Keyboard-Macros.html"&gt;keyboard macro&lt;/a&gt; with &lt;code&gt;CTRL-X (&lt;/code&gt; and finish recording with &lt;code&gt;CTRL-X )&lt;/code&gt;. Everything typed between these bracketed commands has been recorded as a keyboard macro which &lt;code&gt;CTRL-X e&lt;/code&gt; executes and then &lt;code&gt;e&lt;/code&gt; repeats. If typing all those &lt;code&gt;eeeeee&lt;/code&gt;&amp;#8217;s is repetitive, supply a repeat count. A repeat count of 0 processes the whole buffer, and is often what&amp;#8217;s wanted.
&lt;/p&gt;
&lt;p&gt;There&amp;#8217;s far more to keyboard macros but this basic use alone will save your fingers and your sanity.
&lt;/p&gt;
&lt;div class="typocode"&gt;

&lt;pre class="prettyprint"&gt;CTRL-X (
CTRL-X )
CTRL-X e

&lt;/pre&gt;

&lt;/div&gt;


&lt;h3&gt;&lt;a href="http://wordaligned.org/articles/accidental-emacs#toc7" name="tocan-ide-for-dynamic-languages" id="tocan-ide-for-dynamic-languages"&gt;An IDE for Dynamic Languages&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Emacs has a proven architecture: a compact, stable core which is dynamically configured by a huge library of scripts. These scripts are written in elisp. You can edit, reload and add to them at any point, without the need to &lt;a href="http://steve-yegge.blogspot.com/2007/01/pinocchio-problem.html"&gt;reboot the main application&lt;/a&gt;. Rebooting wouldn&amp;#8217;t be such a big thing, though &amp;#8212; Emacs starts up in less than a couple of seconds &amp;#8212; what&amp;#8217;s important is that Emacs is dynamic to the core.
&lt;/p&gt;
&lt;p&gt;So it&amp;#8217;s not surprising Emacs has great modes for dynamic languages like Python, Ruby, Scheme. Here&amp;#8217;s how to develop Python code using Emacs:
&lt;/p&gt;
&lt;ul&gt;
 &lt;li&gt;
     Pull up a full-screen window
 &lt;/li&gt;

 &lt;li&gt;
     Split the window vertically
 &lt;/li&gt;

 &lt;li&gt;
     Use one side for the code you&amp;#8217;re working on
 &lt;/li&gt;

 &lt;li&gt;
     Use the other side to run an interpreted session
 &lt;/li&gt;

 &lt;li&gt;
     Switch sides as desired
 &lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;You continually select regions of code to execute. You step
   into the interpreter and use the Python &lt;code&gt;help&lt;/code&gt; command to get help on
   modules and functions &amp;#8212; including the ones you&amp;#8217;re creating right now.
   You rework a function in one window then exercise it in the other. You
   sketch experimental code, run it, rub it out.
&lt;/p&gt;
&lt;p&gt;The same technique works for Scheme and Ruby, and is likely to work for any other dynamic language. The gap between writing and running code disappears.
&lt;/p&gt;
&lt;p&gt;As computers grow more powerful, specialised programmers&amp;#8217; IDEs do what they can to support this style of working for compiled languages. I understand Eclipse parses, compiles, and executes Java code as you write it, and it&amp;#8217;s certainly an impressive piece of software. I&amp;#8217;d be interested to know how it fares with C++.
&lt;/p&gt;
&lt;p&gt;Emacs also works well enough with compiled languages. I&amp;#8217;ve heard Make described as &lt;a href="http://en.wikipedia.org/wiki/REPL"&gt;REPL&lt;/a&gt; for compiled languages, and &lt;code&gt;make -k&lt;/code&gt; is the default Emacs compile command. The usual IDE things are available. For more interactive probing of a compiled executable, &lt;code&gt;META-X gdb&lt;/code&gt; is about as good an interface to GDB as I&amp;#8217;ve seen. But I can&amp;#8217;t (for example) imagine Emacs persuading anyone to dispense with Visual Studio for .Net development.
&lt;/p&gt;

&lt;h3&gt;&lt;a href="http://wordaligned.org/articles/accidental-emacs#toc8" name="toccode-completion-for-cheats" id="toccode-completion-for-cheats"&gt;Code completion for cheats&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;This article cherry-picks a few Emacs modes you may not have discovered which I find invaluable. I haven&amp;#8217;t bothered listing the basics of how to open or close files, without which you won&amp;#8217;t get anywhere. One basic command I &lt;strong&gt;do&lt;/strong&gt; want to mention is &lt;code&gt;META-/&lt;/code&gt;, which dynamically expands whatever you&amp;#8217;re typing whatever mode you&amp;#8217;re in. I think of it as code completion for cheats, since it doesn&amp;#8217;t parse any source code and it works equally well on any type of file type. It&amp;#8217;s as useful as shell TAB-completion and I discovered it by accident.
&lt;/p&gt;

&lt;h3&gt;&lt;a href="http://wordaligned.org/articles/accidental-emacs#toc9" name="tocemail-surfing-media-editing" id="tocemail-surfing-media-editing"&gt;Email, Surfing, Media Editing&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;You can&amp;#8217;t edit photo, video or audio content in Emacs (perhaps I should say I don&amp;#8217;t know of an Emacs mode for doing so&lt;a id="fn5link" href="http://wordaligned.org/articles/accidental-emacs#fn5"&gt;&lt;sup&gt;[5]&lt;/sup&gt;&lt;/a&gt;). I don&amp;#8217;t use Emacs for spreadsheets or other &amp;#8220;office&amp;#8221; documents. You can use Emacs for ascii-art (&lt;a href="http://www.cinsk.org/emacs/emacs-artist.html"&gt;and here&amp;#8217;s a great flash animation showing someone do just that&lt;/a&gt;) but ascii-art doesn&amp;#8217;t look much good outside source code.
&lt;/p&gt;
&lt;p&gt;&lt;a href="http://homepage.mac.com/zenitani/emacs-e.html" title="Carbon Emacs for Mac OS X page"&gt;&lt;img style="float:left;" src="http://wordaligned.org/images/carbon-emacs.png" alt="Carbon Emacs"/&gt;&lt;/a&gt;
   &lt;a href="http://www.mozilla.com/firefox/" title="Firefox home page"&gt;&lt;img style="float:right;" src="http://wordaligned.org/images/firefox.png" alt="Firefox logo"/&gt;&lt;/a&gt;
&lt;/p&gt;
&lt;p&gt;Hardcore Emacs users swear by their editor as an email client and even use it as a web browser. I prefer the comfort of my second most used application, &lt;a href="http://www.mozilla.com/firefox/"&gt;Firefox&lt;/a&gt;. Come to think of it, Firefox adopts a lot of what&amp;#8217;s good about Emacs: the tabbed window, for example, which reinvents multiple buffers for the web browser; the clean, simple look&lt;a id="fn6link" href="http://wordaligned.org/articles/accidental-emacs#fn6"&gt;&lt;sup&gt;[6]&lt;/sup&gt;&lt;/a&gt;; the extensible architecture.
&lt;/p&gt;
&lt;p&gt;Funnily enough, you &lt;strong&gt;can&lt;/strong&gt; work with photo, video and audio using Firefox; and boring old online office suites have been news for a long while. Amazingly, you can continue to edit your rich media content even if you switch to Internet Explorer, without the need to relearn anything; a transition which puts the &lt;a href="http://en.wikipedia.org/wiki/Editor_war"&gt;Vi/Emacs wars&lt;/a&gt; into perspective. Could the web browser be the one true editor of the future?
&lt;/p&gt;
&lt;hr /&gt;


&lt;h3&gt;&lt;a href="http://wordaligned.org/articles/accidental-emacs#toc10" name="tocnotes" id="tocnotes"&gt;Notes&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;My thanks to &lt;a href="http://www.iwebthereforeiam.com/"&gt;Hugh Brown&lt;/a&gt; for pointing out a couple of errors with the original version of this article.
&lt;/p&gt;
&lt;p&gt;&lt;a id="fn1" href="http://wordaligned.org/articles/accidental-emacs#fn1link"&gt;[1]&lt;/a&gt; OK, so my &lt;code&gt;.emacs&lt;/code&gt; disables the scroll bar and menu bar before this splash screen appears, but telling people what their mouse is for hardly seems necessary.
&lt;/p&gt;
&lt;p&gt;&lt;a id="fn2" href="http://wordaligned.org/articles/accidental-emacs#fn2link"&gt;[2]&lt;/a&gt; I can&amp;#8217;t remember when Emacs last crashed on me. It&amp;#8217;s one of the three applications I auto-start on login and I usually leave it running until I shutdown. On occasion I&amp;#8217;ve forced it to quit but this has always been down to my own error, for example coding and executing (within Emacs) a tight loop.
&lt;/p&gt;
&lt;div class="amazon"&gt;&lt;a href="http://www.amazon.com/gp/product/0131429019?ie=UTF8&amp;amp;tag=wordalig-20"&gt;&lt;img src="http://wordaligned.org/images/books/taoup.jpg" alt="The Art of Unix Programming"/&gt;&lt;/a&gt;&lt;/div&gt;

&lt;p&gt;&lt;a id="fn3" href="http://wordaligned.org/articles/accidental-emacs#fn3link"&gt;[3]&lt;/a&gt; &lt;a href="http://catb.org/~esr/writings/taoup/html/ch13s02.html#emacs_editing"&gt;Quoted&lt;/a&gt; from Eric S. Raymond&amp;#8217;s excellent book &lt;a href="http://catb.org/~esr/writings/taoup/"&gt;&amp;#8220;The Art of Unix Programming&amp;#8221;&lt;/a&gt; 
&lt;/p&gt;
&lt;p&gt;&lt;a id="fn4" href="http://wordaligned.org/articles/accidental-emacs#fn4link"&gt;[4]&lt;/a&gt; In &lt;a href="http://catb.org/~esr/writings/taoup/"&gt;&amp;#8220;The Art of Unix Programming&amp;#8221;&lt;/a&gt; Eric S. Raymond discusses the question: &lt;a href="http://catb.org/~esr/writings/taoup/html/ch13s03.html#id2967765"&gt;&amp;#8220;Is Emacs an Argument against the Unix Tradition?&amp;#8221;&lt;/a&gt;. This is a rather long quotation to include here, I know, but I&amp;#8217;m sure the author wouldn&amp;#8217;t want me to alter his words in any way. I highly recommend the book and suggest you &lt;a href="http://www.amazon.com/gp/product/0131429019?ie=UTF8&amp;amp;tag=wordalig-20"&gt;buy a copy&lt;/a&gt; to read in full.
&lt;/p&gt;
&lt;blockquote&gt;&lt;p&gt;The central tension in the Unix tradition has always been between doing more with less and doing more with more.  It recurs in a
lot of different contexts, often as a struggle between designs that
have the quality of clean minimalism and others that choose expressive
range and power even at the cost of high complexity.  For both sides,
the arguments for or against Emacs have
exemplified this tension since it was first ported to Unix in the
early 1980s.&lt;/p&gt;&lt;p&gt;Programs that are both as useful and as large as
Emacs make Unix programmers uncomfortable
precisely because they force us to face the tension.  They suggest
that old-school Unix minimalism is valuable as a discipline, but
that we may have fallen into the error of dogmatism.&lt;/p&gt;&lt;p&gt;There are two ways Unix programmers can address this problem.
One is to deny that large is actually large. The other is to develop
a way of thinking about complexity that is not a dogma.&lt;/p&gt;&lt;p&gt;Our thought experiment with replacing Lisp and the extension
libraries gives us a new perspective on the oft-heard charge that
Emacs is bloated because its extension
library is so large.  Perhaps this is as unfair as charging that
&lt;code&gt;/bin/sh&lt;/code&gt; is bloated because the collection
of all shellscripts on a system is large.
Emacs could be considered a virtual machine
or framework around a collection of small, sharp tools (the modes)
that happen to be written in Lisp&lt;/p&gt;&lt;p&gt;On this view, the main difference between the shell and
Emacs is that Unix distributors don&amp;#8217;t ship
all the world&amp;#8217;s shellscripts along with the shell.  Objecting to
Emacs because having a general-purpose
language in it feels like bloat is approximately as silly as refusing
to use shellscripts because shell has conditionals and for loops.
Just as one doesn&amp;#8217;t have to learn shell to use shellscripts, one
doesn&amp;#8217;t have to learn Lisp to use Emacs.  If
Emacs has a design problem, it&amp;#8217;s not so
much the Lisp interpreter (the framework part) as the fact that the
mode library is an untidy heap of historical accretions &amp;#8212; but
that&amp;#8217;s a source of complexity users can ignore, because they won&amp;#8217;t be
affected by what they don&amp;#8217;t use.&lt;/p&gt;&lt;p&gt;This mode of argument is very comforting.  It can be applied to
other tool-integration frameworks, such as the (uncomfortably large)
GNOME and KDE desktop projects.  There is some force to it.
And yet, we should be suspicious of any &amp;#8216;perspective&amp;#8217; that
offers to resolve all our doubts so neatly; it might be a
rationalization, not a rationale.&lt;/p&gt;&lt;p&gt;Therefore, let&amp;#8217;s avoid the possibility of falling into denial
and accept that Emacs is both useful
and large &amp;#8212; that it &lt;span class="emphasis"&gt;&lt;em&gt;is&lt;/em&gt;&lt;/span&gt; an argument against
Unix minimalism.  What does our analysis of the kinds of complexity in
it, and the motives for it, suggest beyond that?  And is there reason
to believe that those lessons generalize?&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;a id="fn5" href="http://wordaligned.org/articles/accidental-emacs#fn5link"&gt;[5]&lt;/a&gt; So now I know better! In a &lt;a href="http://www.haloscan.com/comments/wordaligned/accidental_emacs/#19336"&gt;comment&lt;/a&gt; on this site, Johan Lindstrom says you can edit video using Emacs, &lt;a href="http://1010.co.uk/gneve.html"&gt;http://1010.co.uk/gneve.html&lt;/a&gt;, and in an email Arnold M&amp;#xe1;ty&amp;#xe1;si pointed me at this &lt;a href="http://www.youtube.com/watch?v=0vumR5Hcz7s"&gt;YouTube GNEVE demo&lt;/a&gt;, while over at reddit another &lt;a href="http://reddit.com/r/programming/info/6igup/comments/"&gt;comment&lt;/a&gt; mentions an audio editing mode, &lt;a href="http://delysid.org/emacs/ecasound-el.html"&gt;http://delysid.org/emacs/ecasound-el.html&lt;/a&gt;.
&lt;/p&gt;
&lt;p&gt;&lt;a id="fn6" href="http://wordaligned.org/articles/accidental-emacs#fn6link"&gt;[6]&lt;/a&gt; Splash screen excluded!
&lt;/p&gt;</description>
<dc:date>2008-05-06</dc:date>
<guid>http://wordaligned.org/articles/accidental-emacs</guid>
<author>tag@wordaligned.org (Thomas Guest)</author>
<link>http://wordaligned.org/articles/accidental-emacs</link>
<category>Emacs</category>
</item>

<item>
<title>Attack of the Alien Asterisks</title>
<description>&lt;img src="http://wordaligned.org/files/asterisk-invasion.png" alt="Attack of the alien asterisks picture"/&gt;

&lt;span id="continue-reading"/&gt;


&lt;h3&gt;Cross Platform Hassles&lt;/h3&gt;
&lt;p&gt;I&amp;#8217;ve been spending an increasing amount of time working on Windows recently, using a virtual XP installation running on an Apple iMac. I&amp;#8217;ve had some trouble with &lt;a href="http://wordaligned.org/articles/from-hash-key-to-haskell.html"&gt;key-mappings&lt;/a&gt; but by now my fingers have adjusted: the Apple Key is the Windows key, the ALT key is the META key, the &lt;a href="http://wordaligned.org/articles/from-hash-key-to-haskell.html"&gt;HASH key is AWOL&lt;/a&gt;. It&amp;#8217;s tolerable, especially given my limited enthusiasm for re-configuring.
&lt;/p&gt;
&lt;p&gt;Surprisingly, I suffer more with the font rendering discrepancies. Or perhaps it&amp;#8217;s not so surprising: I write software which, at its most basic, involves shuffling characters around using a text editor until they look right.
&lt;/p&gt;
&lt;p&gt;I&amp;#8217;m not that fussy. Apple is rightly praised for its fonts and rendering but Windows does fine in this area too. What I dislike is having the two styles side by side.
&lt;/p&gt;

&lt;h3&gt;Side by Side&lt;/h3&gt;
&lt;p&gt;Here&amp;#8217;s what I mean. On the Mac, the code snippet looks full-bodied and smooth.
&lt;/p&gt;
&lt;img src="http://wordaligned.org/files/ft-snippet-osx.png" alt="Mac code graphic"/&gt;

&lt;p&gt;On Windows XP, the same code looks a bit scratchy.
&lt;/p&gt;
&lt;img src="http://wordaligned.org/files/ft-snippet-xp.png" alt="Windows XP code graphic"/&gt;

&lt;p&gt;Maybe &lt;a href="http://www.codinghorror.com/blog/archives/000884.html" title="Jeff Atwood asks What's wrong with Apple's Font Rendering"&gt;you prefer the Windows rendering&lt;/a&gt;; maybe you wouldn&amp;#8217;t just go with the default &lt;a href="http://www.codinghorror.com/blog/archives/000969.html" title="Jeff Atwood revisits programming fonts"&gt;fixed-width font&lt;/a&gt; (Monaco on OS X, Courier New on XP). I suspect it boils down to what you&amp;#8217;re used to, which is really the point I&amp;#8217;m trying to make: the two approaches to font-rendering don&amp;#8217;t coexist comfortably. I wanted them to look more similar.
&lt;/p&gt;

&lt;h3&gt;Clear Type&lt;/h3&gt;
&lt;p&gt;Clearly getting the OS X text rendering to look Window-sy was a non-starter. So I poked around in the XP display properties.
&lt;/p&gt;
&lt;p&gt;Display Properties &amp;rarr; Appearance &amp;rarr; Effects&amp;#8230; 
&lt;/p&gt;
&lt;p&gt;I then checked the &lt;a href="http://en.wikipedia.org/wiki/ClearType"&gt;ClearType&lt;/a&gt; option to &amp;#8220;smooth the edges of screen fonts&amp;#8221;, and this is what I got.
&lt;/p&gt;
&lt;img src="http://wordaligned.org/files/ft-snippet-cleartype.png" alt="Windows XP code graphic"/&gt;

&lt;p&gt;An improvement, I think, and certainly closer to the Apple rendering. (Apparently &lt;a href="http://en.wikipedia.org/wiki/ClearType"&gt;ClearType&lt;/a&gt; is on by default for Windows Vista, and I recognise it from recent versions Internet Explorer.)
&lt;/p&gt;
&lt;p&gt;The asterisks look a bit odd though. Here&amp;#8217;s a close up of a field/flock/fleet of them.
&lt;/p&gt;
&lt;img src="http://wordaligned.org/files/asterisk-invasion.png" alt="Attack of the alien asterisks picture"/&gt;

&lt;p&gt;Scary!
&lt;/p&gt;</description>
<dc:date>2008-01-31</dc:date>
<guid>http://wordaligned.org/articles/attack-of-the-alien-asterisks</guid>
<author>tag@wordaligned.org (Thomas Guest)</author>
<link>http://wordaligned.org/articles/attack-of-the-alien-asterisks</link>
<category>Emacs</category>
</item>

<item>
<title>File shifting using lftp and rsync</title>
<description>&lt;p&gt;On a daily basis I work on at least three different platforms, hosted locally, virtually, remotely. Shifting files from place to place is a problem I need to resolve every day, and I have more than one solution.
&lt;/p&gt;
&lt;p&gt;I&amp;#8217;m not a fan of file browsers, graphical ftp clients and similar. They clutter the desktop, vary from platform to platform, take ages to drive &amp;#8212; especially with a touch pad &amp;#8212; and prompt for input at all the wrong times. It&amp;#8217;s hard to undo an operation when your pointer slips. By contrast, using simple commands in a shell window puts the power back at your fingertips, whatever platform you&amp;#8217;re on. Recovering from mistakes is as easy as recalling your command history.
&lt;/p&gt;
&lt;span id="continue-reading"/&gt;


&lt;h3&gt;Local File Systems&lt;/h3&gt;
&lt;p&gt;For simple operations on a local file system, I tend to use &lt;code&gt;cp&lt;/code&gt; or Emacs dired mode simply because my immediate context is usually Emacs or a shell window, and often both. For bulky and recursive directory operations, a good starting point is:
&lt;/p&gt;
&lt;div class="typocode"&gt;

&lt;pre class="prettyprint"&gt;$ tar c SRC | tar x -C DST

&lt;/pre&gt;

&lt;/div&gt;

&lt;p&gt;You can vary this command line to reorganise file systems, though sometimes sprinkling a few soft links around may be worth considering.
&lt;/p&gt;

&lt;h3&gt;Remote File Systems&lt;/h3&gt;
&lt;p&gt;Things can get tricky for remote file systems. Preserving permissions and ownership causes problems, as does the security layer. NFS and Samba may seem like the right solutions for a private network but I&amp;#8217;ve grown to regard them as troublesome; they work best on stable networks with well known machines at well-known addresses, and, as usual, I prefer a dynamic model to a static one.
&lt;/p&gt;
&lt;p&gt;Again, command line tools can do the job. To save the overhead of re-entering your username/password credentials, you&amp;#8217;ll want to &lt;a href="http://www.linuxproblem.org/art_9.html"&gt;store SSH keys&lt;/a&gt; on the machines you frequent. The most basic remote copy command is &lt;code&gt;scp&lt;/code&gt;. Use it much like &lt;code&gt;cp&lt;/code&gt;, but specify a destination machine on the command line.
&lt;/p&gt;

&lt;h4&gt;Extended Tar&lt;/h4&gt;
&lt;p&gt;For more complex filesystems, we can extend our &lt;code&gt;tar&lt;/code&gt; command using &lt;code&gt;ssh&lt;/code&gt; on the far side of the pipeline. The following command tars up the local SRC directory then extracts the archive on the REMOTE machine in directory DST.
&lt;/p&gt;
&lt;div class="typocode"&gt;

&lt;pre class="prettyprint"&gt;$ tar c SRC | ssh REMOTE tar x -C DST

&lt;/pre&gt;

&lt;/div&gt;

&lt;p&gt;If this isn&amp;#8217;t possible, I sometimes use &lt;code&gt;netcat&lt;/code&gt; to listen at a port on the remote machine:
&lt;/p&gt;
&lt;div class="typocode"&gt;&lt;div class="codetitle"&gt;Listen to port 2345&lt;/div&gt;

&lt;pre class="prettyprint"&gt;nc -l -p 2345 | tar x -C DST

&lt;/pre&gt;

&lt;/div&gt;

&lt;p&gt;Then, on the source machine, kick off the &lt;code&gt;tar&lt;/code&gt; process:
&lt;/p&gt;
&lt;div class="typocode"&gt;

&lt;pre class="prettyprint"&gt;tar c SRC &amp;gt; /dev/tcp/DOTTED.IP.OF.MIRROR/2345

&lt;/pre&gt;

&lt;/div&gt;


&lt;h4&gt;Lftp&lt;/h4&gt;
&lt;p&gt;Suppose you want or need to transfer files using the venerable FTP protocol. If you haven&amp;#8217;t already discovered &lt;a href="http://lftp.yar.ru/"&gt;lftp&lt;/a&gt;, then it&amp;#8217;s time to investigate. When you connect to a remote machine using &lt;code&gt;lftp&lt;/code&gt; it&amp;#8217;s rather like having a shell session open on that machine: you can navigate using tab completion and the usual shell tools relating to file and directory operations are there, as well as extra goodies like &lt;code&gt;mirror&lt;/code&gt; and a decent help system.
&lt;/p&gt;

&lt;h4&gt;Rsync&lt;/h4&gt;
&lt;p&gt;Rsync is another great command-line file-system shifter. It&amp;#8217;s designed to keep two directory structures in sync, and to do so efficiently by just transmitting deltas between the two. Typically the source and destination directories reside on separate machines, and &lt;code&gt;rsync&lt;/code&gt; is often invoked automatically as a scheduled job. &lt;code&gt;Rsync&lt;/code&gt; forms the backbone of many a backup system. I&amp;#8217;ve often used it to complement more heavy-weight coporate backup systems which would require me to ask an administrator to restore my own files.
&lt;/p&gt;
&lt;p&gt;I use &lt;code&gt;rsync&lt;/code&gt; to post updates to this website, and indeed to mirror this website to other machines I use. My publish script is as simple as:
&lt;/p&gt;
&lt;div class="typocode"&gt;&lt;div class="codetitle"&gt;publish.sh&lt;/div&gt;

&lt;pre class="prettyprint"&gt;#! /bin/sh
rsync -avz www wordaligned@wordaligned.org:~

&lt;/pre&gt;

&lt;/div&gt;

&lt;p&gt;Here, local directory structure &lt;code&gt;www&lt;/code&gt; will be mirrored to &lt;code&gt;~wordaligned/www&lt;/code&gt; on remote machine &lt;code&gt;wordaligned.org&lt;/code&gt;. I supply the remote username &lt;code&gt;wordaligned&lt;/code&gt; explicitly since it differs from my local username &lt;code&gt;tag&lt;/code&gt;. The &lt;code&gt;-v&lt;/code&gt; &lt;em&gt;verbose&lt;/em&gt; option gives me a warm fuzzy feeling that the updates I want to post are indeed being posted, the &lt;code&gt;-z&lt;/code&gt; &lt;em&gt;compress&lt;/em&gt; option reduces network traffic by compressing file data, and the &lt;code&gt;-a&lt;/code&gt; &lt;em&gt;archive&lt;/em&gt; shorthand option recurses and preserves permissions and ownerships.
&lt;/p&gt;
&lt;p&gt;By the way, I&amp;#8217;m implicitly using &lt;code&gt;ssh&lt;/code&gt; (the &lt;code&gt;rsync&lt;/code&gt; default) to access the remote machine. No password is required for user &lt;code&gt;tag&lt;/code&gt; to copy files to user &lt;code&gt;wordaligned&lt;/code&gt;&amp;#8217;s home directory since I&amp;#8217;ve &lt;a href="http://www.linuxproblem.org/art_9.html"&gt;configured SSH&lt;/a&gt; to allow this.
&lt;/p&gt;
&lt;p&gt;&lt;code&gt;Rsync&lt;/code&gt; comes with many more options, but they&amp;#8217;re all well documented. A simple &lt;code&gt;-a&lt;/code&gt; is usually all that&amp;#8217;s required.
&lt;/p&gt;

&lt;h4&gt;More Thoughts on File Shifting&lt;/h4&gt;
&lt;p&gt;At the start of this note I unfairly dismissed GUI driven file system tools. The truth is that I do often use them. &lt;span /&gt;I&amp;#8217;m generally unprincipled and promiscuous when it comes to tool selection: whatever works and is to hand will do. Thus, while both &lt;code&gt;lftp&lt;/code&gt; and &lt;code&gt;rsync&lt;/code&gt; come with a plethora of options &amp;#8212; &lt;code&gt;lftp&lt;/code&gt; does everything any GUI driven FTP client can do, and probably more, and &lt;code&gt;rsync&lt;/code&gt; similarly defeats graphical file browsers &amp;#8212; &lt;span /&gt;the irony is that I only use them for basic stuff, and may well resort to something with a GUI when attempting something out of the ordinary. A bit of interactive pointing and clicking often appeals more than paging through a rather dry manual.
&lt;/p&gt;
&lt;p&gt;What &lt;code&gt;scp&lt;/code&gt; and &lt;code&gt;rsync&lt;/code&gt; won&amp;#8217;t do is find a directory on a remote file system; you can&amp;#8217;t use TAB completion at the far end &lt;a href="http://wordaligned.org/articles/file-shifting-using-lftp-and-rsync#footnote1"&gt;&lt;sup&gt;[1]&lt;/sup&gt;&lt;/a&gt;. An interactive &lt;code&gt;lftp&lt;/code&gt; session &lt;em&gt;does&lt;/em&gt; support basic TAB completion on a remote filesystem, but not more powerful tools like &lt;code&gt;find&lt;/code&gt; or &lt;code&gt;locate&lt;/code&gt;.
&lt;/p&gt;
&lt;p&gt;In general you can reduce this problem by adopting a disciplined approach to structuring your workspace on whatever platforms you use. If you find yourself typing a command-line like:
&lt;/p&gt;
&lt;div class="typocode"&gt;

&lt;pre class="prettyprint"&gt;$ scp -r ~/tmp/dev-2008-01-06 cromarty:~/scratch/work-copy2

&lt;/pre&gt;

&lt;/div&gt;

&lt;p&gt;then I&amp;#8217;d suggest something has gone wrong.
&lt;/p&gt;
&lt;p&gt;One way to combat this disorganisation is to place your &lt;a href="http://wordaligned.org/articles/personal-version-control.html"&gt;home directory under version control&lt;/a&gt;. Make sure the version control system you use for this is flexible enough to allow you to rename entries, though. If you do adopt this model, your version control system becomes the home for all your files, and transfers between machines become a matter of check-in, check-out.
&lt;/p&gt;
&lt;p&gt;I use &lt;a href="http://subversion.tigris.org"&gt;Subversion&lt;/a&gt; in this way, to a degree. There are plenty of files, though, which I don&amp;#8217;t version control &amp;#8212; in general, large files or files which only make sense on certain platforms. I&amp;#8217;ve often found it useful to make these available for access via a webserver, either somewhere on a Wiki, or just served by a &lt;a href="http://www.lighttpd.net"&gt;lighttpd&lt;/a&gt; instance with &lt;a href="http://trac.lighttpd.net/trac/wiki/Docs%3AModDirlisting"&gt;directory listing enabled&lt;/a&gt;.
&lt;/p&gt;
&lt;p&gt;&lt;hr /&gt;
   &lt;a id="footnote1"&gt;[1]&lt;/a&gt;
   I had a suspicion when I wrote this I&amp;#8217;d turn out to be wrong! &lt;a href="http://here.the.ycros.be/"&gt;Michael Kedzierski&lt;/a&gt; emailled me:
&lt;/p&gt;
&lt;blockquote&gt;&lt;p&gt;I&amp;#8217;m actually using bash completion on Ubuntu and I get remote-side tab completion with scp, it&amp;#8217;s great.
&lt;/p&gt;
&lt;/blockquote&gt;</description>
<dc:date>2008-01-06</dc:date>
<guid>http://wordaligned.org/articles/file-shifting-using-lftp-and-rsync</guid>
<author>tag@wordaligned.org (Thomas Guest)</author>
<link>http://wordaligned.org/articles/file-shifting-using-lftp-and-rsync</link>
<category>Emacs</category>
</item>

<item>
<title>Seeing with a fresh pair of ears</title>
<description>&lt;p&gt;&lt;b&gt;Q:&lt;/b&gt; How do you improve your writing skills?
&lt;/p&gt;
&lt;p&gt;This question has sparked a lively discussion on the &lt;a href="http://accu.org/index.php/mailinglists"&gt;accu-general mailing list&lt;/a&gt;, a list whose members include both writers and programmers. Their answer boils down to:
&lt;/p&gt;
&lt;ul&gt;
 &lt;li&gt;
     read more
 &lt;/li&gt;

 &lt;li&gt;
     write more
 &lt;/li&gt;

 &lt;li&gt;
     rewrite more
 &lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;This is sound advice for programmers too, though in this case it&amp;#8217;s code you should read/write/rewrite.
&lt;/p&gt;
&lt;p&gt;&lt;a href="http://www.ibgames.com/alan/index.html"&gt;Alan Lenton&lt;/a&gt;, programmer and &lt;a href="http://www.ibgames.net/alan/winding/index.html"&gt;writer&lt;/a&gt;, stresses the importance of hard-copy in his writing process. To paraphrase and reemphasize some points of his advice:
&lt;/p&gt;
&lt;blockquote&gt;&lt;ol&gt;
 &lt;li&gt;
     &lt;strong&gt;Print&lt;/strong&gt; out your work
 &lt;/li&gt;

 &lt;li&gt;
     &lt;strong&gt;Review&lt;/strong&gt; it carefully, line by line, marking it up
 &lt;/li&gt;

 &lt;li&gt;
     Transfer your corrections to the electronic version
 &lt;/li&gt;

 &lt;li&gt;
     &lt;strong&gt;Print&lt;/strong&gt; a revised copy and &lt;strong&gt;read&lt;/strong&gt; it for clarity
 &lt;/li&gt;
&lt;/ol&gt;
&lt;/blockquote&gt;&lt;p&gt;I agree. Working with hard-copy is a useful technique, and one I should use more often. It&amp;#8217;s not just useful when hard-copy is the ultimate target for the document: it&amp;#8217;s &lt;em&gt;always&lt;/em&gt; useful because printing something out allows you to look at it afresh; you can see mistakes which somehow eluded you on the screen; you literally re-view your work. (Similarly, if you&amp;#8217;re an artist, try looking at one of your pictures in a mirror &amp;#8212; it will look like someone else&amp;#8217;s picture, and you&amp;#8217;ll see its faults all too clearly.)
&lt;/p&gt;
&lt;p&gt;Alan mentions you should read your work. I&amp;#8217;d go further and suggest reading it &lt;em&gt;aloud&lt;/em&gt;.  Again, you benefit from a fresh angle. Even better, you engage another sense. Here&amp;#8217;s an example: when I went to &lt;a href="http://www.pyconuk.org/"&gt;PyCon UK&lt;/a&gt; recently I took a printout of an article which I intended to present as a talk. On paper it seemed lively and interesting, but when I tried reading it aloud it sounded flat. Fortunately there was enough space in my day for me to revise it, and when my turn on stage came, I had something &lt;a href="http://wordaligned.org/articles/pitching-python-in-three-syllables.html"&gt;far better&lt;/a&gt;.
&lt;/p&gt;
&lt;p&gt;Alan also suggests developing your work using an &amp;#8220;ordinary&amp;#8221; editor. Pasting your text into your standard document template should be the very last thing you do, he says. That&amp;#8217;s kind of how I work, though &lt;a href="http://www.gnu.org/software/emacs"&gt;emacs&lt;/a&gt; is far from ordinary. I&amp;#8217;m also considering whether to review the finished document using more than one template &amp;#8212; something very easy when you work with HTML and CSS. Anyone who&amp;#8217;s designed a web page will know what happens when you accidentally misplace a stylesheet, or deliberately turn styling off: you get the browser defaults, the page looks different, feels different &amp;#8212; almost &lt;em&gt;smells&lt;/em&gt; different.
&lt;/p&gt;</description>
<dc:date>2007-11-02</dc:date>
<guid>http://wordaligned.org/articles/seeing-with-a-fresh-pair-of-ears</guid>
<author>tag@wordaligned.org (Thomas Guest)</author>
<link>http://wordaligned.org/articles/seeing-with-a-fresh-pair-of-ears</link>
<category>Emacs</category>
</item>

<item>
<title>Code completion for dynamic languages</title>
<description>&lt;p&gt;Here&amp;#8217;s an interesting &lt;a href="http://www.regdeveloper.co.uk/2007/02/01/making_sense_ruby/"&gt;article&lt;/a&gt; in which Huw Collingbourne describes
   his frustration with trying to program a smart code completion system
   for Visual Studio. The problem being, the code in question is
   &lt;a href="http://www.ruby-lang.org" title="Ruby Website"&gt;Ruby&lt;/a&gt;. One particularly juicy quotation reads:
&lt;/p&gt;
&lt;blockquote&gt;&lt;p&gt;&lt;span /&gt;Ruby is a so-called &amp;#8220;dynamic&amp;#8221; language, which is a polite way of saying that it&amp;#8217;s hugely unpredictable.
&lt;/p&gt;
&lt;/blockquote&gt;&lt;span id="continue-reading"/&gt;

&lt;p&gt;He goes on to explain:
&lt;/p&gt;
&lt;blockquote&gt;&lt;p&gt;A &lt;a href="http://www.ruby-lang.org" title="Ruby Website"&gt;Ruby&lt;/a&gt; program is so dynamic that you can never be sure what it is
   up to from one moment to the next. To take a simple example, when
   you write some stand-alone functions into the editor, those
   functions get bound into the base class of the entire Ruby class
   hierarchy. That means that every single Ruby class automatically
   &amp;#8220;inherits&amp;#8221; them - and the IntelliSense system is expected to know
   about it!
&lt;/p&gt;
&lt;/blockquote&gt;&lt;p&gt;Despite overtly grumbling about dynamic languages, the author does a
   good job of promoting them. &lt;span /&gt;Software is supposed to be soft and
   dynamic languages help keep it that way. Everything is
   open. Everything can be queried. Everything can be adapted.
&lt;/p&gt;

&lt;h4&gt;Emacs Python mode&lt;/h4&gt;
&lt;p&gt;My preferred IDE is &lt;a href="http://www.gnu.org/software/emacs"&gt;emacs&lt;/a&gt; &amp;#8212; whatever language I&amp;#8217;m using. It has a
   particularly nice &lt;a href="http://sourceforge.net/projects/python-mode"&gt;Python integration&lt;/a&gt;.
   Here&amp;#8217;s how it works:
&lt;/p&gt;
&lt;ul&gt;
 &lt;li&gt;
     Pull up a full-screen window
 &lt;/li&gt;

 &lt;li&gt;
     Split the window vertically
 &lt;/li&gt;

 &lt;li&gt;
     Use one side for the code you&amp;#8217;re working on
 &lt;/li&gt;

 &lt;li&gt;
     Use the other side to run an interpreted &lt;a href="http://python.org"&gt;Python&lt;/a&gt; session
 &lt;/li&gt;

 &lt;li&gt;
     Switch sides as desired
 &lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;I continually select regions of code to execute. I continually step
   into the interpreter and use the &lt;a href="http://python.org"&gt;Python&lt;/a&gt; &lt;code&gt;help&lt;/code&gt; command to get help on
   modules and functions &amp;#8212; including the ones I&amp;#8217;m creating right now.
   I rework a function in one window then exercise it in the other. I
   sketch experimental code, run it, rub it out.
&lt;/p&gt;
&lt;p&gt;Collingbourne says:
&lt;/p&gt;
&lt;blockquote&gt;&lt;p&gt;Creating real
   &lt;a href="http://www.sapphiresteel.com/IntelliSense"&gt;IntelliSense&lt;/a&gt; is much
   harder. The only way to do it properly is to analyse the code much
   as the Ruby interpreter itself does. The big difference is that the
   interpreter only goes into operation when a program is complete &amp;#8230;
&lt;/p&gt;
&lt;/blockquote&gt;&lt;p&gt;He spots the answer in one sentence &amp;#8212; &lt;em&gt;to do it properly, you do have
   to hook into the interpreter and its powers of reflection&lt;/em&gt; &amp;#8212; then misses
   the point in the next. You just have to run the interpreter alongside the code
   you&amp;#8217;re developing, like emacs Python mode does.
&lt;/p&gt;

&lt;h4&gt;A cheat&amp;#8217;s guide to code-completion&lt;/h4&gt;
&lt;p&gt;Collingbourne also exposes some code-completion systems as &amp;#8220;cheats&amp;#8221;.
&lt;/p&gt;
&lt;blockquote&gt;&lt;p&gt;Some code-completion systems solve this problem in a cunning way -
   they cheat. Instead of working out what type of object x is at any
   given moment, taking into account all the difficult stuff such as
   its scope, inheritance and context, they work alphabetically. If
   someone enters a dot followed by the letters &amp;#8220;my&amp;#8221;, they drop down a
   list of names such as &amp;#8220;my_method&amp;#8221;, &amp;#8220;my_othermethod&amp;#8221; and
   &amp;#8220;my_random_guess&amp;#8221; whether or not those methods have anything to do
   with the object in question.
&lt;/p&gt;
&lt;/blockquote&gt;&lt;p&gt;Well, I&amp;#8217;m happy to cheat using &lt;a href="http://www.gnu.org/software/emacs"&gt;emacs&lt;/a&gt; in this way. The &lt;em&gt;&lt;/em&gt;&lt;code&gt;ALT-/&lt;/code&gt;&lt;em&gt;&lt;/em&gt;
   combination uses alphabetic completion and I use it more
   than any other key sequence, whatever document I&amp;#8217;m working on. More
   often than not, it does the right thing. As usual, simple solutions
   are better.
&lt;/p&gt;</description>
<dc:date>2007-02-02</dc:date>
<guid>http://wordaligned.org/articles/code-completion-for-dynamic-languages</guid>
<author>tag@wordaligned.org (Thomas Guest)</author>
<link>http://wordaligned.org/articles/code-completion-for-dynamic-languages</link>
<category>Emacs</category>
</item>

<item>
<title>Happy Mac</title>
<description>&lt;p&gt;Did I mention that I&amp;#8217;m a happy &lt;a href="http://www.apple.com/hardware/"&gt;mac&lt;/a&gt; user now? It would be rather
   hard to work where I do without using an &lt;a href="http://www.apple.com/"&gt;apple&lt;/a&gt; computer &amp;#8212; &lt;span /&gt;my boss
   is a mac evangelist, keen to convert those lost souls who continue
   to suffer other platforms
   &lt;a href="http://wordaligned.org/articles/happy-mac#why_do_management_like_microsoft"&gt;[1]&lt;/a&gt;.
&lt;/p&gt;
&lt;p&gt;The funny thing is, I don&amp;#8217;t really spend time enjoying the legendary
   &lt;a href="http://www.apple.com/hardware/"&gt;mac&lt;/a&gt; user interface: I live inside &lt;a href="http://www.gnu.org/software/emacs"&gt;emacs&lt;/a&gt;, and about the only
   graphics rich gui I tolerate is &lt;a href="http://www.mozilla.com"&gt;firefox&lt;/a&gt;.
&lt;/p&gt;
&lt;p&gt;Nonetheless, the computers (I use both an &lt;a href="http://www.apple.com/imac/"&gt;imac&lt;/a&gt; and a &lt;a href="http://www.apple.com/macbook/macbook.html"&gt;macbook&lt;/a&gt;)
   are delightful. They look and sound fabulous. When one goes to sleep
   its white led pulses softly &amp;#8212; you&amp;#8217;d almost swear it was
   breathing. Installing software is simple. Fonts are
   beautiful. Upgrades are painless. As a software development platform,
   it&amp;#8217;s fully powered by Unix, which is to say, it&amp;#8217;s fully
   powered. Everything you&amp;#8217;re likely to want comes as standard: a camera,
   bluetooth, wireless, firewire. I could go on &amp;#8230;
&lt;/p&gt;
&lt;p&gt;So I can understand the fuss about the &lt;a href="http://www.apple.com/iphone/"&gt;iphone&lt;/a&gt;. As it happens, I
   received my first mobile phone this Christmas. It was a present from
   Gail, who&amp;#8217;d become frustrated by not being able to contact me. I
   confess, I didn&amp;#8217;t really want one. Another thing to carry around,
   another thing to interrupt me &amp;#8212; but now I have one, I quite like it.
&lt;/p&gt;
&lt;p&gt;It&amp;#8217;s not a &lt;a href="http://nokia.com/"&gt;nokia&lt;/a&gt; or a &lt;a href="http://samsung"&gt;samsung&lt;/a&gt;:
   it&amp;#8217;s a fairly basic
   &lt;a href="http://www.sagem.com/mobiles/mobile/niveau3/index_niveau3.php?modeleType=mob30#"&gt;sagem&lt;/a&gt;,
   and I&amp;#8217;ve been pleasantly surprised how well it works. It seems
   that, given constraints &amp;#8212; in this case, a limited input device and a tiny
   display &amp;#8212; software developers often do a better job.
&lt;/p&gt;
&lt;hr /&gt;

&lt;p&gt;&lt;a id="why_do_management_like_microsoft"&gt;[1]&lt;/a&gt;
   I realise that software development and management are two very
   different disciplines, but I can&amp;#8217;t understand why so many managers insist on
   choosing Microsoft &amp;#8220;solutions&amp;#8221;, especially ones which are over-priced,
   limited to a single platform, and which cause more problems than they
   solve.
&lt;/p&gt;</description>
<dc:date>2007-01-13</dc:date>
<guid>http://wordaligned.org/articles/happy-mac</guid>
<author>tag@wordaligned.org (Thomas Guest)</author>
<link>http://wordaligned.org/articles/happy-mac</link>
<category>Emacs</category>
</item>

<item>
<title>Wiki Markup</title>
<description>&lt;p&gt;I&amp;#8217;m a big fan of wikis but one irritation is that they all have their
   own markup syntax. I guess that&amp;#8217;s because the wiki is one of those sweet
   web applications that every programmer wants to reinvent.
&lt;/p&gt;
&lt;p&gt;On a fairly regular basis, and in order of personal preference, I use:
&lt;/p&gt;
&lt;ul&gt;
 &lt;li&gt;
     &lt;a href="http://daringfireball.net/projects/markdown/"&gt;Markdown&lt;/a&gt;
 &lt;/li&gt;

 &lt;li&gt;
     &lt;a href="http://boost.org/tools/quickbook"&gt;QuickBook&lt;/a&gt;
 &lt;/li&gt;

 &lt;li&gt;
     &lt;a href="http://trac.edgewall.org/wiki/TracWiki"&gt;TracWiki&lt;/a&gt;
 &lt;/li&gt;

 &lt;li&gt;
     &lt;a href="http://www.textism.com/tools/textile/"&gt;Textile&lt;/a&gt;
 &lt;/li&gt;

 &lt;li&gt;
     &lt;a href="http://www.mediawiki.org/"&gt;MediaWiki&lt;/a&gt;
 &lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;There&amp;#8217;s some convergence between these mini-languages, but not a whole
   lot. Ampersands and angle brackets are of course converted into
   HTML-safe equivalents. Paragraphs and bulleted lists usually work as
   you&amp;#8217;d expect. The other primary ingredients &amp;#8212; headings, links, images
   &amp;#8212; vary between implementations.
&lt;/p&gt;
&lt;p&gt;This post describes what I think makes a good wiki markup syntax and why
   I rate &lt;a href="http://daringfireball.net/projects/markdown/"&gt;Markdown&lt;/a&gt; so highly.
&lt;/p&gt;
&lt;span id="continue-reading"/&gt;


&lt;h3&gt;Bigger != Better&lt;/h3&gt;
&lt;p&gt;Given the number of wiki variants out there, most users are unlikely
   to remember even the basics of any single wiki markup
   syntax.  Ideally, then, the wiki markup rules should be simple &amp;#8212;
   simple enough to fit on a post-it note (or a post-it note sized
   block of pixels on a screen) which the user can refer to.
&lt;/p&gt;
&lt;p&gt;I wouldn&amp;#8217;t use this criterion to rule out a more complex markup
   syntax. &lt;a href="http://www.mediawiki.org/"&gt;MediaWiki&lt;/a&gt; is probably about as complex a markup as there
   is but it still manages to keep the simple things simple.
&lt;/p&gt;
&lt;p&gt;All things being equal, though, I prefer a compact set of markup rules.
&lt;/p&gt;

&lt;h3&gt;Well Documented&lt;/h3&gt;
&lt;p&gt;It goes without saying that the wiki markup rules should be well
   documented. How else is an end user to work out what to do?
&lt;/p&gt;
&lt;p&gt;I think it&amp;#8217;s also plain that a wiki markup should be self-documented,
   by which I mean the
   &lt;a href="http://daringfireball.net/projects/markdown/syntax"&gt;documentation&lt;/a&gt;
   should be written using
   &lt;a href="http://daringfireball.net/projects/markdown/syntax.text"&gt;itself&lt;/a&gt;.
&lt;/p&gt;

&lt;h3&gt;Escape to (X)HTML&lt;/h3&gt;
&lt;p&gt;Noone expects a wiki syntax to do everything HTML can, so there&amp;#8217;d
   better be a way of escaping the normal wiki markup rules to include
   raw HTML in a document.  For example, there have been a number of
   attempts to provide a wiki syntax for tables, but none works quite as well
   as an HTML table &amp;#8212; so a wiki should simply provide a way for HTML
   tables to be introduced into a document.
&lt;/p&gt;
&lt;p&gt;There&amp;#8217;s another side to this. Sometimes we simply want to stop normal
   wiki processing from happening. If the underscore is normally used to
   emphasize words &lt;em&gt;like this&lt;/em&gt;, then we&amp;#8217;d better be able to escape this
   behaviour when we want to see the underscores _like this_.
&lt;/p&gt;
&lt;div class="typocode"&gt;&lt;div class="codetitle"&gt;escaping underscores with Markdown&lt;/div&gt;

&lt;pre class="prettyprint"&gt;If the underscore is normally used to emphasize
words _like this_, then we'd better be able to
escape this behaviour when we want to see
the underscores \_like this\_.

&lt;/pre&gt;

&lt;/div&gt;


&lt;h3&gt;Conformance Tests&lt;/h3&gt;
&lt;p&gt;A good wiki markup syntax may well have a life outside its native wiki
   implementation. It could be used in other wikis or blogs. It could become a
   general purpose HTML templating application.
&lt;/p&gt;
&lt;p&gt;If it&amp;#8217;s to have any hope of standing on its own like this, it had
   better come with a decent set of conformance tests: that is, a set of
   test inputs and expected outputs.
&lt;/p&gt;
&lt;p&gt;The existence of such a suite helps explain why you can find
   trustworthy &lt;a href="http://daringfireball.net/projects/markdown/"&gt;Markdown&lt;/a&gt; implementations in a variety of popular
   high-level languages (Perl, PHP, Python, Ruby &amp;#8230;).
&lt;/p&gt;

&lt;h3&gt;Suck it and See&lt;/h3&gt;
&lt;p&gt;Most wikis provide a page to be used for experimentation &amp;#8212; it&amp;#8217;s often
   called something like &amp;#8220;SandBox&amp;#8221;. A superior better wiki markup syntax
   will also host such a facility online. You can try out Markdown
   &lt;a href="http://daringfireball.net/projects/markdown/dingus"&gt;here&lt;/a&gt; and
   Textile &lt;a href="http://www.textism.com/tools/textile/"&gt;here&lt;/a&gt;.
&lt;/p&gt;

&lt;h3&gt;And the Winner is &amp;#8230;&lt;/h3&gt;
&lt;p&gt;No suprises here: I said at the outset that &lt;a href="http://daringfireball.net/projects/markdown/"&gt;Markdown&lt;/a&gt; is my favourite. It
   more than meets all the criteria mentioned above which already puts
   it one step ahead of most alternatives. It also wins points for:
&lt;/p&gt;
&lt;ol&gt;
 &lt;li&gt;&lt;p&gt;Explaining its design goals so clearly:
&lt;/p&gt;
&lt;blockquote&gt;&lt;p&gt;Readability, however, is emphasized above all else. A
   Markdown-formatted document should be publishable as-is, as plain
   text, without looking like it&amp;#8217;s been marked up with tags or formatting
   instructions.
&lt;/p&gt;
&lt;/blockquote&gt;
 &lt;/li&gt;

 &lt;li&gt;&lt;p&gt;Working so well with an &amp;#8220;aware&amp;#8221; text editor. I write the content for
      my &lt;a href="http://www.wordaligned.org"&gt;web site&lt;/a&gt; in Markdown using
      &lt;a href="http://www.gnu.org/software/emacs/"&gt;emacs&lt;/a&gt;, and the emacs text mode
      does the right thing when I&amp;#8217;m writing lists, blockquotes etc.
&lt;/p&gt;

 &lt;/li&gt;

 &lt;li&gt;&lt;p&gt;Providing superior support for
      &lt;a href="http://daringfireball.net/projects/markdown/syntax#link"&gt;links&lt;/a&gt;.
&lt;/p&gt;

 &lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;a href="http://boost.org/tools/quickbook"&gt;Quickbook&lt;/a&gt; deserves a special mention too, since it generates not HTML
   but &lt;a href="http://docbook.org"&gt;DocBook XML&lt;/a&gt;, and hence can be used as a starting point for both
   &lt;a href="http://wordaligned.org/docs/softdoc_overload/index.html"&gt;online and printed&lt;/a&gt;
   versions of a document.
&lt;/p&gt;</description>
<dc:date>2006-12-03</dc:date>
<guid>http://wordaligned.org/articles/wiki-markup</guid>
<author>tag@wordaligned.org (Thomas Guest)</author>
<link>http://wordaligned.org/articles/wiki-markup</link>
<category>Emacs</category>
</item>

<item>
<title>Pcl-cvs and Psvn Incompatibilities</title>
<description>&lt;p&gt;I think I &lt;a href="http://wordaligned.org/articles/version-control-for-third-party-software.html"&gt;already mentioned&lt;/a&gt;
   that I&amp;#8217;m using both &lt;a href="http://www.nongnu.org/cvs/"&gt;CVS&lt;/a&gt; and
   &lt;a href="http://subversion.tigris.org"&gt;Subversion&lt;/a&gt; now: &lt;a href="http://subversion.tigris.org"&gt;Subversion&lt;/a&gt; at home, &lt;a href="http://www.nongnu.org/cvs/"&gt;CVS&lt;/a&gt; at work. In
   general the similarities between the two make the context switch
   fairly painless, but there&amp;#8217;s one gotcha which keeps on getting me.
&lt;/p&gt;
&lt;p&gt;I use &lt;a href="http://www.cs.utah.edu/dept/old/texinfo/cvs/pcl-cvs_toc.html"&gt;pcl-cvs&lt;/a&gt; as my &lt;a href="http://www.nongnu.org/cvs/"&gt;CVS&lt;/a&gt; client: it&amp;#8217;s not perfect but it&amp;#8217;s more
   than good enough if you&amp;#8217;re prepared to use the &lt;code&gt;cvs&lt;/code&gt; command line
   client every so often for advanced merging and similar. One of the
   routine &lt;a href="http://www.cs.utah.edu/dept/old/texinfo/cvs/pcl-cvs_toc.html"&gt;pcl-cvs&lt;/a&gt; commands I use is &lt;code&gt;U&lt;/code&gt; which &lt;em&gt;undoes&lt;/em&gt; local
   modifications.
&lt;/p&gt;
&lt;p&gt;I use &lt;a href="http://www.xsteve.at/prg/emacs/psvn.el"&gt;psvn&lt;/a&gt; as my &lt;a href="http://subversion.tigris.org"&gt;Subversion&lt;/a&gt; client: it&amp;#8217;s not perfect but it&amp;#8217;s
   more than good enough if you&amp;#8217;re prepared to use the &lt;code&gt;svn&lt;/code&gt; command line
   client every so often for advanced merging and similar. One of the
   routine commands I use is &lt;code&gt;U&lt;/code&gt;, which &lt;em&gt;updates&lt;/em&gt; everything.
&lt;/p&gt;
&lt;p&gt;Ouch! &lt;code&gt;U&lt;/code&gt; means &lt;em&gt;update&lt;/em&gt; in &lt;a href="http://www.xsteve.at/prg/emacs/psvn.el"&gt;psvn&lt;/a&gt; and &lt;em&gt;undo&lt;/em&gt; in &lt;a href="http://www.cs.utah.edu/dept/old/texinfo/cvs/pcl-cvs_toc.html"&gt;pcl-cvs&lt;/a&gt;. For
   once I&amp;#8217;m glad of the confirmation dialog which appears in the status bar:
&lt;/p&gt;
&lt;blockquote&gt;&lt;p&gt;Undo N files? (yes or no)
&lt;/p&gt;
&lt;/blockquote&gt;&lt;p&gt;That&amp;#8217;s a no! I suppose I could hack the elisp &amp;#8230;
&lt;/p&gt;</description>
<dc:date>2006-10-07</dc:date>
<guid>http://wordaligned.org/articles/pcl-cvs-and-psvn-incompatibilities</guid>
<author>tag@wordaligned.org (Thomas Guest)</author>
<link>http://wordaligned.org/articles/pcl-cvs-and-psvn-incompatibilities</link>
<category>Emacs</category>
</item>

<item>
<title>Personal version control</title>
<description>&lt;p&gt;We all know that version control isn&amp;#8217;t just for source files but
   opinions differ about what should and shouldn&amp;#8217;t be checked in. &lt;span /&gt;Can
   something be too large for version control?  Too immutable?
   Conversely, something be too small? Too transient?
&lt;/p&gt;
&lt;span id="continue-reading"/&gt;


&lt;h4&gt;Large Things&lt;/h4&gt;
&lt;p&gt;Most of the arguments concern large items: should we check in the
   compiler (plus patches); the JDK (including source code); the high
   definition video files used for test purposes; third party RPMs used
   to build the CD ISO image? Surely (one side of the argument goes) we
   don&amp;#8217;t need to version control these &lt;em&gt;huge&lt;/em&gt; assets which don&amp;#8217;t/can&amp;#8217;t
   change &amp;#8212; we should just burn them to DVD and keep them safe? Surely
   (the counter-argument goes) we need to keep track of &lt;em&gt;everything&lt;/em&gt; our
   project depends on, and that&amp;#8217;s what version control systems are good
   at.
&lt;/p&gt;
&lt;p&gt;Both arguments are reasonable and a solution must be found somewhere
   between the two. Clearly we can&amp;#8217;t version control everything since we
   can&amp;#8217;t version control the version control system.
&lt;/p&gt;
&lt;p&gt;My inclination is to use version control as widely as possible. It&amp;#8217;s well
   suited to managing &lt;a href="http://www.wordaligned.org/doc/softdoc/index.html"&gt;documentation&lt;/a&gt; for example.  A
   &lt;a href="http://subversion.tigris.org"&gt;decent version control client&lt;/a&gt; should impose no overhead
   &amp;#8212; making it as easy to check a design document into version control
   as at is to copy it into a shared folder.
&lt;/p&gt;

&lt;h4&gt;Small Things&lt;/h4&gt;
&lt;p&gt;At the other end of the scale, what about the small, transient,
   personal things? I&amp;#8217;m talking about hidden resource files: your
   &lt;code&gt;.bashrc&lt;/code&gt;, your &lt;code&gt;.emacs&lt;/code&gt;, your &lt;a href="http://www.eclipse.org"&gt;eclipse&lt;/a&gt;
   configuration, your personal cronfile.
&lt;/p&gt;
&lt;p&gt;In my experience, these files very rarely get placed under source
   control &amp;#8212; and I can&amp;#8217;t understand why. I often tweak my resource
   files. I want to be able to wind back these changes, if necessary. I
   want these files backed up as carefully as project source files since
   they&amp;#8217;re an integral part of my development environment. Putting these
   files under version control also means that setting up my preferences
   on a new platform can be accomplished with a command as simple as:
&lt;/p&gt;
&lt;div class="typocode"&gt;

&lt;pre class="prettyprint"&gt;svn co svn://&amp;lt;svnserver&amp;gt;/personal/tag/home .

&lt;/pre&gt;

&lt;/div&gt;

&lt;p&gt;&lt;span /&gt;What&amp;#8217;s more, when you start treating your personal environment as
   something deserving version control, you find it becomes better
   organised. Those baby throwaway scripts &amp;#8212; which you wish you hadn&amp;#8217;t
   thrown away &amp;#8212; instead grow up and develop options and usage
   help. Tiny experimental test programs find a home. Even your directory
   structure becomes less muddled (assuming you use a &lt;a href="http://subversion.tigris.org"&gt;version control
system&lt;/a&gt; which allows you to move files and check in soft
   links).
&lt;/p&gt;
&lt;p&gt;&lt;a href="http://subversion.tigris.org"&gt;Subversion&lt;/a&gt; even allows you to check in soft links.
&lt;/p&gt;</description>
<dc:date>2006-09-07</dc:date>
<guid>http://wordaligned.org/articles/personal-version-control</guid>
<author>tag@wordaligned.org (Thomas Guest)</author>
<link>http://wordaligned.org/articles/personal-version-control</link>
<category>Emacs</category>
</item>

<item>
<title>Ignoring .svn directories</title>
<description>&lt;p&gt;Files checked out from a &lt;a href="http://subversion.tigris.org"&gt;Subversion&lt;/a&gt; server get replicated into
   hidden &lt;code&gt;.svn&lt;/code&gt; directories in your working copy. This behaviour
   derives from the guiding principle that disk space costs less than
   network access. It means, for example, you can see what changes you&amp;#8217;ve
   made to files without needing to visit the server &amp;#8212; and indeed revert
   these changes without server access.
&lt;/p&gt;
&lt;p&gt;An unwanted side-effect of this is that you may get false hits when
   you search through a working copy. You match the cached base revisions
   in the &lt;code&gt;.svn&lt;/code&gt; directory as well as the files you&amp;#8217;re really working on.
&lt;/p&gt;
&lt;span id="continue-reading"/&gt;


&lt;h4&gt;Using find&amp;#8217;s -prune option&lt;/h4&gt;
&lt;p&gt;To tell &lt;code&gt;find&lt;/code&gt; to exclude &lt;code&gt;.svn&lt;/code&gt; directories, use the &lt;code&gt;-prune&lt;/code&gt; option:
&lt;/p&gt;
&lt;div class="typocode"&gt;

&lt;pre class="prettyprint"&gt;find . -path '*/.svn' -prune -o -type f -print | \
      xargs -e grep -I -n -e PATTERN

&lt;/pre&gt;

&lt;/div&gt;


&lt;h4&gt;Customising Emacs&lt;/h4&gt;
&lt;p&gt;You probably don&amp;#8217;t want to have to type in that command all of the
   time. Since I live inside &lt;a href="http://www.gnu.org/software/emacs/"&gt;emacs&lt;/a&gt; I just added the
   following lines to my &lt;code&gt;.emacs&lt;/code&gt; configuration file:
&lt;/p&gt;
&lt;div class="typocode"&gt;

&lt;pre class="prettyprint"&gt;(global-set-key [f3] 'grep-find)
(setq grep-find-command
  "find . -path '*/.svn' -prune -o -type f -print | xargs -e grep -I -n -e ")

&lt;/pre&gt;

&lt;/div&gt;

&lt;p&gt;Now when I hit F3 my preferred &lt;code&gt;find&lt;/code&gt; command appears. I just append the
   pattern I want to look for and hit return. The &lt;code&gt;-n&lt;/code&gt; argument to &lt;code&gt;grep&lt;/code&gt;
   causes line numbers to be generated in the grep-find results, meaning
   I can jump (&lt;code&gt;CTRL-X-TICK&lt;/code&gt;) to the right place in a matching file.
&lt;/p&gt;</description>
<dc:date>2006-08-14</dc:date>
<guid>http://wordaligned.org/articles/ignoring-svn-directories</guid>
<author>tag@wordaligned.org (Thomas Guest)</author>
<link>http://wordaligned.org/articles/ignoring-svn-directories</link>
<category>Emacs</category>
</item>

<item>
<title>My (Test) First Ruby Program</title>
<description>&lt;div class="toc"&gt;
&lt;h2&gt;Contents&lt;/h2&gt;
&lt;ul&gt;
 &lt;li&gt;&lt;a href="http://wordaligned.org/articles/my-test-first-ruby-program#tocthe-requirement" name="toc0" id="toc0"&gt;The Requirement&lt;/a&gt;
 &lt;/li&gt;

 &lt;li&gt;&lt;a href="http://wordaligned.org/articles/my-test-first-ruby-program#tocemacs-ruby-mode" name="toc1" id="toc1"&gt;Emacs ruby mode&lt;/a&gt;
 &lt;/li&gt;

 &lt;li&gt;&lt;a href="http://wordaligned.org/articles/my-test-first-ruby-program#toclocating-the-code-to-change" name="toc2" id="toc2"&gt;Locating the code to change&lt;/a&gt;
 &lt;/li&gt;

 &lt;li&gt;&lt;a href="http://wordaligned.org/articles/my-test-first-ruby-program#tocfiddling-around-with-the-code" name="toc3" id="toc3"&gt;Fiddling around with the code&lt;/a&gt;
 &lt;/li&gt;

 &lt;li&gt;&lt;a href="http://wordaligned.org/articles/my-test-first-ruby-program#tocportability" name="toc4" id="toc4"&gt;Portability&lt;/a&gt;
 &lt;/li&gt;

 &lt;li&gt;&lt;a href="http://wordaligned.org/articles/my-test-first-ruby-program#tochot-updates" name="toc5" id="toc5"&gt;Hot updates&lt;/a&gt;
 &lt;/li&gt;

 &lt;li&gt;&lt;a href="http://wordaligned.org/articles/my-test-first-ruby-program#tocoverenthusiasm" name="toc6" id="toc6"&gt;Overenthusiasm&lt;/a&gt;
 &lt;/li&gt;

 &lt;li&gt;&lt;a href="http://wordaligned.org/articles/my-test-first-ruby-program#tocrunning-the-syntax-unit-tests" name="toc7" id="toc7"&gt;Running the Syntax Unit Tests&lt;/a&gt;
 &lt;/li&gt;

 &lt;li&gt;&lt;a href="http://wordaligned.org/articles/my-test-first-ruby-program#tocadding-a-testcase" name="toc8" id="toc8"&gt;Adding a testcase&lt;/a&gt;
 &lt;/li&gt;

 &lt;li&gt;&lt;a href="http://wordaligned.org/articles/my-test-first-ruby-program#tocgetting-started-on-pythonrb" name="toc9" id="toc9"&gt;Getting started on python.rb&lt;/a&gt;
 &lt;/li&gt;

 &lt;li&gt;&lt;a href="http://wordaligned.org/articles/my-test-first-ruby-program#tocrinse-and-repeat" name="toc10" id="toc10"&gt;Rinse and Repeat&lt;/a&gt;
 &lt;/li&gt;

 &lt;li&gt;&lt;a href="http://wordaligned.org/articles/my-test-first-ruby-program#tocdeploying-the-python-highlighter" name="toc11" id="toc11"&gt;Deploying the Python Highlighter&lt;/a&gt;
 &lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;&lt;p&gt;One of my reasons for starting this blog was to find out more about
   web application frameworks based on dynamic languages in general, and
   about &lt;a href="http://www.rubyonrails.org"&gt;Ruby on Rails&lt;/a&gt; in particular. The only problem being, I&amp;#8217;d never
   actually written any &lt;a href="http://www.ruby-lang.org"&gt;Ruby&lt;/a&gt; before.
&lt;/p&gt;
&lt;p&gt;Now, back when I started out as a programmer I never took a huge
   interest in learning computer languages &amp;#8212; I just figured out what
   existing code was doing then fiddled around with it until it seemed to
   do what I wanted.  Some of the time I got away with it.
&lt;/p&gt;
&lt;p&gt;These days I&amp;#8217;m more interested in computer languages, but I
   still think that reading and tweaking existing code is a good way to
   learn. &lt;a href="http://www.ruby-lang.org"&gt;Ruby&lt;/a&gt;, being a dynamic, interpreted language, is perfect for
   such experimentation. The &lt;a href="http://www.rubyonrails.org"&gt;Ruby on Rails&lt;/a&gt; framework turns out to be
   equally dynamic; by running the development environment, I could see
   my code changes instantly reflected in my &lt;a href="http://www.typosphere.org"&gt;Typo&lt;/a&gt; application. Even
   better, the &lt;em&gt;exact same code&lt;/em&gt; that I tested at home on my Windows
   machine could be deployed on my live &lt;a href="http://www.textdrive.com"&gt;shared UNIX server&lt;/a&gt;.
   Best of all, I soon discovered the test framework for the
   module I needed to alter. By developing the tests and code in parallel,
   I deployed my first ever &lt;a href="http://www.ruby-lang.org"&gt;Ruby&lt;/a&gt; code with reasonable confidence
   that it worked.
&lt;/p&gt;
&lt;span id="continue-reading"/&gt;


&lt;h4&gt;&lt;a href="http://wordaligned.org/articles/my-test-first-ruby-program#toc0" name="tocthe-requirement" id="tocthe-requirement"&gt;The Requirement&lt;/a&gt;&lt;/h4&gt;
&lt;p&gt;I wanted to be able to post code snippets to this blog, and I wanted
   the code to be nicely syntax-highlighted.  Digging through the
   &lt;a href="http://www.typosphere.org"&gt;Typo&lt;/a&gt; admin pages revealed that this was already supported for
   &lt;a href="http://www.ruby-lang.org"&gt;Ruby&lt;/a&gt; (of course!), XML and &lt;a href="http://www.yaml.org"&gt;YAML&lt;/a&gt;.  Futhermore, the
   &lt;a href="http://syntax.rubyforge.org/"&gt;syntax highlighting scheme&lt;/a&gt; was open to extension, which was good,
   since I intended to highlight &lt;a href="http://www.python.org"&gt;Python&lt;/a&gt; and C++ snippets &amp;#8212; and possibly others too.
   All you had to do was extend &lt;code&gt;Syntax::Tokenize&lt;/code&gt;, implementing the &lt;code&gt;#step&lt;/code&gt; method.
&lt;/p&gt;
&lt;p&gt;A few minutes of &lt;a href="http://www.google.co.uk/search?hl=en&amp;amp;q=ruby+syntax+highlight+python"&gt;googling&lt;/a&gt;
   didn&amp;#8217;t turn up any existing solutions to this particular problem,
   so I decided to have a crack at it myself.
&lt;/p&gt;

&lt;h4&gt;&lt;a href="http://wordaligned.org/articles/my-test-first-ruby-program#toc1" name="tocemacs-ruby-mode" id="tocemacs-ruby-mode"&gt;Emacs ruby mode&lt;/a&gt;&lt;/h4&gt;
&lt;p&gt;Before I could even contemplate working with &lt;a href="http://www.ruby-lang.org"&gt;Ruby&lt;/a&gt; code, I needed
   to get my &lt;a href="http://www.gnu.org/software/emacs"&gt;editor&lt;/a&gt; to &lt;a href="http://wiki.rubygarden.org/Ruby/page/show/InstallingEmacsExtensions"&gt;recognise it&lt;/a&gt;.
   This was straightforward.
&lt;/p&gt;

&lt;h4&gt;&lt;a href="http://wordaligned.org/articles/my-test-first-ruby-program#toc2" name="toclocating-the-code-to-change" id="toclocating-the-code-to-change"&gt;Locating the code to change&lt;/a&gt;&lt;/h4&gt;
&lt;p&gt;Grepping the &lt;a href="http://www.typosphere.org"&gt;Typo&lt;/a&gt; code for &lt;code&gt;syntax&lt;/code&gt; yielded several hits:
&lt;/p&gt;
&lt;div class="typocode"&gt;

&lt;pre class="prettyprint"&gt;config/environment.rb     # Adds vendor/syntax/lib to the load path
components/plugins/textfilters/code_controller.rb # Does the syntax highlighting
vendor/syntax             # The syntax module itself

&lt;/pre&gt;

&lt;/div&gt;


&lt;h4&gt;&lt;a href="http://wordaligned.org/articles/my-test-first-ruby-program#toc3" name="tocfiddling-around-with-the-code" id="tocfiddling-around-with-the-code"&gt;Fiddling around with the code&lt;/a&gt;&lt;/h4&gt;
&lt;p&gt;So, the first thing I did was start hacking at &lt;code&gt;code_controller.rb&lt;/code&gt;, adding a
   new class and registering it, just like this:
&lt;/p&gt;
&lt;div class="typocode"&gt;

&lt;pre class="prettyprint"&gt;class PythonTokenizer &amp;lt; Syntax::Tokenizer
  def step
    if digits = scan(/\d+/)
      start_group :digits, digits
    elsif words = scan(/\w+/)
      start_group :words, words
    else
      start_group :normal, scan(/./)
    end
  end
end

Syntax::SYNTAX['python'] = PythonTokenizer

&lt;/pre&gt;

&lt;/div&gt;

&lt;p&gt;This being my first ever attempt at &lt;a href="http://www.ruby-lang.org"&gt;Ruby&lt;/a&gt; code, I didn&amp;#8217;t even write it myself: I
   simply cut-and-pasted it direct from the &lt;a href="http://syntax.rubyforge.org/"&gt;Ruby syntax highlight manual&lt;/a&gt;.
   As you can see, I made no attempt to implement a real &lt;a href="http://www.python.org"&gt;Python&lt;/a&gt; tokenizer &amp;#8212;
   I just wanted to see if I could get any syntax highlighter working. Sure enough,
   when I started up my &lt;a href="http://www.typosphere.org"&gt;Typo&lt;/a&gt; development environment and posted a code snippet
&lt;/p&gt;
&lt;div class="typocode"&gt;

&lt;pre class="prettyprint"&gt;&amp;lt;code lang="python"&amp;gt;
abc 123

&lt;/pre&gt;

&lt;/div&gt;

&lt;/code&gt;

&lt;p&gt;then examined the resultant HTML (CTRL-U in Firefox). It read:
&lt;/p&gt;
&lt;div class="typocode"&gt;

&lt;pre class="prettyprint"&gt;&amp;lt;div class="typocode"&amp;gt;&amp;lt;pre&amp;gt;
&amp;lt;code class="typocode_python "&amp;gt;
&amp;lt;span class="words"&amp;gt;abc&amp;lt;/span&amp;gt; &amp;lt;span class="digits"&amp;gt;123&amp;lt;/span&amp;gt;

&lt;/pre&gt;

&lt;/div&gt;

&lt;p&gt;&lt;/pre&gt;&lt;/div&gt;
   &lt;/code&gt;
&lt;/p&gt;
&lt;p&gt;Perfect!
&lt;/p&gt;

&lt;h4&gt;&lt;a href="http://wordaligned.org/articles/my-test-first-ruby-program#toc4" name="tocportability" id="tocportability"&gt;Portability&lt;/a&gt;&lt;/h4&gt;
&lt;p&gt;Incidentally, my home development environment is on the Windows
   platform; my live blog runs on a &lt;a href="http://www.textdrive.com"&gt;shared server&lt;/a&gt; running
   FreeBSD. Identical &lt;a href="http://www.typosphere.org"&gt;Typo&lt;/a&gt; code runs on both &amp;#8212; the only difference
   being that I use WEBrick as my development webserver and lighttpd on the
   live blog.
&lt;/p&gt;

&lt;h4&gt;&lt;a href="http://wordaligned.org/articles/my-test-first-ruby-program#toc5" name="tochot-updates" id="tochot-updates"&gt;Hot updates&lt;/a&gt;&lt;/h4&gt;
&lt;p&gt;Wouldn&amp;#8217;t it be nice if you could edit &lt;code&gt;code_controller.rb&lt;/code&gt;, hit &lt;code&gt;F5&lt;/code&gt;
   in the web browser and see your changes take immediate effect? I gave it a go,
   switching &lt;code&gt;words&lt;/code&gt; for &lt;code&gt;worms&lt;/code&gt; for a bit of fun.
&lt;/p&gt;
&lt;div class="typocode"&gt;

&lt;pre class="prettyprint"&gt;class PythonTokenizer &amp;lt; Syntax::Tokenizer
    ....
      start_group :worms, words
end

&lt;/pre&gt;

&lt;/div&gt;

&lt;p&gt;Sure enough, the updated HTML page read:
&lt;/p&gt;
&lt;div class="typocode"&gt;

&lt;pre class="prettyprint"&gt;&amp;lt;span class="worms"&amp;gt;abc&amp;lt;/span&amp;gt;

&lt;/pre&gt;

&lt;/div&gt;

&lt;p&gt;which is how things should be. I was pleased to see that the
   &lt;a href="http://syntax.rubyforge.org/"&gt;syntax highlight module&lt;/a&gt; created the new CSS class &lt;code&gt;"worms"&lt;/code&gt; without
   complaining. I didn&amp;#8217;t even have to enter the string literal &lt;code&gt;"worms"&lt;/code&gt;
   anywhere in the code &amp;#8212; some sort of reflection must have figured out how
   to process the &lt;code&gt;:worms&lt;/code&gt; symbol correctly.
&lt;/p&gt;

&lt;h4&gt;&lt;a href="http://wordaligned.org/articles/my-test-first-ruby-program#toc6" name="tocoverenthusiasm" id="tocoverenthusiasm"&gt;Overenthusiasm&lt;/a&gt;&lt;/h4&gt;
&lt;p&gt;Enthused by this early success, I tried editing my &lt;code&gt;PythonTokenizer&lt;/code&gt;
   class to do what it was really meant to do: namely, identify comments,
   strings, keywords. &lt;a href="http://www.typosphere.org"&gt;Typo&lt;/a&gt; reported back the inevitable syntax errors
   through the web interface in a friendly enough way, but I soon
   realised that this was not the correct way to develop code.
&lt;/p&gt;
&lt;p&gt;What I really ought to be doing was developing my new &lt;code&gt;PythonTokenizer&lt;/code&gt;
   class in isolation, then integrating it into the &lt;a href="http://www.rubyonrails.org"&gt;Rails&lt;/a&gt;
   application.
&lt;/p&gt;

&lt;h4&gt;&lt;a href="http://wordaligned.org/articles/my-test-first-ruby-program#toc7" name="tocrunning-the-syntax-unit-tests" id="tocrunning-the-syntax-unit-tests"&gt;Running the Syntax Unit Tests&lt;/a&gt;&lt;/h4&gt;
&lt;p&gt;So, I went looking in the &lt;code&gt;vendor/syntax&lt;/code&gt; directory.
&lt;/p&gt;
&lt;div class="typocode"&gt;

&lt;pre class="prettyprint"&gt;+---api
|   +---classes
|   |   \---Syntax
|   |       \---Convertors
|   \---files
|       \---lib
|           \---syntax
|               +---convertors
|               \---lang
+---doc
|   +---manual
|   |   +---parts
|   |   \---stylesheets
|   \---manual-html
|       \---stylesheets
+---lib
|   \---syntax
|       +---convertors
|       \---lang
\---test
    \---syntax

&lt;/pre&gt;

&lt;/div&gt;

&lt;p&gt;I found the &lt;a href="http://www.ruby-lang.org"&gt;Ruby&lt;/a&gt;, XML and &lt;a href="http://www.yaml.org"&gt;YAML&lt;/a&gt; tokenizers in &lt;code&gt;lib/lang/ruby.rb&lt;/code&gt;,
   &lt;code&gt;lib/lang/xml.rb&lt;/code&gt; and &lt;code&gt;lib/lang/yaml.rb&lt;/code&gt; respectively. I found accompanying
   unit tests in &lt;code&gt;test/syntax/tc_ruby.rb&lt;/code&gt;, &lt;code&gt;test/syntax/tc_xml.rb&lt;/code&gt;
   and &lt;code&gt;test/syntax/tc_yaml.rb&lt;/code&gt;. Running the &lt;code&gt;test/ALL-TESTS.rb&lt;/code&gt; gave:
&lt;/p&gt;
&lt;div class="typocode"&gt;

&lt;pre class="prettyprint"&gt;c:\thomas\typo\vendor\syntax\test&amp;gt;ALL-TESTS.rb
ALL-TESTS.rb
Loaded suite c:/thomas/typo/vendor/syntax/test/ALL-TESTS
Started
............................................................
Finished in 0.359 seconds.

122 tests, 761 assertions, 0 failures, 0 errors

&lt;/pre&gt;

&lt;/div&gt;

&lt;p&gt;My new strategy was clear: develop &lt;code&gt;lib/lang/python.rb&lt;/code&gt; and
   &lt;code&gt;test/syntax/tc_python.rb&lt;/code&gt; in parallel until my new syntax
   highlighter passed all the tests &amp;#8212; then integrate my new
   &lt;a href="http://www.python.org"&gt;Python&lt;/a&gt; highlighter into &lt;a href="http://www.typosphere.org"&gt;Typo&lt;/a&gt;. I reverted my changes
   to &lt;code&gt;code_controller.rb&lt;/code&gt; and started again.
&lt;/p&gt;

&lt;h4&gt;&lt;a href="http://wordaligned.org/articles/my-test-first-ruby-program#toc8" name="tocadding-a-testcase" id="tocadding-a-testcase"&gt;Adding a testcase&lt;/a&gt;&lt;/h4&gt;
&lt;p&gt;So, I created &lt;code&gt;tc_python.rb&lt;/code&gt;, using &lt;code&gt;tc_ruby.rb&lt;/code&gt; as an example.
   Here&amp;#8217;s what the my first test looked like:
&lt;/p&gt;
&lt;div class="typocode"&gt;&lt;div class="codetitle"&gt;tc_python.rb&lt;/div&gt;

&lt;pre class="prettyprint"&gt;require File.dirname(__FILE__) + "/tokenizer_testcase"

class TC_Syntax_Python &amp;lt; TokenizerTestCase

syntax "python"

def test_empty
    tokenize ""
    assert_no_next_token
  end
end

&lt;/pre&gt;

&lt;/div&gt;

&lt;p&gt;Running &lt;code&gt;ALL-TESTS.rb&lt;/code&gt; again gave me:
&lt;/p&gt;
&lt;div class="typocode"&gt;

&lt;pre class="prettyprint"&gt;Started
...F........................................................
Finished in 0.282 seconds.

1) Failure:
test_empty(TC_Syntax_Python)
    [./syntax/tokenizer_testcase.rb:34:in `assert_no_next_token'
     ./syntax/tc_python.rb:9:in `test_empty']:
&amp;lt;false&amp;gt; is not true.

123 tests, 762 assertions, 1 failures, 0 errors

&lt;/pre&gt;

&lt;/div&gt;

&lt;p&gt;This at least confirmed my test was being run. Actually, I was a
   little surprised to get a failure and not an error, since I hadn&amp;#8217;t
   even registered a &lt;a href="http://www.python.org"&gt;Python&lt;/a&gt; syntax highlighter.
&lt;/p&gt;

&lt;h4&gt;&lt;a href="http://wordaligned.org/articles/my-test-first-ruby-program#toc9" name="tocgetting-started-on-pythonrb" id="tocgetting-started-on-pythonrb"&gt;Getting started on python.rb&lt;/a&gt;&lt;/h4&gt;
&lt;p&gt;My first cut at &lt;code&gt;python.rb&lt;/code&gt; simply reproduced the simple tokenizer I&amp;#8217;d
   put into &lt;code&gt;code_controller.rb&lt;/code&gt;.
&lt;/p&gt;
&lt;div class="typocode"&gt;&lt;div class="codetitle"&gt;python.rb&lt;/div&gt;

&lt;pre class="prettyprint"&gt;require 'syntax'

module Syntax
  class Python &amp;lt; Tokenizer

# Step through a single iteration of the tokenization process.
    def step
      if digits = scan(/\d+/)
        start_group :digits, digits
      elsif words = scan(/\w+/)
        start_group :words, words
      else
        start_group :normal, scan(/./)
      end
    end
  end

SYNTAX["python"] = Python
end

&lt;/pre&gt;

&lt;/div&gt;

&lt;p&gt;With this implementation, all the tests passed. Now I wrote a test case
   for finding comments &amp;#8212; about the simplest syntactic element of a &lt;a href="http://www.python.org"&gt;Python&lt;/a&gt;
   program. Perhaps &amp;#8220;wrote&amp;#8221; overstates things. Actually, I just cut-and-pasted
   a testcase from &lt;code&gt;tc_ruby.rb&lt;/code&gt;.
&lt;/p&gt;
&lt;div class="typocode"&gt;

&lt;pre class="prettyprint"&gt;  def test_comment_eol
    tokenize "# a comment\
foo"
    assert_next_token :comment, "# a comment"
    assert_next_token :normal, "\
"
    assert_next_token :ident, "foo"
  end

&lt;/pre&gt;

&lt;/div&gt;

&lt;p&gt;This caused the tests to hang. By playing with the code, I soon
   figured out the problem. My tokenizer wasn&amp;#8217;t getting past the newline.
   I&amp;#8217;d seen enough &lt;a href="http://www.perl.org"&gt;Perl&lt;/a&gt; in my time to figure out what to do. Clearly the
   &lt;code&gt;scan&lt;/code&gt; function accepted a regular expression, and the &lt;code&gt;else&lt;/code&gt; case
   used the regex special character &lt;code&gt;.&lt;/code&gt; to eat any single character
   &lt;em&gt;except an end-of-line&lt;/em&gt;. I  modified the regex so the code read
   &lt;code&gt;start_group :normal, scan(/./m)&lt;/code&gt; (notice the *&lt;code&gt;m&lt;/code&gt;*), and now my test
   failed instead of hanging:
&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;  1) Failure:
test_comment_eol(TC_Syntax_Python)
    [./syntax/tokenizer_testcase.rb:29:in `assert_next_token'
     ./syntax/tc_python.rb:13:in `test_comment_eol']:
&amp;lt;[:comment, "# a comment", :none]&amp;gt; expected but was
&amp;lt;[:normal, "# ", :none]&amp;gt;.
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;It was time to start making my &lt;a href="http://www.python.org"&gt;Python&lt;/a&gt; tokenizer look like it really
   wanted to tokenize &lt;a href="http://www.python.org"&gt;Python&lt;/a&gt;.
&lt;/p&gt;
&lt;div class="typocode"&gt;&lt;div class="codetitle"&gt;python.rb&lt;/div&gt;

&lt;pre class="prettyprint"&gt;  class Python &amp;lt; Tokenizer
    def step
      if comment = scan(/#.*$/)
        start_group :comment, comment
      else
        start_group :normal, scan(/./m)
      end
    end
  end

&lt;/pre&gt;

&lt;/div&gt;

&lt;p&gt;With this change, my failure moved on a line:
&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;  1) Failure:
test_comment_eol(TC_Syntax_Python)
    [./syntax/tokenizer_testcase.rb:29:in `assert_next_token'
     ./syntax/tc_python.rb:14:in `test_comment_eol']:
&amp;lt;[:normal, "\
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&amp;#8221;, :none]&amp;gt; expected but was
       &amp;lt;[:normal, &amp;#8221;
   foo&amp;#8221;, :none]&amp;gt;.
&lt;/p&gt;
&lt;p&gt;Good! My tokenizer had at least recognised the comment. Hardly
   surprisingly, it then treated the rest of the string as &lt;code&gt;normal&lt;/code&gt;,
   which is what the test failure indicates.
&lt;/p&gt;

&lt;h4&gt;&lt;a href="http://wordaligned.org/articles/my-test-first-ruby-program#toc10" name="tocrinse-and-repeat" id="tocrinse-and-repeat"&gt;Rinse and Repeat&lt;/a&gt;&lt;/h4&gt;
&lt;p&gt;You can probably work out the rest. I added code and test cases until
   my &lt;a href="http://www.python.org"&gt;Python&lt;/a&gt; syntax highlighter did all I wanted it to do: namely,
   pick out comments, strings, triple quoted strings. This post is far too
   long already &amp;#8212; I&amp;#8217;ll post my code and the accompanying tests in
   &lt;a href="http://wordaligned.org/articles/a-python-syntax-highlighter.html"&gt;another post&lt;/a&gt;.
&lt;/p&gt;

&lt;h4&gt;&lt;a href="http://wordaligned.org/articles/my-test-first-ruby-program#toc11" name="tocdeploying-the-python-highlighter" id="tocdeploying-the-python-highlighter"&gt;Deploying the Python Highlighter&lt;/a&gt;&lt;/h4&gt;
&lt;p&gt;I didn&amp;#8217;t need to do &lt;em&gt;anything&lt;/em&gt; to deploy the code in my development
   environment. It was already there, since I&amp;#8217;d developed it in place. I
   ran some system level tests to convince myself all was indeed OK, then
   copied it across to my &lt;a href="http://www.textdrive.com"&gt;shared server&lt;/a&gt;.
&lt;/p&gt;
&lt;p&gt;Just to show it all works, here&amp;#8217;s a simple &lt;a href="http://www.python.org"&gt;Python program&lt;/a&gt;
   to generate all the subsets of a set.
&lt;/p&gt;
&lt;div class="typocode"&gt;

&lt;pre class="prettyprint"&gt;def generate_subsets(the_set, m):
   """ Generate all m element subsets of the input set.

If the input set is empty or m is 0, yield the empty set.
   Otherwise, use a recursive solution. Pick any element from
   the set, and yield the subsets which contain this element,
   followed by those which don't.
   """
   if m &amp;gt; len(the_set):
       pass
   elif len(the_set) == 0 or m == 0:
       yield set()
   else:
       e = the_set.pop()
       for subset in generate_subsets(the_set, m - 1):
           subset.add(e)
           yield subset
       for subset in generate_subsets(the_set, m):
           yield subset
       the_set.add(e)

&lt;/pre&gt;

&lt;/div&gt;</description>
<dc:date>2006-07-19</dc:date>
<guid>http://wordaligned.org/articles/my-test-first-ruby-program</guid>
<author>tag@wordaligned.org (Thomas Guest)</author>
<link>http://wordaligned.org/articles/my-test-first-ruby-program</link>
<category>Emacs</category>
</item>

</channel>
</rss>
