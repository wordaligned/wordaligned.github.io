<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:dc="http://purl.org/dc/elements/1.1/" >
<channel>
<title>Word Aligned</title>
<link>http://wordaligned.org</link>
<description>tales from the code face</description>
<dc:creator>tag@wordaligned.org</dc:creator>
<language>en-gb</language>
<item>
<title>Books, blogs, comments and code samples</title>
<description>&lt;h3 id=&quot;fastware-slow-progress&quot;&gt;Fastware, slow progress&lt;/h3&gt;
&lt;p&gt;&lt;a href=&quot;http://www.aristeia.com/&quot;&gt;&lt;img src=&quot;http://www.aristeia.com/images/sdm-small.jpg&quot; alt=&quot;Scott Meyers mugshot&quot;/&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Few would argue with &lt;a href=&quot;http://www.artima.com/cppsource/top_cpp_books.html&quot;&gt;Scott Meyers&amp;#8217; claim&lt;/a&gt; to have written one of &amp;#8220;the most important C++ books &amp;#8230; &lt;em&gt;Ever&lt;/em&gt;&amp;#8221;. There is not (and could never be) a K&amp;amp;R for C++, but every C++ programmer should have access to the current edition of Meyers&amp;#8217; classic book, &lt;a href=&quot;http://www.amazon.com/gp/product/0321334876?tag=wordalig-20&quot;&gt;Effective C++&lt;/a&gt;, which makes sense of a subtle and complex language.&lt;/p&gt;
&lt;div class=&quot;amazon&quot;&gt;&lt;a href=&quot;http://www.amazon.com/gp/product/0321334876?tag=wordalig-20&quot;&gt;&lt;img src=&quot;http://wordaligned.org/images/books/effective-cpp.jpg&quot; alt=&quot;Effective C++ cover&quot;/&gt;&lt;/a&gt;&lt;/div&gt;

&lt;p&gt;Naturally, then, I was interested to discover &lt;a href=&quot;http://www.aristeia.com/&quot;&gt;Meyers&lt;/a&gt; has started writing a new book, working title &lt;a href=&quot;http://fastwareproject.blogspot.com&quot;&gt;Fastware!&lt;/a&gt; Or maybe I should say that he will be starting on a new book just as soon as he can settle on a suitable toolchain. His new &lt;a href=&quot;http://fastwareproject.blogspot.com&quot;&gt;Fastware Project blog&lt;/a&gt; explores the issues.&lt;/p&gt;
&lt;p&gt;Why are the tools he used so successfully to produce Effective C++ no longer adequate?&lt;/p&gt;
&lt;p&gt;&lt;span id=&quot;continue-reading&quot;/&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&amp;#8230; my writing has been stalled for quite some time as I&amp;#8217;ve wrestled with the question of what it means to write a book these days. For conventional print books, things are easy for an author, because the game is pretty well understood: ink is black, paper is white, standard font size is around 10 point, page dimensions are generally around 9&amp;#x22;x6&amp;#x22; with maybe a margin of around 1&amp;#x22; on all sides &amp;#8230;&lt;/p&gt;
&lt;p&gt;But I don&amp;#8217;t think the ink-on-paper world is the one I want to write for any more. I still want to write something that is recognizably a book, but I want to think of ink on paper as but one of many possible output devices. Others include computer screens (big with color support), portable ebook readers like Kindle (smaller and currently with no color support), and portable devices that happen to support text (e.g., iPhones &amp;#8212; very small with color support).&lt;/p&gt;
&lt;p&gt;&amp;#8212; &lt;a href=&quot;http://fastwareproject.blogspot.com/2008/11/two-projects-in-one.html&quot;&gt;Scott Meyers, Two Projects in One&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Here&amp;#8217;s an example of the distinctions: Meyers corrects any errors he discovers in Effective C++ each time it gets reprinted, trying to ensure that &lt;a href=&quot;http://fastwareproject.blogspot.com/2008/11/post-publication-page-break-problem.html&quot;&gt;no pages are renumbered&lt;/a&gt; as a result of these changes. So if you&amp;#8217;re directed e.g. to page 44 of the 3rd edition of Effective C++, you&amp;#8217;ll find what you&amp;#8217;re looking for no matter which print run your copy happened to come from. Page numbers are the canonical way of referring to positions in a book, so they&amp;#8217;d better persist. &lt;/p&gt;
&lt;p&gt;For web based presentation of the same content, page breaking problems should be easier to avoid, but a fixed URL scheme is crucial; further, readers should be able to discover and use subsection links within a page (e.g. clicking on a subsection header could copy its permanent link to the clipboard).&lt;/p&gt;
&lt;p&gt;On the &lt;a href=&quot;http://fastwareproject.blogspot.com&quot;&gt;Fastware blog&lt;/a&gt;, Meyers ponders more interesting examples, such as the &lt;a href=&quot;http://fastwareproject.blogspot.com/2008/11/what-can-go-in-book.html&quot;&gt;representation of audio content and animations&lt;/a&gt; in different output formats. One key topic he has yet to discuss in depth is perhaps the most important of all: &lt;strong&gt;what to do about code samples?&lt;/strong&gt;&lt;/p&gt;
&lt;h3 id=&quot;code-and-document-editors&quot;&gt;Code and document editors&lt;/h3&gt;
&lt;p&gt;&lt;a title=&quot;&amp;#x01dd;&amp;#x025f;&amp;#x025f;&amp;#x0131;lpoo&amp;#x0183; &amp;#x01dd;&amp;#x0287;&amp;#x01dd;d&quot; href=&quot;http://www.goodliffe.net&quot;&gt;&lt;img src=&quot;http://wordaligned.org/images/pete-goodliffe.jpg&quot; style=&quot;float:right;&quot; alt=&quot;&amp;#x01dd;&amp;#x025f;&amp;#x025f;&amp;#x0131;lpoo&amp;#x0183; &amp;#x01dd;&amp;#x0287;&amp;#x01dd;d&quot;/&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Consider the problem of including code in a book, or indeed an online article. Obviously, there&amp;#8217;s a formatting problem. You can&amp;#8217;t just paste (e.g.) C++ from your programming IDE into an HTML page or a .tex file: you&amp;#8217;ll lose the formatting, and the angle brackets and ampersands need escaping. Not so very hard to solve, maybe, but still an issue to overcome. Experienced programmer and author &lt;a href=&quot;http://goodliffe.blogspot.com/2008/11/c-stl-like-circular-buffer-part-4.html?showComment=1227282360000#c3539371097531739661&quot;&gt;Pete Goodliffe complains&lt;/a&gt;:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Putting code examples into blogger is hateful. HTML-conversion of templated C++ code is not my idea of a good time!&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;(Templated C++ code isn&amp;#8217;t my idea of a good time either, but I think Pete Goodliffe means all those &amp;lt;angle&amp;gt; &amp;lt;brackets&amp;gt; are giving him grief.)&lt;/p&gt;
&lt;p&gt;The formatting problem is amplified when it comes to comments. One advantage of web publishing is that readers can add comments, and may even offer code samples in their comments. One danger of web publishing is that crackers may try and attack your server by including code in their comments! As a result, comments must be sanitised, which often mangles code samples. This problem is far from being solved, as I realised when a reader posted some code in &lt;a href=&quot;http://www.haloscan.com/comments/wordaligned/joined_output_and_the_fencepost_problem/#40466&quot;&gt;a comment on this site&lt;/a&gt;, which unfortunately the comment handler ruined.&lt;/p&gt;
&lt;h3 id=&quot;document-editors-and-code&quot;&gt;Document editors and code&lt;/h3&gt;
&lt;p&gt;Pasting from a code editor into a document editor can lead to problems. So can writing code directly in a document editor &amp;#8212; even if you&amp;#8217;re &lt;a href=&quot;http://www.research.att.com/~bs&quot;&gt;Bjarne Stroustrup&lt;/a&gt; and the code is in C++, a language you invented and implemented. Here&amp;#8217;s what happened when I tried compiling some code copied directly from Stroustrup&amp;#8217;s paper &lt;a href=&quot;http://www.research.att.com/~bs/abstraction.pdf&quot;&gt;Abstraction, libraries, and efficiency in C++ (PDF)&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;The code reads:&lt;/p&gt;
&lt;div class=&quot;typocode&quot;&gt;&lt;pre class=&quot;prettyprint&quot;&gt;
string s;
in &amp;gt;&amp;gt; s; // &amp;ldquo;in&amp;rdquo; is an input stream connected to a data source
cout &amp;lt;&amp;lt; &amp;ldquo;I read &amp;ldquo; &amp;lt;&amp;lt; s.length() &amp;lt;&amp;lt; &amp;ldquo;characters&amp;rdquo;;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;The compiler barfs:&lt;/p&gt;
&lt;pre&gt;
bs.cpp:3: error: stray &#x27;\226&#x27; in program
bs.cpp:3: error: stray &#x27;\128&#x27; in program
bs.cpp:3: error: stray &#x27;\156&#x27; in program
bs.cpp:3: error: stray &#x27;\226&#x27; in program
bs.cpp:3: error: stray &#x27;\128&#x27; in program
bs.cpp:3: error: stray &#x27;\156&#x27; in program
bs.cpp:3: error: stray &#x27;\226&#x27; in program
bs.cpp:3: error: stray &#x27;\128&#x27; in program
bs.cpp:3: error: stray &#x27;\156&#x27; in program
bs.cpp:3: error: stray &#x27;\226&#x27; in program
bs.cpp:3: error: stray &#x27;\128&#x27; in program
bs.cpp:3: error: stray &#x27;\157&#x27; in program
...
bs.cpp:3: error: &#x27;I&#x27; was not declared in this scope
bs.cpp:3: error: expected `;&#x27; before &#x27;read&#x27;
&lt;/pre&gt;

&lt;p&gt;Not a bad haul of errors for code which the author found &amp;#8220;trivial to write&amp;#8221;!&lt;/p&gt;
&lt;p&gt;Of course, Stroustrup has been caught out by some (not so!) smart quoting applied by his authoring tools.&lt;/p&gt;
&lt;p&gt;(Any programming editor should expose this problem by failing to highlight &amp;ldquo;I read &amp;rdquo; and &amp;ldquo;characters&amp;rdquo; as string literals, and if you&amp;#8217;re reading this article served directly from wordaligned.org, rather than in a feed reader, then the &lt;a href=&quot;http://wordaligned.org/scripts/prettify.js&quot;&gt;javascript prettifier&lt;/a&gt; should do just this. The poorly spaced output bug may not be spotted until the code actually executes.)&lt;/p&gt;
&lt;h3 id=&quot;serious-problems-with-code-examples&quot;&gt;Serious problems with code examples&lt;/h3&gt;
&lt;p&gt;Whether or not you can paste source code directly into the source text of your book/article depends on the format used for that source. I can and do copy code directly into the articles I post to &lt;a href=&quot;http://wordaligned.org&quot;&gt;wordaligned.org&lt;/a&gt;. A documentation toolchain based around &lt;a href=&quot;http://daringfireball.net/projects/markdown/&quot;&gt;Markdown&lt;/a&gt; takes care of conversion to HTML, and a clever &lt;a href=&quot;http://wordaligned.org/scripts/prettify.js&quot;&gt;javascript program&lt;/a&gt; handles syntax highlighting. The more serious problems here are twofold:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;Whenever you cut and paste code between documents, more than one version of that code exists. You&amp;#8217;ve introduced a branch.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Once code leaves its normal development environment, it can no longer be executed in the usual way.&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Both of these problems can be overcome, and many conscientious authors have put together their own solutions, but I think it&amp;#8217;s fair to say there is no single, accepted, way of solving them.&lt;/p&gt;
&lt;p&gt;Programmers are familiar with build systems, and this is exactly &lt;a href=&quot;http://fastwareproject.blogspot.com/2008/11/single-source-automatic-building-is.html&quot;&gt;Scott Meyers&amp;#8217; approach&lt;/a&gt; to book production:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&amp;#8230; it&amp;#8217;s crucial that I have a &lt;strong&gt;single master source&lt;/strong&gt; for each book, and it&amp;#8217;s also crucial that the various target versions of the book can be &lt;strong&gt;automatically built&lt;/strong&gt; from the single master source. If this sounds like the usual requirement for cross-platform software development, it should, because that&amp;#8217;s exactly how I think of it.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;He doesn&amp;#8217;t mention if his build system includes regression tests, which, in this case, would involve extracting the various code examples, building them, testing the output &amp;#8212; ideally (especially for a language as close to the platform as C++) using multiple compilers on multiple platforms.&lt;/p&gt;
&lt;h3 id=&quot;pythons-doctest-module&quot;&gt;Python&amp;#8217;s Doctest module&lt;/h3&gt;
&lt;p&gt;I haven&amp;#8217;t cracked these problems myself and have often come to regret this flaw in the toolchain I use for code examples on this site. I&amp;#8217;ve published syntax errors, off-by-one bugs, logical inversions &amp;#8212; and this despite the fact that my &lt;a href=&quot;http://wordaligned.org/articles/accidental-emacs.html&quot;&gt;programming and documentation editors are one and the same&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;When writing about Python life should be a little easier since the compilation phase doesn&amp;#8217;t exist, and perhaps this explains my laziness. Python&amp;#8217;s &lt;a href=&quot;http://docs.python.org/library/doctest.html&quot;&gt;doctest module&lt;/a&gt; also allows a degree of sanity checking, at least for any interpreted Python code. For example, a bug has somehow crept into the string reversal shown below:&lt;/p&gt;
&lt;div class=&quot;typocode&quot;&gt;

&lt;pre class=&quot;prettyprint&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &amp;#x27;wordaligned.org&amp;#x27;[::-1]
&amp;#x27;gro.dengliadrow&amp;#x27;
&amp;gt;&amp;gt;&amp;gt;

&lt;/pre&gt;

&lt;/div&gt;

&lt;p&gt;Doctest exposes this problem by reading in the file, finding anything which looks like an interpreted Python session, and playing it back, checking for errors.&lt;/p&gt;
&lt;pre&gt;
python -c &#x27;import doctest; doctest.testfile(&quot;code-samples&quot;)&#x27;
**********************************************************************
File &quot;code-samples&quot;, line 104, in code-samples
Failed example:
    &#x27;wordaligned.org&#x27;[::-1]
Expected:
    &#x27;gro.dengliadrow&#x27;
Got:
    &#x27;gro.dengiladrow&#x27;
**********************************************************************
1 items had failures:
   1 of   1 in code-examples
***Test Failed*** 1 failures.
&lt;/pre&gt;

&lt;p&gt;Note though, that to properly check this article, with its intentional mistake, doctest alone is no longer up to the job, since I need to confirm the mistake fails correctly.&lt;/p&gt;
&lt;h3 id=&quot;subtle-problems-with-code-examples&quot;&gt;Subtle problems with code examples&lt;/h3&gt;
&lt;p&gt;So, formatting problems should be simple to solve. Testing code examples for correctness is hard. There are more subtle problems, too. &lt;/p&gt;
&lt;p&gt;How do you annotate sample code? Authors frequently use comments for such annotations, resulting in code examples which are far from exemplary. Here&amp;#8217;s another Stroustrup program, taken from &lt;a href=&quot;http://www.research.att.com/~bs/new_learning.pdf&quot;&gt;Learning Standard C++ as a New Language (PDF)&lt;/a&gt;.&lt;/p&gt;
&lt;div class=&quot;typocode&quot;&gt;&lt;pre class=&quot;prettyprint&quot;&gt;
#include&amp;lt;iostream&amp;gt;//get standard I/O facilities 
#include&amp;lt;string&amp;gt;//get standard string facilities 

int main()
{ 
    using namespace std; //gain access to standard library 
    cout &amp;lt;&amp;lt; &quot;Please enter your first name\n&quot;;
    string name;
    cin &amp;gt;&amp;gt; name;
    cout &amp;lt;&amp;lt; &quot;Hello &quot; &amp;lt;&amp;lt; name &amp;lt;&amp;lt; &amp;rsquo;\n&amp;rsquo;; 
}
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;It&amp;#8217;s seductively easy to adopt this style of annotation, and it&amp;#8217;s employed in many of the best programming texts (including Effective C++). Nonetheless, it&amp;#8217;s poor programming style. I&amp;#8217;d like to see authors find a better way.&lt;/p&gt;
&lt;div class=&quot;amazon&quot;&gt;&lt;a href=&quot;http://www.amazon.com/gp/product/0201657880?ie=UTF8&amp;amp;tag=wordalig-20&quot;&gt;&lt;img src=&quot;http://wordaligned.org/images/books/programming-pearls.jpg&quot; alt=&quot;Programming Pearls cover&quot;/&gt;&lt;/a&gt;&lt;/div&gt;

&lt;p&gt;Can code in a book ever differ from production code? I&amp;#8217;m more convinced by Jon Bentley&amp;#8217;s up front note in the preface to his excellent and code-packed book, &lt;a href=&quot;http://www.amazon.com/gp/product/0201657880?ie=UTF8&amp;amp;tag=wordalig-20&quot;&gt;Programming Pearls&lt;/a&gt;:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;The programs use a terse programming style: short variable names, few blank lines, and little or no error checking. This is inappropriate in large software projects, but it is useful to convey the key ideas of algorithms.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;He&amp;#8217;s right: this particular book would be less accessible if the code (e.g.) checked inputs rigorously, or employed the variable naming conventions Bentley prefers for large software projects. The difference is that the code in his book exists to illustrate the key ideas dealt with more fully in the text; whereas, in a software project, the code is the text.&lt;/p&gt;
&lt;p&gt;Bentley balances code and text superbly, switching between pseudocode, real code and prose to find a solution matching the precise needs of his book. My only complaint is that you can&amp;#8217;t download the code examples from the website referenced in the book (www.programmingpearls.com, don&amp;#8217;t go there!) because someone has snatched the domain. Other books have different goals and it would be a severe failing if, for example, Effective C++ were to include code examples which weren&amp;#8217;t exception safe. How often does &amp;#8220;exercise for the reader&amp;#8221; sound like &amp;#8220;excuse for the writer&amp;#8221;?&lt;/p&gt;
&lt;h3 id=&quot;content-and-presentation&quot;&gt;Content and presentation&lt;/h3&gt;
&lt;p&gt;Testing code samples is really a diversion from the points Meyers raises on his blog: he&amp;#8217;s more concerned with multiple format presentation. How exactly do you arrange for suitable syntax highlighting in print, on a computer screen, in a podcast?&lt;/p&gt;
&lt;p&gt;Traditionally, authors deliver &lt;strong&gt;content&lt;/strong&gt; to publishers, and publishers control the &lt;strong&gt;presentation&lt;/strong&gt; of that content. Both sides do what they&amp;#8217;re best at. In the world of computing books, this model often isn&amp;#8217;t the case. Programmers are capable of driving and configuring the software involved with book production &amp;#8212; and indeed of writing new software if what exists isn&amp;#8217;t good enough. Many programmers are ahead of the game when it comes to understanding the opportunities with newer formats. (I could also add that programmers like to be self-sufficient, enjoy tinkering, value control, and think they know better!) Reading Meyers&amp;#8217; blog, it becomes apparent that he takes immense care &amp;#8212; and exercises complete control &amp;#8212; over the final presentation of his traditional book content, in fact delivering his &lt;a href=&quot;http://fastwareproject.blogspot.com/2008/11/single-source-automatic-building-is.html&quot;&gt;publishers camera-ready copy&lt;/a&gt;.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;I write my books with a goal of their remaining useful for at least five years, and there are generally at least one or two reprints each year, so camera-ready copy for one of my books should have to be produced at least 10 times. It&amp;#8217;s often more than that. More Effective C++, which I wrote in 1996, is now in its 26th printing.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&quot;perfectionism-and-programming&quot;&gt;Perfectionism and programming&lt;/h3&gt;
&lt;p&gt;Perfectionism and programming is a rare combination. Donald Knuth&amp;#8217;s famous typesetting program, &lt;a href=&quot;http://en.wikipedia.org/wiki/TeX&quot;&gt;TeX&lt;/a&gt;, is reputedly as close as a substantial program ever gets to perfection, and it continues to set the standard for printed material (&lt;a href=&quot;http://fastwareproject.blogspot.com/2008/11/xml.html&quot;&gt;and looks likely to play a role&lt;/a&gt; in the print version of Fastware). TeX was born from a dissatisfaction with the available tools. Knuth simply couldn&amp;#8217;t accept the content of The Art of Computer Programming being spoiled by ugly presentation&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;I had spent 15 years writing those books, but if they were going to look awful I didn&amp;#8217;t want to write any more&lt;a id=&quot;fn1link&quot; href=&quot;http://wordaligned.org/articles/code-samples#fn1&quot;&gt;&lt;sup&gt;&lt;a href=&quot;https://blog.codeship.com/building-minimal-docker-containers-for-go-applications/&quot;&gt;1&lt;/a&gt;&lt;/sup&gt;&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;and he had the determination, passion and ability to take a ten year detour and do something about.&lt;/p&gt;
&lt;h3 id=&quot;the-outlook-for-fastware&quot;&gt;The outlook for Fastware!&lt;/h3&gt;
&lt;p&gt;Will Meyers find himself similarly diverted? I don&amp;#8217;t know, but I&amp;#8217;m enjoying reading his thoughts.&lt;/p&gt;
&lt;p&gt;On reflection, I suggest &lt;a href=&quot;http://www.amazon.com/gp/product/0321334876?tag=wordalig-20&quot;&gt;Effective C++&lt;/a&gt; succeeds &lt;em&gt;because&lt;/em&gt; of its narrow scope. It doesn&amp;#8217;t aim to teach programming, or even programming in C++: it&amp;#8217;s a concise survival guide for those who work with the language. As such, its traditional printed form serves it well. It&amp;#8217;s not an entertainment (you wouldn&amp;#8217;t want to listen to it on a long journey) and nor is it strictly a reference (you won&amp;#8217;t be using it to cut and paste code from): rather, it&amp;#8217;s packed with material you need to read carefully and understand. &lt;/p&gt;
&lt;p&gt;Fastware! a language-agnostic, multi-format book, will clearly be something very different. &lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://fastwareproject.blogspot.com/feeds/posts/default&quot;&gt;Subscribe!&lt;/a&gt;&lt;/p&gt;
&lt;hr /&gt;
&lt;h3 id=&quot;notes&quot;&gt;Notes&lt;/h3&gt;
&lt;p&gt;&lt;a href=&quot;http://docbook.org&quot;&gt;DocBook&lt;/a&gt; aims to solve the multiple output formats problem. Loosely speaking, it comprises an XML vocabulary to describe a book&amp;#8217;s content, together with XSLT transforms and other tools to convert that content into web pages, PDFs and so on. You can read about &lt;a href=&quot;http://wordaligned.org/docs/softdoc_overload/index.html&quot;&gt;my experience with DocBook here&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;I also recommend &lt;a href=&quot;http://www.amazon.com/gp/product/020163371X?tag=wordalig-20&quot;&gt;More Effective C++&lt;/a&gt; and &lt;a href=&quot;http://www.amazon.com/gp/product/0201749629?tag=wordalig-20&quot;&gt;Effective STL&lt;/a&gt;, both by Scott Meyers.&lt;/p&gt;
&lt;hr /&gt;
&lt;p&gt;&lt;a id=&quot;fn1&quot; href=&quot;http://wordaligned.org/articles/code-samples#fn1link&quot;&gt;&lt;a href=&quot;https://blog.codeship.com/building-minimal-docker-containers-for-go-applications/&quot;&gt;1&lt;/a&gt;&lt;/a&gt; &lt;a href=&quot;http://en.wikipedia.org/wiki/TeX#cite_note-3&quot;&gt;This Knuth quotation&lt;/a&gt; appears in the links section of the &lt;a href=&quot;http://en.wikipedia.org/wiki/TeX&quot;&gt;Wikipedia page on TeX&lt;/a&gt;.&lt;/p&gt;</description>
<dc:date>2008-11-25</dc:date>
<guid>http://wordaligned.org/articles/code-samples</guid>
<author>tag@wordaligned.org (Thomas Guest)</author>
<link>http://wordaligned.org/articles/code-samples</link>
<category>DocBook</category>
</item>

<item>
<title>Paging through the Manual using Access Keys</title>
<description>&lt;h3 id=&quot;random-access&quot;&gt;Random Access&lt;/h3&gt;
&lt;p&gt;These days most reference manuals are designed to be read in a web browser. This has many advantages, especially for random access. Standard search techniques bring up the page you want &amp;#8212; and section-hopping is a snip.&lt;/p&gt;
&lt;h3 id=&quot;sequential-access&quot;&gt;Sequential Access&lt;/h3&gt;
&lt;p&gt;Sequential access may be less convenient. Suppose you actually want to &lt;em&gt;read&lt;/em&gt; the manual. Maybe you&amp;#8217;re evaluating a new &lt;a href=&quot;http://scons.org&quot;&gt;build technology&lt;/a&gt;, and you&amp;#8217;d like to flick through the manual to get an overview of how it hangs together. Or maybe you&amp;#8217;ve been charged with &lt;a href=&quot;http://wordaligned.org/docs/cvs2svn/index.html&quot;&gt;upgrading your company&amp;#8217;s source control system&lt;/a&gt; from CVS, and you need to read the &lt;a href=&quot;http://svnbook.red-bean.com/&quot;&gt;Subversion manual&lt;/a&gt; carefully, from start to finish.&lt;/p&gt;
&lt;p&gt;If the manual is well designed this shouldn&amp;#8217;t be hard. Each page will have a prominent &lt;strong&gt;Next&lt;/strong&gt; link; you keep clicking this link to advance through the manual. This does have problems, though. If the link moves or your mouse moves (which, after all, is what mice are meant to do) you waste effort concentrating on pointer placement instead of following what you&amp;#8217;re reading.&lt;/p&gt;
&lt;h3 id=&quot;hot-keys&quot;&gt;Hot Keys&lt;/h3&gt;
&lt;p&gt;My feed reader client, &lt;a href=&quot;http://reader.google.com&quot;&gt;Google Reader&lt;/a&gt;, is designed to allow you to skim through a mountain of new material sequentially, and you drive it all using the largest key on the keyboard: the spacebar. This apparent simplicity is a product of good interface design and hardcore javascript.&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://docbook.org&quot;&gt;DocBook&lt;/a&gt; offers a number of lo-tech solutions to this problem. The first, which shouldn&amp;#8217;t be neglected, is that it&amp;#8217;s possible to convert DocBook sources into something more suited for paging though at leisure &amp;#8212; hard-copy! &lt;/p&gt;
&lt;p&gt;Restricting ourselves to HTML output, DocBook can generate output as single block of HTML, which you can then page through using the spacebar (or indeed by using the mouse wheel, but there&amp;#8217;s no need for pointer precision). For chunked HTML, DocBook by default places &lt;a href=&quot;http://en.wikipedia.org/wiki/Access_keys&quot;&gt;access keys&lt;/a&gt; on each page:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;N&lt;/strong&gt; takes you to the next page &lt;/li&gt;
&lt;li&gt;&lt;strong&gt;P&lt;/strong&gt; takes you to the previous page &lt;/li&gt;
&lt;li&gt;&lt;strong&gt;U&lt;/strong&gt; takes you up a level&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;H&lt;/strong&gt; takes you to the top-level&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Once you discover these keys and once you&amp;#8217;ve worked out how exactly to use them on your platform, you&amp;#8217;ll use them more and more.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://wordaligned.org/docs/images/prev.png&quot; alt=&quot;Previous&quot; /&gt;
&lt;img src=&quot;http://wordaligned.org/docs/images/up.png&quot; alt=&quot;Up&quot; /&gt;
&lt;img src=&quot;http://wordaligned.org/docs/images/home.png&quot; alt=&quot;Home&quot; /&gt;
&lt;img src=&quot;http://wordaligned.org/docs/images/next.png&quot; alt=&quot;Next&quot; /&gt;&lt;/p&gt;
&lt;h3 id=&quot;paging-through-word-aligned-using-access-keys&quot;&gt;Paging through Word Aligned using Access Keys&lt;/h3&gt;
&lt;p&gt;&lt;a href=&quot;http://wordaligned.org/&quot;&gt;Word Aligned&lt;/a&gt; is a time-ordered chain of articles which you can page through using access keys.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;N&lt;/strong&gt; takes you to the next article (newer)&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;P&lt;/strong&gt; takes you to the previous article (older)&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;H&lt;/strong&gt; takes you home&lt;/li&gt;
&lt;/ul&gt;</description>
<dc:date>2007-11-19</dc:date>
<guid>http://wordaligned.org/articles/paging-through-the-manual-using-access-keys</guid>
<author>tag@wordaligned.org (Thomas Guest)</author>
<link>http://wordaligned.org/articles/paging-through-the-manual-using-access-keys</link>
<category>DocBook</category>
</item>

<item>
<title>Soft Documentation</title>
<description>&lt;p&gt;One &lt;a href=&quot;http://wordaligned.org/doc/softdoc/index.html&quot;&gt;article&lt;/a&gt;, two versions: a software developer&amp;#8217;s investigation into documentation tools. &lt;/p&gt;
&lt;p&gt;This &lt;a href=&quot;http://wordaligned.org/doc/softdoc/index.html&quot;&gt;article&lt;/a&gt; was first published in &lt;a href=&quot;http://accu.org/index.php/journals/c141/&quot;&gt;Overload 71&lt;/a&gt; and was subsequently republished in &lt;a href=&quot;http://www.istc.org.uk/pages/journals.php&quot;&gt;Communicator&lt;/a&gt;, a journal for technical writers. &lt;/p&gt;
&lt;div class=&quot;extended&quot;&gt;&lt;p&gt;&lt;a href=&quot;http://wordaligned.org/docs/softdoc/index.html&quot;&gt;Continue reading&amp;#8230;&lt;/a&gt;&lt;/p&gt;&lt;/div&gt;</description>
<dc:date>2006-10-09</dc:date>
<guid>http://wordaligned.org/articles/soft-documentation</guid>
<author>tag@wordaligned.org (Thomas Guest)</author>
<link>http://wordaligned.org/articles/soft-documentation</link>
<category>DocBook</category>
</item>

</channel>
</rss>
