<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:dc="http://purl.org/dc/elements/1.1/" >
<channel>
<title>Word Aligned</title>
<link>http://wordaligned.org</link>
<description>tales from the code face</description>
<dc:creator>tag@wordaligned.org</dc:creator>
<language>en-gb</language>
<item>
<title>Bike charts by Google</title>
<description>&lt;p&gt;I&amp;#8217;ve liked the &lt;a href=&quot;http://code.google.com/apis/chart/&quot;&gt;Google chart API&lt;/a&gt; ever since &lt;a href=&quot;http://wordaligned.org/articles/the-maximum-subsequence-problem.html&quot; title=&quot;My first charts using the google API&quot;&gt;I first discovered it&lt;/a&gt;. Pack a text definition of an image into a URL &lt;code&gt;http://chart.apis.google.com/chart?YOUR-IMAGE-HERE&lt;/code&gt; and you&amp;#8217;ll be served up a freshly cooked PNG. It&amp;#8217;s free. There&amp;#8217;s not even a watermark.&lt;/p&gt;
&lt;p&gt;&lt;img width=&quot;320px&quot; height=&quot;160px&quot; src=&quot;http://chart.apis.google.com/chart?chs=320x160&amp;amp;cht=gom&amp;amp;chd=t:70&amp;amp;chl=Nice!&quot; alt=&quot;Swing-o-meter, Nice!&quot;/&gt;&lt;/p&gt;
&lt;pre&gt;
http://chart.apis.google.com/chart?  # A chart, please
    &amp;chs=320x160                     # sized 320x160 pixels
    &amp;cht=gom                         # of type swin&lt;b&gt;gom&lt;/b&gt;eter
    &amp;chd=t:70                        # with 70% swing
    &amp;chl=Nice!                       # labeled &quot;Nice!&quot;
&lt;/pre&gt;

&lt;p&gt;Gone are the days when the &lt;a href=&quot;http://code.google.com/apis/chart/docs/making_charts.html&quot; title=&quot;main entry point to the google chart API docs&quot;&gt;documentation&lt;/a&gt; fitted on a single web-page. The API has fattened up and filled out. Every time I visit something new has been added: &lt;a href=&quot;http://code.google.com/apis/chart/docs/gallery/formulas.html&quot; title=&quot;or should that be formulas?&quot;&gt;mathematical formulae&lt;/a&gt; written in TeX; a &lt;a href=&quot;http://code.google.com/apis/chart/docs/chart_playground.html&quot; title=&quot;Live chart playground&quot;&gt;playground&lt;/a&gt; where you can sketch a chart directly; a &lt;a href=&quot;http://code.google.com/intl/uk/apis/chart/docs/debugging.html&quot;&gt;validation&lt;/a&gt; option which tells you where you went wrong &amp;#8212; much more helpful than a bare 404.&lt;/p&gt;
&lt;p&gt;&lt;span id=&quot;continue-reading&quot;/&gt;&lt;/p&gt;
&lt;p&gt;New to me: &lt;a href=&quot;http://code.google.com/apis/chart/docs/gallery/dynamic_icons.html&quot; title=&quot;dynamic icons - callouts, bubbles, pins, and other graphics&quot;&gt;dynamic icons&lt;/a&gt;, which let you create &amp;#8220;a variety of interesting callouts, pins, or bubbles that mix text and images&amp;#8221;. &lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://chart.apis.google.com/chart?chst=d_fnote&amp;amp;chld=thought|2|993300|h|We+could+have+|fun+with+this!&quot; alt=&quot;here&#x27;s a thought...&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://chart.apis.google.com/chart?chst=d_bubble_icon_texts_big&amp;amp;chld=bicycle|bb|ffff33|663300|Classic+Tour+Finishes|Let&#x27;s+make+some+charts+which+depict|classic+stage+finishes+in+the+Tour+de+France&quot; alt=&quot;classic cycle charts&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://chart.apis.google.com/chart?chst=d_bubble_text_small&amp;amp;chld=bbbr|Good+idea,+go+for+it!|ffff33|663300&quot; alt=&quot;Go for it!&quot;/&gt;&lt;/p&gt;
&lt;p&gt;Mercurial manxman Mark Cavendish won an incredible &lt;strong&gt;6 stages&lt;/strong&gt; of last year&amp;#8217;s Tour. Here he is, becoming the first Briton ever to win the final showdown on the Champs-&amp;Eacute;lys&amp;eacute;es, and winning it by an immense margin. For me, it was a bitter-sweet moment: that sprint should have put Cav in the green jersey, but he&amp;#8217;d thrown away his chance in the points competition earlier in the race with an &lt;a href=&quot;http://tag.wordaligned.org/posts/cav-wants-race&quot;&gt;act of petulance&lt;/a&gt; which I still struggle to understand.&lt;/p&gt;
&lt;p&gt;&lt;img alt=&quot;Cavendish, first on the the Champs-&amp;Eacute;lys&amp;eacute;es&quot; src=&quot;http://chart.apis.google.com/chart?&amp;amp;cht=lc&amp;amp;chs=540x280&amp;amp;chls=4,3,0&amp;amp;chd=s:ZZZZZZZZZZZZZZZZZZZ&amp;amp;chco=aaaaaa&amp;amp;chm=B,0000ff,0,0:7,0|B,ffffff,0,6:12,0|B,ff0000,0,12:,0,&amp;amp;chem=y;s=simple_text_icon_left;d=,14,000,bicycle,24,000,FFF;of=0,10;dp=15|y;s=simple_text_icon_left;d=,14,000,helicopter,24,000,FFF;of=0,120;dp=11|y;s=simple_text_icon_left;d=,14,000,bicycle,24,000,FFF;of=0,10;dp=10|y;s=simple_text_icon_left;d=,14,000,bicycle,24,000,FFF;of=0,10;dp=9|y;s=simple_text_icon_left;d=,14,000,bicycle,24,000,FFF;of=0,10;dp=range,3,9,.8|y;s=simple_text_icon_left;d=,14,000,civic-building,24,000,FFF;of=0,14;dp=1&quot;/&gt;&lt;/p&gt;
&lt;p&gt;The Champs-&amp;Eacute;lys&amp;eacute;es may have a cobbled surface but it&amp;#8217;s level and straight &amp;#8212; definitely one for the sprinters. How about something twisted and mountainous? This second tableau recreates Fabian Cancellara&amp;#8217;s dare-devil descent during stage 7 of last year&amp;#8217;s tour. Defending the maillot jaune, Cancellara got dropped by the peleton following a wheel change. Watch him weave between team cars and camera bikes at top speed to regain his place. &lt;a href=&quot;http://www.youtube.com/watch?v=RxXqQqAc2pA&quot; title=&quot;Watch Cancellara&#x27;s descent on YouTube&quot;&gt;Awesome!&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt=&quot;Cancellara descending&quot; src=&quot;http://chart.apis.google.com/chart?cht=lc&amp;amp;chs=540x280&amp;amp;chls=4,3,0&amp;amp;chd=s:zyxwwvuttsrppponmmlkjihgfedcbaZYXVUUUTSRQONNMLKJIHHHGFEEEDCCCCCBBBBB&amp;amp;chco=aaaaaa&amp;amp;chm=B,ffff33,0,0,0&amp;amp;chem=y;s=simple_text_icon_left;d=,14,000,bicycle,24,000,FFF;of=4,8;dp=11|y;s=simple_text_icon_left;d=,14,000,car-dealer,24,000,FFF;of=0,10;dp=range,15,24,4|y;s=simple_text_icon_left;d=,14,000,helicopter,24,000,FFF;of=0,80;dp=16|y;s=simple_text_icon_left;d=,14,000,motorcycle,24,000,FFF;of=0,6;dp=range,7,21,9|y;s=simple_text_icon_left;d=,14,000,bicycle,24,000,FFF;of=4,8;dp=range,45,60,2&quot;/&gt;&lt;/p&gt;
&lt;p&gt;Now for a real classic &amp;#8212; when Stephen Roche dug deep during an epic mountain stage in the 1987 Tour. Pedro Delgado, wearing yellow, had built a substantial lead over his rival on the climb up La Plagne. Yet somehow Roche clawed his way back into contention, appearing at the finish line just 5 seconds down on Delgado. He surprised everyone. He collapsed, exhausted, and had to be given oxygen, but he&amp;#8217;d done enough. Roche went on to win the Tour. &lt;a href=&quot;http://www.youtube.com/watch?v=sQojh-wqL04&quot; title=&quot;Roche at La Plagne, commentary by Phil Liggett&quot;&gt;Formidable!&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt=&quot;IT&#x27;S STEPHEN ROCHE!&quot; src=&quot;http://chart.apis.google.com/chart?cht=lc&amp;amp;chs=540x280&amp;amp;chls=4,3,0&amp;amp;chd=s:ACDEHIJKMOQSTUVXYabcdfghjkmnoppqqrssttuu&amp;amp;chco=aaaaaa&amp;amp;chm=B,ffff33,0,0,0&amp;amp;chem=y;s=simple_text_icon_left;d=,14,000,bicycle,24,000,FFF;of=0,10;dp=29|y;s=simple_text_icon_left;d=,14,000,bicycle,24,000,FFF;of=0,12;dp=32|y;s=simple_text_icon_left;d=,14,000,wc-male,24,000,FFF;of=0,16;dp=35|y;s=simple_text_icon_left;d=,14,000,medical,24,000,FFF;of=0,16;dp=37|y;s=bubble_text_small;d=bbbr,that+looks+like+Stephen+Roche....+IT&#x27;S+STEPHEN+ROCHE!,ffff00,000000;of=40,230&quot;/&gt;&lt;/p&gt;</description>
<dc:date>2010-02-18</dc:date>
<guid>http://wordaligned.org/articles/bike-charts</guid>
<author>tag@wordaligned.org (Thomas Guest)</author>
<link>http://wordaligned.org/articles/bike-charts</link>
<category>Google</category>
</item>

<item>
<title>Next permutation: When C++ gets it right</title>
<description>&lt;h3 id=&quot;the-next-number-problem&quot;&gt;The Next Number Problem&lt;/h3&gt;
&lt;p&gt;Suppose you have a fixed list of digits chosen from the range 1..9. What numbers can you make with them? You&amp;#8217;re allowed as many zeros as you want. Write the numbers in increasing order.&lt;/p&gt;
&lt;p&gt;Exactly &lt;a href=&quot;http://code.google.com/codejam/contest/dashboard?c=186264#s=p1&quot;&gt;this puzzle&lt;/a&gt; came up in the recent &lt;a href=&quot;http://code.google.com/codejam&quot;&gt;Google Code Jam&lt;/a&gt; programming contest:&lt;/p&gt;
&lt;blockquote&gt;You are writing out a list of numbers. Your list contains all numbers with exactly &lt;strong&gt;D&lt;sub&gt;i&lt;/sub&gt;&lt;/strong&gt; digits in its decimal representation which are equal to i, for each i between 1 and 9, inclusive. You are writing them out in ascending order.&lt;/p&gt;&lt;p&gt;For example, you might be writing every number with two &amp;#8216;1&amp;#8217;s and one &amp;#8216;5&amp;#8217;. Your list would begin 115, 151, 511, 1015, 1051.&lt;/p&gt;&lt;p&gt;Given N, the last number you wrote, compute what the next number in the list will be.&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;The competition has closed now, but if you&amp;#8217;d like to give it a go sample input files can be found on the &lt;a href=&quot;http://code.google.com/codejam/contest/dashboard?c=186264#s=p1&quot;&gt;website&lt;/a&gt;, where you can also upload your results and have them checked.&lt;/p&gt;
&lt;p&gt;Here&amp;#8217;s a short section from a trial I ran on my computer. Input numbers are in the left-hand column: the corresponding output numbers are in the right-hand column.&lt;/p&gt;
&lt;pre style=&quot;font-size:150%&quot;&gt;
50110812884911623516 &amp;rarr; 50110812884911623561
82454322474161687049 &amp;rarr; 82454322474161687094
82040229261723155710 &amp;rarr; 82040229261723157015
43888989554234187388 &amp;rarr; 43888989554234187838
76080994872481480636 &amp;rarr; 76080994872481480663
31000989133449480678 &amp;rarr; 31000989133449480687
20347716554681051891 &amp;rarr; 20347716554681051918
&lt;/pre&gt;

&lt;h3 id=&quot;choice-of-algorithm&quot;&gt;Choice of Algorithm&lt;/h3&gt;
&lt;p&gt;Like many of the code jam challenges, you&amp;#8217;ll need to write a program which runs fast enough; but choosing the right algorithm is more important than choosing the right language. Typically a high-level interpreted language like Python allows me to code and test a solution far more quickly than using a low-level language like C or C++.&lt;/p&gt;
&lt;p&gt;In this particular case, though, like most &lt;a href=&quot;http://www.go-hero.net/jam/09/problems/2/2&quot;&gt;successful candidates&lt;/a&gt;, I used C++. &lt;a href=&quot;http://www.sgi.com/tech/stl/next_permutation.html&quot;&gt;Here&amp;#8217;s why&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;&lt;span id=&quot;continue-reading&quot;/&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;a href=&quot;http://www.sgi.com/tech/stl/next_permutation.html&quot;&gt;&lt;code&gt;Next_permutation&lt;/code&gt;&lt;/a&gt; transforms the range of elements &lt;code&gt;[first, last)&lt;/code&gt; into the lexicographically next greater permutation of the elements. [&amp;#8230;] If such a permutation exists, &lt;code&gt;next_permutation&lt;/code&gt; transforms &lt;code&gt;[first, last)&lt;/code&gt; into that permutation and returns true. Otherwise it transforms &lt;code&gt;[first, last)&lt;/code&gt; into the lexicographically smallest permutation and returns &lt;code&gt;false&lt;/code&gt;.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Although the next number problem appears to be about numbers and lexicographical ordering appears to be about words, &lt;code&gt;std::next_permutation&lt;/code&gt; is exactly what&amp;#8217;s needed here.&lt;/p&gt;
&lt;h3 id=&quot;lexicographical-ordering&quot;&gt;Lexicographical Ordering&lt;/h3&gt;
&lt;p&gt;&lt;a href=&quot;http://www.flickr.com/photos/thomasguest/4099819327/&quot; title=&quot;Lexicographical order by Thomas Guest, on Flickr&quot;&gt;&lt;img src=&quot;http://farm3.static.flickr.com/2449/4099819327_4063635302.jpg&quot; width=&quot;500&quot; height=&quot;216&quot; alt=&quot;Lexicographical order&quot; /&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;A dictionary provides the canonical example of lexicographical ordering. Words are built from characters, which can be alphabetically ordered A, B, C, &amp;#8230; , so in the dictionary words which begin with &lt;strong&gt;A&lt;/strong&gt; appear before words which begin with &lt;strong&gt;B&lt;/strong&gt;, which themselves come in front of words beginning with &lt;strong&gt;C&lt;/strong&gt;, etc. If two words start with the same letter, pop that letter from the head of the word and compare their tails, which puts AARDVARK before ANIMAL, and &amp;#8212; applying this rule recursively &amp;#8212; after &lt;a href=&quot;http://www.aardman.com/&quot; title=&quot;Bristol&#x27;s finest&quot;&gt;AARDMAN&lt;/a&gt;. Imagine there&amp;#8217;s an empty word marking position zero, before A, right at the front of the dictionary, and our recursive  definition is complete.&lt;/p&gt;
&lt;h3 id=&quot;next-permutation-in-action&quot;&gt;Next permutation in action&lt;/h3&gt;
&lt;p&gt;Here&amp;#8217;s a simple program which shows &lt;code&gt;next_permutation()&lt;/code&gt; in action.&lt;/p&gt;
&lt;div class=&quot;typocode&quot;&gt;

&lt;pre class=&quot;prettyprint&quot;&gt;#include &amp;lt;algorithm&amp;gt;
#include &amp;lt;cstdio&amp;gt;

int main()
{
    char xs[] = &quot;123&quot;;
    do
    {
        std::puts(xs);
    }
    while (std::next_permutation(xs, xs + sizeof(xs) - 1));
    return 0;
}

&lt;/pre&gt;

&lt;/div&gt;

&lt;p&gt;This program outputs lexicographically ordered permutations of 1, 2 and 3. When the main function returns, the array &lt;code&gt;xs&lt;/code&gt; will have cycled round to hold the lexicographically smallest arrangement of its elements, which is &lt;code&gt;&quot;123&quot;&lt;/code&gt;. Note that we never convert the characters &lt;code&gt;&#x27;1&#x27;&lt;/code&gt;, &lt;code&gt;&#x27;2&#x27;&lt;/code&gt;, &lt;code&gt;&#x27;3&#x27;&lt;/code&gt; into the numbers &lt;code&gt;1&lt;/code&gt;, &lt;code&gt;2&lt;/code&gt;, &lt;code&gt;3&lt;/code&gt;. The values of both sets of data types appear in the same order, so all works as expected.&lt;/p&gt;
&lt;pre&gt;
123
132
213
231
312
321
&lt;/pre&gt;

&lt;p&gt;If we tweak and rerun the same program with &lt;code&gt;xs&lt;/code&gt; initialised to &lt;code&gt;&quot;AAADKRRV&quot;&lt;/code&gt; we get rather more output.&lt;/p&gt;
&lt;pre&gt;
AAADKRRV
AAADKRVR
AAADKVRR
...
AARDVARK
...
VRRKAADA
VRRKADAA
VRRKDAAA
&lt;/pre&gt;

&lt;p&gt;The sequence &lt;strong&gt;doesn&amp;#8217;t&lt;/strong&gt; start by repeating &lt;code&gt;&quot;AAADKRRV&quot;&lt;/code&gt; 6 times, once for every permutation of the 3 A&amp;#8217;s. Only strictly increasing permutations are included. And although the repeated calls to &lt;code&gt;next_permutation&lt;/code&gt; generate a series of permutations, the algorithm holds no state. Each function call works on its input range afresh.&lt;/p&gt;
&lt;p&gt;This second run of the program yields 3360 lines of output, even though there are 8! = 40320 possible permutations of 8 characters. Each unique permutation corresponds to 3! &amp;times; 2! = 12 actual permutations of the 8 characters (because there are 3 A&amp;#8217;s and 2 R&amp;#8217;s), and 40320 &amp;divide; 12 is 3360.&lt;/p&gt;
&lt;h3 id=&quot;snail-sorts-revenge&quot;&gt;Snail sort&amp;#8217;s revenge&lt;/h3&gt;
&lt;p&gt;&lt;a href=&quot;http://www.flickr.com/photos/tim_norris/2789759648/&quot;&gt;&lt;img src=&quot;http://farm4.static.flickr.com/3143/2789759648_ab4bfb5ea8.jpg&quot; width=&quot;500px&quot; height=&quot;333px&quot; alt=&quot;...and in last place. By Tim Norris&quot;/&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;As you can see, &lt;code&gt;next_permutation&lt;/code&gt; sorts an input range, one step at a time.  When &lt;code&gt;next_permutation&lt;/code&gt; eventually returns false, the range will be perfectly ordered. Hence we have &lt;code&gt;snail_sort()&lt;/code&gt;, hailed by the SGI STL &lt;a href=&quot;http://www.sgi.com/tech/stl/next_permutation.html&quot;&gt;documentation&lt;/a&gt; as the worst known deterministic sorting algorithm.&lt;/p&gt;
&lt;div class=&quot;typocode&quot;&gt;

&lt;pre class=&quot;prettyprint&quot;&gt;template &amp;lt;class Iter&amp;gt; 
void snail_sort(Iter first, Iter last)
{
    while (next_permutation(first, last)) {}
}

&lt;/pre&gt;

&lt;/div&gt;

&lt;p&gt;Very witty, and evidence that code can be both &lt;a href=&quot;http://wordaligned.org/articles/elegance-and-efficiency.html&quot;&gt;elegant and inefficient&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;In two important edge cases, though, &lt;code&gt;snail_sort&lt;/code&gt; performs on a par with super-charged &lt;code&gt;quicksort&lt;/code&gt;!&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;I snail sorted an array filled with 100000000 zeros in 0.502 seconds. Running quicksort on the same array took 5.504 seconds. &lt;/li&gt;
&lt;li&gt;Starting with an array of the same size filled with the values 99999999, 99999998, 99999997, &amp;#8230; 1, 0 snail sort&amp;#8217;s 0.500 seconds trounced quicksort&amp;#8217;s 4.08 seconds.&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&quot;the-next-number-solved&quot;&gt;The Next Number, Solved&lt;/h3&gt;
&lt;p&gt;Here&amp;#8217;s an outline solution to the &lt;a href=&quot;http://code.google.com/codejam/contest/dashboard?c=186264#s=p1&quot;&gt;next number problem&lt;/a&gt;. (I&amp;#8217;ve glossed over the exact input and output file formats for clarity.) It reads numbers from standard input and writes next numbers to standard output. &lt;code&gt;Next_permutation&lt;/code&gt; does the hard work, and there&amp;#8217;s a bit of fiddling when we have to increase the number of digits by adding a zero.&lt;a id=&quot;fn1link&quot; href=&quot;http://wordaligned.org/articles/next-permutation#fn1&quot;&gt;&lt;sup&gt;&lt;a href=&quot;https://blog.codeship.com/building-minimal-docker-containers-for-go-applications/&quot;&gt;1&lt;/a&gt;&lt;/sup&gt;&lt;/a&gt;&lt;/p&gt;
&lt;div class=&quot;typocode&quot;&gt;

&lt;pre class=&quot;prettyprint&quot;&gt;#include &amp;lt;algorithm&amp;gt;
#include &amp;lt;iostream&amp;gt;

/*
 Given a string of digits, shift any leading &amp;#x27;0&amp;#x27;s
 past the first non-zero digit and insert an extra zero.

 Examples:

 123 -&amp;gt; 1023
 008 -&amp;gt; 8000
 034 -&amp;gt; 3004
*/
void insert_a_zero(std::string &amp;amp; number)
{
    size_t nzeros = number.find_first_not_of(&amp;#x27;0&amp;#x27;);
    number = number.substr(nzeros);
    number.insert(1, nzeros + 1, &amp;#x27;0&amp;#x27;);
}

/*
 Outline solution to the 2009 code jam Next Number problem.

 Given a string representing a decimal number, find the next
 number which can be formed from the same set of digits. Add
 another zero if necessary. Repeat for all such strings read
 from standard input.
*/
int main()
{
    std::string number;
    while (std::cin &amp;gt;&amp;gt; number)
    {
        if (!next_permutation(number.begin(), number.end()))
        {
            insert_a_zero(number);
        }
        std::cout &amp;lt;&amp;lt; number &amp;lt;&amp;lt; &amp;#x27;\n&amp;#x27;;
    }
    return 0;
}

&lt;/pre&gt;

&lt;/div&gt;

&lt;h3 id=&quot;implementation&quot;&gt;Implementation&lt;/h3&gt;
&lt;p&gt;Having used the C++ standard library to solve the puzzle, let&amp;#8217;s take a look at how it works. Next permutation is a clever algorithm which shuffles a collection in place. My system implements it like this&lt;a id=&quot;fn2link&quot; href=&quot;http://wordaligned.org/articles/next-permutation#fn2&quot;&gt;&lt;sup&gt;&lt;a href=&quot;http://devcenter.wercker.com/docs/quickstarts/advanced/building-minimal-containers-with-go&quot;&gt;2&lt;/a&gt;&lt;/sup&gt;&lt;/a&gt;.&lt;/p&gt;
&lt;div class=&quot;typocode&quot;&gt;

&lt;pre class=&quot;prettyprint&quot;&gt;template&amp;lt;typename Iter&amp;gt;
bool next_permutation(Iter first, Iter last)
{
    if (first == last)
        return false;
    Iter i = first;
    ++i;
    if (i == last)
        return false;
    i = last;
    --i;

    for(;;)
    {
        Iter ii = i;
        --i;
        if (*i &amp;lt; *ii)
        {
            Iter j = last;
            while (!(*i &amp;lt; *--j))
            {}
            std::iter_swap(i, j);
            std::reverse(ii, last);
            return true;
        }
        if (i == first)
        {
            std::reverse(first, last);
            return false;
        }
    }
}

&lt;/pre&gt;

&lt;/div&gt;

&lt;p&gt;We start with a range delimited by a pair of bi-directional iterators, &lt;code&gt;[first, last)&lt;/code&gt;. If the range contains one item or fewer, there can be no next permutation, so leave the range as is and return &lt;code&gt;false&lt;/code&gt;. Otherwise, enter the &lt;code&gt;for&lt;/code&gt; loop with an iterator &lt;code&gt;i&lt;/code&gt; pointing at the final item in the range.&lt;/p&gt;
&lt;p&gt;At each pass through the body of this for loop we decrement &lt;code&gt;i&lt;/code&gt; by one, stepping towards the first item in the range. We are looking for one of two conditions:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;the value pointed to by &lt;code&gt;i&lt;/code&gt; is smaller than the one it pointed to previously&lt;/li&gt;
&lt;li&gt;&lt;code&gt;i&lt;/code&gt; reaches into the first item in the range&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Put another way, we divide the range into a head and tail, where the tail is the longest possible decreasing tail of the range.&lt;/p&gt;
&lt;p&gt;If this tail is the whole range (the second condition listed above) then the whole range is in reverse order, and we have the lexicographical maximum formed from its elements. Reversing the range returns it to its lexicographical minimum, and we can return &lt;code&gt;false&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;If this tail is not the whole range, then the final item in the head of the range, the item &lt;code&gt;i&lt;/code&gt; points to, this item is smaller than at least one of the items in the tail of the range, and we can certainly generate a greater permutation by moving the item towards the end of the range. To find the next permutation, we reverse iterate from the end of the range until we find an item &lt;code&gt;*j&lt;/code&gt; bigger than &lt;code&gt;*i&lt;/code&gt; &amp;#8212; that&amp;#8217;s what the while loop does. Swapping the items pointed to by &lt;code&gt;i&lt;/code&gt; and &lt;code&gt;j&lt;/code&gt; ensures the head of the range is bigger than it was, and the tail of the range remains in reverse order. Finally, we reverse the tail of the range, leaving us with a permutation exactly one beyond the input permutation, and we return &lt;code&gt;true&lt;/code&gt;. &lt;/p&gt;
&lt;h3 id=&quot;whats-happening-here&quot;&gt;What&amp;#8217;s happening here?&lt;/h3&gt;
&lt;p&gt;It&amp;#8217;s clear from this paper analysis that the algorithm is of linear complexity. Essentially, it walks up and down the tail of the list, comparing and swapping. But why does it work?&lt;/p&gt;
&lt;p&gt;Let &lt;code&gt;xs&lt;/code&gt; be the range &lt;code&gt;(first, last)&lt;/code&gt;. As described above, divide this range into prefix and suffix subranges, &lt;code&gt;head&lt;/code&gt; and &lt;code&gt;tail&lt;/code&gt;, where &lt;code&gt;tail&lt;/code&gt; is the longest monotonically decreasing tail of the range.&lt;/p&gt;
&lt;p&gt;If the &lt;code&gt;head&lt;/code&gt; of the range is empty, then the range &lt;code&gt;xs&lt;/code&gt; is clearly at its lexicographical maximum. &lt;/p&gt;
&lt;p&gt;Otherwise, &lt;code&gt;tail&lt;/code&gt; is a lexicographical maximum of the elements it contains, and &lt;code&gt;xs&lt;/code&gt; is therefore the largest permutation which starts with the subrange &lt;code&gt;head&lt;/code&gt;. What will the &lt;code&gt;head&lt;/code&gt; of the next permutation be? We have to swap the final item in &lt;code&gt;head&lt;/code&gt; with the smallest item of &lt;code&gt;tail&lt;/code&gt; which exceeds it: the definition of &lt;code&gt;tail&lt;/code&gt; guarantees at least one such item exists. Now we want to permute the new &lt;code&gt;tail&lt;/code&gt; to be at a its lexicographical minimum, which is a matter of sorting it from low to high.&lt;/p&gt;
&lt;p&gt;Since &lt;code&gt;tail&lt;/code&gt; is in reverse order, finding the smallest item larger than &lt;code&gt;head[-1]&lt;/code&gt; is a matter of walking back from the end of the range to find the first such items; and once we&amp;#8217;ve swapped these items, &lt;code&gt;tail&lt;/code&gt; remains in reverse order, so a simple reversed will sort it.&lt;/p&gt;
&lt;p&gt;As an example consider finding the next permutation of:&lt;/p&gt;
&lt;pre style=&quot;font-size:250%;&quot;&gt;
8342666411
&lt;/pre&gt;

&lt;p&gt;The longest monotonically decreasing tail is &lt;code&gt;666411&lt;/code&gt;, and the corresponding head is &lt;code&gt;8342&lt;/code&gt;.&lt;/p&gt;
&lt;pre style=&quot;font-size:250%;&quot;&gt;
8342 666411
&lt;/pre&gt;

&lt;p&gt;&lt;code&gt;666411&lt;/code&gt; is, by definition, reverse-ordered, and cannot be increased by permuting its elements. To find the next permutation, we must increase the head; a matter of finding the smallest tail element larger than the head&amp;#8217;s final &lt;code&gt;2&lt;/code&gt;.&lt;/p&gt;
&lt;pre style=&quot;font-size:250%;&quot;&gt;
834&lt;span style=&quot;color:#930&quot;&gt;2&lt;/span&gt; 666411
&lt;/pre&gt;

&lt;p&gt;Walking back from the end of tail, the first element greater than &lt;code&gt;2&lt;/code&gt; is &lt;code&gt;4&lt;/code&gt;.&lt;/p&gt;
&lt;pre style=&quot;font-size:250%;&quot;&gt;
834&lt;span style=&quot;color:#930&quot;&gt;2&lt;/span&gt;  666&lt;span style=&quot;color:#930&quot;&gt;4&lt;/span&gt;11
&lt;/pre&gt;

&lt;p&gt;Swap the &lt;code&gt;2&lt;/code&gt; and the &lt;code&gt;4&lt;/code&gt;&lt;/p&gt;
&lt;pre style=&quot;font-size:250%;&quot;&gt;
834&lt;span style=&quot;color:#930&quot;&gt;4&lt;/span&gt; 666&lt;span style=&quot;color:#930&quot;&gt;2&lt;/span&gt;11
&lt;/pre&gt;

&lt;p&gt;Since head has increased, we now have a greater permutation. To reduce to the next permutation, we reverse tail, putting it into increasing order.&lt;/p&gt;
&lt;pre style=&quot;font-size:250%;&quot;&gt;
8344 112666
&lt;/pre&gt;

&lt;p&gt;Join the head and tail back together. The permutation one greater than &lt;code&gt;8342666411&lt;/code&gt; is &lt;code&gt;8344112666&lt;/code&gt;.&lt;/p&gt;
&lt;h3 id=&quot;beautiful-c&quot;&gt;Beautiful C++?&lt;/h3&gt;
&lt;p&gt;&lt;a href=&quot;http://wordaligned.org/articles/looping-forever-and-ever.html&quot;&gt;&lt;img  src=&quot;http://wordaligned.org/images/mite.jpg&quot; alt=&quot;for(;;) dust mite&quot;/&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;C++ has its &lt;a href=&quot;http://yosefk.com/c++fqa/defective.html&quot; title=&quot;If you are an expert in the intricacies of C++, please consider this knowledge a kind of martial art - something a real master never uses. Yossi Keinin&quot;&gt;detractors&lt;/a&gt;, who characterise it as subtle, &lt;a href=&quot;http://twitter.com/dabeaz/status/5677453478&quot; title=&quot;C++0x reminds me of blocks stacked by my toddler. Really wobbly and one block too many makes it topple. @dabeaz&quot;&gt;complex&lt;/a&gt;, and &lt;a href=&quot;http://www2.research.att.com/~bs/bs_faq.html#really-say-that&quot; title=&quot;C++ can blow your whole leg off. Bjarne Stroustrup&quot;&gt;dangerous&lt;/a&gt;; but sometimes it excels. Look once more at the C++ implementation of this algorithm.&lt;/p&gt;
&lt;div class=&quot;typocode&quot;&gt;

&lt;pre class=&quot;prettyprint&quot;&gt;template&amp;lt;typename Iter&amp;gt;
bool next_permutation(Iter first, Iter last)
{
    if (first == last)
        return false;
    Iter i = first;
    ++i;
    if (i == last)
        return false;
    i = last;
    --i;

    for(;;)
    {
        Iter ii = i;
        --i;
        if (*i &amp;lt; *ii)
        {
            Iter j = last;
            while (!(*i &amp;lt; *--j))
            {}
            std::iter_swap(i, j);
            std::reverse(ii, last);
            return true;
        }
        if (i == first)
        {
            std::reverse(first, last);
            return false;
        }
    }
}

&lt;/pre&gt;

&lt;/div&gt;

&lt;p&gt;&lt;span /&gt;With its special cases, boolean literals, multiple returns (4, count them!), disembodied and infinite loops, this code fails to exhibit conventional beauty. Yet &lt;em&gt;it is&lt;/em&gt; beautiful. All the next permutation algorithm needs are iterators which can advance forwards or backwards, step by step. And that&amp;#8217;s all this implementation uses.&lt;/p&gt;
&lt;p&gt;I&amp;#8217;m as excited as anyone by the mathematical rigour of &lt;a href=&quot;http://www.informit.com/articles/article.aspx?p=1407357&amp;amp;seqNum=3&quot; title=&quot;Great article by Andrei Alexandrescu, which questions a pure Haskell quicksort implementation&quot;&gt;functional programming&lt;/a&gt;, but sometimes computer science is about algorithms with virtually no space overhead, algorithms which loop rather than recurse. Sometimes it&amp;#8217;s about shuffling, nudging and swapping &amp;#8212; operations which map directly to the machine&amp;#8217;s most primitive operations. In such cases, C++ gets it right.&lt;/p&gt;
&lt;h3 id=&quot;permutations-in-python&quot;&gt;Permutations in Python&lt;/h3&gt;
&lt;p&gt;For the code jam, though, as mentioned earlier, having a super-fast program rarely matters. More often, it&amp;#8217;s about developing a fast enough program super-quickly.&lt;/p&gt;
&lt;p&gt;I find Python a far quicker language for developing code than C++. (Indeed, sometimes when it&amp;#8217;s obvious from the outset that a final program will need implementing in C++, I put together a working prototype using Python, which I then translate.) Could we solve the next number problem using code from the standard Python library?&lt;/p&gt;
&lt;p&gt;At a first glance, &lt;a href=&quot;http://docs.python.org/py3k/library/itertools.html#itertools.permutations&quot;&gt;itertools.permutations&lt;/a&gt; looks promising.&lt;/p&gt;
&lt;blockquote&gt;&lt;h3&gt;&lt;tt&gt;itertools.permutations(&lt;em&gt;iterable&lt;/em&gt;, &lt;em&gt;r=None&lt;/em&gt;)&lt;/tt&gt;&lt;/h3&gt;&lt;p&gt;Return successive &lt;em&gt;r&lt;/em&gt; length permutations of elements in the &lt;em&gt;iterable&lt;/em&gt;.&lt;/p&gt;&lt;p&gt;If &lt;em&gt;r&lt;/em&gt; is not specified or is &lt;tt&gt;None&lt;/tt&gt;, then &lt;em&gt;r&lt;/em&gt; defaults to the length
of the &lt;em&gt;iterable&lt;/em&gt; and all possible full-length permutations
are generated.&lt;/p&gt;&lt;p&gt;Permutations are emitted in lexicographic sort order.  So, if the input &lt;em&gt;iterable&lt;/em&gt; is sorted, the permutation tuples will be produced in sorted order.&lt;/p&gt;&lt;p&gt;Elements are treated as unique based on their position, not on their value.  So if the input elements are unique, there will be no repeat values in each permutation.&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;However, this algorithm doesn&amp;#8217;t care about the values of the items in the iterable, and the lexicographic sort order applies to the indices of these items. So although the ordering of the generated items is well-defined:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;we get repeats, and&lt;/li&gt;
&lt;li&gt;it&amp;#8217;s not the ordering we want (in this case)&lt;/li&gt;
&lt;/ol&gt;
&lt;div class=&quot;typocode&quot;&gt;

&lt;pre class=&quot;prettyprint&quot;&gt;&amp;gt;&amp;gt;&amp;gt; from itertools import permutations
&amp;gt;&amp;gt;&amp;gt; concat = &amp;#x27;&amp;#x27;.join
&amp;gt;&amp;gt;&amp;gt; list(map(concat, permutations(&amp;#x27;AAA&amp;#x27;)))
[&amp;#x27;AAA&amp;#x27;, &amp;#x27;AAA&amp;#x27;, &amp;#x27;AAA&amp;#x27;, &amp;#x27;AAA&amp;#x27;, &amp;#x27;AAA&amp;#x27;, &amp;#x27;AAA&amp;#x27;]
&amp;gt;&amp;gt;&amp;gt; list(map(concat, permutations(&amp;#x27;231&amp;#x27;)))
[&amp;#x27;231&amp;#x27;, &amp;#x27;213&amp;#x27;, &amp;#x27;321&amp;#x27;, &amp;#x27;312&amp;#x27;, &amp;#x27;123&amp;#x27;, &amp;#x27;132&amp;#x27;]

&lt;/pre&gt;

&lt;/div&gt;

&lt;p&gt;It &lt;strong&gt;is&lt;/strong&gt; possible to code up &lt;code&gt;next_permutation&lt;/code&gt; using nothing more than the standard itertools, but it isn&amp;#8217;t advisable.&lt;/p&gt;
&lt;div class=&quot;typocode&quot;&gt;&lt;div class=&quot;codetitle&quot;&gt;Snail permute&lt;/div&gt;

&lt;pre class=&quot;prettyprint&quot;&gt;from itertools import permutations, groupby

def next_permutation(xs):
    &quot;&quot;&quot;Calculate the next permutation of the sequence xs.

    Returns a pair (yn, xs&amp;#x27;), where yn is a boolean and xs&amp;#x27; is the 
    next permutation. If yn is True, xs&amp;#x27; will be the lexicographic 
    next permutation of xs, otherwise xs&amp;#x27; is the lexicographic 
    smallest permutation of xs.
    &quot;&quot;&quot;
    xs = tuple(xs)
    if not xs:
        return False, xs
    else:
        ps = [p for p, gp in groupby(sorted(permutations(xs)))]
        np = len(ps)
        ix = ps.index(xs) + 1
        if ix == len(ps):
            return False, ps[0]
        else:
            return True, ps[ix]

&lt;/pre&gt;

&lt;/div&gt;

&lt;p&gt;As it happens, a solution based on this exhaustive search would score points in the code jam since it copes with the small input set. For the large input set its factorial complexity rules it out, and we&amp;#8217;d need to implement the next permutation algorithm &lt;a href=&quot;http://code.google.com/codejam/contest/dashboard?c=186264#s=a&amp;amp;a=1&quot;&gt;from scratch&lt;/a&gt;.&lt;/p&gt;
&lt;hr /&gt;
&lt;p&gt;&lt;a id=&quot;fn1&quot; href=&quot;http://wordaligned.org/articles/next-permutation#fn1link&quot;&gt;&lt;a href=&quot;https://blog.codeship.com/building-minimal-docker-containers-for-go-applications/&quot;&gt;1&lt;/a&gt;&lt;/a&gt;: A more cunning &lt;a href=&quot;http://code.google.com/codejam/contest/dashboard?c=186264#s=a&amp;amp;a=1&quot;&gt;solution&lt;/a&gt; avoids the special case by pushing the extra zero to head of the string before applying &lt;code&gt;next_permutation&lt;/code&gt;, then popping it if it hasn&amp;#8217;t been moved.&lt;/p&gt;
&lt;p&gt;&lt;a id=&quot;fn2&quot; href=&quot;http://wordaligned.org/articles/next-permutation#fn2link&quot;&gt;&lt;a href=&quot;http://devcenter.wercker.com/docs/quickstarts/advanced/building-minimal-containers-with-go&quot;&gt;2&lt;/a&gt;&lt;/a&gt;: I&amp;#8217;ve tweaked the layout and parameter names for use on this site.&lt;/p&gt;</description>
<dc:date>2009-11-19</dc:date>
<guid>http://wordaligned.org/articles/next-permutation</guid>
<author>tag@wordaligned.org (Thomas Guest)</author>
<link>http://wordaligned.org/articles/next-permutation</link>
<category>Google</category>
</item>

<item>
<title>The Rings of Saturn</title>
<description>&lt;p&gt;&lt;a href=&quot;http://en.wikipedia.org/wiki/Heart_of_Darkness#Historical_context&quot;&gt;&lt;img src=&quot;http://upload.wikimedia.org/wikipedia/en/d/d1/Roi_des_belges.jpg&quot; alt=&quot;Roi des Belges, the ship Conrad used to travel up the Congo&quot; style=&quot;float:right&quot;/&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;On board The Nellie waiting for the turn of the tide, Marlow entertains his companions with the tale of a mission he undertook as an employee of a Belgian trading company, traveling up the Congo river. This entertainment, the framed story in Joseph Conrad&amp;#8217;s &lt;a href=&quot;http://en.wikipedia.org/wiki/Heart_of_Darkness&quot; title=&quot;Heart of Darkness, Wikipedia&quot;&gt;Heart of Darkness&lt;/a&gt;, quickly becomes very dark indeed, as Marlow presses on through disease, destruction and death, increasingly preoccupied with tracing the elusive Mr Kurtz, until eventually, when it seems he can go no further, he comes to a clearing. Looking through his glasses he sees the slope of a hill on which stands a house. There was no enclosure or fence of any kind, says Marlow, but there had been one apparently, for near the house half-a-dozen slim posts remained in a row, roughly trimmed, and with their upper ends ornamented with round carved balls. The occupant of this house, a harlequin figure, a jester at the court of King Kurtz if you like, also appears in Terry Jones&amp;#8217; &lt;a href=&quot;http://www.fluidinfo.com/terry/2009/03/02/the-entrepreneurial-spirit-in-literature/&quot;&gt;fluidinfo blog&lt;/a&gt;, and it was this blog article which sent me back to Conrad, his character Marlow, and his terrible journey.&lt;/p&gt;
&lt;p&gt;&lt;span id=&quot;continue-reading&quot;/&gt;&lt;/p&gt;
&lt;p&gt;The unnamed harlequin figure Marlow encounters seems unaffected by the madness around him and &lt;a href=&quot;http://jon.es/terry.html&quot;&gt;Terry Jones&lt;/a&gt; finds similarities between his attitude and that of an entrepreneur, quoting Marlow &amp;#8230; The glamour of youth enveloped his parti-coloured rags, his destitution, his loneliness, the essential desolation of his futile wanderings. For months &amp;#8212; for years &amp;#8212; his life hadn&amp;#8217;t been worth a day&amp;#8217;s purchase; and there he was gallantly, thoughtlessly alive, to all appearances indestructible solely by the virtue of his few years and of his unreflecting audacity &amp;#8230; words I found interesting in the context of the &lt;a href=&quot;http://www.fluidinfo.com/terry/&quot; title=&quot;Terry Jones&#x27;s fluidinfo blog&quot;&gt;fluidinfo blog&lt;/a&gt;, which I have followed since hearing Terry Jones &lt;a href=&quot;http://www.pyconuk.org/talks_2007.html#36&quot;&gt;speak at PyCon UK&lt;/a&gt; a couple of years ago.&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://www.fluidinfo.com&quot;&gt;&lt;img src=&quot;http://www.fluidinfo.com/images/fi-logo-cropped.png&quot; alt=&quot;fluidinfo logo&quot; style=&quot;float:right;&quot;/&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Terry Jones is &lt;a href=&quot;http://twitter.com/terrycojones/status/1581462570&quot;&gt;obsessed&lt;/a&gt; with connections and with organising the internet &amp;#8212; an investigation which begins with the realisation that organising is the wrong word. Library style portals pioneered in the early days of the web by the likes of alta vista and yahoo! &amp;#8212; these facades have crumbled, broken up by their brittle hierarchies and the inefficiency of dictionary search. In their place an army of robots follows links and crunches data, maintaining google&amp;#8217;s ever growing index. Yet even this empire will fall. Already the cracks begin to show: google urges us to organise, to use canonical resource locators, &lt;a href=&quot;http://is.gd/jlio&quot;&gt;http://is.gd/jlio&lt;/a&gt;; instead, we reduce and redirect. Quotation and association lie at the heart of the web and better tools are being invented for labelling, sharing and shaping the flow of information. At the conference these were the ideas which Terry Jones conveyed to me and others in that enclosed room in the basement of the Birmingham Conservatoire, ideas which seemed novel at the time, yet which now seem to have gathered momentum. I hope his company, &lt;a href=&quot;http://www.fluidinfo.com&quot; title=&quot;Fluidinfo, the next everything&quot;&gt;Fluidinfo&lt;/a&gt; can exploit his vision.&lt;/p&gt;
&lt;div class=&quot;amazon&quot;&gt;&lt;a href=&quot;http://www.amazon.com/gp/product/0811214133?tag=wordalig-20&quot;&gt;
&lt;img src=&quot;http://wordaligned.org/images/books/rings-of-saturn-cover.jpg&quot; alt=&quot;Rings of Saturn cover&quot;/&gt;&lt;/a&gt;&lt;/div&gt;

&lt;p&gt;It came as something of a shock, though, to see the connection between Terry Jones and Joseph Conrad. How can Marlow&amp;#8217;s harlequin remain unscathed by his circumstances? Because he is young and a fool. J&amp;oacute;sef Teodor Konrad Korzeniowksi, the Polish-born seaman, who would later become Joseph Conrad the great English writer &amp;#8212; Korzeniowksi experienced first hand the full horror of the entrepreneurialism which led to gross exploitation of the Congo; and by coincidence, when I read Terry Jones&amp;#8217; blog post, I had just finished re-reading WG Sebald&amp;#8217;s masterpiece, &lt;a href=&quot;http://www.amazon.com/gp/product/0811214133?tag=wordalig-20&quot; title=&quot;The Rings of Saturn, on Amazon, another great river&quot;&gt;The Rings of Saturn&lt;/a&gt;, a book which touches on the life of Korzeniowksi amongst many other things. Like Marlow&amp;#8217;s story, WG Sebald&amp;#8217;s book centres on a voyage, in this case one undertaken by the author on foot through Suffolk in 1992, a date close to the birth of the web. Like the modern day blogger, Sebald quotes, pastes in images, connects. Unlike most bloggers, Sebald has the genius to assemble these parts into something beautiful and profound. &lt;/p&gt;
&lt;p&gt;Sebald had hoped his walk would dispel the emptiness which takes hold of him whenever he has completed a long stint of work, but, walking for hours on end through the countryside, he finds himself preoccupied  with the traces of destruction, reaching far into the past, that were evident even in that remote place. He finds Suffolk to be thinly-populated and declining fast. The North Sea has been over-fished and eats into the coastline. Blighted towns suffer from poverty, unemployment and neglect, while once great houses decay, their gardens becoming &lt;a href=&quot;http://www.flickr.com/photos/thomasguest/sets/72157617288800804/&quot;&gt;overgrown&lt;/a&gt;, their owners becoming eccentric, then mad.&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://www.flickr.com/photos/thomasguest/3455678986/&quot; title=&quot;Today there is no trace of it by Thomas Guest, on Flickr&quot;&gt;&lt;img src=&quot;http://farm4.static.flickr.com/3543/3455678986_823c0b3abf_m.jpg&quot; width=&quot;223&quot; height=&quot;240&quot; alt=&quot;Today there is no trace of it&quot; /&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;J&amp;oacute;sef Teodor Konrad Korzeniowksi, Sebald writes, became an employee of the Soci&amp;eacute;t&amp;eacute; Anonyme Belge pour le Commerce du Haut-Congo, an organisation whose legendary profits were built on a system of slave labour which was sanctioned by the shareholders and all the Europeans contracted to work in the new colony. On reaching Matadi, a desolate settlement (as Marlow later describes in Heart of Darkness), Korzeniowksi comes on a place where those who were racked by illness, starvation and toil had withdrawn to die. I began to distinguish the gleam of the eyes under the trees, says Marlow. Then, glancing down, I saw a face near my hand. The black bones reclined at full length with one shoulder against the tree, and slowly the eyelids and the sunken eyes looked up at me, enormous and vacant, a kind of blind, white flicker in the depths of the orbs, which died out slowly. &lt;/p&gt;
&lt;p&gt;Korzeniowksi fell ill and would continue no further, though it would be some months before his return to Europe, and from then on protracted bouts of despair would alternate with his writing; but Marlow continues up-river, finally arriving at the clearing described at the start of this article, where he meets the young man whose spirit, to Terry Jones, has so much in common with entrepreneurialism &amp;#8230; I saw my mistake, says Marlow. These round knobs were not ornamental but symbolic; they were expressive and puzzling, striking and disturbing &amp;#8212; food for thought and also for the vultures if there had been any looking down from the sky; but at all events for such ants as were industrious enough to ascend the pole. They would have been even more impressive, those heads on stakes, if their faces had not been turned to the house. Only one, the first I had made out, was facing my way. I was not so shocked as you may think. The start back I had given was really nothing but a movement of surprise. I had expected to see a knob of wood there, you know. I returned deliberately to the first I had seen &amp;#8212; and there it was, black, dried, sunken, with closed eyelids &amp;#8212; a head that seemed to sleep at the top of that pole, and, with the shrunken dry lips showing a narrow white line of the teeth, was smiling, too, smiling continuously at some endless and jocose dream of that eternal slumber.&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://jon.es/terry.html&quot;&gt;&lt;img src=&quot;http://jon.es/images/idiot-only.png&quot; alt=&quot;When I grow up I&#x27;m going to be...&quot;/&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;You&amp;#8217;ll find &lt;a href=&quot;http://www.amazon.com/gp/product/0811214133?tag=wordalig-20&quot; title=&quot;The Rings of Saturn, on Amazon, another great river&quot;&gt;The Rings of Saturn&lt;/a&gt; filed under fiction but in fact it&amp;#8217;s a circular journey which combines autobiography, biography, and history into a strange and moving whole. It is a book which defies categorisation but that won&amp;#8217;t stop me from tagging it: compelling, profound, recommended.&lt;/p&gt;</description>
<dc:date>2009-04-28</dc:date>
<guid>http://wordaligned.org/articles/the-rings-of-saturn</guid>
<author>tag@wordaligned.org (Thomas Guest)</author>
<link>http://wordaligned.org/articles/the-rings-of-saturn</link>
<category>Google</category>
</item>

<item>
<title>Emoticrab invasion, CSS breakdown</title>
<description>&lt;div style=&quot;width: 600px; height: 150px;&quot;&gt;
&lt;div style=&quot;position:absolute; padding-left: 17px; padding-top: 29px&quot;&gt;&lt;img src=&quot;http://wordaligned.org/images/emoti-crab3.gif&quot; alt=&quot;Emoticrab&quot;/&gt;&lt;/div&gt;
&lt;div style=&quot;position:absolute; padding-left: 17px; padding-top: 38px&quot;&gt;&lt;img src=&quot;http://wordaligned.org/images/emoti-crab5.gif&quot; alt=&quot;Emoticrab&quot;/&gt;&lt;/div&gt;
&lt;div style=&quot;position:absolute; padding-left: 31px; padding-top: 69px&quot;&gt;&lt;img src=&quot;http://wordaligned.org/images/emoti-crab2.gif&quot; alt=&quot;Emoticrab&quot;/&gt;&lt;/div&gt;
&lt;div style=&quot;position:absolute; padding-left: 27px; padding-top: 100px&quot;&gt;&lt;img src=&quot;http://wordaligned.org/images/emoti-crab4.gif&quot; alt=&quot;Emoticrab&quot;/&gt;&lt;/div&gt;
&lt;div style=&quot;position:absolute; padding-left: 48px; padding-top: 7px&quot;&gt;&lt;img src=&quot;http://wordaligned.org/images/emoti-crab1.gif&quot; alt=&quot;Emoticrab&quot;/&gt;&lt;/div&gt;
&lt;div style=&quot;position:absolute; padding-left: 48px; padding-top: 36px&quot;&gt;&lt;img src=&quot;http://wordaligned.org/images/emoti-crab5.gif&quot; alt=&quot;Emoticrab&quot;/&gt;&lt;/div&gt;
&lt;div style=&quot;position:absolute; padding-left: 62px; padding-top: 91px&quot;&gt;&lt;img src=&quot;http://wordaligned.org/images/emoti-crab1.gif&quot; alt=&quot;Emoticrab&quot;/&gt;&lt;/div&gt;
&lt;div style=&quot;position:absolute; padding-left: 46px; padding-top: 98px&quot;&gt;&lt;img src=&quot;http://wordaligned.org/images/emoti-crab4.gif&quot; alt=&quot;Emoticrab&quot;/&gt;&lt;/div&gt;
&lt;div style=&quot;position:absolute; padding-left: 79px; padding-top: 21px&quot;&gt;&lt;img src=&quot;http://wordaligned.org/images/emoti-crab2.gif&quot; alt=&quot;Emoticrab&quot;/&gt;&lt;/div&gt;
&lt;div style=&quot;position:absolute; padding-left: 79px; padding-top: 60px&quot;&gt;&lt;img src=&quot;http://wordaligned.org/images/emoti-crab3.gif&quot; alt=&quot;Emoticrab&quot;/&gt;&lt;/div&gt;
&lt;div style=&quot;position:absolute; padding-left: 89px; padding-top: 91px&quot;&gt;&lt;img src=&quot;http://wordaligned.org/images/emoti-crab2.gif&quot; alt=&quot;Emoticrab&quot;/&gt;&lt;/div&gt;
&lt;div style=&quot;position:absolute; padding-left: 89px; padding-top: 114px&quot;&gt;&lt;img src=&quot;http://wordaligned.org/images/emoti-crab3.gif&quot; alt=&quot;Emoticrab&quot;/&gt;&lt;/div&gt;
&lt;div style=&quot;position:absolute; padding-left: 124px; padding-top: 21px&quot;&gt;&lt;img src=&quot;http://wordaligned.org/images/emoti-crab2.gif&quot; alt=&quot;Emoticrab&quot;/&gt;&lt;/div&gt;
&lt;div style=&quot;position:absolute; padding-left: 108px; padding-top: 36px&quot;&gt;&lt;img src=&quot;http://wordaligned.org/images/emoti-crab2.gif&quot; alt=&quot;Emoticrab&quot;/&gt;&lt;/div&gt;
&lt;div style=&quot;position:absolute; padding-left: 110px; padding-top: 67px&quot;&gt;&lt;img src=&quot;http://wordaligned.org/images/emoti-crab3.gif&quot; alt=&quot;Emoticrab&quot;/&gt;&lt;/div&gt;
&lt;div style=&quot;position:absolute; padding-left: 120px; padding-top: 122px&quot;&gt;&lt;img src=&quot;http://wordaligned.org/images/emoti-crab3.gif&quot; alt=&quot;Emoticrab&quot;/&gt;&lt;/div&gt;
&lt;div style=&quot;position:absolute; padding-left: 151px; padding-top: 21px&quot;&gt;&lt;img src=&quot;http://wordaligned.org/images/emoti-crab3.gif&quot; alt=&quot;Emoticrab&quot;/&gt;&lt;/div&gt;
&lt;div style=&quot;position:absolute; padding-left: 139px; padding-top: 38px&quot;&gt;&lt;img src=&quot;http://wordaligned.org/images/emoti-crab5.gif&quot; alt=&quot;Emoticrab&quot;/&gt;&lt;/div&gt;
&lt;div style=&quot;position:absolute; padding-left: 141px; padding-top: 69px&quot;&gt;&lt;img src=&quot;http://wordaligned.org/images/emoti-crab5.gif&quot; alt=&quot;Emoticrab&quot;/&gt;&lt;/div&gt;
&lt;div style=&quot;position:absolute; padding-left: 155px; padding-top: 114px&quot;&gt;&lt;img src=&quot;http://wordaligned.org/images/emoti-crab3.gif&quot; alt=&quot;Emoticrab&quot;/&gt;&lt;/div&gt;
&lt;div style=&quot;position:absolute; padding-left: 182px; padding-top: 29px&quot;&gt;&lt;img src=&quot;http://wordaligned.org/images/emoti-crab5.gif&quot; alt=&quot;Emoticrab&quot;/&gt;&lt;/div&gt;
&lt;div style=&quot;position:absolute; padding-left: 186px; padding-top: 52px&quot;&gt;&lt;img src=&quot;http://wordaligned.org/images/emoti-crab3.gif&quot; alt=&quot;Emoticrab&quot;/&gt;&lt;/div&gt;
&lt;div style=&quot;position:absolute; padding-left: 170px; padding-top: 67px&quot;&gt;&lt;img src=&quot;http://wordaligned.org/images/emoti-crab5.gif&quot; alt=&quot;Emoticrab&quot;/&gt;&lt;/div&gt;
&lt;div style=&quot;position:absolute; padding-left: 182px; padding-top: 100px&quot;&gt;&lt;img src=&quot;http://wordaligned.org/images/emoti-crab2.gif&quot; alt=&quot;Emoticrab&quot;/&gt;&lt;/div&gt;
&lt;div style=&quot;position:absolute; padding-left: 213px; padding-top: 29px&quot;&gt;&lt;img src=&quot;http://wordaligned.org/images/emoti-crab1.gif&quot; alt=&quot;Emoticrab&quot;/&gt;&lt;/div&gt;
&lt;div style=&quot;position:absolute; padding-left: 203px; padding-top: 38px&quot;&gt;&lt;img src=&quot;http://wordaligned.org/images/emoti-crab5.gif&quot; alt=&quot;Emoticrab&quot;/&gt;&lt;/div&gt;
&lt;div style=&quot;position:absolute; padding-left: 201px; padding-top: 69px&quot;&gt;&lt;img src=&quot;http://wordaligned.org/images/emoti-crab1.gif&quot; alt=&quot;Emoticrab&quot;/&gt;&lt;/div&gt;
&lt;div style=&quot;position:absolute; padding-left: 217px; padding-top: 114px&quot;&gt;&lt;img src=&quot;http://wordaligned.org/images/emoti-crab1.gif&quot; alt=&quot;Emoticrab&quot;/&gt;&lt;/div&gt;
&lt;div style=&quot;position:absolute; padding-left: 244px; padding-top: 7px&quot;&gt;&lt;img src=&quot;http://wordaligned.org/images/emoti-crab3.gif&quot; alt=&quot;Emoticrab&quot;/&gt;&lt;/div&gt;
&lt;div style=&quot;position:absolute; padding-left: 244px; padding-top: 52px&quot;&gt;&lt;img src=&quot;http://wordaligned.org/images/emoti-crab3.gif&quot; alt=&quot;Emoticrab&quot;/&gt;&lt;/div&gt;
&lt;div style=&quot;position:absolute; padding-left: 244px; padding-top: 83px&quot;&gt;&lt;img src=&quot;http://wordaligned.org/images/emoti-crab2.gif&quot; alt=&quot;Emoticrab&quot;/&gt;&lt;/div&gt;
&lt;div style=&quot;position:absolute; padding-left: 244px; padding-top: 100px&quot;&gt;&lt;img src=&quot;http://wordaligned.org/images/emoti-crab5.gif&quot; alt=&quot;Emoticrab&quot;/&gt;&lt;/div&gt;
&lt;div style=&quot;position:absolute; padding-left: 279px; padding-top: 29px&quot;&gt;&lt;img src=&quot;http://wordaligned.org/images/emoti-crab3.gif&quot; alt=&quot;Emoticrab&quot;/&gt;&lt;/div&gt;
&lt;div style=&quot;position:absolute; padding-left: 265px; padding-top: 36px&quot;&gt;&lt;img src=&quot;http://wordaligned.org/images/emoti-crab5.gif&quot; alt=&quot;Emoticrab&quot;/&gt;&lt;/div&gt;
&lt;div style=&quot;position:absolute; padding-left: 279px; padding-top: 67px&quot;&gt;&lt;img src=&quot;http://wordaligned.org/images/emoti-crab1.gif&quot; alt=&quot;Emoticrab&quot;/&gt;&lt;/div&gt;
&lt;div style=&quot;position:absolute; padding-left: 265px; padding-top: 98px&quot;&gt;&lt;img src=&quot;http://wordaligned.org/images/emoti-crab1.gif&quot; alt=&quot;Emoticrab&quot;/&gt;&lt;/div&gt;
&lt;div style=&quot;position:absolute; padding-left: 294px; padding-top: 21px&quot;&gt;&lt;img src=&quot;http://wordaligned.org/images/emoti-crab1.gif&quot; alt=&quot;Emoticrab&quot;/&gt;&lt;/div&gt;
&lt;div style=&quot;position:absolute; padding-left: 296px; padding-top: 36px&quot;&gt;&lt;img src=&quot;http://wordaligned.org/images/emoti-crab5.gif&quot; alt=&quot;Emoticrab&quot;/&gt;&lt;/div&gt;
&lt;div style=&quot;position:absolute; padding-left: 310px; padding-top: 83px&quot;&gt;&lt;img src=&quot;http://wordaligned.org/images/emoti-crab1.gif&quot; alt=&quot;Emoticrab&quot;/&gt;&lt;/div&gt;
&lt;div style=&quot;position:absolute; padding-left: 306px; padding-top: 122px&quot;&gt;&lt;img src=&quot;http://wordaligned.org/images/emoti-crab4.gif&quot; alt=&quot;Emoticrab&quot;/&gt;&lt;/div&gt;
&lt;div style=&quot;position:absolute; padding-left: 327px; padding-top: 5px&quot;&gt;&lt;img src=&quot;http://wordaligned.org/images/emoti-crab1.gif&quot; alt=&quot;Emoticrab&quot;/&gt;&lt;/div&gt;
&lt;div style=&quot;position:absolute; padding-left: 337px; padding-top: 60px&quot;&gt;&lt;img src=&quot;http://wordaligned.org/images/emoti-crab2.gif&quot; alt=&quot;Emoticrab&quot;/&gt;&lt;/div&gt;
&lt;div style=&quot;position:absolute; padding-left: 337px; padding-top: 83px&quot;&gt;&lt;img src=&quot;http://wordaligned.org/images/emoti-crab2.gif&quot; alt=&quot;Emoticrab&quot;/&gt;&lt;/div&gt;
&lt;div style=&quot;position:absolute; padding-left: 337px; padding-top: 122px&quot;&gt;&lt;img src=&quot;http://wordaligned.org/images/emoti-crab3.gif&quot; alt=&quot;Emoticrab&quot;/&gt;&lt;/div&gt;
&lt;div style=&quot;position:absolute; padding-left: 358px; padding-top: 29px&quot;&gt;&lt;img src=&quot;http://wordaligned.org/images/emoti-crab1.gif&quot; alt=&quot;Emoticrab&quot;/&gt;&lt;/div&gt;
&lt;div style=&quot;position:absolute; padding-left: 356px; padding-top: 52px&quot;&gt;&lt;img src=&quot;http://wordaligned.org/images/emoti-crab1.gif&quot; alt=&quot;Emoticrab&quot;/&gt;&lt;/div&gt;
&lt;div style=&quot;position:absolute; padding-left: 358px; padding-top: 91px&quot;&gt;&lt;img src=&quot;http://wordaligned.org/images/emoti-crab5.gif&quot; alt=&quot;Emoticrab&quot;/&gt;&lt;/div&gt;
&lt;div style=&quot;position:absolute; padding-left: 368px; padding-top: 114px&quot;&gt;&lt;img src=&quot;http://wordaligned.org/images/emoti-crab4.gif&quot; alt=&quot;Emoticrab&quot;/&gt;&lt;/div&gt;
&lt;div style=&quot;position:absolute; padding-left: 399px; padding-top: 5px&quot;&gt;&lt;img src=&quot;http://wordaligned.org/images/emoti-crab1.gif&quot; alt=&quot;Emoticrab&quot;/&gt;&lt;/div&gt;
&lt;div style=&quot;position:absolute; padding-left: 389px; padding-top: 36px&quot;&gt;&lt;img src=&quot;http://wordaligned.org/images/emoti-crab3.gif&quot; alt=&quot;Emoticrab&quot;/&gt;&lt;/div&gt;
&lt;div style=&quot;position:absolute; padding-left: 403px; padding-top: 83px&quot;&gt;&lt;img src=&quot;http://wordaligned.org/images/emoti-crab1.gif&quot; alt=&quot;Emoticrab&quot;/&gt;&lt;/div&gt;
&lt;div style=&quot;position:absolute; padding-left: 387px; padding-top: 100px&quot;&gt;&lt;img src=&quot;http://wordaligned.org/images/emoti-crab3.gif&quot; alt=&quot;Emoticrab&quot;/&gt;&lt;/div&gt;
&lt;div style=&quot;position:absolute; padding-left: 434px; padding-top: 29px&quot;&gt;&lt;img src=&quot;http://wordaligned.org/images/emoti-crab1.gif&quot; alt=&quot;Emoticrab&quot;/&gt;&lt;/div&gt;
&lt;div style=&quot;position:absolute; padding-left: 430px; padding-top: 36px&quot;&gt;&lt;img src=&quot;http://wordaligned.org/images/emoti-crab2.gif&quot; alt=&quot;Emoticrab&quot;/&gt;&lt;/div&gt;
&lt;div style=&quot;position:absolute; padding-left: 420px; padding-top: 69px&quot;&gt;&lt;img src=&quot;http://wordaligned.org/images/emoti-crab3.gif&quot; alt=&quot;Emoticrab&quot;/&gt;&lt;/div&gt;
&lt;div style=&quot;position:absolute; padding-left: 430px; padding-top: 100px&quot;&gt;&lt;img src=&quot;http://wordaligned.org/images/emoti-crab5.gif&quot; alt=&quot;Emoticrab&quot;/&gt;&lt;/div&gt;
&lt;div style=&quot;position:absolute; padding-left: 449px; padding-top: 21px&quot;&gt;&lt;img src=&quot;http://wordaligned.org/images/emoti-crab1.gif&quot; alt=&quot;Emoticrab&quot;/&gt;&lt;/div&gt;
&lt;div style=&quot;position:absolute; padding-left: 451px; padding-top: 36px&quot;&gt;&lt;img src=&quot;http://wordaligned.org/images/emoti-crab5.gif&quot; alt=&quot;Emoticrab&quot;/&gt;&lt;/div&gt;
&lt;div style=&quot;position:absolute; padding-left: 449px; padding-top: 91px&quot;&gt;&lt;img src=&quot;http://wordaligned.org/images/emoti-crab3.gif&quot; alt=&quot;Emoticrab&quot;/&gt;&lt;/div&gt;
&lt;div style=&quot;position:absolute; padding-left: 449px; padding-top: 114px&quot;&gt;&lt;img src=&quot;http://wordaligned.org/images/emoti-crab2.gif&quot; alt=&quot;Emoticrab&quot;/&gt;&lt;/div&gt;
&lt;div style=&quot;position:absolute; padding-left: 482px; padding-top: 5px&quot;&gt;&lt;img src=&quot;http://wordaligned.org/images/emoti-crab1.gif&quot; alt=&quot;Emoticrab&quot;/&gt;&lt;/div&gt;
&lt;div style=&quot;position:absolute; padding-left: 496px; padding-top: 52px&quot;&gt;&lt;img src=&quot;http://wordaligned.org/images/emoti-crab2.gif&quot; alt=&quot;Emoticrab&quot;/&gt;&lt;/div&gt;
&lt;div style=&quot;position:absolute; padding-left: 496px; padding-top: 69px&quot;&gt;&lt;img src=&quot;http://wordaligned.org/images/emoti-crab4.gif&quot; alt=&quot;Emoticrab&quot;/&gt;&lt;/div&gt;
&lt;div style=&quot;position:absolute; padding-left: 496px; padding-top: 114px&quot;&gt;&lt;img src=&quot;http://wordaligned.org/images/emoti-crab5.gif&quot; alt=&quot;Emoticrab&quot;/&gt;&lt;/div&gt;
&lt;div style=&quot;position:absolute; padding-left: 511px; padding-top: 29px&quot;&gt;&lt;img src=&quot;http://wordaligned.org/images/emoti-crab4.gif&quot; alt=&quot;Emoticrab&quot;/&gt;&lt;/div&gt;
&lt;div style=&quot;position:absolute; padding-left: 511px; padding-top: 38px&quot;&gt;&lt;img src=&quot;http://wordaligned.org/images/emoti-crab4.gif&quot; alt=&quot;Emoticrab&quot;/&gt;&lt;/div&gt;
&lt;div style=&quot;position:absolute; padding-left: 527px; padding-top: 69px&quot;&gt;&lt;img src=&quot;http://wordaligned.org/images/emoti-crab2.gif&quot; alt=&quot;Emoticrab&quot;/&gt;&lt;/div&gt;
&lt;div style=&quot;position:absolute; padding-left: 523px; padding-top: 98px&quot;&gt;&lt;img src=&quot;http://wordaligned.org/images/emoti-crab4.gif&quot; alt=&quot;Emoticrab&quot;/&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;span id=&quot;continue-reading&quot;/&gt;&lt;/p&gt;
&lt;p&gt;What is the collective noun for crabs anyway? Dose, cast or bushel, &lt;a href=&quot;http://www.google.com/search?q=collective+noun+crabs&quot;&gt;apparently&lt;/a&gt;. Placed in a regular grid, all clicking in time, they looked a bit too regimented. &lt;/p&gt;
&lt;div style=&quot;width:600px; height:150px;&quot;&gt;
&lt;div style=&quot;position:absolute; padding-left: 20px; padding-top: 10px&quot;&gt;&lt;img src=&quot;http://wordaligned.org/images/emoti-crab1.gif&quot; alt=&quot;Emoticrab&quot;/&gt;&lt;/div&gt;
&lt;div style=&quot;position:absolute; padding-left: 20px; padding-top: 41px&quot;&gt;&lt;img src=&quot;http://wordaligned.org/images/emoti-crab1.gif&quot; alt=&quot;Emoticrab&quot;/&gt;&lt;/div&gt;
&lt;div style=&quot;position:absolute; padding-left: 20px; padding-top: 72px&quot;&gt;&lt;img src=&quot;http://wordaligned.org/images/emoti-crab1.gif&quot; alt=&quot;Emoticrab&quot;/&gt;&lt;/div&gt;
&lt;div style=&quot;position:absolute; padding-left: 20px; padding-top: 103px&quot;&gt;&lt;img src=&quot;http://wordaligned.org/images/emoti-crab1.gif&quot; alt=&quot;Emoticrab&quot;/&gt;&lt;/div&gt;
&lt;div style=&quot;position:absolute; padding-left: 51px; padding-top: 10px&quot;&gt;&lt;img src=&quot;http://wordaligned.org/images/emoti-crab1.gif&quot; alt=&quot;Emoticrab&quot;/&gt;&lt;/div&gt;
&lt;div style=&quot;position:absolute; padding-left: 51px; padding-top: 41px&quot;&gt;&lt;img src=&quot;http://wordaligned.org/images/emoti-crab1.gif&quot; alt=&quot;Emoticrab&quot;/&gt;&lt;/div&gt;
&lt;div style=&quot;position:absolute; padding-left: 51px; padding-top: 72px&quot;&gt;&lt;img src=&quot;http://wordaligned.org/images/emoti-crab1.gif&quot; alt=&quot;Emoticrab&quot;/&gt;&lt;/div&gt;
&lt;div style=&quot;position:absolute; padding-left: 51px; padding-top: 103px&quot;&gt;&lt;img src=&quot;http://wordaligned.org/images/emoti-crab1.gif&quot; alt=&quot;Emoticrab&quot;/&gt;&lt;/div&gt;
&lt;div style=&quot;position:absolute; padding-left: 82px; padding-top: 10px&quot;&gt;&lt;img src=&quot;http://wordaligned.org/images/emoti-crab1.gif&quot; alt=&quot;Emoticrab&quot;/&gt;&lt;/div&gt;
&lt;div style=&quot;position:absolute; padding-left: 82px; padding-top: 41px&quot;&gt;&lt;img src=&quot;http://wordaligned.org/images/emoti-crab1.gif&quot; alt=&quot;Emoticrab&quot;/&gt;&lt;/div&gt;
&lt;div style=&quot;position:absolute; padding-left: 82px; padding-top: 72px&quot;&gt;&lt;img src=&quot;http://wordaligned.org/images/emoti-crab1.gif&quot; alt=&quot;Emoticrab&quot;/&gt;&lt;/div&gt;
&lt;div style=&quot;position:absolute; padding-left: 82px; padding-top: 103px&quot;&gt;&lt;img src=&quot;http://wordaligned.org/images/emoti-crab1.gif&quot; alt=&quot;Emoticrab&quot;/&gt;&lt;/div&gt;
&lt;div style=&quot;position:absolute; padding-left: 113px; padding-top: 10px&quot;&gt;&lt;img src=&quot;http://wordaligned.org/images/emoti-crab1.gif&quot; alt=&quot;Emoticrab&quot;/&gt;&lt;/div&gt;
&lt;div style=&quot;position:absolute; padding-left: 113px; padding-top: 41px&quot;&gt;&lt;img src=&quot;http://wordaligned.org/images/emoti-crab1.gif&quot; alt=&quot;Emoticrab&quot;/&gt;&lt;/div&gt;
&lt;div style=&quot;position:absolute; padding-left: 113px; padding-top: 72px&quot;&gt;&lt;img src=&quot;http://wordaligned.org/images/emoti-crab1.gif&quot; alt=&quot;Emoticrab&quot;/&gt;&lt;/div&gt;
&lt;div style=&quot;position:absolute; padding-left: 113px; padding-top: 103px&quot;&gt;&lt;img src=&quot;http://wordaligned.org/images/emoti-crab1.gif&quot; alt=&quot;Emoticrab&quot;/&gt;&lt;/div&gt;
&lt;div style=&quot;position:absolute; padding-left: 144px; padding-top: 10px&quot;&gt;&lt;img src=&quot;http://wordaligned.org/images/emoti-crab1.gif&quot; alt=&quot;Emoticrab&quot;/&gt;&lt;/div&gt;
&lt;div style=&quot;position:absolute; padding-left: 144px; padding-top: 41px&quot;&gt;&lt;img src=&quot;http://wordaligned.org/images/emoti-crab1.gif&quot; alt=&quot;Emoticrab&quot;/&gt;&lt;/div&gt;
&lt;div style=&quot;position:absolute; padding-left: 144px; padding-top: 72px&quot;&gt;&lt;img src=&quot;http://wordaligned.org/images/emoti-crab1.gif&quot; alt=&quot;Emoticrab&quot;/&gt;&lt;/div&gt;
&lt;div style=&quot;position:absolute; padding-left: 144px; padding-top: 103px&quot;&gt;&lt;img src=&quot;http://wordaligned.org/images/emoti-crab1.gif&quot; alt=&quot;Emoticrab&quot;/&gt;&lt;/div&gt;
&lt;div style=&quot;position:absolute; padding-left: 175px; padding-top: 10px&quot;&gt;&lt;img src=&quot;http://wordaligned.org/images/emoti-crab1.gif&quot; alt=&quot;Emoticrab&quot;/&gt;&lt;/div&gt;
&lt;div style=&quot;position:absolute; padding-left: 175px; padding-top: 41px&quot;&gt;&lt;img src=&quot;http://wordaligned.org/images/emoti-crab1.gif&quot; alt=&quot;Emoticrab&quot;/&gt;&lt;/div&gt;
&lt;div style=&quot;position:absolute; padding-left: 175px; padding-top: 72px&quot;&gt;&lt;img src=&quot;http://wordaligned.org/images/emoti-crab1.gif&quot; alt=&quot;Emoticrab&quot;/&gt;&lt;/div&gt;
&lt;div style=&quot;position:absolute; padding-left: 175px; padding-top: 103px&quot;&gt;&lt;img src=&quot;http://wordaligned.org/images/emoti-crab1.gif&quot; alt=&quot;Emoticrab&quot;/&gt;&lt;/div&gt;
&lt;div style=&quot;position:absolute; padding-left: 206px; padding-top: 10px&quot;&gt;&lt;img src=&quot;http://wordaligned.org/images/emoti-crab1.gif&quot; alt=&quot;Emoticrab&quot;/&gt;&lt;/div&gt;
&lt;div style=&quot;position:absolute; padding-left: 206px; padding-top: 41px&quot;&gt;&lt;img src=&quot;http://wordaligned.org/images/emoti-crab1.gif&quot; alt=&quot;Emoticrab&quot;/&gt;&lt;/div&gt;
&lt;div style=&quot;position:absolute; padding-left: 206px; padding-top: 72px&quot;&gt;&lt;img src=&quot;http://wordaligned.org/images/emoti-crab1.gif&quot; alt=&quot;Emoticrab&quot;/&gt;&lt;/div&gt;
&lt;div style=&quot;position:absolute; padding-left: 206px; padding-top: 103px&quot;&gt;&lt;img src=&quot;http://wordaligned.org/images/emoti-crab1.gif&quot; alt=&quot;Emoticrab&quot;/&gt;&lt;/div&gt;
&lt;div style=&quot;position:absolute; padding-left: 237px; padding-top: 10px&quot;&gt;&lt;img src=&quot;http://wordaligned.org/images/emoti-crab1.gif&quot; alt=&quot;Emoticrab&quot;/&gt;&lt;/div&gt;
&lt;div style=&quot;position:absolute; padding-left: 237px; padding-top: 41px&quot;&gt;&lt;img src=&quot;http://wordaligned.org/images/emoti-crab1.gif&quot; alt=&quot;Emoticrab&quot;/&gt;&lt;/div&gt;
&lt;div style=&quot;position:absolute; padding-left: 237px; padding-top: 72px&quot;&gt;&lt;img src=&quot;http://wordaligned.org/images/emoti-crab1.gif&quot; alt=&quot;Emoticrab&quot;/&gt;&lt;/div&gt;
&lt;div style=&quot;position:absolute; padding-left: 237px; padding-top: 103px&quot;&gt;&lt;img src=&quot;http://wordaligned.org/images/emoti-crab1.gif&quot; alt=&quot;Emoticrab&quot;/&gt;&lt;/div&gt;
&lt;div style=&quot;position:absolute; padding-left: 268px; padding-top: 10px&quot;&gt;&lt;img src=&quot;http://wordaligned.org/images/emoti-crab1.gif&quot; alt=&quot;Emoticrab&quot;/&gt;&lt;/div&gt;
&lt;div style=&quot;position:absolute; padding-left: 268px; padding-top: 41px&quot;&gt;&lt;img src=&quot;http://wordaligned.org/images/emoti-crab1.gif&quot; alt=&quot;Emoticrab&quot;/&gt;&lt;/div&gt;
&lt;div style=&quot;position:absolute; padding-left: 268px; padding-top: 72px&quot;&gt;&lt;img src=&quot;http://wordaligned.org/images/emoti-crab1.gif&quot; alt=&quot;Emoticrab&quot;/&gt;&lt;/div&gt;
&lt;div style=&quot;position:absolute; padding-left: 268px; padding-top: 103px&quot;&gt;&lt;img src=&quot;http://wordaligned.org/images/emoti-crab1.gif&quot; alt=&quot;Emoticrab&quot;/&gt;&lt;/div&gt;
&lt;div style=&quot;position:absolute; padding-left: 299px; padding-top: 10px&quot;&gt;&lt;img src=&quot;http://wordaligned.org/images/emoti-crab1.gif&quot; alt=&quot;Emoticrab&quot;/&gt;&lt;/div&gt;
&lt;div style=&quot;position:absolute; padding-left: 299px; padding-top: 41px&quot;&gt;&lt;img src=&quot;http://wordaligned.org/images/emoti-crab1.gif&quot; alt=&quot;Emoticrab&quot;/&gt;&lt;/div&gt;
&lt;div style=&quot;position:absolute; padding-left: 299px; padding-top: 72px&quot;&gt;&lt;img src=&quot;http://wordaligned.org/images/emoti-crab1.gif&quot; alt=&quot;Emoticrab&quot;/&gt;&lt;/div&gt;
&lt;div style=&quot;position:absolute; padding-left: 299px; padding-top: 103px&quot;&gt;&lt;img src=&quot;http://wordaligned.org/images/emoti-crab1.gif&quot; alt=&quot;Emoticrab&quot;/&gt;&lt;/div&gt;
&lt;div style=&quot;position:absolute; padding-left: 330px; padding-top: 10px&quot;&gt;&lt;img src=&quot;http://wordaligned.org/images/emoti-crab1.gif&quot; alt=&quot;Emoticrab&quot;/&gt;&lt;/div&gt;
&lt;div style=&quot;position:absolute; padding-left: 330px; padding-top: 41px&quot;&gt;&lt;img src=&quot;http://wordaligned.org/images/emoti-crab1.gif&quot; alt=&quot;Emoticrab&quot;/&gt;&lt;/div&gt;
&lt;div style=&quot;position:absolute; padding-left: 330px; padding-top: 72px&quot;&gt;&lt;img src=&quot;http://wordaligned.org/images/emoti-crab1.gif&quot; alt=&quot;Emoticrab&quot;/&gt;&lt;/div&gt;
&lt;div style=&quot;position:absolute; padding-left: 330px; padding-top: 103px&quot;&gt;&lt;img src=&quot;http://wordaligned.org/images/emoti-crab1.gif&quot; alt=&quot;Emoticrab&quot;/&gt;&lt;/div&gt;
&lt;div style=&quot;position:absolute; padding-left: 361px; padding-top: 10px&quot;&gt;&lt;img src=&quot;http://wordaligned.org/images/emoti-crab1.gif&quot; alt=&quot;Emoticrab&quot;/&gt;&lt;/div&gt;
&lt;div style=&quot;position:absolute; padding-left: 361px; padding-top: 41px&quot;&gt;&lt;img src=&quot;http://wordaligned.org/images/emoti-crab1.gif&quot; alt=&quot;Emoticrab&quot;/&gt;&lt;/div&gt;
&lt;div style=&quot;position:absolute; padding-left: 361px; padding-top: 72px&quot;&gt;&lt;img src=&quot;http://wordaligned.org/images/emoti-crab1.gif&quot; alt=&quot;Emoticrab&quot;/&gt;&lt;/div&gt;
&lt;div style=&quot;position:absolute; padding-left: 361px; padding-top: 103px&quot;&gt;&lt;img src=&quot;http://wordaligned.org/images/emoti-crab1.gif&quot; alt=&quot;Emoticrab&quot;/&gt;&lt;/div&gt;
&lt;div style=&quot;position:absolute; padding-left: 392px; padding-top: 10px&quot;&gt;&lt;img src=&quot;http://wordaligned.org/images/emoti-crab1.gif&quot; alt=&quot;Emoticrab&quot;/&gt;&lt;/div&gt;
&lt;div style=&quot;position:absolute; padding-left: 392px; padding-top: 41px&quot;&gt;&lt;img src=&quot;http://wordaligned.org/images/emoti-crab1.gif&quot; alt=&quot;Emoticrab&quot;/&gt;&lt;/div&gt;
&lt;div style=&quot;position:absolute; padding-left: 392px; padding-top: 72px&quot;&gt;&lt;img src=&quot;http://wordaligned.org/images/emoti-crab1.gif&quot; alt=&quot;Emoticrab&quot;/&gt;&lt;/div&gt;
&lt;div style=&quot;position:absolute; padding-left: 392px; padding-top: 103px&quot;&gt;&lt;img src=&quot;http://wordaligned.org/images/emoti-crab1.gif&quot; alt=&quot;Emoticrab&quot;/&gt;&lt;/div&gt;
&lt;div style=&quot;position:absolute; padding-left: 423px; padding-top: 10px&quot;&gt;&lt;img src=&quot;http://wordaligned.org/images/emoti-crab1.gif&quot; alt=&quot;Emoticrab&quot;/&gt;&lt;/div&gt;
&lt;div style=&quot;position:absolute; padding-left: 423px; padding-top: 41px&quot;&gt;&lt;img src=&quot;http://wordaligned.org/images/emoti-crab1.gif&quot; alt=&quot;Emoticrab&quot;/&gt;&lt;/div&gt;
&lt;div style=&quot;position:absolute; padding-left: 423px; padding-top: 72px&quot;&gt;&lt;img src=&quot;http://wordaligned.org/images/emoti-crab1.gif&quot; alt=&quot;Emoticrab&quot;/&gt;&lt;/div&gt;
&lt;div style=&quot;position:absolute; padding-left: 423px; padding-top: 103px&quot;&gt;&lt;img src=&quot;http://wordaligned.org/images/emoti-crab1.gif&quot; alt=&quot;Emoticrab&quot;/&gt;&lt;/div&gt;
&lt;div style=&quot;position:absolute; padding-left: 454px; padding-top: 10px&quot;&gt;&lt;img src=&quot;http://wordaligned.org/images/emoti-crab1.gif&quot; alt=&quot;Emoticrab&quot;/&gt;&lt;/div&gt;
&lt;div style=&quot;position:absolute; padding-left: 454px; padding-top: 41px&quot;&gt;&lt;img src=&quot;http://wordaligned.org/images/emoti-crab1.gif&quot; alt=&quot;Emoticrab&quot;/&gt;&lt;/div&gt;
&lt;div style=&quot;position:absolute; padding-left: 454px; padding-top: 72px&quot;&gt;&lt;img src=&quot;http://wordaligned.org/images/emoti-crab1.gif&quot; alt=&quot;Emoticrab&quot;/&gt;&lt;/div&gt;
&lt;div style=&quot;position:absolute; padding-left: 454px; padding-top: 103px&quot;&gt;&lt;img src=&quot;http://wordaligned.org/images/emoti-crab1.gif&quot; alt=&quot;Emoticrab&quot;/&gt;&lt;/div&gt;
&lt;div style=&quot;position:absolute; padding-left: 485px; padding-top: 10px&quot;&gt;&lt;img src=&quot;http://wordaligned.org/images/emoti-crab1.gif&quot; alt=&quot;Emoticrab&quot;/&gt;&lt;/div&gt;
&lt;div style=&quot;position:absolute; padding-left: 485px; padding-top: 41px&quot;&gt;&lt;img src=&quot;http://wordaligned.org/images/emoti-crab1.gif&quot; alt=&quot;Emoticrab&quot;/&gt;&lt;/div&gt;
&lt;div style=&quot;position:absolute; padding-left: 485px; padding-top: 72px&quot;&gt;&lt;img src=&quot;http://wordaligned.org/images/emoti-crab1.gif&quot; alt=&quot;Emoticrab&quot;/&gt;&lt;/div&gt;
&lt;div style=&quot;position:absolute; padding-left: 485px; padding-top: 103px&quot;&gt;&lt;img src=&quot;http://wordaligned.org/images/emoti-crab1.gif&quot; alt=&quot;Emoticrab&quot;/&gt;&lt;/div&gt;
&lt;div style=&quot;position:absolute; padding-left: 516px; padding-top: 10px&quot;&gt;&lt;img src=&quot;http://wordaligned.org/images/emoti-crab1.gif&quot; alt=&quot;Emoticrab&quot;/&gt;&lt;/div&gt;
&lt;div style=&quot;position:absolute; padding-left: 516px; padding-top: 41px&quot;&gt;&lt;img src=&quot;http://wordaligned.org/images/emoti-crab1.gif&quot; alt=&quot;Emoticrab&quot;/&gt;&lt;/div&gt;
&lt;div style=&quot;position:absolute; padding-left: 516px; padding-top: 72px&quot;&gt;&lt;img src=&quot;http://wordaligned.org/images/emoti-crab1.gif&quot; alt=&quot;Emoticrab&quot;/&gt;&lt;/div&gt;
&lt;div style=&quot;position:absolute; padding-left: 516px; padding-top: 103px&quot;&gt;&lt;img src=&quot;http://wordaligned.org/images/emoti-crab1.gif&quot; alt=&quot;Emoticrab&quot;/&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;So I nudged each crab&amp;#8217;s coordinates left a bit, right a bit, up a bit, down a bit. Using &lt;a href=&quot;http://www.imagemagick.org&quot;&gt;ImageMagick&lt;/a&gt; I extracted the frames of the original animated GIF, then recombined them with altered sequencing. I did this a few times until I had a more pleasing picture. Here&amp;#8217;s a sketch of how you can do this. The &lt;code&gt;-loop 0&lt;/code&gt; parameter means loop forever; the &lt;code&gt;delay&lt;/code&gt; is in 100ths of a second.&lt;/p&gt;
&lt;div class=&quot;typocode&quot;&gt;

&lt;pre class=&quot;prettyprint&quot;&gt;$ convert +adjoin animated-crab.gif crab-frame-%02d.gif
$ ls crab-frame-*.gif
crab-frame-00.gif    crab-frame-01.gif    crab-frame-02.gif
....
$ convert -loop 0 -delay 17 crab-frame-*.gif new-animated-crab.gif

&lt;/pre&gt;

&lt;/div&gt;

&lt;p&gt;Sorry if you find the animated GIFs disturbing. I&amp;#8217;d be interested to find out how much of the &lt;a href=&quot;http://www.johndcook.com/blog/2009/02/05/google-reader-and-html-lists/&quot;&gt;CSS layout works in a feed reader&lt;/a&gt;. As a reader, I skim through material in a feed reader; I like the vanilla styling and can always visit the real home of an article which particularly interests me. I also prefer full fat feeds to teasers. As an author, I generate a full feed, indirected via Feedburner, now hosted by Google &amp;#8212; and who knows how it&amp;#8217;s &lt;strong&gt;really&lt;/strong&gt; being consumed? RSS and Atom feeds are great, but maybe the technology is being over-stretched.&lt;/p&gt;
&lt;p&gt;The original image is a new(ish) &lt;a href=&quot;http://gmailblog.blogspot.com/2008/10/picture-is-worth-thousand-words.html&quot;&gt;Gmail emoticon&lt;/a&gt;, available if you send rich text emails &amp;#8212; which I usually don&amp;#8217;t. Here&amp;#8217;s a picture of the famous Christmas Island red crabs.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://wordaligned.org/images/red-crab-invasion.jpg&quot; alt=&quot;red crab invasion&quot;/&gt;&lt;/p&gt;
&lt;h5&gt;&lt;a name=&quot;feedback&quot;&gt;Feedback&lt;/a&gt;&lt;/h5&gt;
&lt;div id=&quot;feedback_div&quot;&gt;&lt;ol id=&quot;feedback&quot; class=&quot;feedback&quot;&gt;&lt;li class=&quot;feedbackitem&quot;&gt;&lt;div class=&quot;author&quot;&gt;&lt;cite&gt;Marcus Ramberg&lt;/cite&gt; 2009-02-05&lt;/div&gt;&lt;div class=&quot;content&quot;&gt;It looks really annoyingly broken in google reader: &lt;a href=&quot;http://skitch.com/marcus/bdshj/google-reader-1000&quot;&gt;http://skitch.com/marcus/bdshj/google-reader-1000&lt;/a&gt;&lt;/div&gt;&lt;/li&gt;&lt;li class=&quot;feedbackitem&quot;&gt;&lt;div class=&quot;author&quot;&gt;&lt;cite&gt;John&lt;/cite&gt; 2009-02-05&lt;/div&gt;&lt;div class=&quot;content&quot;&gt;&lt;p&gt;Here&amp;#8217;s a screenshot of what it looks like in Google Reader &lt;a href=&quot;http://www.johndcook.com/crabs.png&quot;&gt;http://www.johndcook.com/crabs.png&lt;/a&gt;.&lt;/p&gt;&lt;/div&gt;&lt;/li&gt;&lt;li class=&quot;feedbackitem&quot;&gt;&lt;div class=&quot;author&quot;&gt;&lt;cite&gt;Thomas Guest&lt;/cite&gt; 2009-02-05&lt;/div&gt;Thanks Marcus and John. I expected it to look wrong, but was interested how exactly it would appear in different feed readers. As I suggested in the article, putting all this HTML and CSS into a feed is stretching things a bit far. Alarmingly, newsgator doesn&amp;#8217;t even get my code blocks preformatted. &lt;a href=&quot;http://wordaligned.org/images/newsgator-crabs.png&quot;&gt;http://wordaligned.org/images/newsgator-crabs.png&lt;/a&gt;&lt;/li&gt;&lt;/ol&gt;&lt;/div&gt;</description>
<dc:date>2009-02-05</dc:date>
<guid>http://wordaligned.org/articles/emoticrabs</guid>
<author>tag@wordaligned.org (Thomas Guest)</author>
<link>http://wordaligned.org/articles/emoticrabs</link>
<category>Google</category>
</item>

<item>
<title>Driving down the road of innovation</title>
<description>&lt;p&gt;On the official Google blog David Drummond announces the company is &lt;a href=&quot;http://googleblog.blogspot.com/2008/11/ending-our-agreement-with-yahoo.html&quot;&gt;ending its agreement with Yahoo!&lt;/a&gt; Here&amp;#8217;s a snippet (emphasis mine)&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;We&amp;#8217;re of course disappointed that this deal won&amp;#8217;t be moving ahead. But we&amp;#8217;re not going to let the prospect of a lengthy legal battle distract us from our core mission. &lt;strong&gt;That would be like trying to drive down the road of innovation with the parking brake on.&lt;/strong&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;This has to be the best traffic inspired metaphor since &lt;a href=&quot;http://www.google.com/search?q=information+superhighway&quot;&gt;&amp;#8220;information superhighway&amp;#8221;&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://www.flickr.com/photos/thomasguest/2882208525/&quot; title=&quot;Col finish by Thomas Guest, on Flickr&quot;&gt;&lt;img src=&quot;http://farm4.static.flickr.com/3067/2882208525_44746c617c.jpg&quot; width=&quot;375&quot; height=&quot;500&quot; alt=&quot;Col finish&quot; /&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;The analogy holds more generally. I&amp;#8217;d say it pretty much sums up some aspects of  software development, but I&amp;#8217;m more of a cyclist than a car driver. Recently I&amp;#8217;ve been working on one of Google&amp;#8217;s specialisms &amp;#8212; a novel application with a web interface &amp;#8212; and at times it does feel like I&amp;#8217;m cycling up the hill of innovation with a slow puncture. And a couple of broken spokes. Into a head wind.&lt;/p&gt;</description>
<dc:date>2008-11-05</dc:date>
<guid>http://wordaligned.org/articles/driving-down-the-road-of-innovation</guid>
<author>tag@wordaligned.org (Thomas Guest)</author>
<link>http://wordaligned.org/articles/driving-down-the-road-of-innovation</link>
<category>Google</category>
</item>

<item>
<title>BIG G little g - What begins with G?</title>
<description>&lt;h3 id=&quot;that-was-then&quot;&gt;That was Then&lt;/h3&gt;
&lt;p&gt;&lt;a href=&quot;http://www.google.com&quot;&gt;&lt;img src=&quot;http://www.google.com/images/logo.gif&quot; alt=&quot;Google logo&quot;/&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;There are two G&amp;#8217;s in Google, a big &lt;strong&gt;G&lt;/strong&gt; at the start and a little &lt;strong&gt;g&lt;/strong&gt; half way through. Historically, the search giant has been sniffy about people googling, by which I mean verbing the corporate name and neglecting its proper case. Back in 2003 &lt;a href=&quot;http://news.bbc.co.uk/1/hi/uk/3006486.stm&quot;&gt;the beeb quotes&lt;/a&gt; singer Robbie Williams as saying (note the little g)&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&amp;#8220;So hurrah for googling. Science got me laid&amp;#8221;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;and comments&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;But what&amp;#8217;s good news for Robbie is becoming a headache for folk at Google HQ. The company&amp;#8217;s lawyers are trying to stamp out this sort of language.&lt;/p&gt;
&lt;p&gt;Paul McFedries, who runs the lexicography site &lt;a href=&quot;http://www.wordspy.com&quot;&gt;Word Spy&lt;/a&gt;, received a stiffly worded letter from the firm after he added &amp;#8220;google&amp;#8221; to his online lexicon.&lt;/p&gt;
&lt;p&gt;The company asked him to delete the definition or revise it to take account of the &amp;#8220;trade mark status of Google&amp;#8221;. He opted for the latter. &lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;span id=&quot;continue-reading&quot;/&gt;&lt;/p&gt;
&lt;h3 id=&quot;this-is-now&quot;&gt;This is Now&lt;/h3&gt;
&lt;p&gt;2003 marks the midpoint of Google&amp;#8217;s 10 year ascendence. Since then Williams has faded but &lt;a href=&quot;http://www.wordspy.com/words/google.asp&quot;&gt;Word Spy still lists google&lt;/a&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;To search for information on the Web, particularly by using the Google search engine; to search the Web for information related to a new or potential girlfriend or boyfriend.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;though it cautions&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Google&amp;trade; is a trademark identifying the search technology and services of Google Technologies Inc.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;I thought I&amp;#8217;d try a second source &amp;#8212; one which claims to be the definitive record of the English language &amp;#8212; and &lt;a href=&quot;http://tag.wordaligned.org/posts/the-oed-online-available-using-your-library-ticket&quot;&gt;oeded&lt;/a&gt; google. I discovered google is a verb, though not with the meaning we&amp;#8217;re searching for.&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://www.flickr.com/photos/thomasguest/2941753877/&quot; title=&quot;oed google by Thomas Guest, on Flickr&quot;&gt;&lt;img src=&quot;http://farm4.static.flickr.com/3155/2941753877_d9c2223fdf.jpg&quot; width=&quot;500&quot; height=&quot;177&quot; alt=&quot;oed google&quot; /&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;The &lt;a href=&quot;http://oed.com&quot;&gt;OED&lt;/a&gt; reckons Googling still merits a capital, even if a citation omits it.&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://www.flickr.com/photos/thomasguest/2942611906/&quot; title=&quot;OED Google by Thomas Guest, on Flickr&quot;&gt;&lt;img src=&quot;http://farm4.static.flickr.com/3053/2942611906_9cf2c987b0.jpg&quot; width=&quot;500&quot; height=&quot;323&quot; alt=&quot;OED Google&quot; /&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h3 id=&quot;google-at-10&quot;&gt;Google at 10&lt;/h3&gt;
&lt;p&gt;&lt;a href=&quot;http://www.google.com/tenthbirthday&quot;&gt;Google turned 10 this year&lt;/a&gt;. As the &lt;a href=&quot;http://news.bbc.co.uk/1/hi/business/7597599.stm&quot;&gt;beeb reports&lt;/a&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;People don&amp;#8217;t search the internet any more, they google it.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;a href=&quot;http://www.skrenta.com/2007/01/winnertakeall_google_and_the_t.html&quot;&gt;Rich Skrenta&lt;/a&gt; goes further&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Google is the start page for the Internet&lt;/strong&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;(Surely that should be &lt;strong&gt;i&lt;/strong&gt;nternet?)&lt;/p&gt;
&lt;p&gt;As part of the birthday celebrations, you can &lt;a href=&quot;http://googleblog.blogspot.com/2008/09/2001-search-odyssey.html&quot;&gt;Google! just like you did back in 2001&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://www.google.com/search2001.html&quot;&gt;&lt;img src=&quot;http://www.google.com/google.jpg&quot; alt=&quot;Google! 2001&quot;/&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;The search &lt;em&gt;experience&lt;/em&gt; has barely changed &amp;#8212; you get the result you want within milliseconds &amp;#8212; but how &lt;a href=&quot;http://www.google.com/search?q=yahoo!&quot;&gt;pass&amp;eacute;e the exclamation mark seems!&lt;/a&gt;&lt;/p&gt;
&lt;h3 id=&quot;small-changes&quot;&gt;Small changes&lt;/h3&gt;
&lt;p&gt;&lt;a href=&quot;http://blogoscoped.com/archive/2008-05-30-n48.html&quot;&gt;&lt;img style=&quot;float:right;&quot; src=&quot;http://blogoscoped.com/files/google-new-favicon.png&quot; alt=&quot;Favicons&quot;/&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;In &lt;a href=&quot;http://googleblog.blogspot.com/2008/06/one-fish-two-fish-red-fish-blue-fish.html&quot;&gt;a post&lt;/a&gt; on Google&amp;#8217;s corporate blog Marissa Mayer and Micheal Lopez describe a tiny but significant change: the Google favicon, formerly a BIG Google&amp;trade; G, has become a little google g. In the space of just 256 understated pixels the company asserts its claim to the internet.&lt;/p&gt;
&lt;h3 id=&quot;do-no-evil&quot;&gt;Do no evil&lt;/h3&gt;
&lt;p&gt;Jeff Atwood &lt;a href=&quot;http://www.codinghorror.com/blog/archives/001174.html&quot;&gt;recoils at Google&amp;#8217;s power&lt;/a&gt;:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Google&amp;#8217;s current position as &lt;a href=&quot;http://www.skrenta.com/2007/01/winnertakeall_google_and_the_t.html&quot;&gt;the start page for the internet&lt;/a&gt; kind of scares the crap out of me, in a way that Microsoft&amp;#8217;s dominance over the desktop PC never did.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Should we be scared? Certainly the &lt;a href=&quot;http://www.google.com/search?q=do+no+evil&quot;&gt;&amp;#8220;do no evil&amp;#8221;&lt;/a&gt; motto has changed from being precocious to portentous. The company which, in 2004, &lt;a href=&quot;http://www.google.com/search?q=horoscopes+financial+advice+chat&quot;&gt;&amp;#8220;does not do horoscopes, financial advice or chat&amp;#8221;&lt;/a&gt; has expanded its portfolio.&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://googlesystem.blogspot.com/2006/03/horoscopes-financial-advice-chat.html&quot;&gt;&lt;img src=&quot;http://photos1.blogger.com/blogger/7506/607/400/10things.0.jpg&quot; alt=&quot;Google does horoscopes financial advice and chat&quot;/&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;It&amp;#8217;s true. I sign into Google whenever I&amp;#8217;m online. The search engine, I take for granted: I switch browsers more often than search engines, and indeed when Chrome is ported to my platform it may well supplant Firefox as my browser of choice. Gmail, Google reader and Google maps supply me with content. Many of the blogs I read are served by &lt;a href=&quot;http://blogger.com&quot;&gt;blogger.com&lt;/a&gt; and most publish feeds via &lt;a href=&quot;http://feedburner.com&quot;&gt;Feedburner&lt;/a&gt;: both Google properties. All these services are best in class, or at least contenders; all are paid for by advertising. And if I don&amp;#8217;t like it, the competition is just a click away.&lt;/p&gt;
&lt;p&gt;On the internet there&amp;#8217;s little evidence of menace. The googlebot crawls discreetly from site to site, visible only to webmasters, harvesting pages which are bundled into fresh new search indexes at the googlefarm. On the streets the &lt;a href=&quot;http://tag.wordaligned.org/posts/google-street-view-is-watching-you&quot;&gt;google surveillance machines&lt;/a&gt; are more tangible, more threatening. Being offline is no longer an option.&lt;/p&gt;
&lt;h3 id=&quot;so-what-does-begin-with-g&quot;&gt;So what does begin with G?&lt;/h3&gt;
&lt;div class=&quot;amazon&quot;&gt;&lt;a href=&quot;http://www.amazon.com/gp/product/0679882812?ie=UTF8&amp;amp;tag=wordalig-20&quot;&gt;&lt;img src=&quot;http://wordaligned.org/images/dr-seuss-abc.jpg&quot; alt=&quot;Dr Seuss&#x27;s ABC&quot;/&gt;&lt;/a&gt;&lt;/div&gt;

&lt;p&gt;The &lt;a href=&quot;http://oed.com&quot;&gt;OED&lt;/a&gt; may be definitive but when it comes to big and little letters another reference has been more formative. The title of this post draws inspiration from &lt;a href=&quot;http://www.amazon.com/gp/product/0679882812?ie=UTF8&amp;amp;tag=wordalig-20&quot;&gt;Dr. Seuss&amp;#8217;s ABC&lt;/a&gt;, a classic children&amp;#8217;s book originally published in 1963, a year when Google&amp;#8217;s founders had yet to be born. The ABC has this to say about BIG G little g&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;A B C D &lt;/p&gt;
&lt;p&gt;E F G &lt;/p&gt;
&lt;p&gt;Goat&lt;/p&gt;
&lt;p&gt;girl&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;google googles&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;G&amp;#8230; g&amp;#8230; G&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;a href=&quot;http://www.flickr.com/photos/thomasguest/3504658289/&quot; title=&quot;goat girl google googles by Thomas Guest, on Flickr&quot;&gt;&lt;img src=&quot;http://farm4.static.flickr.com/3331/3504658289_fd30e3b5a0.jpg&quot; width=&quot;500&quot; height=&quot;338&quot; alt=&quot;goat girl google googles&quot; /&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Oops, my mistake, that should have read&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;googoo goggles&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Hang on though! Rotate the goggles by 90&amp;deg; and they look suspiciously like Google&amp;#8217;s new favicon.&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://www.flickr.com/photos/thomasguest/2942568508/&quot; title=&quot;googoogoggles by Thomas Guest, on Flickr&quot;&gt;&lt;img src=&quot;http://farm4.static.flickr.com/3213/2942568508_d138523625_t.jpg&quot; width=&quot;60&quot; height=&quot;100&quot; alt=&quot;googoogoggles&quot; /&gt;&lt;/a&gt;&lt;img src=&quot;http://wordaligned.org/images/google-favicon.png&quot; height=&quot;100&quot; alt=&quot;Google favicon&quot;/&gt;&lt;/p&gt;</description>
<dc:date>2008-10-15</dc:date>
<guid>http://wordaligned.org/articles/big-g-little-g</guid>
<author>tag@wordaligned.org (Thomas Guest)</author>
<link>http://wordaligned.org/articles/big-g-little-g</link>
<category>Google</category>
</item>

<item>
<title>Eurovision 2008 charts</title>
<description>&lt;p&gt;Last time I visited the &lt;a href=&quot;http://code.google.com/apis/chart/&quot;&gt;Google chart API&lt;/a&gt; I discovered &lt;a href=&quot;http://code.google.com/apis/chart/#maps&quot; title=&quot;Google chart API, map section&quot;&gt;maps had been added&lt;/a&gt;. Since then I&amp;#8217;ve been itching to use them. &lt;a href=&quot;http://www.eurovision.tv/&quot;&gt;Eurovision 2008&lt;/a&gt; got me scratching that itch.&lt;/p&gt;
&lt;p&gt;&lt;img title=&quot;Serbia scored 160 points&quot; src=&quot;http://chart.apis.google.com/chart?cht=t&amp;amp;chtm=europe&amp;amp;chld=FRIEISESGBDKDECHBECYNLSETRILGRPTNOFISIBAHREEMKHULVLTMTPLRORUAZUAALADBYBGMDCZAMGEMESMBDWFBFBBBLBMBNBOJPBIBJBTJMBVBWWSBRBSJEBZRWRELULRLSGWGUGTGSGQGPBHGYGGGFGDGAGNGMGLKWGIGHOMJOHTSVHKHNHMPRPSPWKRPYIQSHPFPGPEPKPHPNPMZMEHEGZAECVNSBETZWSAERMGMFMAMCUZMMMLMOMNMHUSUMMWMVMQMPMSMRAUUGMYMXMZAWAFFJFKFMFONINAVUNCNENFNGNZNPNRNUCKCICOCNCMCLCCCALBCGCFCDCXCRCVCUSZSYKGKESRKIKHKNKMSTSKSJKPSOSNSLSCKZKYSGSDDODMDJYEDZUYYTMUTZLCLATVTWTTLKLITNTOTLTMTJTKTHTFTGTDTCLYVAVCAEVEAGVGAIVIIRITAOANAQASARIMATIOINAXIDPAQA&amp;amp;chd=s:jAKAAAo9AZoeAAZAeA99yAyjAAFUjUKAZAFUFePA9AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA&amp;amp;chco=FFCC00,FFFFFF,000066&amp;amp;chf=bg,s,00FFCC&amp;amp;chs=440x220&quot; alt=&quot;Votes for Serbia&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;span id=&quot;continue-reading&quot;/&gt;&lt;/p&gt;
&lt;p&gt;As ever the &lt;a href=&quot;http://code.google.com/apis/chart/&quot;&gt;API&lt;/a&gt; is a delight to use, if somewhat restricted. You&amp;#8217;re limited to selecting a geographical area from a small set, but happily this set includes Europe. Chart data is supplied as a string of concatenated &lt;a href=&quot;http://www.iso.org/iso/country_codes/iso_3166_code_lists/english_country_names_and_code_elements.htm&quot;&gt;ISO 3166-1 alpha-2&lt;/a&gt; country codes (e.g. &amp;#8220;TV&amp;#8221; for &amp;#8220;Tuvalu&amp;#8221;), and the chart value for each data point (i.e. country) maps to a colour gradient. Your palette is limited: water masses get a fill colour; a pair of colours provides the gradient used for countries in the chart data string; and omitted countries get a default colour.&lt;/p&gt;
&lt;p&gt;To depict &lt;a href=&quot;http://www.eurovision.tv/&quot;&gt;Eurovision&lt;/a&gt; results I chose suitably lurid colours. The results for Serbia, who hosted the event in 2008, are shown at the top of this page. Serbia appears in yellowy-orange, and the mauvey-bluey colours show who voted for Serbia &amp;#8212; the darker the shade, the higher the vote&lt;a id=&quot;fn1link&quot; href=&quot;http://wordaligned.org/articles/eurovision-2008-charts#fn1&quot;&gt;&lt;sup&gt;&lt;a href=&quot;https://blog.codeship.com/building-minimal-docker-containers-for-go-applications/&quot;&gt;1&lt;/a&gt;&lt;/sup&gt;&lt;/a&gt;.&lt;/p&gt;
&lt;h3 id=&quot;the-maps&quot;&gt;The Maps&lt;/h3&gt;
&lt;p&gt;Here are the maps in order of &lt;a href=&quot;http://www.eurovision.tv/page/the-final-2008&quot;&gt;Eurovision 2008 scores&lt;/a&gt;. Hover your mouse over them to see the country and the score. If you&amp;#8217;re wondering why you can&amp;#8217;t see Israel, it&amp;#8217;s because Israel isn&amp;#8217;t in Europe.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://chart.apis.google.com/chart?cht=t&amp;amp;chtm=europe&amp;amp;chld=FRIEISESGBDKDECHBECYNLSETRILGRPTNOFISIBAHREEMKHULVLTMTPLROAZUAALADBYBGMDCZAMGECSMESMBDWFBFBBBLBMBNBOJPBIBJBTJMBVBWWSBRBSJEBZRWRELULRLSGWGUGTGSGQGPBHGYGGGFGDGAGNGMGLKWGIGHOMJOHTSVHKHNHMPRPSPWKRPYIQSHPFPGPEPKPHPNPMZMEHEGZAECVNSBETZWSAERMGMFMAMCUZMMMLMOMNMHUSUMMWMVMQMPMSMRAUUGMYMXMZAWAFFJFKFMFONINAVUNCNENFNGNZNPNRNUCKCICOCNCMCLCCCALBCGCFCDCXCRCVCUSZSYKGKESRKIKHKNKMSTSKSJKPSOSNSLSCKZKYSGSDDODMDJYEDZUYYTMUTZLCLATVTWTTLKLITNTOTLTMTJTKTHTFTGTDTCLYVAVCAEVEAGVGAIVIIRITAOANAQASARIMATIOINAXIDPAQA&amp;amp;chd=s:FZAZAAjAPoFAZ9jeZyjUe9ey99oeyo9eZ9eyj9oyoAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA&amp;amp;chco=FFCC00,FFFFFF,000066&amp;amp;chf=bg,s,00FFCC&amp;amp;chs=250x125&quot; title=&quot;Russia scored 272 points&quot; alt=&quot;Votes for Russia&quot;/&gt;
&lt;img src=&quot;http://chart.apis.google.com/chart?cht=t&amp;amp;chtm=europe&amp;amp;chld=FRIEISESGBDKDECHBECYNLSETRILGRPTNOFISIBAHREEMKHULVLTMTPLRORUAZALADBYBGMDCZAMGECSMESMBDWFBFBBBLBMBNBOJPBIBJBTJMBVBWWSBRBSJEBZRWRELULRLSGWGUGTGSGQGPBHGYGGGFGDGAGNGMGLKWGIGHOMJOHTSVHKHNHMPRPSPWKRPYIQSHPFPGPEPKPHPNPMZMEHEGZAECVNSBETZWSAERMGMFMAMCUZMMMLMOMNMHUSUMMWMVMQMPMSMRAUUGMYMXMZAWAFFJFKFMFONINAVUNCNENFNGNZNPNRNUCKCICOCNCMCLCCCALBCGCFCDCXCRCVCUSZSYKGKESRKIKHKNKMSTSKSJKPSOSNSLSCKZKYSGSDDODMDJYEDZUYYTMUTZLCLATVTWTTLKLITNTOTLTMTJTKTHTFTGTDTCLYVAVCAEVEAGVGAIVIIRITAOANAQASARIMATIOINAXIDPAQA&amp;amp;chd=s:AeZjZjAAFeAAoye9APKPjUUeyeyyPoyoeyjjoZyeUAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA&amp;amp;chco=FFCC00,FFFFFF,000066&amp;amp;chf=bg,s,00FFCC&amp;amp;chs=250x125&quot; title=&quot;Ukraine scored 230 points&quot; alt=&quot;Votes for Ukraine&quot;/&gt;
&lt;img src=&quot;http://chart.apis.google.com/chart?cht=t&amp;amp;chtm=europe&amp;amp;chld=FRIEISESGBDKDECHBECYNLSETRILPTNOFISIBAHREEMKHULVLTMTPLRORUAZUAALADBYBGMDCZAMGECSMESMBDWFBFBBBLBMBNBOJPBIBJBTJMBVBWWSBRBSJEBZRWRELULRLSGWGUGTGSGQGPBHGYGGGFGDGAGNGMGLKWGIGHOMJOHTSVHKHNHMPRPSPWKRPYIQSHPFPGPEPKPHPNPMZMEHEGZAECVNSBETZWSAERMGMFMAMCUZMMMLMOMNMHUSUMMWMVMQMPMSMRAUUGMYMXMZAWAFFJFKFMFONINAVUNCNENFNGNZNPNRNUCKCICOCNCMCLCCCALBCGCFCDCXCRCVCUSZSYKGKESRKIKHKNKMSTSKSJKPSOSNSLSCKZKYSGSDDODMDJYEDZUYYTMUTZLCLATVTWTTLKLITNTOTLTMTJTKTHTFTGTDTCLYVAVCAEVEAGVGAIVIIRITAOANAQASARIMATIOINAXIDPAQA&amp;amp;chd=s:PUAP9P9Zo9eFjZAAAejZFPoAAKP9PeK9oKyUZoUoe9AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA&amp;amp;chco=FFCC00,FFFFFF,000066&amp;amp;chf=bg,s,00FFCC&amp;amp;chs=250x125&quot; title=&quot;Greece scored 218 points&quot; alt=&quot;Votes for Greece&quot;/&gt;
&lt;img src=&quot;http://chart.apis.google.com/chart?cht=t&amp;amp;chtm=europe&amp;amp;chld=FRIEISESGBDKDECHBECYNLSETRILGRPTNOFISIBAHREEMKHULVLTMTPLRORUAZUAALADBYBGMDCZGECSMESMBDWFBFBBBLBMBNBOJPBIBJBTJMBVBWWSBRBSJEBZRWRELULRLSGWGUGTGSGQGPBHGYGGGFGDGAGNGMGLKWGIGHOMJOHTSVHKHNHMPRPSPWKRPYIQSHPFPGPEPKPHPNPMZMEHEGZAECVNSBETZWSAERMGMFMAMCUZMMMLMOMNMHUSUMMWMVMQMPMSMRAUUGMYMXMZAWAFFJFKFMFONINAVUNCNENFNGNZNPNRNUCKCICOCNCMCLCCCALBCGCFCDCXCRCVCUSZSYKGKESRKIKHKNKMSTSKSJKPSOSNSLSCKZKYSGSDDODMDJYEDZUYYTMUTZLCLATVTWTTLKLITNTOTLTMTJTKTHTFTGTDTCLYVAVCAEVEAGVGAIVIIRITAOANAQASARIMATIOINAXIDPAQA&amp;amp;chd=s:9AFyAAeA9y9Kyo9AAAZeAAFAAAA9U9AjKAjoK99ZFoAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA&amp;amp;chco=FFCC00,FFFFFF,000066&amp;amp;chf=bg,s,00FFCC&amp;amp;chs=250x125&quot; title=&quot;Armenia scored 199 points&quot; alt=&quot;Votes for Armenia&quot;/&gt;
&lt;img src=&quot;http://chart.apis.google.com/chart?cht=t&amp;amp;chtm=europe&amp;amp;chld=FRIEISESGBDKDECHBECYNLSETRILGRPTFISIBAHREEMKHULVLTMTPLRORUAZUAALADBYBGMDCZAMGECSMESMBDWFBFBBBLBMBNBOJPBIBJBTJMBVBWWSBRBSJEBZRWRELULRLSGWGUGTGSGQGPBHGYGGGFGDGAGNGMGLKWGIGHOMJOHTSVHKHNHMPRPSPWKRPYIQSHPFPGPEPKPHPNPMZMEHEGZAECVNSBETZWSAERMGMFMAMCUZMMMLMOMNMHUSUMMWMVMQMPMSMRAUUGMYMXMZAWAFFJFKFMFONINAVUNCNENFNGNZNPNRNUCKCICOCNCMCLCCCALBCGCFCDCXCRCVCUSZSYKGKESRKIKHKNKMSTSKSJKPSOSNSLSCKZKYSGSDDODMDJYEDZUYYTMUTZLCLATVTWTTLKLITNTOTLTMTJTKTHTFTGTDTCLYVAVCAEVEAGVGAIVIIRITAOANAQASARIMATIOINAXIDPAQA&amp;amp;chd=s:AjyejyAAKAU9KjKK9AKFoAUeUPoZZZejFZFZAjZUAjAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA&amp;amp;chco=FFCC00,FFFFFF,000066&amp;amp;chf=bg,s,00FFCC&amp;amp;chs=250x125&quot; title=&quot;Norway scored 182 points&quot; alt=&quot;Votes for Norway&quot;/&gt;
&lt;img src=&quot;http://chart.apis.google.com/chart?cht=t&amp;amp;chtm=europe&amp;amp;chld=FRIEISESGBDKDECHBECYNLSETRILGRPTNOFISIBAHREEMKHULVLTMTPLRORUAZUAALADBYBGMDCZAMGEMESMBDWFBFBBBLBMBNBOJPBIBJBTJMBVBWWSBRBSJEBZRWRELULRLSGWGUGTGSGQGPBHGYGGGFGDGAGNGMGLKWGIGHOMJOHTSVHKHNHMPRPSPWKRPYIQSHPFPGPEPKPHPNPMZMEHEGZAECVNSBETZWSAERMGMFMAMCUZMMMLMOMNMHUSUMMWMVMQMPMSMRAUUGMYMXMZAWAFFJFKFMFONINAVUNCNENFNGNZNPNRNUCKCICOCNCMCLCCCALBCGCFCDCXCRCVCUSZSYKGKESRKIKHKNKMSTSKSJKPSOSNSLSCKZKYSGSDDODMDJYEDZUYYTMUTZLCLATVTWTTLKLITNTOTLTMTJTKTHTFTGTDTCLYVAVCAEVEAGVGAIVIIRITAOANAQASARIMATIOINAXIDPAQA&amp;amp;chd=s:jAKAAAo9AZoeAAZAeA99yAyjAAFUjUKAZAFUFePA9AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA&amp;amp;chco=FFCC00,FFFFFF,000066&amp;amp;chf=bg,s,00FFCC&amp;amp;chs=250x125&quot; title=&quot;Serbia scored 160 points&quot; alt=&quot;Votes for Serbia&quot;/&gt;
&lt;img src=&quot;http://chart.apis.google.com/chart?cht=t&amp;amp;chtm=europe&amp;amp;chld=FRIEISESGBDKDECHBECYNLSEILGRPTNOFISIBAHREEMKHULVLTMTPLRORUAZUAALADBYBGMDCZAMGECSMESMBDWFBFBBBLBMBNBOJPBIBJBTJMBVBWWSBRBSJEBZRWRELULRLSGWGUGTGSGQGPBHGYGGGFGDGAGNGMGLKWGIGHOMJOHTSVHKHNHMPRPSPWKRPYIQSHPFPGPEPKPHPNPMZMEHEGZAECVNSBETZWSAERMGMFMAMCUZMMMLMOMNMHUSUMMWMVMQMPMSMRAUUGMYMXMZAWAFFJFKFMFONINAVUNCNENFNGNZNPNRNUCKCICOCNCMCLCCCALBCGCFCDCXCRCVCUSZSYKGKESRKIKHKNKMSTSKSJKPSOSNSLSCKZKYSGSDDODMDJYEDZUYYTMUTZLCLATVTWTTLKLITNTOTLTMTJTKTHTFTGTDTCLYVAVCAEVEAGVGAIVIIRITAOANAQASARIMATIOINAXIDPAQA&amp;amp;chd=s:yAAAoUyeyAyAAAAKUAoAAjZAAAAoK9UyAPZAAAeAAUAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA&amp;amp;chco=FFCC00,FFFFFF,000066&amp;amp;chf=bg,s,00FFCC&amp;amp;chs=250x125&quot; title=&quot;Turkey scored 138 points&quot; alt=&quot;Votes for Turkey&quot;/&gt;
&lt;img src=&quot;http://chart.apis.google.com/chart?cht=t&amp;amp;chtm=europe&amp;amp;chld=FRIEISESGBDKDECHBECYNLSETRILGRPTNOFISIBAHREEMKHULVLTMTPLRORUUAALADBYBGMDCZAMGECSMESMBDWFBFBBBLBMBNBOJPBIBJBTJMBVBWWSBRBSJEBZRWRELULRLSGWGUGTGSGQGPBHGYGGGFGDGAGNGMGLKWGIGHOMJOHTSVHKHNHMPRPSPWKRPYIQSHPFPGPEPKPHPNPMZMEHEGZAECVNSBETZWSAERMGMFMAMCUZMMMLMOMNMHUSUMMWMVMQMPMSMRAUUGMYMXMZAWAFFJFKFMFONINAVUNCNENFNGNZNPNRNUCKCICOCNCMCLCCCALBCGCFCDCXCRCVCUSZSYKGKESRKIKHKNKMSTSKSJKPSOSNSLSCKZKYSGSDDODMDJYEDZUYYTMUTZLCLATVTWTTLKLITNTOTLTMTJTKTHTFTGTDTCLYVAVCAEVEAGVGAIVIIRITAOANAQASARIMATIOINAXIDPAQA&amp;amp;chd=s:AAAAAAFAjAKA9PPAAAFAAAo9UjAjKyyAjoPoyAjAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA&amp;amp;chco=FFCC00,FFFFFF,000066&amp;amp;chf=bg,s,00FFCC&amp;amp;chs=250x125&quot; title=&quot;Azerbaijan scored 132 points&quot; alt=&quot;Votes for Azerbaijan&quot;/&gt;
&lt;img src=&quot;http://chart.apis.google.com/chart?cht=t&amp;amp;chtm=europe&amp;amp;chld=FRIEISESGBDKDECHBECYNLSETRGRPTNOFISIBAHREEMKHULVLTMTPLRORUAZUAALADBYBGMDCZAMGECSMESMBDWFBFBBBLBMBNBOJPBIBJBTJMBVBWWSBRBSJEBZRWRELULRLSGWGUGTGSGQGPBHGYGGGFGDGAGNGMGLKWGIGHOMJOHTSVHKHNHMPRPSPWKRPYIQSHPFPGPEPKPHPNPMZMEHEGZAECVNSBETZWSAERMGMFMAMCUZMMMLMOMNMHUSUMMWMVMQMPMSMRAUUGMYMXMZAWAFFJFKFMFONINAVUNCNENFNGNZNPNRNUCKCICOCNCMCLCCCALBCGCFCDCXCRCVCUSZSYKGKESRKIKHKNKMSTSKSJKPSOSNSLSCKZKYSGSDDODMDJYEDZUYYTMUTZLCLATVTWTTLKLITNTOTLTMTJTKTHTFTGTDTCLYVAVCAEVEAGVGAIVIIRITAOANAQASARIMATIOINAXIDPAQA&amp;amp;chd=s:eAAAAAPFZKPAAFAPoPZKAAPAPAZeejZUAUKeAePjZyAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA&amp;amp;chco=FFCC00,FFFFFF,000066&amp;amp;chf=bg,s,00FFCC&amp;amp;chs=250x125&quot; title=&quot;Israel scored 124 points&quot; alt=&quot;Votes for Israel&quot;/&gt;
&lt;img src=&quot;http://chart.apis.google.com/chart?cht=t&amp;amp;chtm=europe&amp;amp;chld=FRIEISESGBDKDECHBECYNLSETRILGRPTNOFISIHREEMKHULVLTMTPLRORUAZUAALADBYBGMDCZAMGECSMESMBDWFBFBBBLBMBNBOJPBIBJBTJMBVBWWSBRBSJEBZRWRELULRLSGWGUGTGSGQGPBHGYGGGFGDGAGNGMGLKWGIGHOMJOHTSVHKHNHMPRPSPWKRPYIQSHPFPGPEPKPHPNPMZMEHEGZAECVNSBETZWSAERMGMFMAMCUZMMMLMOMNMHUSUMMWMVMQMPMSMRAUUGMYMXMZAWAFFJFKFMFONINAVUNCNENFNGNZNPNRNUCKCICOCNCMCLCCCALBCGCFCDCXCRCVCUSZSYKGKESRKIKHKNKMSTSKSJKPSOSNSLSCKZKYSGSDDODMDJYEDZUYYTMUTZLCLATVTWTTLKLITNTOTLTMTJTKTHTFTGTDTCLYVAVCAEVEAGVGAIVIIRITAOANAQASARIMATIOINAXIDPAQA&amp;amp;chd=s:KKAAAKZjAAjyeAAAyey9AZAAAAAAAPAAAAAAFAA9yAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA&amp;amp;chco=FFCC00,FFFFFF,000066&amp;amp;chf=bg,s,00FFCC&amp;amp;chs=250x125&quot; title=&quot;Bosnia and Herzegovina scored 110 points&quot; alt=&quot;Votes for Bosnia and Herzegovina&quot;/&gt;
&lt;img src=&quot;http://chart.apis.google.com/chart?cht=t&amp;amp;chtm=europe&amp;amp;chld=FRIEISESGBDKDECHBECYNLSETRILGRPTNOFISIBAHREEMKHULTMTPLRORUAZUAALADBYBGMDCZAMGECSMESMBDWFBFBBBLBMBNBOJPBIBJBTJMBVBWWSBRBSJEBZRWRELULRLSGWGUGTGSGQGPBHGYGGGFGDGAGNGMGLKWGIGHOMJOHTSVHKHNHMPRPSPWKRPYIQSHPFPGPEPKPHPNPMZMEHEGZAECVNSBETZWSAERMGMFMAMCUZMMMLMOMNMHUSUMMWMVMQMPMSMRAUUGMYMXMZAWAFFJFKFMFONINAVUNCNENFNGNZNPNRNUCKCICOCNCMCLCCCALBCGCFCDCXCRCVCUSZSYKGKESRKIKHKNKMSTSKSJKPSOSNSLSCKZKYSGSDDODMDJYEDZUYYTMUTZLCLATVTWTTLKLITNTOTLTMTJTKTHTFTGTDTCLYVAVCAEVEAGVGAIVIIRITAOANAQASARIMATIOINAXIDPAQA&amp;amp;chd=s:A9UKyeAAAAAPAAAoAAAAUjAAyjAAAAAAKAAAPAKAPAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA&amp;amp;chco=FFCC00,FFFFFF,000066&amp;amp;chf=bg,s,00FFCC&amp;amp;chs=250x125&quot; title=&quot;Latvia scored 83 points&quot; alt=&quot;Votes for Latvia&quot;/&gt;
&lt;img src=&quot;http://chart.apis.google.com/chart?cht=t&amp;amp;chtm=europe&amp;amp;chld=FRIEISESGBDKDECHBECYNLSETRILGRPTNOFISIBAHREEMKHULVLTMTPLRORUAZUAALADBYBGMDCZAMCSMESMBDWFBFBBBLBMBNBOJPBIBJBTJMBVBWWSBRBSJEBZRWRELULRLSGWGUGTGSGQGPBHGYGGGFGDGAGNGMGLKWGIGHOMJOHTSVHKHNHMPRPSPWKRPYIQSHPFPGPEPKPHPNPMZMEHEGZAECVNSBETZWSAERMGMFMAMCUZMMMLMOMNMHUSUMMWMVMQMPMSMRAUUGMYMXMZAWAFFJFKFMFONINAVUNCNENFNGNZNPNRNUCKCICOCNCMCLCCCALBCGCFCDCXCRCVCUSZSYKGKESRKIKHKNKMSTSKSJKPSOSNSLSCKZKYSGSDDODMDJYEDZUYYTMUTZLCLATVTWTTLKLITNTOTLTMTJTKTHTFTGTDTCLYVAVCAEVEAGVGAIVIIRITAOANAQASARIMATIOINAXIDPAQA&amp;amp;chd=s:AAAAAAAAAjAAUKUFAAAAAZAAoZZAAjUoAAeAPUyAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA&amp;amp;chco=FFCC00,FFFFFF,000066&amp;amp;chf=bg,s,00FFCC&amp;amp;chs=250x125&quot; title=&quot;Georgia scored 83 points&quot; alt=&quot;Votes for Georgia&quot;/&gt;
&lt;img src=&quot;http://chart.apis.google.com/chart?cht=t&amp;amp;chtm=europe&amp;amp;chld=FRIEISESGBDKDECHBECYNLSETRILGRNOFISIBAHREEMKHULVLTMTPLRORUAZUAALADBYBGMDCZAMGECSMESMBDWFBFBBBLBMBNBOJPBIBJBTJMBVBWWSBRBSJEBZRWRELULRLSGWGUGTGSGQGPBHGYGGGFGDGAGNGMGLKWGIGHOMJOHTSVHKHNHMPRPSPWKRPYIQSHPFPGPEPKPHPNPMZMEHEGZAECVNSBETZWSAERMGMFMAMCUZMMMLMOMNMHUSUMMWMVMQMPMSMRAUUGMYMXMZAWAFFJFKFMFONINAVUNCNENFNGNZNPNRNUCKCICOCNCMCLCCCALBCGCFCDCXCRCVCUSZSYKGKESRKIKHKNKMSTSKSJKPSOSNSLSCKZKYSGSDDODMDJYEDZUYYTMUTZLCLATVTWTTLKLITNTOTLTMTJTKTHTFTGTDTCLYVAVCAEVEAGVGAIVIIRITAOANAQASARIMATIOINAXIDPAQA&amp;amp;chd=s:oAeoAAUyeAZAAAAAAAAPAAAAAAAAAAPAyAAAAAAFAZAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA&amp;amp;chco=FFCC00,FFFFFF,000066&amp;amp;chf=bg,s,00FFCC&amp;amp;chs=250x125&quot; title=&quot;Portugal scored 69 points&quot; alt=&quot;Votes for Portugal&quot;/&gt;
&lt;img src=&quot;http://chart.apis.google.com/chart?cht=t&amp;amp;chtm=europe&amp;amp;chld=FRIEESGBDKDECHBECYNLSETRILGRPTNOFISIBAHREEMKHULVLTMTPLRORUAZUAALADBYBGMDCZAMGECSMESMBDWFBFBBBLBMBNBOJPBIBJBTJMBVBWWSBRBSJEBZRWRELULRLSGWGUGTGSGQGPBHGYGGGFGDGAGNGMGLKWGIGHOMJOHTSVHKHNHMPRPSPWKRPYIQSHPFPGPEPKPHPNPMZMEHEGZAECVNSBETZWSAERMGMFMAMCUZMMMLMOMNMHUSUMMWMVMQMPMSMRAUUGMYMXMZAWAFFJFKFMFONINAVUNCNENFNGNZNPNRNUCKCICOCNCMCLCCCALBCGCFCDCXCRCVCUSZSYKGKESRKIKHKNKMSTSKSJKPSOSNSLSCKZKYSGSDDODMDJYEDZUYYTMUTZLCLATVTWTTLKLITNTOTLTMTJTKTHTFTGTDTCLYVAVCAEVEAGVGAIVIIRITAOANAQASARIMATIOINAXIDPAQA&amp;amp;chd=s:AAUe9AAAAAoAUAjojAAAAAAKAeAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA&amp;amp;chco=FFCC00,FFFFFF,000066&amp;amp;chf=bg,s,00FFCC&amp;amp;chs=250x125&quot; title=&quot;Iceland scored 64 points&quot; alt=&quot;Votes for Iceland&quot;/&gt;
&lt;img src=&quot;http://chart.apis.google.com/chart?cht=t&amp;amp;chtm=europe&amp;amp;chld=FRIEISESGBDECHBECYNLSETRILGRPTNOFISIBAHREEMKHULVLTMTPLRORUAZUAALADBYBGMDCZAMGECSMESMBDWFBFBBBLBMBNBOJPBIBJBTJMBVBWWSBRBSJEBZRWRELULRLSGWGUGTGSGQGPBHGYGGGFGDGAGNGMGLKWGIGHOMJOHTSVHKHNHMPRPSPWKRPYIQSHPFPGPEPKPHPNPMZMEHEGZAECVNSBETZWSAERMGMFMAMCUZMMMLMOMNMHUSUMMWMVMQMPMSMRAUUGMYMXMZAWAFFJFKFMFONINAVUNCNENFNGNZNPNRNUCKCICOCNCMCLCCCALBCGCFCDCXCRCVCUSZSYKGKESRKIKHKNKMSTSKSJKPSOSNSLSCKZKYSGSDDODMDJYEDZUYYTMUTZLCLATVTWTTLKLITNTOTLTMTJTKTHTFTGTDTCLYVAVCAEVEAGVGAIVIIRITAOANAQASARIMATIOINAXIDPAQA&amp;amp;chd=s:AF9APAAAAAZAAAZ9AAAAPAKjKUAAAAAAAAAAKAAAAKAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA&amp;amp;chco=FFCC00,FFFFFF,000066&amp;amp;chf=bg,s,00FFCC&amp;amp;chs=250x125&quot; title=&quot;Denmark scored 60 points&quot; alt=&quot;Votes for Denmark&quot;/&gt;
&lt;img src=&quot;http://chart.apis.google.com/chart?cht=t&amp;amp;chtm=europe&amp;amp;chld=FRIEISESGBDKDECHBECYNLSETRILGRPTNOFISIBAHREEMKHULVLTMTPLRORUAZUAADBYBGMDCZAMGECSMESMBDWFBFBBBLBMBNBOJPBIBJBTJMBVBWWSBRBSJEBZRWRELULRLSGWGUGTGSGQGPBHGYGGGFGDGAGNGMGLKWGIGHOMJOHTSVHKHNHMPRPSPWKRPYIQSHPFPGPEPKPHPNPMZMEHEGZAECVNSBETZWSAERMGMFMAMCUZMMMLMOMNMHUSUMMWMVMQMPMSMRAUUGMYMXMZAWAFFJFKFMFONINAVUNCNENFNGNZNPNRNUCKCICOCNCMCLCCCALBCGCFCDCXCRCVCUSZSYKGKESRKIKHKNKMSTSKSJKPSOSNSLSCKZKYSGSDDODMDJYEDZUYYTMUTZLCLATVTWTTLKLITNTOTLTMTJTKTHTFTGTDTCLYVAVCAEVEAGVGAIVIIRITAOANAQASARIMATIOINAXIDPAQA&amp;amp;chd=s:AAAAAAAoAAAAFAyAAAUFoA9AAAAAAAFAAAAAAAAAjPAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA&amp;amp;chco=FFCC00,FFFFFF,000066&amp;amp;chf=bg,s,00FFCC&amp;amp;chs=250x125&quot; title=&quot;Albania scored 55 points&quot; alt=&quot;Votes for Albania&quot;/&gt;
&lt;img src=&quot;http://chart.apis.google.com/chart?cht=t&amp;amp;chtm=europe&amp;amp;chld=FRIEISGBDKDECHBECYNLSETRILGRPTNOFISIBAHREEMKHULVLTMTPLRORUAZUAALADBYBGMDCZAMGECSMESMBDWFBFBBBLBMBNBOJPBIBJBTJMBVBWWSBRBSJEBZRWRELULRLSGWGUGTGSGQGPBHGYGGGFGDGAGNGMGLKWGIGHOMJOHTSVHKHNHMPRPSPWKRPYIQSHPFPGPEPKPHPNPMZMEHEGZAECVNSBETZWSAERMGMFMAMCUZMMMLMOMNMHUSUMMWMVMQMPMSMRAUUGMYMXMZAWAFFJFKFMFONINAVUNCNENFNGNZNPNRNUCKCICOCNCMCLCCCALBCGCFCDCXCRCVCUSZSYKGKESRKIKHKNKMSTSKSJKPSOSNSLSCKZKYSGSDDODMDJYEDZUYYTMUTZLCLATVTWTTLKLITNTOTLTMTJTKTHTFTGTDTCLYVAVCAEVEAGVGAIVIIRITAOANAQASARIMATIOINAXIDPAQA&amp;amp;chd=s:ZAAFFAUUUAAPAoyAFAAAAAAAAAAAAAAF9AAAAFAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA&amp;amp;chco=FFCC00,FFFFFF,000066&amp;amp;chf=bg,s,00FFCC&amp;amp;chs=250x125&quot; title=&quot;Spain scored 55 points&quot; alt=&quot;Votes for Spain&quot;/&gt;
&lt;img src=&quot;http://chart.apis.google.com/chart?cht=t&amp;amp;chtm=europe&amp;amp;chld=FRIEISESGBDKDECHBECYNLTRILGRPTNOFISIBAHREEMKHULVLTMTPLRORUAZUAALADBYBGMDCZAMGECSMESMBDWFBFBBBLBMBNBOJPBIBJBTJMBVBWWSBRBSJEBZRWRELULRLSGWGUGTGSGQGPBHGYGGGFGDGAGNGMGLKWGIGHOMJOHTSVHKHNHMPRPSPWKRPYIQSHPFPGPEPKPHPNPMZMEHEGZAECVNSBETZWSAERMGMFMAMCUZMMMLMOMNMHUSUMMWMVMQMPMSMRAUUGMYMXMZAWAFFJFKFMFONINAVUNCNENFNGNZNPNRNUCKCICOCNCMCLCCCALBCGCFCDCXCRCVCUSZSYKGKESRKIKHKNKMSTSKSJKPSOSNSLSCKZKYSGSDDODMDJYEDZUYYTMUTZLCLATVTWTTLKLITNTOTLTMTJTKTHTFTGTDTCLYVAVCAEVEAGVGAIVIIRITAOANAQASARIMATIOINAXIDPAQA&amp;amp;chd=s:AAPFAoAAAFAAFAAjZAAAKAFAF9AAAAAPAAAAAAAKAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA&amp;amp;chco=FFCC00,FFFFFF,000066&amp;amp;chf=bg,s,00FFCC&amp;amp;chs=250x125&quot; title=&quot;Sweden scored 47 points&quot; alt=&quot;Votes for Sweden&quot;/&gt;
&lt;img src=&quot;http://chart.apis.google.com/chart?cht=t&amp;amp;chtm=europe&amp;amp;chld=IEISESGBDKDECHBECYNLSETRILGRPTNOFISIBAHREEMKHULVLTMTPLRORUAZUAALADBYBGMDCZAMGECSMESMBDWFBFBBBLBMBNBOJPBIBJBTJMBVBWWSBRBSJEBZRWRELULRLSGWGUGTGSGQGPBHGYGGGFGDGAGNGMGLKWGIGHOMJOHTSVHKHNHMPRPSPWKRPYIQSHPFPGPEPKPHPNPMZMEHEGZAECVNSBETZWSAERMGMFMAMCUZMMMLMOMNMHUSUMMWMVMQMPMSMRAUUGMYMXMZAWAFFJFKFMFONINAVUNCNENFNGNZNPNRNUCKCICOCNCMCLCCCALBCGCFCDCXCRCVCUSZSYKGKESRKIKHKNKMSTSKSJKPSOSNSLSCKZKYSGSDDODMDJYEDZUYYTMUTZLCLATVTWTTLKLITNTOTLTMTJTKTHTFTGTDTCLYVAVCAEVEAGVGAIVIIRITAOANAQASARIMATIOINAXIDPAQA&amp;amp;chd=s:AoAKZAAAAAUAAAAFKAAAeAAPoAFAAAAAPAAAAUAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA&amp;amp;chco=FFCC00,FFFFFF,000066&amp;amp;chf=bg,s,00FFCC&amp;amp;chs=250x125&quot; title=&quot;France scored 47 points&quot; alt=&quot;Votes for France&quot;/&gt;
&lt;img src=&quot;http://chart.apis.google.com/chart?cht=t&amp;amp;chtm=europe&amp;amp;chld=FRIEISESGBDKDECHBECYNLSETRILGRPTNOFISIBAHREEMKHULVLTMTPLRUAZUAALADBYBGMDCZAMGECSMESMBDWFBFBBBLBMBNBOJPBIBJBTJMBVBWWSBRBSJEBZRWRELULRLSGWGUGTGSGQGPBHGYGGGFGDGAGNGMGLKWGIGHOMJOHTSVHKHNHMPRPSPWKRPYIQSHPFPGPEPKPHPNPMZMEHEGZAECVNSBETZWSAERMGMFMAMCUZMMMLMOMNMHUSUMMWMVMQMPMSMRAUUGMYMXMZAWAFFJFKFMFONINAVUNCNENFNGNZNPNRNUCKCICOCNCMCLCCCALBCGCFCDCXCRCVCUSZSYKGKESRKIKHKNKMSTSKSJKPSOSNSLSCKZKYSGSDDODMDJYEDZUYYTMUTZLCLATVTWTTLKLITNTOTLTMTJTKTHTFTGTDTCLYVAVCAEVEAGVGAIVIIRITAOANAQASARIMATIOINAXIDPAQA&amp;amp;chd=s:UPA9AAAAAPAAAeAUAAAAAAAAAAAAAAAAAAA9AAAAAFAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA&amp;amp;chco=FFCC00,FFFFFF,000066&amp;amp;chf=bg,s,00FFCC&amp;amp;chs=250x125&quot; title=&quot;Romania scored 45 points&quot; alt=&quot;Votes for Romania&quot;/&gt;
&lt;img src=&quot;http://chart.apis.google.com/chart?cht=t&amp;amp;chtm=europe&amp;amp;chld=FRIEISESGBDKDECHBECYNLSETRILGRPTNOFISIBAEEMKHULVLTMTPLRORUAZUAALADBYBGMDCZAMGECSMESMBDWFBFBBBLBMBNBOJPBIBJBTJMBVBWWSBRBSJEBZRWRELULRLSGWGUGTGSGQGPBHGYGGGFGDGAGNGMGLKWGIGHOMJOHTSVHKHNHMPRPSPWKRPYIQSHPFPGPEPKPHPNPMZMEHEGZAECVNSBETZWSAERMGMFMAMCUZMMMLMOMNMHUSUMMWMVMQMPMSMRAUUGMYMXMZAWAFFJFKFMFONINAVUNCNENFNGNZNPNRNUCKCICOCNCMCLCCCALBCGCFCDCXCRCVCUSZSYKGKESRKIKHKNKMSTSKSJKPSOSNSLSCKZKYSGSDDODMDJYEDZUYYTMUTZLCLATVTWTTLKLITNTOTLTMTJTKTHTFTGTDTCLYVAVCAEVEAGVGAIVIIRITAOANAQASARIMATIOINAXIDPAQA&amp;amp;chd=s:AAAAAAKPAAAAAAAPAAoyAKAZAAAFFAFAAAAAAKFPKAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA&amp;amp;chco=FFCC00,FFFFFF,000066&amp;amp;chf=bg,s,00FFCC&amp;amp;chs=250x125&quot; title=&quot;Croatia scored 44 points&quot; alt=&quot;Votes for Croatia&quot;/&gt;
&lt;img src=&quot;http://chart.apis.google.com/chart?cht=t&amp;amp;chtm=europe&amp;amp;chld=FRIEISESGBDKDECHBECYNLSETRILGRPTNOSIBAHREEMKHULVLTMTPLRORUAZUAALADBYBGMDCZAMGECSMESMBDWFBFBBBLBMBNBOJPBIBJBTJMBVBWWSBRBSJEBZRWRELULRLSGWGUGTGSGQGPBHGYGGGFGDGAGNGMGLKWGIGHOMJOHTSVHKHNHMPRPSPWKRPYIQSHPFPGPEPKPHPNPMZMEHEGZAECVNSBETZWSAERMGMFMAMCUZMMMLMOMNMHUSUMMWMVMQMPMSMRAUUGMYMXMZAWAFFJFKFMFONINAVUNCNENFNGNZNPNRNUCKCICOCNCMCLCCCALBCGCFCDCXCRCVCUSZSYKGKESRKIKHKNKMSTSKSJKPSOSNSLSCKZKYSGSDDODMDJYEDZUYYTMUTZLCLATVTWTTLKLITNTOTLTMTJTKTHTFTGTDTCLYVAVCAEVEAGVGAIVIIRITAOANAQASARIMATIOINAXIDPAQA&amp;amp;chd=s:AAjAAAAAAAAjAAAAUAAAyAAFAAKAAAAAUAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA&amp;amp;chco=FFCC00,FFFFFF,000066&amp;amp;chf=bg,s,00FFCC&amp;amp;chs=250x125&quot; title=&quot;Finland scored 35 points&quot; alt=&quot;Votes for Finland&quot;/&gt;
&lt;img src=&quot;http://chart.apis.google.com/chart?cht=t&amp;amp;chtm=europe&amp;amp;chld=FRIEISESDKDECHBECYNLSETRILGRPTNOFISIBAHREEMKHULVLTMTPLRORUAZUAALADBYBGMDCZAMGECSMESMBDWFBFBBBLBMBNBOJPBIBJBTJMBVBWWSBRBSJEBZRWRELULRLSGWGUGTGSGQGPBHGYGGGFGDGAGNGMGLKWGIGHOMJOHTSVHKHNHMPRPSPWKRPYIQSHPFPGPEPKPHPNPMZMEHEGZAECVNSBETZWSAERMGMFMAMCUZMMMLMOMNMHUSUMMWMVMQMPMSMRAUUGMYMXMZAWAFFJFKFMFONINAVUNCNENFNGNZNPNRNUCKCICOCNCMCLCCCALBCGCFCDCXCRCVCUSZSYKGKESRKIKHKNKMSTSKSJKPSOSNSLSCKZKYSGSDDODMDJYEDZUYYTMUTZLCLATVTWTTLKLITNTOTLTMTJTKTHTFTGTDTCLYVAVCAEVEAGVGAIVIIRITAOANAQASARIMATIOINAXIDPAQA&amp;amp;chd=s:AoAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAeAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA&amp;amp;chco=FFCC00,FFFFFF,000066&amp;amp;chf=bg,s,00FFCC&amp;amp;chs=250x125&quot; title=&quot;United Kingdom scored 14 points&quot; alt=&quot;Votes for United Kingdom&quot;/&gt;
&lt;img src=&quot;http://chart.apis.google.com/chart?cht=t&amp;amp;chtm=europe&amp;amp;chld=FRIEISESGBDKCHBECYNLSETRILGRPTNOFISIBAHREEMKHULVLTMTPLRORUAZUAALADBYBGMDCZAMGECSMESMBDWFBFBBBLBMBNBOJPBIBJBTJMBVBWWSBRBSJEBZRWRELULRLSGWGUGTGSGQGPBHGYGGGFGDGAGNGMGLKWGIGHOMJOHTSVHKHNHMPRPSPWKRPYIQSHPFPGPEPKPHPNPMZMEHEGZAECVNSBETZWSAERMGMFMAMCUZMMMLMOMNMHUSUMMWMVMQMPMSMRAUUGMYMXMZAWAFFJFKFMFONINAVUNCNENFNGNZNPNRNUCKCICOCNCMCLCCCALBCGCFCDCXCRCVCUSZSYKGKESRKIKHKNKMSTSKSJKPSOSNSLSCKZKYSGSDDODMDJYEDZUYYTMUTZLCLATVTWTTLKLITNTOTLTMTJTKTHTFTGTDTCLYVAVCAEVEAGVGAIVIIRITAOANAQASARIMATIOINAXIDPAQA&amp;amp;chd=s:AAAAAAKAAAAAAAAAAAAAAAAAAAAAAAAAAA9AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA&amp;amp;chco=FFCC00,FFFFFF,000066&amp;amp;chf=bg,s,00FFCC&amp;amp;chs=250x125&quot; title=&quot;Germany scored 14 points&quot; alt=&quot;Votes for Germany&quot;/&gt;
&lt;img src=&quot;http://chart.apis.google.com/chart?cht=t&amp;amp;chtm=europe&amp;amp;chld=FRIEISESGBDKDECHBECYNLSETRILGRPTNOFISIBAHREEMKHULVLTMTRORUAZUAALADBYBGMDCZAMGECSMESMBDWFBFBBBLBMBNBOJPBIBJBTJMBVBWWSBRBSJEBZRWRELULRLSGWGUGTGSGQGPBHGYGGGFGDGAGNGMGLKWGIGHOMJOHTSVHKHNHMPRPSPWKRPYIQSHPFPGPEPKPHPNPMZMEHEGZAECVNSBETZWSAERMGMFMAMCUZMMMLMOMNMHUSUMMWMVMQMPMSMRAUUGMYMXMZAWAFFJFKFMFONINAVUNCNENFNGNZNPNRNUCKCICOCNCMCLCCCALBCGCFCDCXCRCVCUSZSYKGKESRKIKHKNKMSTSKSJKPSOSNSLSCKZKYSGSDDODMDJYEDZUYYTMUTZLCLATVTWTTLKLITNTOTLTMTJTKTHTFTGTDTCLYVAVCAEVEAGVGAIVIIRITAOANAQASARIMATIOINAXIDPAQA&amp;amp;chd=s:AyAAUAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA&amp;amp;chco=FFCC00,FFFFFF,000066&amp;amp;chf=bg,s,00FFCC&amp;amp;chs=250x125&quot; title=&quot;Poland scored 14 points&quot; alt=&quot;Votes for Poland&quot;/&gt;&lt;/p&gt;
&lt;h3 id=&quot;the-script&quot;&gt;The Script&lt;/h3&gt;
&lt;p&gt;Here&amp;#8217;s the script I used to generate the pictures. It&amp;#8217;s hacky, sub-optimal and packed with workarounds to get the job done. As &lt;a href=&quot;http://blog.plover.com/prog/perl/lines.html&quot;&gt;Mark Dominus&lt;/a&gt; puts it:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Not everything we do is a brilliant, diamond-like jewel, polished to a luminous gloss with pages torn from one of Donald Knuth&amp;#8217;s books.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;I do think the code also shows how adept Python is at working with XML (XHTML in this case) and text processing, and why every programmer should know at least one scripting language.&lt;/p&gt;
&lt;p&gt;As input it needs:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;the Wikipedia Eurovision 2008 &lt;a href=&quot;http://en.wikipedia.org/wiki/Eurovision_Song_Contest_2008&quot;&gt;page&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;the official list of &lt;a href=&quot;http://www.iso.org/iso/list-en1-semic-2.txt&quot;&gt;ISO-3166 alpha-2 codes&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&quot;typocode&quot;&gt;&lt;div class=&quot;codetitle&quot;&gt;Eurovision charts&lt;/div&gt;

&lt;pre class=&quot;prettyprint&quot;&gt;&amp;#x27;&amp;#x27;&amp;#x27;Generate Eurovision charts using Google chart API.

Method:
* get a mapping between country names and country codes
* find the final results table in the Wikipedia Eurovision page
* extract voting information from this table
* munge all this information into google chart URLs
&amp;#x27;&amp;#x27;&amp;#x27;
import string
import xml.dom

def internal_co_name(co_name):
    &amp;#x27;&amp;#x27;&amp;#x27;Convert a country name into a form used internally.

    We remove punctuation and convert to uppercase. This helps map
    between the official country names and the less standard ones used
    on the Wikipedia page.
    &amp;#x27;&amp;#x27;&amp;#x27;
    ascii = string.ascii_letters
    return &amp;#x27;&amp;#x27;.join(c.upper() for c in co_name if c in ascii)

def country_codes_dict(iso_3166_fp):
    &amp;#x27;&amp;#x27;&amp;#x27;Return a dict mapping country names to 3166-1-alpha-2 codes.

    We get these from the ISO website in a ISO-8859 encoded text file
    which contains a header followed by records of the form
    AFGHANISTAN;AF
    &amp;#x27;&amp;#x27;&amp;#x27;
    import re
    import codecs
    ccode_match = re.compile(r&quot;^([^;]+);(\w\w)&quot;, re.UNICODE).match
    lines = codecs.iterdecode(iso_3166_fp, &quot;iso-8859-1&quot;)
    co_codes = dict((internal_co_name(m.group(1)), m.group(2))
                    for m in map(ccode_match, lines) if m)
    # Add some shortened forms
    co_codes.update(dict(MACEDONIA=&quot;MK&quot;, BOSNIA=&quot;BA&quot;, RUSSIA=&quot;RU&quot;, MOLDOVA=&quot;MD&quot;))
    # Hack! Serbia should be SR but, as at 2008-05-28, the google
    # chart api seems to want the country code for the former Serbian
    # and Montenegro.  This line can be removed once the chart api
    # matches its documentation.
    co_codes[&quot;SERBIA&quot;] = &quot;CS&quot;
    return co_codes

def tree_walk(node):
    &amp;#x27;&amp;#x27;&amp;#x27;Recursively walk the nodes in a tree.&amp;#x27;&amp;#x27;&amp;#x27;
    yield node
    for node1 in node.childNodes:
        for node2 in tree_walk(node1):
            yield node2

def tree_find(root, pred):
    &amp;#x27;&amp;#x27;&amp;#x27;Return the first node for which the predicate holds, or None.&amp;#x27;&amp;#x27;&amp;#x27; 
    for node in tree_walk(root):
        if pred(node):
            return node

def next_sibling_find(node, pred):
    &amp;#x27;&amp;#x27;&amp;#x27;Return the first next-sibling node for which the predicate holds.&amp;#x27;&amp;#x27;&amp;#x27;
    while node.nextSibling:
        node = node.nextSibling
        if pred(node):
            return node

def children(node, name):
    &amp;#x27;&amp;#x27;&amp;#x27;Return (tag-)named child elements of a node.&amp;#x27;&amp;#x27;&amp;#x27;
    return node.getElementsByTagName(name)

def is_text(node):
    return node.nodeType == xml.dom.Node.TEXT_NODE

def is_element(node):
    return node.nodeType == xml.dom.Node.ELEMENT_NODE

def text(node):
    &amp;#x27;&amp;#x27;&amp;#x27;Return text from a node of the general form &amp;lt;td&amp;gt;&amp;lt;b&amp;gt;12&amp;lt;/b&amp;gt;&amp;lt;/td&amp;gt; or &amp;lt;td&amp;gt;0&amp;lt;/td&amp;gt;&amp;#x27;&amp;#x27;&amp;#x27;
    while not is_text(node) and node.childNodes:
        node = node.childNodes[0]
    return node.data if is_text(node) else None

def country_votes(tr):
    &amp;#x27;&amp;#x27;&amp;#x27;Convert a row from the results table.

    Returns country name, score and votes for that country.
    &amp;#x27;&amp;#x27;&amp;#x27;
    td = children(tr, &amp;#x27;td&amp;#x27;)
    co_name, score = text(td[0]), int(text(td[1]))
    votes = [int(text(cell)) for cell in td[2:] if text(cell)]
    return co_name, score, votes

def results(wiki_table, co_code_dict):
    &amp;#x27;&amp;#x27;&amp;#x27;Extract the results from the Wikipedia results table.

    Returns the column headings country codes and a list of votes.
    &amp;#x27;&amp;#x27;&amp;#x27;
    import operator
    second = operator.itemgetter(1)
    trs = children(wiki_table, &amp;#x27;tr&amp;#x27;)
    ths = children(trs[1], &amp;#x27;th&amp;#x27;)[1:]
    # The title of each column header &amp;#x27;a&amp;#x27; element looks like &quot;ESCFranceJ.svg&quot;
    # The [3:-5] slice converts this to &quot;France&quot;, and we then look up
    # the 3166 alpha-2 code
    ICN = internal_co_name
    cols = [co_code_dict[ICN(children(th, &amp;#x27;a&amp;#x27;)[0].getAttribute(&amp;#x27;title&amp;#x27;)[3:-5])]
            for th in ths]
    votes = sorted((country_votes(tr) for tr in trs[2:]), 
                   key=second, reverse=True)
    return cols, votes

def results_table(wiki_page):
    &amp;#x27;&amp;#x27;&amp;#x27;Return the results table from the Wikipedia Eurovision results.

    By inspection, this is the first table after the &quot;Final_2&quot; node.
    &amp;#x27;&amp;#x27;&amp;#x27;
    import xml.dom.minidom
    def final_2(n):
        return is_element(n) and n.getAttribute(&amp;#x27;id&amp;#x27;) == &amp;#x27;Final_2&amp;#x27;
    def htm_table(n):
        return is_element(n) and n.tagName == &amp;#x27;table&amp;#x27;
    doc = xml.dom.minidom.parse(wiki_page)
    node = tree_find(children(doc, &amp;#x27;body&amp;#x27;)[0], final_2)
    return next_sibling_find(node.parentNode, htm_table)

def eurovision_vote_map(co_name, co_codes, scores, hi_score, missing):
    &amp;#x27;&amp;#x27;&amp;#x27;Return the URL of a map showing Eurovision votes for a country.
    &amp;#x27;&amp;#x27;&amp;#x27;
    # Use simple text encoding
    simple = string.uppercase + string.lowercase + string.digits
    simple_hi_ix = len(simple) - 1
    mapurl = (
        &amp;#x27;http://chart.apis.google.com/chart?&amp;#x27;
        &amp;#x27;cht=t&amp;amp;chtm=europe&amp;amp;&amp;#x27;  # Map of Europe
        &amp;#x27;chld=%(countries)s&amp;amp;&amp;#x27; # String of country codes
        &amp;#x27;chd=s:%(values)s&amp;amp;&amp;#x27;   # Values for these countries, simple encoding
        &amp;#x27;chco=%(def_colour)s,%(lo_colour)s,%(hi_colour)s&amp;amp;&amp;#x27;
        &amp;#x27;chf=bg,s,%(sea_colour)s&amp;amp;&amp;#x27;
        &amp;#x27;chs=%(width)dx%(height)d&amp;#x27;)
    # Use a hack here to highlight the country being voted for.  Don&amp;#x27;t
    # include this country in the chart data, then it will get the
    # default colour. Assign all missing entries and zero scoring
    # entries the &amp;#x27;lo_colour&amp;#x27;.
    omit = internal_co_name(co_name)
    values = &amp;#x27;&amp;#x27;.join(simple[simple_hi_ix * score // hi_score] for
                     score in scores) + &amp;#x27;A&amp;#x27; * (len(missing)//2)
    countries = &amp;#x27;&amp;#x27;.join(c for c in co_codes if c != omit) + missing
    width, height = 250, 125 # The maximum map size is 440, 220
    def_colour, sea_colour = &amp;#x27;FFCC00&amp;#x27;, &amp;#x27;00FFCC&amp;#x27;
    lo_colour, hi_colour = &amp;#x27;FFFFFF&amp;#x27;, &amp;#x27;000066&amp;#x27;  
    return mapurl % locals()

def get_map_urls(wiki_results_fp, ccodes_fp):
    &amp;#x27;&amp;#x27;&amp;#x27;Return the URLs for Eurovision results charts, ordered by score.
    &amp;#x27;&amp;#x27;&amp;#x27;
    wiki_table = results_table(wiki_results_fp)
    co_codes = country_codes_dict(ccodes_fp)
    cols, votes = results(wiki_table, co_codes)
    # We only really need the countries which 1) weren&amp;#x27;t part of
    # Eurovision and 2) which appear in the Google chart of Europe, but
    # I don&amp;#x27;t have a definitive list of these. So just treat every
    # country in the world not in Eurovision as missing.
    missing = &amp;#x27;&amp;#x27;.join(set(co_codes.values()) - set(cols))
    hi_score = max(v for _, _, vv  in votes for v in vv)
    return &quot;\n&quot;.join(eurovision_vote_map(co_name, cols, vv, hi_score, missing)
                    for co_name, score, vv in votes)

if __name__ == &amp;#x27;__main__&amp;#x27;:
    # Download from: 
    # http://en.wikipedia.org/wiki/Eurovision_Song_Contest_2008
    # http://www.iso.org/iso/list-en1-semic-2.txt
    # (or use urllib.urlopen on these urls).
    print get_map_urls(open(&amp;#x27;Eurovision_Song_Contest_2008&amp;#x27;),
                       open(&amp;#x27;list-en1-semic-2.txt&amp;#x27;))

&lt;/pre&gt;

&lt;/div&gt;

&lt;h3 id=&quot;serbia-and-montenegro&quot;&gt;Serbia and Montenegro?&lt;/h3&gt;
&lt;p&gt;My program produced bizarre output at first: something was wrong with Serbia, and I assumed I&amp;#8217;d made an &lt;a href=&quot;http://wordaligned.org/articles/joined-output-and-the-fencepost-problem.html&quot;&gt;off-by-one error&lt;/a&gt;. As I write this (2008-05-29) there &lt;a href=&quot;http://groups.google.com/group/google-chart-api/browse_thread/thread/2e821469f810241e&quot;&gt;seems to be a problem&lt;/a&gt; with the way the google chart API handles the country code for Serbia, &amp;#8220;RS&amp;#8221;. That&amp;#8217;s why I&amp;#8217;ve substituted &amp;#8220;CS&amp;#8221;, the old code for Serbia and Montenegro &amp;#8212; a country which ceased to exist in 2006. I&amp;#8217;ll have to adjust the code as the situation (&lt;a href=&quot;http://www.google.co.uk/search?q=3166+serbia+and+montenegro&quot;&gt;both politically and googley&lt;/a&gt;) develops, since the maps which appear on this page are served live by google.&lt;/p&gt;
&lt;h3 id=&quot;terry-wogan&quot;&gt;Terry Wogan&lt;/h3&gt;
&lt;p&gt;I&amp;#8217;m not going to draw any conclusions from these charts except to say that I never thought I&amp;#8217;d mention Wogan on this site, let alone link to the &lt;a href=&quot;http://www.telegraph.co.uk/opinion/main.jhtml?xml=/opinion/2008/05/26/do2603.xml&quot;&gt;Telegraph&lt;/a&gt;. Eurovision voting is clearly a &lt;a href=&quot;http://www.theregister.co.uk/2008/05/06/eurovision_outrage/&quot;&gt;sensitive topic&lt;/a&gt;. I recommend a visit to &lt;a href=&quot;http://successfulsoftware.net/2008/05/26/is-the-eurovision-song-contest-rigged/&quot;&gt;this Andy Brice article&lt;/a&gt;, where he uses software similar to his &lt;a href=&quot;http://www.perfecttableplan.com/html/visualise_your_plan.html&quot;&gt;wedding table planner&lt;/a&gt; to render some more detailed voting maps. The analogy of all these countries having to sit next to each other for a musical event, like grumpy inlaws at a wedding, made me laugh.&lt;/p&gt;
&lt;p&gt;Andy Brice&amp;#8217;s pictures were produced with C++ and Qt following the same QA procedure that I used with the code for this article:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;I wrote some throwaway code to generate these images in C++ and Qt over a few hours on a wet bank holiday Sunday. QA amounted to &amp;#8216;that looks about right&amp;#8217;.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;hr /&gt;
&lt;p&gt;&lt;a id=&quot;fn1&quot; href=&quot;http://wordaligned.org/articles/eurovision-2008-charts#fn1link&quot;&gt;&lt;a href=&quot;https://blog.codeship.com/building-minimal-docker-containers-for-go-applications/&quot;&gt;1&lt;/a&gt;&lt;/a&gt; Yes, I am colour-blind!&lt;/p&gt;</description>
<dc:date>2008-05-29</dc:date>
<guid>http://wordaligned.org/articles/eurovision-2008-charts</guid>
<author>tag@wordaligned.org (Thomas Guest)</author>
<link>http://wordaligned.org/articles/eurovision-2008-charts</link>
<category>Google</category>
</item>

<item>
<title>Scatter pictures with Google Charts</title>
<description>&lt;p&gt;In a recent &lt;a href=&quot;http://www.mattcutts.com/blog/pacman-graph-in-google-chart-api/&quot;&gt;post on his blog&lt;/a&gt; Matt Cutts asks:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;I almost wanted to call this post &amp;#8220;Stupid Google Tricks&amp;#8221; :-) What fun diagrams can you imagine making with the &lt;a href=&quot;http://code.google.com/apis/chart/&quot;&gt;Google Charts Service&lt;/a&gt;?&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Here&amp;#8217;s a stupid trick: you can use the &lt;a href=&quot;http://www.pythonware.com/library/pil/handbook/&quot;&gt;Python Imaging Library&lt;/a&gt; to convert a picture into a URL which &lt;a href=&quot;http://code.google.com/apis/chart/&quot;&gt;Google charts&lt;/a&gt; will render as the original picture.&lt;/p&gt;
&lt;p&gt;Here&amp;#8217;s the original picture:&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://wordaligned.org/images/buttons/spider-bw-61.png&quot; alt=&quot;Spider&quot;/&gt;&lt;/p&gt;
&lt;p&gt;here&amp;#8217;s the version served up by Google charts:&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://chart.apis.google.com/chart?cht=s&amp;amp;chd=s:DDEEEEEEEEEEEEEFFFFFFFFFFFFFFGGGGGGGGGGGGHHHHHHHHHHHHHHIIIIIIIIIIIIIIIIIJJJJJJJJJJJJJJJKKKKKKKKKKLLLLLLLMMMMMMMMNNNNNNNNNNNNNNOOOOOOOOOOOOOOOOOOOOOOOOOPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQRRRRRRRRRRRRRRRRRRRSSSSSSSSSSSSSSSSSSSSTTTTTTTTTTTTTTTTTTUUUUUUUUUUUUUUUUUVVVVVVVVVVVVVVVVVWWWWWWWWWWWWWWWWWWWWWXXXXXXXXXXXXXXXXXXXXXXXXYYYYYYYYYYYYYYYYYYYYYYYYYYZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaabbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbccccccccccccccccccccccccccddddddddddddddddddddeeeeeeeeeeeeeeeeeeeeeeeefffffffffffffffffffgggggggggggggggghhhhhhhhhhhhhhhhhhhhiiiiiiiiiiiiiiiiiiiiijjjjjjjjjjjjjjjjjjjjjjjjjkkkkkkkkkkkkkkkkkkkkklllllllllllllllllllmmmmmmmmmmmmmmmmmmmmmnnnnnnnnnnnnnnnnnnnnoooooooooooooooooppppppppppppppppppqqqqqqqqqqqqqqqqqqqqrrrrrrrrrrrrrrrrrssssssssssssssssssssttttttttttttttttuuuuuuuuuuuuuuuuvvvvvvvvvvvvvwwwwwwwxxxxxxxyyyyyyyyzzzzzzzzzzzzzzz00000000000000111111111111111122222222222222333333333333444444444555556666777,YWaZYXWVUTSRQPObaZYXWVUTSRQPOsdcbaZUTSRQPutsrqplkjidcbavutsrqponmlkjiedcwvuqponmlkjihdcxwvonjihdcxwjihdcyxjihdcRzjihdcTSRQPNJHihgdcbaZYUTSRQPONMLKJIHGFtsrjihgfedcbaZYXWVUTSONMLKJIHGFEDvutsrqihgfedcbaZYXWVUTKIHGFEDCvutqpmlihgfedcWVUTSwvponmlkjihgfedVUTSRvqponmlkjihedcTSRQrqponmlkjihedSRQPsrqponmlkjedRQPOLysrqponmlkjdcRQPONMLKyxtsrqponmlkdcSRQPONMLKJyxtsrqponmldcbUTSRQPONMLKJyxtsrqponmlihgfedcbaZWVUTSPONMKJIyxwtsrqponmljihgfedcbaZYXWVUTPONJIHxwvutsrqponmkjihgfedcbaZYXWVUONMJIHGvusrqponmlkjifedcbZXONIHGFsrqponmlkjedcONMHGFE65432rqponmlkjedcONMGFED3210qponmlkjiedcONE10nmlkjigfedPONM0zonmlkjihgfedYXVPON0zonmjihgfeZYXWVUTPON0zqponmlihgfaZYXWVUTSRQPO0zyrqpnmlbaZYVUTSRQPOzytsrqpmlkcbaZTSRQPzyxwvutsrqmlkjcbaTSRQyxwvutsnmlkjicbUTSRQponmlkjihdcbWVUTSqponjihgdcbZYXWVUTrqponjihgfedcbaZYXWVsrqpjihgfedcbaZYXsrqjifedcbaZYXTSRQPOsrkjYXWVUTSRQPONsrkjYXWVUTSQPONMsrqkjXWVUONMLsrqkjihsrqkjihsrqjihgVsrqihgfZYXWVUTSsrqhgfeaZYXWVUsrqpogfedcbaZYXWsrqponfedcbaZYrqponmedcbaZonmlkedcbmlkdclkjijih&amp;amp;chm=s,000000,1,2.0,3.0,0&amp;amp;chs=186x186&quot; alt=&quot;Google Chart Spider&quot;/&gt;&lt;/p&gt;
&lt;p&gt;here&amp;#8217;s the code:&lt;/p&gt;
&lt;div class=&quot;typocode&quot;&gt;

&lt;pre class=&quot;prettyprint&quot;&gt;import Image
import string

def scatter_pixels(img_file):
    &quot;&quot;&quot;Return the URL of a scatter plot of the supplied image

    The image will be rendered square and black on white. Adapt the
    code if you want something else.
    &quot;&quot;&quot;
    # Use simple chart encoding. To make things really simple
    # use a square image where each X or Y position corresponds
    # to a single encode value.
    simple = string.uppercase + string.lowercase + string.digits
    rsimple = simple[::-1] # Google charts Y reverses PIL Y
    w = len(simple)
    W = w * 3
    img = Image.open(img_file).resize((w, w)).convert(&quot;1&quot;)
    pels = img.load()
    black_pels = [(x, y) for x in range(w) for y in range(w)
                  if pels[x, y] == 0]
    xs = &quot;&quot;.join(simple[x] for x, _ in black_pels)
    ys = &quot;&quot;.join(rsimple[y] for _, y in black_pels)
    sqside = 3.0
    return (
        &quot;http://chart.apis.google.com/chart?&quot;
        &quot;cht=s&amp;amp;&quot;                          # Draw a scatter graph
        &quot;chd=s:%(xs)s,%(ys)s&amp;amp;&quot;            # using simple encoding and
        &quot;chm=s,000000,1,2.0,%(sqside)r,0&amp;amp;&quot;# square black markers
        &quot;chs=%(W)rx%(W)r&quot;                 # at this size.
        ) % locals()

&lt;/pre&gt;

&lt;/div&gt;

&lt;p&gt;and here&amp;#8217;s the url it generates:&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://chart.apis.google.com/chart?cht=s&amp;amp;chd=s:DDEEEEEEEEEEEEEFFFFFFFFFFFFFFGGGGGGGGGGGGHHHHHHHHHHHHHHIIIIIIIIIIIIIIIIIJJJJJJJJJJJJJJJKKKKKKKKKKLLLLLLLMMMMMMMMNNNNNNNNNNNNNNOOOOOOOOOOOOOOOOOOOOOOOOOPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQRRRRRRRRRRRRRRRRRRRSSSSSSSSSSSSSSSSSSSSTTTTTTTTTTTTTTTTTTUUUUUUUUUUUUUUUUUVVVVVVVVVVVVVVVVVWWWWWWWWWWWWWWWWWWWWWXXXXXXXXXXXXXXXXXXXXXXXXYYYYYYYYYYYYYYYYYYYYYYYYYYZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaabbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbccccccccccccccccccccccccccddddddddddddddddddddeeeeeeeeeeeeeeeeeeeeeeeefffffffffffffffffffgggggggggggggggghhhhhhhhhhhhhhhhhhhhiiiiiiiiiiiiiiiiiiiiijjjjjjjjjjjjjjjjjjjjjjjjjkkkkkkkkkkkkkkkkkkkkklllllllllllllllllllmmmmmmmmmmmmmmmmmmmmmnnnnnnnnnnnnnnnnnnnnoooooooooooooooooppppppppppppppppppqqqqqqqqqqqqqqqqqqqqrrrrrrrrrrrrrrrrrssssssssssssssssssssttttttttttttttttuuuuuuuuuuuuuuuuvvvvvvvvvvvvvwwwwwwwxxxxxxxyyyyyyyyzzzzzzzzzzzzzzz00000000000000111111111111111122222222222222333333333333444444444555556666777,YWaZYXWVUTSRQPObaZYXWVUTSRQPOsdcbaZUTSRQPutsrqplkjidcbavutsrqponmlkjiedcwvuqponmlkjihdcxwvonjihdcxwjihdcyxjihdcRzjihdcTSRQPNJHihgdcbaZYUTSRQPONMLKJIHGFtsrjihgfedcbaZYXWVUTSONMLKJIHGFEDvutsrqihgfedcbaZYXWVUTKIHGFEDCvutqpmlihgfedcWVUTSwvponmlkjihgfedVUTSRvqponmlkjihedcTSRQrqponmlkjihedSRQPsrqponmlkjedRQPOLysrqponmlkjdcRQPONMLKyxtsrqponmlkdcSRQPONMLKJyxtsrqponmldcbUTSRQPONMLKJyxtsrqponmlihgfedcbaZWVUTSPONMKJIyxwtsrqponmljihgfedcbaZYXWVUTPONJIHxwvutsrqponmkjihgfedcbaZYXWVUONMJIHGvusrqponmlkjifedcbZXONIHGFsrqponmlkjedcONMHGFE65432rqponmlkjedcONMGFED3210qponmlkjiedcONE10nmlkjigfedPONM0zonmlkjihgfedYXVPON0zonmjihgfeZYXWVUTPON0zqponmlihgfaZYXWVUTSRQPO0zyrqpnmlbaZYVUTSRQPOzytsrqpmlkcbaZTSRQPzyxwvutsrqmlkjcbaTSRQyxwvutsnmlkjicbUTSRQponmlkjihdcbWVUTSqponjihgdcbZYXWVUTrqponjihgfedcbaZYXWVsrqpjihgfedcbaZYXsrqjifedcbaZYXTSRQPOsrkjYXWVUTSRQPONsrkjYXWVUTSQPONMsrqkjXWVUONMLsrqkjihsrqkjihsrqjihgVsrqihgfZYXWVUTSsrqhgfeaZYXWVUsrqpogfedcbaZYXWsrqponfedcbaZYrqponmedcbaZonmlkedcbmlkdclkjijih&amp;amp;chm=s,000000,1,2.0,3.0,0&amp;amp;chs=186x186&quot;&gt;http://chart.apis.google.com/chart?cht=s&amp;amp;chd=s:DDEEEEEEE&amp;#8230;&amp;amp;chs=186x186&lt;/a&gt;&lt;/p&gt;
&lt;hr /&gt;
&lt;p style=&quot;font-size:75%&quot;&gt;&lt;strong&gt;Smallprint&lt;/strong&gt;. Google charts may return a 400 error for an image with a long URL (meaning lots of black pixels in this case). The upper limit on URL length doesn&amp;#8217;t seem to be &lt;a href=&quot;http://code.google.com/apis/chart/&quot;&gt;documented&lt;/a&gt; but a quick &lt;a href=&quot;http://groups.google.com/group/google-chart-api/search?group=google-chart-api&amp;amp;q=url+length&amp;amp;qt_g=Search+this+group&quot;&gt;trawl through topics on the google charts group&lt;/a&gt; suggests others have bumped into it too. Connoisseurs of whacky pictures should pay &lt;a href=&quot;http://www.romancortes.com/blog/homer-css/&quot;&gt;CSS Homer Simpson&lt;/a&gt; a visit.&lt;/p&gt;</description>
<dc:date>2008-04-25</dc:date>
<guid>http://wordaligned.org/articles/scatter-pictures-with-google-charts</guid>
<author>tag@wordaligned.org (Thomas Guest)</author>
<link>http://wordaligned.org/articles/scatter-pictures-with-google-charts</link>
<category>Google</category>
</item>

<item>
<title>Drawing Chessboards</title>
<description>&lt;p&gt;I wanted a picture of a chessboard. Rather than boot up some drawing software and cut and paste black and white squares I decided to write a program to create the picture.&lt;/p&gt;
&lt;p&gt;If you&amp;#8217;d like to know &lt;strong&gt;why&lt;/strong&gt; anyone would ever create work for themselves in this way, skip to the end of this article, where you&amp;#8217;ll find justification and a more challenging &lt;a href=&quot;http://wordaligned.org/articles/drawing-chessboards.html#why&quot;&gt;follow-on problem&lt;/a&gt;. Otherwise, please read on from top to bottom in the usual way.&lt;/p&gt;
&lt;h3 id=&quot;the-python-imaging-library&quot;&gt;The Python Imaging Library&lt;/h3&gt;
&lt;p&gt;&lt;img style=&quot;border-style:double;&quot; src=&quot;http://wordaligned.org/images/chessboard-pil.png&quot; alt=&quot;Chessboard created by PIL&quot;/&gt;&lt;/p&gt;
&lt;p&gt;Fredrik Lundh&amp;#8217;s &lt;a href=&quot;http://effbot.org/imagingbook/pil-index.htm&quot;&gt;Python Imaging Library&lt;/a&gt; (commonly known as &lt;a href=&quot;http://effbot.org/imagingbook/pil-index.htm&quot;&gt;PIL&lt;/a&gt;) must surely rank as one of the most popular Python libraries which doesn&amp;#8217;t come as standard&lt;sup&gt;&lt;a id=&quot;fn1link&quot; href=&quot;http://wordaligned.org/articles/drawing-chessboards.html#fn1&quot;&gt;&lt;a href=&quot;https://blog.codeship.com/building-minimal-docker-containers-for-go-applications/&quot;&gt;1&lt;/a&gt;&lt;/a&gt;&lt;/sup&gt;. It&amp;#8217;s a fabulous tool which I&amp;#8217;ve used to create the graphic above (though note that the double border around this graphic and subsequent ones is applied by a CSS style property). Here&amp;#8217;s how.
&lt;span id=&quot;continue-reading&quot;/&gt;&lt;/p&gt;
&lt;div class=&quot;typocode&quot;&gt;&lt;div class=&quot;codetitle&quot;&gt;PIL chessboard&lt;/div&gt;

&lt;pre class=&quot;prettyprint&quot;&gt;def draw_chessboard(n=8, pixel_width=200):
    &quot;Draw an n x n chessboard using PIL.&quot;
    import Image, ImageDraw
    from itertools import cycle
    def sq_start(i):
        &quot;Return the x/y start coord of the square at column/row i.&quot;
        return i * pixel_width / n

    def square(i, j):
        &quot;Return the square corners, suitable for use in PIL drawings&quot; 
        return map(sq_start, [i, j, i + 1, j + 1])

    image = Image.new(&quot;L&quot;, (pixel_width, pixel_width))
    draw_square = ImageDraw.Draw(image).rectangle
    squares = (square(i, j)
               for i_start, j in zip(cycle((0, 1)), range(n))
               for i in range(i_start, n, 2))
    for sq in squares:
        draw_square(sq, fill=&amp;#x27;white&amp;#x27;)
    image.save(&quot;chessboard-pil.png&quot;)

&lt;/pre&gt;

&lt;/div&gt;

&lt;p&gt;Note:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;We don&amp;#8217;t draw any black squares, instead relying on the default image background being black.&lt;/li&gt;
&lt;li&gt;The &amp;#8220;L&amp;#8221; image type (Luminance?) specifies a greyscale image.&lt;/li&gt;
&lt;li&gt;PIL adopts the usual raster graphics convention, of the origin being in the top-left corner.&lt;/li&gt;
&lt;li&gt;As we progress &lt;strong&gt;down&lt;/strong&gt; the board row by row, the first white square alternates between being the first and second square of each row. &lt;code&gt;Itertools.cycle((0, 1))&lt;/code&gt; achieves this nicely. &lt;/li&gt;
&lt;li&gt;A regular 8 x 8 chessboard will, then, have a black square at the bottom left, which is the usual convention. For odd values of n the bottom-left square would be white.&lt;/li&gt;
&lt;li&gt;There may be rounding problems with this code if the supplied pixel width isn&amp;#8217;t an integral multiple of &lt;code&gt;n&lt;/code&gt;. It&amp;#8217;s probably better to guarantee the image size, rather than round down the board size.&lt;/li&gt;
&lt;li&gt;It would be better to parametrise the output file name, or even return the created image to clients. For now, we&amp;#8217;ll just save to a fixed-name PNG.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;imagemagick&quot;&gt;ImageMagick&lt;/h3&gt;
&lt;p&gt;PIL is a general purpose image processing library and it takes a little head-scratching and maths before we can even create something as simple as a chessboard. &lt;a href=&quot;http://www.imagemagick.org/script/index.php&quot;&gt;ImageMagick&lt;/a&gt; provides tools to perform a similar job from the command-line, making the chessboard a one-liner.&lt;/p&gt;
&lt;div class=&quot;typocode&quot;&gt;&lt;div class=&quot;codetitle&quot;&gt;ImageMagick chessboard&lt;/div&gt;

&lt;pre class=&quot;prettyprint&quot;&gt;$ N=8
$ PIXEL_WIDTH=200
$ convert -size $((N*15))x$((N*15)) pattern:checkerboard \
  -monochrome -resize $PIXEL_WIDTH chessboard-magick.png 

&lt;/pre&gt;

&lt;/div&gt;

&lt;p&gt;&lt;img style=&quot;border-style:double;float:right;margin-left:4px;&quot; src=&quot;http://wordaligned.org/images/chessboard-magick.png&quot; alt=&quot;Chessboard created by ImageMagick&quot;/&gt;&lt;/p&gt;
&lt;p&gt;Here, the checkerboard pattern is an ImageMagick built-in which, inspecting its output, happens to generate 15x15 squares (hence the 15&amp;#8217;s in the script above). The &lt;code&gt;-monochrome&lt;/code&gt; filter renders the pattern in black and white, rather than its native light- on dark-grey. The &lt;code&gt;-size&lt;/code&gt; and &lt;code&gt;-resize&lt;/code&gt; parameters should need no further explanation. The ((double parentheses)) perform Bash shell arithmetic.&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://www.imagemagick.org/script/index.php&quot;&gt;ImageMagick&lt;/a&gt; masquerades as a shell tool but really it&amp;#8217;s a powerful and fully featured programmer&amp;#8217;s imaging tool &amp;#8212; a bit like a command-line version of &lt;a href=&quot;http://www.gimp.org&quot;&gt;Gimp&lt;/a&gt;&lt;a id=&quot;fn2link&quot; href=&quot;http://wordaligned.org/articles/drawing-chessboards#fn2&quot;&gt;&lt;sup&gt;&lt;a href=&quot;http://devcenter.wercker.com/docs/quickstarts/advanced/building-minimal-containers-with-go&quot;&gt;2&lt;/a&gt;&lt;/sup&gt;&lt;/a&gt;. Although well documented, my gut reaction is that it pushes the command-line interface too far. For more advanced image mangling, you&amp;#8217;ll probably need a program to generate the one-liner needed to drive &lt;code&gt;convert&lt;/code&gt;. Despite this reservation, it does the simple things simply, and it can do complex things too. Recommended!&lt;/p&gt;
&lt;h3 id=&quot;google-chart-api&quot;&gt;Google Chart API&lt;/h3&gt;
&lt;p&gt;For a bit of fun, we can persuade Google to render the chessboard for us &amp;#8212; in this case as a scatter plot using a square black markers&lt;a id=&quot;fn3link&quot; href=&quot;http://wordaligned.org/articles/drawing-chessboards#fn3&quot;&gt;&lt;sup&gt;[3]&lt;/sup&gt;&lt;/a&gt;. We flip the PIL processing around, drawing black squares on the (default) white background, and using the usual plotting convention which places the origin at the bottom left.&lt;/p&gt;
&lt;div class=&quot;typocode&quot;&gt;&lt;div class=&quot;codetitle&quot;&gt;Google chart chessboard&lt;/div&gt;

&lt;pre class=&quot;prettyprint&quot;&gt;def chessboard_url(n=8, pixel_width=200):
    &quot;Returns the URL of a chessboard graphic.&quot;
    def sq_midpt(i):
        &quot;Return the x/y midpt of a square in column/row i.&quot;
        # For text encoding, the graphic&amp;#x27;s logical width is 100
        return (0.5 + i) * 100. / n

    xys = [(sq_midpt(i), sq_midpt(j))
           for i_start, j in zip(cycle((0, 1)), range(n))
           for i in range(i_start, n, 2)]
    fields = dict(width=pixel_width, sqside=pixel_width/n,
                  xs=&quot;,&quot;.join(&quot;%.02f&quot; % x for x, _ in xys),
                  ys=&quot;,&quot;.join(&quot;%.02f&quot; % y for _, y in xys))
    return (
        &quot;http://chart.apis.google.com/chart?&quot;
        &quot;cht=s&amp;amp;&quot;                        # Draw a scatter graph
        &quot;chd=t:%(xs)s|%(ys)s&amp;amp;&quot;          # using text encoding and
        &quot;chm=s,000000,1,2.0,%(sqside)r&amp;amp;&quot;# square black markers
        &quot;chs=%(width)rx%(width)r&quot;       # at this size.
        ) % fields

&lt;/pre&gt;

&lt;/div&gt;

&lt;p&gt;Note that we plot our chart on a logical 100 x 100 rectangle, the coordinate space mandated by the encoding we&amp;#8217;ve chosen, then resize it to the physical dimensions supplied by the client.&lt;/p&gt;
&lt;p&gt;This function actually returns the URL of a PNG which the &lt;a href=&quot;http://code.google.com/apis/chart/&quot;&gt;Google chart API&lt;/a&gt; serves up. Paste this URL into your browser address bar to see the graphic, or curl it to a local file.&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://chart.apis.google.com/chart?cht=s&amp;amp;chd=t:6.25,31.25,56.25,81.25,18.75,43.75,68.75,93.75,6.25,31.25,56.25,81.25,18.75,43.75,68.75,93.75,6.25,31.25,56.25,81.25,18.75,43.75,68.75,93.75,6.25,31.25,56.25,81.25,18.75,43.75,68.75,93.75|6.25,6.25,6.25,6.25,18.75,18.75,18.75,18.75,31.25,31.25,31.25,31.25,43.75,43.75,43.75,43.75,56.25,56.25,56.25,56.25,68.75,68.75,68.75,68.75,81.25,81.25,81.25,81.25,93.75,93.75,93.75,93.75&amp;amp;chm=s,000000,1,2.0,25.0&amp;amp;chs=200x200&quot;&gt;http://chart.apis.google.com/chart?cht=s&amp;amp;chd=t:6.25,31.25&amp;#8230;&amp;amp;chs=200x200&lt;/a&gt;&lt;/p&gt;
&lt;div class=&quot;typocode&quot;&gt;

&lt;pre class=&quot;prettyprint&quot;&gt;$ url=`python chessboard_url.py`
$ curl $url &amp;gt; chessboard.png

&lt;/pre&gt;

&lt;/div&gt;

&lt;p&gt;We could embed the image into HTML using the IMG element, which is how I&amp;#8217;ve embedded the image which you should see below.&lt;/p&gt;
&lt;div class=&quot;typocode&quot;&gt;

&lt;pre class=&quot;prettyprint&quot;&gt;&amp;gt;&amp;gt;&amp;gt; from cgi import escape
&amp;gt;&amp;gt;&amp;gt; img = &amp;#x27;&amp;lt;img src=&quot;%s&quot; alt=&quot;chessboard graphic&quot;/&amp;gt;&amp;#x27;
&amp;gt;&amp;gt;&amp;gt; img % escape(chessboard_url())

&lt;/pre&gt;

&lt;/div&gt;

&lt;p&gt;&lt;img src=&quot;http://chart.apis.google.com/chart?cht=s&amp;amp;chd=t:6.25,31.25,56.25,81.25,18.75,43.75,68.75,93.75,6.25,31.25,56.25,81.25,18.75,43.75,68.75,93.75,6.25,31.25,56.25,81.25,18.75,43.75,68.75,93.75,6.25,31.25,56.25,81.25,18.75,43.75,68.75,93.75|6.25,6.25,6.25,6.25,18.75,18.75,18.75,18.75,31.25,31.25,31.25,31.25,43.75,43.75,43.75,43.75,56.25,56.25,56.25,56.25,68.75,68.75,68.75,68.75,81.25,81.25,81.25,81.25,93.75,93.75,93.75,93.75&amp;amp;chm=s,000000,1,2.0,25.0&amp;amp;chs=200x200&quot; alt=&quot;Chessboard chart&quot; style=&quot;float:right;border-style:double;margin-left:4px;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;As you can see, we have plenty of options, but unfortunately the image itself isn&amp;#8217;t suitable. You can&amp;#8217;t get rid of the axes &amp;#8212; or at least, I haven&amp;#8217;t found a way to &amp;#8212; and the rendered chart has some padding to the top and the right. And worse, we&amp;#8217;re pretty much at the end of the line for this hack: if we wanted to do something more interesting, such as place pieces on the board, we&amp;#8217;re out of luck. &lt;/p&gt;
&lt;p&gt;Of course this isn&amp;#8217;t a flaw in the &lt;a href=&quot;http://code.google.com/apis/chart/&quot;&gt;Google Chart API&lt;/a&gt;: we&amp;#8217;ve actually asked it to draw a scatter plot of the centres of black squares on a chessboard, using square black markers, a job it&amp;#8217;s done well enough. Some examples showing the proper use of Google charts can be found in an &lt;a href=&quot;http://wordaligned.org/articles/the-maximum-subsequence-problem.html&quot;&gt;article I wrote about maximum sum subsequences&lt;/a&gt;.&lt;/p&gt;
&lt;h3 id=&quot;ascii-text&quot;&gt;ASCII Text&lt;/h3&gt;
&lt;p&gt;The chart URL might be considered a text encoding of the image; the actual graphic is returned by a server. There are other, more direct, textual representations.&lt;/p&gt;
&lt;div class=&quot;typocode&quot;&gt;&lt;div class=&quot;codetitle&quot;&gt;ASCII art chessboard&lt;/div&gt;

&lt;pre class=&quot;prettyprint&quot;&gt;def outer_join(sep, ss):
    &quot;&quot;&quot;Like string.join, but encloses the result with outer separators.

    Example:
    &amp;gt;&amp;gt;&amp;gt; outer_join(&amp;#x27;|&amp;#x27;, [&amp;#x27;1&amp;#x27;, &amp;#x27;2&amp;#x27;, &amp;#x27;3&amp;#x27;])
    &amp;#x27;|1|2|3|&amp;#x27;
    &quot;&quot;&quot;
    return &quot;%s%s%s&quot; % (sep, sep.join(ss), sep)

def ascii_chessboard(n=8):
    &quot;&quot;&quot;Draws an ASCII art chessboard.

    Returns a string representation of an n x n board.
    &quot;&quot;&quot;
    from itertools import islice, cycle
    divider = outer_join(&quot;+&quot;, &quot;-&quot; * n) + &quot;\n&quot;
    row0 = outer_join(&quot;|&quot;, islice(cycle(&quot; B&quot;), n)) + &quot;\n&quot;
    row1 = outer_join(&quot;|&quot;, islice(cycle(&quot;B &quot;), n)) + &quot;\n&quot;
    return outer_join(divider, islice(cycle([row0, row1]), n))

&lt;/pre&gt;

&lt;/div&gt;

&lt;p&gt;I suspect this code was easier for me to write than it is for you to read! It treats the chessboard as a sequence of alternating rows of alternating squares, which are then joined together for output.&lt;/p&gt;
&lt;div class=&quot;typocode&quot;&gt;

&lt;pre class=&quot;prettyprint&quot;&gt;&amp;gt;&amp;gt;&amp;gt; print ascii_chessboard(8)
+-+-+-+-+-+-+-+-+
| |B| |B| |B| |B|
+-+-+-+-+-+-+-+-+
|B| |B| |B| |B| |
+-+-+-+-+-+-+-+-+
| |B| |B| |B| |B|
+-+-+-+-+-+-+-+-+
|B| |B| |B| |B| |
+-+-+-+-+-+-+-+-+
| |B| |B| |B| |B|
+-+-+-+-+-+-+-+-+
|B| |B| |B| |B| |
+-+-+-+-+-+-+-+-+
| |B| |B| |B| |B|
+-+-+-+-+-+-+-+-+
|B| |B| |B| |B| |
+-+-+-+-+-+-+-+-+

&lt;/pre&gt;

&lt;/div&gt;

&lt;p&gt;Not pretty, but such graphics may be useful in source code, which is typically viewed in a plain-text editor, and where ASCII art provides a way of embedding pictures right where they&amp;#8217;re needed. &lt;/p&gt;
&lt;p&gt;On which point: if you&amp;#8217;re working through &amp;#8220;Structure and Interpretation of Computer Programs&amp;#8221; you may like to know the book is &lt;a href=&quot;http://www.neilvandyke.org/sicp-texi/&quot;&gt;available in Texinfo format&lt;/a&gt;, with the pictures all rendered in ASCII art. So you can split your editor window and run the code on one side, while browsing the book on the other. Here&amp;#8217;s one of the figures:&lt;/p&gt;
&lt;pre&gt;
*Figure 4.6:* The `or&#x27; combination of two queries is produced by
operating on the stream of frames in parallel and merging the
results.

            +---------------------------+
            |          (or A B)         |
            |    +---+                  |
 input      | +-&amp;gt;| A |------------+     |  output
 stream of  | |  +---+            V     |  stream of
 frames     | |    ^          +-------+ |  frames
 -------------*    |          | merge +---------------&amp;gt;
            | |    |          +-------+ |
            | |    |              ^     |
            | |    |   +---+      |     |
            | +-------&amp;gt;| B +------+     |
            |      |   +---+            |
            |      |     ^              |
            |      |     |              |
            |      +--*--+              |
            +---------|-----------------+
                      |
                  data base
&lt;/pre&gt;

&lt;p&gt;Even though I own a copy of the book and the &lt;a href=&quot;http://mitpress.mit.edu/sicp/full-text/book/book.html&quot;&gt;full text is available on-line&lt;/a&gt;, this primitive info version has become my preferred format when actually running the code examples and exercises.&lt;/p&gt;
&lt;h3 id=&quot;unicode-block-elements&quot;&gt;Unicode Block Elements&lt;/h3&gt;
&lt;p&gt;Most programming languages may be &lt;a href=&quot;http://wordaligned.org/articles/a-yen-for-more-symbols.html&quot;&gt;stuck in ASCII&lt;/a&gt;, but we needn&amp;#8217;t restict ourselves in this way. I found some block elements in the &lt;a href=&quot;http://www.unicode.org/charts/symbols.html&quot;&gt;Geometrical Symbols&lt;/a&gt; section of the Unicode code charts (&lt;a href=&quot;http://www.unicode.org/charts/PDF/U2580.pdf&quot;&gt;Unicode Block Elements (PDF)&lt;/a&gt;). Here&amp;#8217;s a pre-rendered block of text composed of the light and dark shade block characters, U+2591 LIGHT SHADE and U+2593 DARK SHADE.&lt;/p&gt;
&lt;pre&gt;
&amp;#x2591;&amp;#x2593;&amp;#x2591;&amp;#x2593;&amp;#x2591;&amp;#x2593;&amp;#x2591;&amp;#x2593;
&amp;#x2593;&amp;#x2591;&amp;#x2593;&amp;#x2591;&amp;#x2593;&amp;#x2591;&amp;#x2593;&amp;#x2591;
&amp;#x2591;&amp;#x2593;&amp;#x2591;&amp;#x2593;&amp;#x2591;&amp;#x2593;&amp;#x2591;&amp;#x2593;
&amp;#x2593;&amp;#x2591;&amp;#x2593;&amp;#x2591;&amp;#x2593;&amp;#x2591;&amp;#x2593;&amp;#x2591;
&amp;#x2591;&amp;#x2593;&amp;#x2591;&amp;#x2593;&amp;#x2591;&amp;#x2593;&amp;#x2591;&amp;#x2593;
&amp;#x2593;&amp;#x2591;&amp;#x2593;&amp;#x2591;&amp;#x2593;&amp;#x2591;&amp;#x2593;&amp;#x2591;
&amp;#x2591;&amp;#x2593;&amp;#x2591;&amp;#x2593;&amp;#x2591;&amp;#x2593;&amp;#x2591;&amp;#x2593;
&amp;#x2593;&amp;#x2591;&amp;#x2593;&amp;#x2591;&amp;#x2593;&amp;#x2591;&amp;#x2593;&amp;#x2591;
&lt;/pre&gt;

&lt;h3 id=&quot;and-more&quot;&gt;And more&lt;/h3&gt;
&lt;p&gt;I can think of plenty of other ways to draw a chessboard. My favourite &lt;a href=&quot;http://wordaligned.org/articles/drawing-software-design.htmls&quot;&gt;drawing&lt;/a&gt; environments are the &lt;a href=&quot;http://blogoscoped.com/archive/2008-02-11-n78.html&quot;&gt;pencil and paper&lt;/a&gt;, and the pen and whiteboard; combine the former with a scanner and the latter with a digital camera and you&amp;#8217;ve got an easy route to an electronic version of your design.&lt;/p&gt;
&lt;p&gt;For an HTML document I suspect &lt;a href=&quot;http://www.w3.org/Graphics/SVG/&quot;&gt;SVG&lt;/a&gt; would be a good choice, but I don&amp;#8217;t know enough about SVG to state this with confidence. I bet you could go a long way with &lt;a href=&quot;http://www.w3.org/Style/CSS/&quot;&gt;CSS&lt;/a&gt; too. &lt;a href=&quot;http://en.wikipedia.org/wiki/Chessboard&quot;&gt;Wikipedia&amp;#8217;s chess board&lt;/a&gt; is a table built on top of two small images, a light and a dark square, which I guess saves on bandwidth.&lt;/p&gt;
&lt;h3 id=&quot;why&quot;&gt;Why?&lt;/h3&gt;
&lt;p&gt;Why ever bother programming when all we want is a simple graphic?&lt;/p&gt;
&lt;p&gt;Well, for one thing, there&amp;#8217;s not &lt;strong&gt;that&lt;/strong&gt; much programming. The actual work of pushing pixels around is done by &lt;a href=&quot;http://code.google.com/apis/chart/&quot;&gt;Google&lt;/a&gt;, or &lt;a href=&quot;http://effbot.org/imagingbook/pil-index.htm&quot;&gt;PIL&lt;/a&gt;, or &lt;a href=&quot;http://www.imagemagick.org/script/index.php&quot;&gt;ImageMagick&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Once we&amp;#8217;ve got a program written, it should be easy to adapt it. We&amp;#8217;ve already put in hooks to specify the number of squares and the image dimensions. It&amp;#8217;s equally easy to, for example, write out a JPEG rather than a PNG, or use different colours.&lt;/p&gt;
&lt;p&gt;A programmatic solution is dynamic. Google&amp;#8217;s chart API generates pictures on the fly, based on data points, ranges etc. which clients choose as and when. It&amp;#8217;s rather  like lazy-evaluation: pre-rendering all possibilities isn&amp;#8217;t just expensive, it&amp;#8217;s out of the question.&lt;/p&gt;
&lt;h3 id=&quot;teaser&quot;&gt;Teaser&lt;/h3&gt;
&lt;p&gt;&lt;img src=&quot;http://tbn0.google.com/images?q=tbn:AmRSkxMo-1W5iM:http://web.usna.navy.mil/~wdj/images_chess/chess011.gif&quot; alt=&quot;Lurid chessboard&quot; style=&quot;float:right;margin-left:4px;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;That&amp;#8217;s quite enough pixels and characters for now, so this article will have to appear in two parts. If I&amp;#8217;ve still not convinced you of the merits of creating images programmatically, please consider the following puzzle.&lt;/p&gt;
&lt;p&gt;&lt;span /&gt;How would you draw a position reached in a game of chess, showing both the board and the pieces?&lt;/p&gt;
&lt;p&gt;And if I &lt;strong&gt;have&lt;/strong&gt; convinced you, this exercise makes for a good workout.&lt;/p&gt;
&lt;p&gt;Some Q&amp;amp;A&amp;#8217;s.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Q&lt;/strong&gt;: What position, exactly?&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;A&lt;/strong&gt;: Any!&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Q&lt;/strong&gt;: How will the position be described?&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;A&lt;/strong&gt;: Your choice &amp;#8212; it&amp;#8217;s an interesting part of the puzzle.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;A great starting point would be to solve the puzzle using an ASCII art representation.&lt;/p&gt;
&lt;p&gt;You can find my solution in &lt;a href=&quot;http://wordaligned.org/articles/drawing-chess-positions.html&quot;&gt;this follow-up article&lt;/a&gt;.&lt;/p&gt;
&lt;h3 id=&quot;thanks&quot;&gt;Thanks&lt;/h3&gt;
&lt;p&gt;Thanks to &lt;a href=&quot;http://gedmin.as&quot;&gt;Marius Gedminas&lt;/a&gt; and Johannes Hoff for their help bug-fixing this article.&lt;/p&gt;
&lt;hr /&gt;
&lt;p&gt;&lt;a id=&quot;fn1&quot; href=&quot;http://wordaligned.org/articles/drawing-chessboards#fn1link&quot;&gt;&lt;a href=&quot;https://blog.codeship.com/building-minimal-docker-containers-for-go-applications/&quot;&gt;1&lt;/a&gt;&lt;/a&gt;
I&amp;#8217;m confused about where exactly PIL belongs; the official homepage seems to be on the PythonWare website (&lt;a href=&quot;http://www.pythonware.com/library/pil/handbook/&quot;&gt;http://www.pythonware.com/library/pil/handbook/&lt;/a&gt;), but I usually head for the Effbot site, &lt;a href=&quot;http://effbot.org/imagingbook/&quot;&gt;http://effbot.org/imagingbook/&lt;/a&gt;. I think the sites mirror the same information, so it boils down to whether you prefer a blue or green theme, and how off-putting you find all the ads-by-google.&lt;/p&gt;
&lt;p&gt;&lt;a id=&quot;fn2&quot; href=&quot;http://wordaligned.org/articles/drawing-chessboards#fn2link&quot;&gt;&lt;a href=&quot;http://devcenter.wercker.com/docs/quickstarts/advanced/building-minimal-containers-with-go&quot;&gt;2&lt;/a&gt;&lt;/a&gt;
Actually, you can use &lt;a href=&quot;http://www.gimp.org/tutorials/Basic_Batch/&quot;&gt;Gimp from the command-line&lt;/a&gt;, and it comes with some tools for creating and editing batch files, and indeed for creating a personal suite of image processing scripts. I&amp;#8217;ve never used &lt;a href=&quot;http://www.gimp.org&quot;&gt;Gimp&lt;/a&gt; in this way, so I can&amp;#8217;t say much more about this.&lt;/p&gt;
&lt;p&gt;&lt;a id=&quot;fn3&quot; href=&quot;http://wordaligned.org/articles/drawing-chessboards#fn3link&quot;&gt;[3]&lt;/a&gt;
In theory you could use the Google Chart API to render any image in a pointillist manner: just plot enough pixels in the right places.&lt;/p&gt;</description>
<dc:date>2008-03-18</dc:date>
<guid>http://wordaligned.org/articles/drawing-chessboards</guid>
<author>tag@wordaligned.org (Thomas Guest)</author>
<link>http://wordaligned.org/articles/drawing-chessboards</link>
<category>Google</category>
</item>

<item>
<title>Paging through the Manual using Access Keys</title>
<description>&lt;h3 id=&quot;random-access&quot;&gt;Random Access&lt;/h3&gt;
&lt;p&gt;These days most reference manuals are designed to be read in a web browser. This has many advantages, especially for random access. Standard search techniques bring up the page you want &amp;#8212; and section-hopping is a snip.&lt;/p&gt;
&lt;h3 id=&quot;sequential-access&quot;&gt;Sequential Access&lt;/h3&gt;
&lt;p&gt;Sequential access may be less convenient. Suppose you actually want to &lt;em&gt;read&lt;/em&gt; the manual. Maybe you&amp;#8217;re evaluating a new &lt;a href=&quot;http://scons.org&quot;&gt;build technology&lt;/a&gt;, and you&amp;#8217;d like to flick through the manual to get an overview of how it hangs together. Or maybe you&amp;#8217;ve been charged with &lt;a href=&quot;http://wordaligned.org/docs/cvs2svn/index.html&quot;&gt;upgrading your company&amp;#8217;s source control system&lt;/a&gt; from CVS, and you need to read the &lt;a href=&quot;http://svnbook.red-bean.com/&quot;&gt;Subversion manual&lt;/a&gt; carefully, from start to finish.&lt;/p&gt;
&lt;p&gt;If the manual is well designed this shouldn&amp;#8217;t be hard. Each page will have a prominent &lt;strong&gt;Next&lt;/strong&gt; link; you keep clicking this link to advance through the manual. This does have problems, though. If the link moves or your mouse moves (which, after all, is what mice are meant to do) you waste effort concentrating on pointer placement instead of following what you&amp;#8217;re reading.&lt;/p&gt;
&lt;h3 id=&quot;hot-keys&quot;&gt;Hot Keys&lt;/h3&gt;
&lt;p&gt;My feed reader client, &lt;a href=&quot;http://reader.google.com&quot;&gt;Google Reader&lt;/a&gt;, is designed to allow you to skim through a mountain of new material sequentially, and you drive it all using the largest key on the keyboard: the spacebar. This apparent simplicity is a product of good interface design and hardcore javascript.&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://docbook.org&quot;&gt;DocBook&lt;/a&gt; offers a number of lo-tech solutions to this problem. The first, which shouldn&amp;#8217;t be neglected, is that it&amp;#8217;s possible to convert DocBook sources into something more suited for paging though at leisure &amp;#8212; hard-copy! &lt;/p&gt;
&lt;p&gt;Restricting ourselves to HTML output, DocBook can generate output as single block of HTML, which you can then page through using the spacebar (or indeed by using the mouse wheel, but there&amp;#8217;s no need for pointer precision). For chunked HTML, DocBook by default places &lt;a href=&quot;http://en.wikipedia.org/wiki/Access_keys&quot;&gt;access keys&lt;/a&gt; on each page:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;N&lt;/strong&gt; takes you to the next page &lt;/li&gt;
&lt;li&gt;&lt;strong&gt;P&lt;/strong&gt; takes you to the previous page &lt;/li&gt;
&lt;li&gt;&lt;strong&gt;U&lt;/strong&gt; takes you up a level&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;H&lt;/strong&gt; takes you to the top-level&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Once you discover these keys and once you&amp;#8217;ve worked out how exactly to use them on your platform, you&amp;#8217;ll use them more and more.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://wordaligned.org/docs/images/prev.png&quot; alt=&quot;Previous&quot; /&gt;
&lt;img src=&quot;http://wordaligned.org/docs/images/up.png&quot; alt=&quot;Up&quot; /&gt;
&lt;img src=&quot;http://wordaligned.org/docs/images/home.png&quot; alt=&quot;Home&quot; /&gt;
&lt;img src=&quot;http://wordaligned.org/docs/images/next.png&quot; alt=&quot;Next&quot; /&gt;&lt;/p&gt;
&lt;h3 id=&quot;paging-through-word-aligned-using-access-keys&quot;&gt;Paging through Word Aligned using Access Keys&lt;/h3&gt;
&lt;p&gt;&lt;a href=&quot;http://wordaligned.org/&quot;&gt;Word Aligned&lt;/a&gt; is a time-ordered chain of articles which you can page through using access keys.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;N&lt;/strong&gt; takes you to the next article (newer)&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;P&lt;/strong&gt; takes you to the previous article (older)&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;H&lt;/strong&gt; takes you home&lt;/li&gt;
&lt;/ul&gt;</description>
<dc:date>2007-11-19</dc:date>
<guid>http://wordaligned.org/articles/paging-through-the-manual-using-access-keys</guid>
<author>tag@wordaligned.org (Thomas Guest)</author>
<link>http://wordaligned.org/articles/paging-through-the-manual-using-access-keys</link>
<category>Google</category>
</item>

<item>
<title>RTM vs STW</title>
<description>&lt;h3 id=&quot;virtual-hosting-problems&quot;&gt;Virtual hosting problems&lt;/h3&gt;
&lt;p&gt;A colleague, call him Lem E Tweakit, was suffering from code-rage. I could tell from the way he was shoving his mouse around, hammering the keyboard and muttering. &lt;/p&gt;
&lt;p&gt;&amp;#8220;Anything I can help with?&amp;#8221;&lt;/p&gt;
&lt;p&gt;&amp;#8220;Yeah, maybe. Have you ever set up &lt;a href=&quot;http://httpd.apache.org/&quot;&gt;Apache&lt;/a&gt; on Windows?&amp;#8221;&lt;/p&gt;
&lt;p&gt;I have, but never to do more than serve static files, run CGI scripts, that sort of thing. Given the choice, I&amp;#8217;ll use a Unix-based system for a web server every time, and I prefer &lt;a href=&quot;http://www.lighttpd.net/&quot;&gt;lighttpd&lt;/a&gt;, but anyway, what&amp;#8217;s the problem?&lt;/p&gt;
&lt;p&gt;Virtual hosts weren&amp;#8217;t working, Lem said. He&amp;#8217;d googled around, found some instructions written up by someone who&amp;#8217;d overcome a similar problem, followed the instructions, found they didn&amp;#8217;t work, googled a bit more, found some slightly different instructions, they didn&amp;#8217;t work either &amp;#8230; and now he was stuck in a cycle of tweaking &lt;code&gt;httpd.conf&lt;/code&gt;, restarting the web server, refreshing his browser to see if it had worked, googling. &lt;/p&gt;
&lt;p&gt;Like he said, virtual hosts weren&amp;#8217;t working! Were they even &lt;em&gt;supposed&lt;/em&gt; to work on Windows?&lt;/p&gt;
&lt;p&gt;&lt;span id=&quot;continue-reading&quot;/&gt;&lt;/p&gt;
&lt;h3 id=&quot;search-the-web&quot;&gt;Search the Web&lt;/h3&gt;
&lt;p&gt;In a recent &lt;a href=&quot;http://www.artima.com/weblogs/viewpost.jsp?thread=208868&quot;&gt;post&lt;/a&gt; on his artima weblog Andy Dent suggests that when interviewing programmers, you should test their ability to search the web. He adds you should consider training existing employees in this skill.&lt;/p&gt;
&lt;p&gt;I&amp;#8217;ve got mixed feelings about this. Certainly you shouldn&amp;#8217;t expect candidates to carry everything around in their heads (though I &lt;em&gt;would&lt;/em&gt; expect someone who puts &amp;#8220;Experienced C Programmer&amp;#8221; on a CV to be able to write syntactically correct C without access to a reference &amp;#8212; it&amp;#8217;s alarming how many can&amp;#8217;t!)&lt;/p&gt;
&lt;h3 id=&quot;read-the-manual&quot;&gt;Read the Manual&lt;/h3&gt;
&lt;p&gt;What I consider important is how exactly someone goes about finding information. The web search is a great tool but it shouldn&amp;#8217;t always be the first one we reach for. Continuing our earlier example, for C the most important reference has to be K &amp;amp; R, and I&amp;#8217;d expect any serious C programmer to know and use this book. And Unix programmers call on &lt;code&gt;man&lt;/code&gt; and &lt;code&gt;info&lt;/code&gt; even if the search quality for these references isn&amp;#8217;t quite up to google&amp;#8217;s standards.&lt;/p&gt;
&lt;p&gt;C and Unix are showing their age, though. What about something more up to date, something more closely aligned to the internet? Python, say, to pick something I claim to know about.&lt;/p&gt;
&lt;p&gt;Again, if I need Python help I don&amp;#8217;t start with a web search, even though a lot of the time I do end up referring to web pages. For simple queries I try &lt;code&gt;help()&lt;/code&gt; in an interpreted session. For full answers, I point my web browser at the official documentation, which, incidentally, I have bookmarked to use a location on my hard-disk &amp;#8212; a location which came as part of my standard Python installation. This means I have direct access to the documents on- or off-line, it&amp;#8217;s fractionally quicker than going to &lt;a href=&quot;http://docs.python.org&quot;&gt;docs.python.org&lt;/a&gt;, and I&amp;#8217;m guaranteed to get the documentation for the Python version I&amp;#8217;m using. If I &lt;em&gt;still&lt;/em&gt; can&amp;#8217;t find what I&amp;#8217;m looking for then there are a number of options: the Python Cookbook, a web search, email a friend, comp.lang.python.&lt;/p&gt;
&lt;p&gt;If it&amp;#8217;s a non-standard Python library I&amp;#8217;m using (the Python Imaging Library for example) then again I&amp;#8217;ll try the official documentation for that library first; and if this documentation doesn&amp;#8217;t help then I probably won&amp;#8217;t be using the library much longer (the PIL documentation is fine, I use it all the time).&lt;/p&gt;
&lt;h3 id=&quot;no-search-the-web&quot;&gt;No, Search the Web&lt;/h3&gt;
&lt;p&gt;I won&amp;#8217;t pretend I always read the manual and never search the web. Far from it. On many occasions a web search turns up something that&amp;#8217;s better than the official manual. &lt;span /&gt;On other occasions I want a quick fix: perhaps I&amp;#8217;m using a technology I really don&amp;#8217;t care much about, and am therefore reluctant to invest any great effort in. Vi for example, some Java framework, or Open Office.&lt;/p&gt;
&lt;p&gt;Does &lt;a href=&quot;http://httpd.apache.org/&quot;&gt;Apache httpd&lt;/a&gt; fall into this category? Of course not. It may not be my &lt;a href=&quot;http://www.lighttpd.net/&quot;&gt;web server of choice&lt;/a&gt;, but it&amp;#8217;s the world&amp;#8217;s web server of choice, and definitely something a programmer should know about.&lt;/p&gt;
&lt;h3 id=&quot;apache-virtual-hosts&quot;&gt;Apache Virtual Hosts&lt;/h3&gt;
&lt;p&gt;I watched Lem more closely. The first thing I noticed was that when he restarted Apache &amp;#8212; by clicking an icon &amp;#8212; a console window transiently appeared, and I&amp;#8217;m pretty sure there was an error message in that window. What was it trying to say?&lt;/p&gt;
&lt;p&gt;Lem pulled up the server error log. Sure enough, it recorded an error found in the configuration file. Not a fatal error, otherwise the server wouldn&amp;#8217;t have started, but a strong indication something wasn&amp;#8217;t right.&lt;/p&gt;
&lt;p&gt;&amp;#8220;I know, I&amp;#8217;ve tried googling for that, but &amp;#8230;&amp;#8221;&lt;/p&gt;
&lt;p&gt;I&amp;#8217;d also noticed an icon linking to the online Apache documentation: look, there, right next to the &amp;#8220;Start Apache&amp;#8221; icon! &lt;/p&gt;
&lt;p&gt;We clicked it and found ourselves on the Apache HTTP Server &lt;a href=&quot;http://httpd.apache.org/docs/2.2/&quot;&gt;documentation&lt;/a&gt; page. &lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://wordaligned.org/files/apache-22-docs.jpeg&quot; alt=&quot;Apache 2.2 documentation page&quot;/&gt;&lt;/p&gt;
&lt;p&gt;As you can see, there&amp;#8217;s a prominent search widget at the top of the page. Lem instinctively typed &amp;#8220;Virtual Hosts&amp;#8221; into the text field and clicked the button.&lt;/p&gt;
&lt;p&gt;&amp;#8220;It&amp;#8217;s just a google search,&amp;#8221; he said, disgusted. Hadn&amp;#8217;t Google been letting him down all morning?&lt;/p&gt;
&lt;p&gt;Not quite! It&amp;#8217;s actually a google &lt;em&gt;site&lt;/em&gt; search &amp;#8212; you do know google can return you search results within a specific site? As it happened, the first hit from this search was the one we wanted, one we should have spotted on the front page of the documentation if we&amp;#8217;d not been diverted by the search button.&lt;/p&gt;
&lt;p&gt;After about 5 minutes of careful reading we&amp;#8217;d fixed &lt;code&gt;httpd.conf&lt;/code&gt;, eliminated the warning, and virtual hosting was working.&lt;/p&gt;
&lt;hr /&gt;
&lt;p&gt;&lt;a href=&quot;http://www.google.com/search?q=Lem+E+Tweakit&quot;&gt;Find out&lt;/a&gt; about Lem E Tweakit, including address and salary details.&lt;/p&gt;</description>
<dc:date>2007-11-02</dc:date>
<guid>http://wordaligned.org/articles/rtm-vs-stw</guid>
<author>tag@wordaligned.org (Thomas Guest)</author>
<link>http://wordaligned.org/articles/rtm-vs-stw</link>
<category>Google</category>
</item>

<item>
<title>Big City Skyline Puzzle</title>
<description>&lt;p&gt;There&amp;#8217;s a relatively short supply of computer science puzzles&lt;sup&gt;&lt;a href=&quot;http://wordaligned.org/articles/big-city-skyline-puzzle#footnote1&quot;&gt;&lt;a href=&quot;https://blog.codeship.com/building-minimal-docker-containers-for-go-applications/&quot;&gt;1&lt;/a&gt;&lt;/a&gt;&lt;/sup&gt; and many new ones simply re-spin the classics &amp;#8212; once you&amp;#8217;ve removed the packaging they come down to the same old binary search, quick sort, bit-vector, &amp;#8230;&lt;/p&gt;
&lt;p&gt;So I was interested to find one which was new to me, referenced in &lt;a href=&quot;http://googleblog.blogspot.com/2007/09/our-plans-for-code-jam.html&quot;&gt;this post&lt;/a&gt; on the official Google blog. &lt;/p&gt;
&lt;p&gt;&lt;span id=&quot;continue-reading&quot;/&gt;&lt;/p&gt;
&lt;h3 id=&quot;little-big-google&quot;&gt;Little big Google&lt;/h3&gt;
&lt;p&gt;Actually, Google supply a &lt;a href=&quot;http://services.google.com/blog_resources/Google_CodeJam_Practice.pdf&quot;&gt;couple of puzzles&lt;/a&gt;. The subtext of both is that Google is a &lt;strong&gt;big&lt;/strong&gt; company working on &lt;strong&gt;big&lt;/strong&gt; problems, but hey!, a &lt;a href=&quot;http://wordaligned.org/articles/an-ideal-working-environment.html&quot;&gt;childish sense of wonder, curiosity and competition&lt;/a&gt; are still encouraged. The first puzzle takes you to a new job in Big City, where the beautiful skyline is filled with millions of impossibly tall thin buildings. The second expands your scope (perhaps due to  over-crowding in BC?) &amp;#8212; now you&amp;#8217;re at Google Moon, searching nothing less than the Universe for nothing more than stock quotes.&lt;/p&gt;
&lt;p&gt;I&amp;#8217;m not going to spoil either puzzle. I won&amp;#8217;t talk about the lunar one since I haven&amp;#8217;t had time to look at it yet, except to say that it looks like a variant on the &lt;a href=&quot;http://en.wikipedia.org/wiki/Travelling_salesman_problem&quot;&gt;traveling salesman problem&lt;/a&gt; (which won&amp;#8217;t make it any easier to solve).&lt;/p&gt;
&lt;h3 id=&quot;big-city-skyline&quot;&gt;Big City Skyline&lt;/h3&gt;
&lt;p&gt;The Big City Skyline puzzle requires careful budgeting of time and space. I don&amp;#8217;t think it&amp;#8217;s giving much away to say that a quadratic algorithm won&amp;#8217;t cut it. An &lt;code&gt;O(N log N)&lt;/code&gt; solution will, though, provided each stage completes in roughly a microsecond &amp;#8212; not unreasonable on a 2GHz machine. The 512MB space limit doesn&amp;#8217;t look too bad since the largest numbers involved fit comfortably into 8 bytes: all you have to do is choose a reasonably compact container and avoid replicating the inputs.&lt;/p&gt;
&lt;p&gt;As usual I put together some unit tests&lt;sup&gt;&lt;a href=&quot;http://wordaligned.org/articles/big-city-skyline-puzzle#footnote2&quot;&gt;&lt;a href=&quot;http://devcenter.wercker.com/docs/quickstarts/advanced/building-minimal-containers-with-go&quot;&gt;2&lt;/a&gt;&lt;/a&gt;&lt;/sup&gt; and a first implementation using Python. &lt;/p&gt;
&lt;h3 id=&quot;wasting-resources&quot;&gt;Wasting Resources&lt;/h3&gt;
&lt;p&gt;&lt;span /&gt;As a rule of thumb, I reckon Python to be an order of magnitude more wasteful of CPU cycles and memory than my favourite low-level language, C++.&lt;/p&gt;
&lt;p&gt;What do I mean by an order of magnitude? Well, it&amp;#8217;s a factor somewhere between 2 and 10. The problem is, I really have no better understanding or control than that. Sometimes it&amp;#8217;s 2, sometimes it&amp;#8217;s 10, sometimes it&amp;#8217;s somewhere in between. I &lt;em&gt;have&lt;/em&gt; looked at the CPython implementation, but not closely enough to understand how much memory a list of N large integers requires, nor how long it takes to iterate through such a list. The language reference provides few guarantees.&lt;/p&gt;
&lt;p&gt;This wastefulness doesn&amp;#8217;t just mean a Python program consumes proportionately more resources. It also means there will be a point at which a Python program fails because it exhausts resources and the machine starts to thrash &amp;#8212; and at this point: &lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;big-O complexity analysis ceases to be of any practical value&lt;/li&gt;
&lt;li&gt;you&amp;#8217;ll need a higher-spec machine&lt;/li&gt;
&lt;li&gt;or a leaner program&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;The Big City Skyline puzzle specifies a target platform (a platform similar to the one I used for the exercise), ruling out option 2.&lt;/p&gt;
&lt;p&gt;As you may have guessed, my first Python solution bumped into my machine&amp;#8217;s limits well before I&amp;#8217;d reached the &amp;#8220;hard&amp;#8221; values of N &amp;#8212; a disappointment, though perhaps not a huge surprise. Actually, either a pass or a fail would have been a surpise: I had &lt;em&gt;no way of knowing&lt;/em&gt; beforehand. Python does ship with an &lt;a href=&quot;http://docs.python.org/lib/module-array.html&quot;&gt;&lt;code&gt;array&lt;/code&gt; module&lt;/a&gt; which I&amp;#8217;m guessing might have done the job &amp;#8212; had &lt;code&gt;sizeof(int)&lt;/code&gt; been 8 on my platform that is, which it isn&amp;#8217;t. There&amp;#8217;s also a &lt;a href=&quot;http://numpy.scipy.org&quot;&gt;&lt;code&gt;numpy&lt;/code&gt; module&lt;/a&gt; which provides far more, but which I&amp;#8217;ve never had cause to use yet.&lt;/p&gt;
&lt;h3 id=&quot;accounting-for-resources&quot;&gt;Accounting for Resources&lt;/h3&gt;
&lt;p&gt;I&amp;#8217;ve never had cause to use &lt;code&gt;numpy&lt;/code&gt; because I&amp;#8217;m proficient in C and C++. One great thing about C, and to a lesser extent, C++, is that it&amp;#8217;s easy to predict how a simple program will consume resources &amp;#8212; especially if, as in this case, you can use &lt;a href=&quot;http://www.sgi.com/tech/stl/table_of_contents.html&quot;&gt;standard&lt;/a&gt; &lt;code&gt;vectors&lt;/code&gt; and &lt;code&gt;algorithms&lt;/code&gt;. I reworked my Python program into C++, checked it passed the tests. It then crunched through a random Big City skyline in well under 30 seconds. The important point is that this was &lt;em&gt;not&lt;/em&gt; a surprise. I &lt;em&gt;knew&lt;/em&gt; how much memory would be needed and (roughly) how much time would be taken.&lt;/p&gt;
&lt;p&gt;I was pleased how clean the C++ solution was. It reminded me that on a good day, the C++ standard library allows you to write code which is clear, &lt;a href=&quot;http://www.artima.com/cppsource/lazy_builder.html&quot;&gt;concise and efficient&lt;/a&gt;.&lt;/p&gt;
&lt;hr /&gt;
&lt;p&gt;&lt;a id=&quot;footnote1&quot;&gt;&lt;a href=&quot;https://blog.codeship.com/building-minimal-docker-containers-for-go-applications/&quot;&gt;1&lt;/a&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;You&amp;#8217;ll find a decent &lt;a href=&quot;http://www.codinghorror.com/blog/archives/000951.html&quot;&gt;list of these puzzles&lt;/a&gt; and an interesting meta-discussion over at Coding Horror (look in the comments too, where you&amp;#8217;ll find a broken solution to the Google Skyline puzzle).&lt;/p&gt;
&lt;p&gt;&lt;a id=&quot;footnote2&quot;&gt;&lt;a href=&quot;http://devcenter.wercker.com/docs/quickstarts/advanced/building-minimal-containers-with-go&quot;&gt;2&lt;/a&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Unit tests and some timing tests for the skyline puzzle are available via anonymous subversion access at: &lt;code&gt;http://svn.wordaligned.org/svn/etc/skyline&lt;/code&gt;&lt;/p&gt;</description>
<dc:date>2007-10-01</dc:date>
<guid>http://wordaligned.org/articles/big-city-skyline-puzzle</guid>
<author>tag@wordaligned.org (Thomas Guest)</author>
<link>http://wordaligned.org/articles/big-city-skyline-puzzle</link>
<category>Google</category>
</item>

<item>
<title>Collaborative documentation tools</title>
<description>&lt;p&gt;Version control is one of the unquestioned foundations of software development: while there may be discussion about which version control system to use, whether or not to allow concurrent modification, how to secure access to the system etc., noone would think of undertaking any serious project without using version control. Quite simply it&amp;#8217;s how a team of people can work on the same codebase at the same time.&lt;/p&gt;
&lt;p&gt;Yet recently I &lt;a href=&quot;http://wordaligned.org/articles/a-world-without-version-control.html&quot;&gt;described&lt;/a&gt; a project where version control was not used. Instead, the team relied on ad-hoc file sharing, circulating source files by email and by copying them to a shared folder. Concurrent modifications were prohibited. System integration was left until the last minute. Inevitably the project manager worked through the night to meet the delivery deadline &amp;#8212; a proven technique for bug creation. &lt;span /&gt;What&amp;#8217;s worse, noone on the team really questioned this mode of operation.&lt;/p&gt;
&lt;p&gt;&lt;span id=&quot;continue-reading&quot;/&gt;&lt;/p&gt;
&lt;h3 id=&quot;why&quot;&gt;Why?&lt;/h3&gt;
&lt;p&gt;Because the final system was a document. Because the source files (the sections of this document, that is) were edited using Microsoft Word. Because the team &amp;#8212; a combination of sales people, business managers and technical experts &amp;#8212; knew no better way of working &lt;sup&gt;&lt;a href=&quot;http://wordaligned.org/articles/collaborative-documentation-tools#footnote1&quot;&gt;&lt;a href=&quot;http://wordaligned.org/articles/a-world-without-version-control.html&quot;&gt;1&lt;/a&gt;&lt;/a&gt;&lt;/sup&gt;.&lt;/p&gt;
&lt;p&gt;The sad truth is, I don&amp;#8217;t know of any documentation system which could have coped with the requirements of this project. Version control isn&amp;#8217;t the problem. Subversion (for example) is more than up to the job of managing the source files, by which I mean not that it allows secure, networked access to the files, backups, revision control and so on &amp;#8212; that&amp;#8217;s a given; but rather that it comes with user-friendly clients such as &lt;a href=&quot;http://tortoisesvn.tigris.org/&quot;&gt;TortoiseSVN&lt;/a&gt;. You don&amp;#8217;t need to be a programmer to use TortoiseSVN.&lt;/p&gt;
&lt;h3 id=&quot;latex-and-docbook&quot;&gt;LaTeX and DocBook&lt;/h3&gt;
&lt;p&gt;No, the problem is with the documentation systems themselves. You &lt;em&gt;do&lt;/em&gt; need to be a programmer to work with a system based on &lt;a href=&quot;http://www.latex-project.org/&quot;&gt;LaTeX&lt;/a&gt; or on &lt;a href=&quot;http://docbook.org&quot;&gt;DocBook&lt;/a&gt; &amp;#8212; or at least to give up Microsoft Word in favour of such a system. Yet the benefits, if you can make the move, &lt;a href=&quot;http://wordaligned.org/articles/softdoc.html&quot;&gt;are substantial&lt;/a&gt;: you can assemble documents from separate sections, you can view differences between versions, more than one person can work on the same section at the same time, you can generate various output formats from a single set of sources, branching and merging become possible, as do more sophisticated text transformations, and searching multiple documents becomes a snip.&lt;/p&gt;
&lt;h3 id=&quot;google-documents&quot;&gt;Google documents&lt;/h3&gt;
&lt;p&gt;I recently tried out the Google documents word processor, which I&amp;#8217;d rather assumed I&amp;#8217;d like. It &lt;em&gt;has&lt;/em&gt; got many things right &amp;#8212; document access, for example. You control who can view the document, who can edit the document, and shared access is as simple as an internet connection. Integration with the email client was equally sweet, assuming you use &lt;a href=&quot;http://mail.google.com&quot;&gt;gmail&lt;/a&gt; that is. Document versioning and differencing is also in place. Unfortunately I&amp;#8217;d say there&amp;#8217;s still some way to go with the basic document editing, which I found sluggish and clunky.&lt;/p&gt;
&lt;p&gt;I wouldn&amp;#8217;t recommend it, at least not yet, but, like the team I described, I don&amp;#8217;t really know of anything better. Collaborative, networked documentation tools are the way forwards, I suggest; and I think these tools could usefully steal many ideas from successful software development tools. They&amp;#8217;re just not there yet.&lt;/p&gt;
&lt;hr /&gt;
&lt;p&gt;&lt;a id=&quot;footnote1&quot;&gt;&lt;a href=&quot;http://wordaligned.org/articles/a-world-without-version-control.html&quot;&gt;1&lt;/a&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;I&amp;#8217;ve experienced worse. At one place I worked software development activities were organised into separate projects. Each project had its own documentation folder on a networked drive; beneath this folder a number of standard subfolders contained design, planning, specification documents and so on. Documents within a project were indexed using a spreadsheet in the top-level folder. A master spreadsheet indexed all the spreadsheets. Each project had a project number. Each document in each project had a document number. There were spreadsheets containing the numbers. Documents included version numbers in their filenames: &lt;code&gt;N237571_tasklist_V37.doc&lt;/code&gt;. To edit a document you had to copy it to its new file name then edit its properties to set the internal version number equal to the internal one, then fill out the document history form. To revert a document, someone had to dig through the backups. Everyone had write access to everything. Concurrent modifications were outlawed. I shudder at the memory.&lt;/p&gt;</description>
<dc:date>2007-08-10</dc:date>
<guid>http://wordaligned.org/articles/collaborative-documentation-tools</guid>
<author>tag@wordaligned.org (Thomas Guest)</author>
<link>http://wordaligned.org/articles/collaborative-documentation-tools</link>
<category>Google</category>
</item>

<item>
<title>When web search results get read out of context</title>
<description>&lt;p&gt;It&amp;#8217;s always interesting to root around &lt;a href=&quot;http://httpd.apache.org/&quot;&gt;httpd&lt;/a&gt; server logs and see which web searches refer readers to &lt;a href=&quot;http://wordaligned.org&quot;&gt;Word Aligned&lt;/a&gt;. Occasionally, though, it&amp;#8217;s alarming. Certainly I&amp;#8217;m reminded I ought to keep material up to date, or at least ensure that everything I post includes sufficient date/version information for readers to judge when it might have passed its sell-by date. Should I also make sure nothing here can be taken out of context? After all, many readers aren&amp;#8217;t interested in reading through the whole of an article: they just want the specific advice their web search reveals. How do I &lt;a href=&quot;http://www.google.co.uk/search?hl=en&amp;amp;q=test+subversion+pre-commit+hook&quot;&gt;test a Subversion pre-commit hook&lt;/a&gt;? How do I &lt;a href=&quot;http://www.google.co.uk/search?hl=en&amp;amp;q=use+spirit+to+parse+a+binary+file&quot;&gt;use Spirit to parse a binary file&lt;/a&gt;? Find me a picture of the &lt;a href=&quot;http://www.google.co.uk/search?source=ig&amp;amp;hl=en&amp;amp;q=newport+transporter+bridge+picture&quot;&gt;Newport Transporter bridge&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Here&amp;#8217;s an example. Few people bother to &lt;a href=&quot;http://wordaligned.org/articles/rtm-vs-stw.html&quot;&gt;RTM these days when STW&lt;/a&gt; gets the answer more directly, but it still comes as a surprise to me that anyone should ask a question as basic &lt;em&gt;&amp;#8220;How do I comment out code?&amp;#8221;&lt;/em&gt; &amp;#8212; a question which, it turns out, occasionally directs programmers &lt;a href=&quot;http://wordaligned.org/ccomments/code_in_comments/howto.html&quot;&gt;here&lt;/a&gt;. I hope these programmers take the time to read the rest of the article, which argues that the version control system is the best home for old code, and that deleting code beats commenting it out.&lt;/p&gt;</description>
<dc:date>2007-08-07</dc:date>
<guid>http://wordaligned.org/articles/a-web-search-result-is-read-out-of-context</guid>
<author>tag@wordaligned.org (Thomas Guest)</author>
<link>http://wordaligned.org/articles/a-web-search-result-is-read-out-of-context</link>
<category>Google</category>
</item>

<item>
<title>In, on and out of boxes</title>
<description>&lt;h3 id=&quot;how-do-you-google-if-you-cant-spell&quot;&gt;How do you google if you can&amp;#8217;t spell?&lt;/h3&gt;
&lt;p&gt;Alex is five years old. He knows all the letters of the alphabet: he knows their names and recognises them in their upper- and lower- case forms. This doesn&amp;#8217;t mean he can spell though.&lt;/p&gt;
&lt;p&gt;Despite this handicap, his basic lexical skills allow him to find what he wants on the internet. And I&amp;#8217;m not talking about Google&amp;#8217;s &lt;a href=&quot;http://www.googleguide.com/spelling_corrections.html&quot;&gt;spelling corrector&lt;/a&gt;, which is really only of use to people who are capable of reading and writing well enough to realise when they&amp;#8217;ve spelled something wrong.&lt;/p&gt;
&lt;p&gt;Here&amp;#8217;s an example: Alex likes Scooby Doo. He watches Scooby Doo on TV, looks at Scooby Doo comics, owns a Scooby Doo DVD. He likes playing simple Flash-based games on the internet. How can he find a Scooby Doo web site which provides such games?&lt;/p&gt;
&lt;p&gt;Before you try and solve that puzzle (and I do think it&amp;#8217;s worth trying to solve it before I give away the answer) I&amp;#8217;d like to pose another. As a software developer, how can you work on a system you don&amp;#8217;t understand? Maybe you weren&amp;#8217;t involved in designing it or writing it &amp;#8212; or maybe you were and its operations have become opaque. Maybe it&amp;#8217;s even written in a language you&amp;#8217;ve never used.&lt;/p&gt;
&lt;p&gt;&lt;span id=&quot;continue-reading&quot;/&gt;&lt;/p&gt;
&lt;h4 id=&quot;scooby-dooby-doo-where-are-you&quot;&gt;Scooby-dooby-doo, where are you?&lt;/h4&gt;
&lt;p&gt;Perhaps the obvious way for Alex would be to call for adult assistance:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&amp;#8220;Da-a-add, can you put me on the Scooby Doo web site!&amp;#8221;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;And if that doesn&amp;#8217;t work:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&amp;#8220;Mu-u-umm, can you put me on the Scooby Doo web site!&amp;#8221;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Or even:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&amp;#8220;Isobel, can you put me on the Scooby Doo web site!&amp;#8221;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Like most children of his age, though, he prides himself on self-reliance and is happy enough to work a little harder to get where he wants if he can get there by himself. Besides, the chances are that mum and dad are busy, and there&amp;#8217;s a danger that Isobel will take over and head for the Bratz web site instead.&lt;/p&gt;
&lt;p&gt;So he goes to the drawer where the DVDs are kept, pulls out the Scooby Doo DVD, goes back to the computer, opens FireFox, clicks to set focus in the Google search box in the toolbar, then painstakingly types in the letters &amp;#8220;S C O O B Y D O O&amp;#8221;, copied one by one from the DVD case. From there it&amp;#8217;s a simple matter of navigating through the search results until he finds something which appeals, or gets fed up and finds something better to do.&lt;/p&gt;
&lt;h3 id=&quot;on-the-box&quot;&gt;On the box&lt;/h3&gt;
&lt;blockquote&gt;
&lt;p&gt;&amp;#8220;A child of five could understand this. Someone fetch a child of five&amp;#8221; &amp;#8212; &lt;a href=&quot;http://quoteworld.org/quotes/10023&quot;&gt;Groucho Marx&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Here&amp;#8217;s another modern dilemma. We have a television in our living room. It&amp;#8217;s an old analogue set which we use to watch digital terrestrial TV by connecting it to a &lt;a href=&quot;http://www.freeview.co.uk/&quot;&gt;freeview&lt;/a&gt; receiver. We also watch DVDs using a DVD player which again attaches to the TV. That means managing three separate remote controls before you can watch anything.&lt;/p&gt;
&lt;p&gt;Isobel and Alex haven&amp;#8217;t read the manuals but they&amp;#8217;re capable of turning on the TV and finding a cartoon channel or playing a DVD; yet adults who&amp;#8217;ve supervised them in the past have almost invariably needed a cheat sheet.&lt;/p&gt;
&lt;p&gt;Of course the children have the home advantage here. They&amp;#8217;re also growing up in an age of multimedia and software (and, perhaps, in an age when electrical and electronic products don&amp;#8217;t integrate very smoothly). &lt;span /&gt;The most important factor in their success, though, is their willingness to experiment, combined with persistence and patience. What happens if you press this button? That button? When you hold this button down? They&amp;#8217;ve got the time to find out.&lt;/p&gt;
&lt;h3 id=&quot;playing-with-software&quot;&gt;Playing with Software&lt;/h3&gt;
&lt;p&gt;There&amp;#8217;s a misconception that software development is purely a logical activity: if we rational humans think long enough and hard enough, we can bend computers to our will. I was lucky to attend &lt;a href=&quot;http://www.knosof.co.uk&quot;&gt;Derek M Jones&amp;#8217;&lt;/a&gt; superb presentation &amp;#8220;When Stone Age Brain meets Programming&amp;#8221; at the &lt;a href=&quot;http://accu.org/index.php/conferences/2004&quot;&gt;ACCU 2004 conference&lt;/a&gt;, when he debunked this myth. Humans aren&amp;#8217;t &lt;em&gt;rational&lt;/em&gt;. We&amp;#8217;re communicators, we&amp;#8217;re curious, we&amp;#8217;re creatures of habit; but even the simplest logical puzzles quickly bewilder us.&lt;/p&gt;
&lt;p&gt;Once a software system grows beyond a certain size it becomes impossible to reason exactly how it&amp;#8217;s going to behave. Indeed, a complex system often appears more organic than mechanical. The &lt;a href=&quot;http://wiki.wordaligned.org/sicp/published/HomePage&quot;&gt;Spirit in the Computer&lt;/a&gt; takes over. &lt;/p&gt;
&lt;p&gt;In the face of such mischief, I think my children have demonstrated some viable and perhaps under-rated tactics. Experimentation and persistence are crucial supplements to reason: if you do this, then that, something happens, but if you do that then this, it doesn&amp;#8217;t. Given time and patience, in this way we can build an understanding of how a system (mis-)behaves, and this is a first step towards working out why it behaves this way.&lt;/p&gt;
&lt;p&gt;When we experiment with software we mustn&amp;#8217;t just approach it as end users do &amp;#8212; not if we really want to learn about it. We need to pull it apart, module by module, and then poke the modules one at a time and see how they react. (Yes, I&amp;#8217;m talking about test harnesses, and yes, some systems are better suited to this sort of dissection than others.) Being software, we don&amp;#8217;t have to disrupt our regular users to do this: we just clone the system, and if we&amp;#8217;re concerned our inexperience might trash our machine, we use a virtual one.&lt;/p&gt;
&lt;h3 id=&quot;knowledge&quot;&gt;Knowledge&lt;/h3&gt;
&lt;p&gt;The things children have less of, at this stage, are experience and knowledge, but experimentation soon builds both of these. I can &lt;em&gt;hear&lt;/em&gt; when an algorithm is CPU-bound, or running out of memory for example. Sometimes I can even smell it!&lt;/p&gt;
&lt;p&gt;Alex hesitates to ask for help, realising that ultimately he&amp;#8217;ll be better off if he can sort out his own problems. Software developers shouldn&amp;#8217;t be so hesitant, but we do need to make sure the help we get really is helpful: too often our assistants take over, and we remain dependent. And when the situation is reversed it&amp;#8217;s too tempting to treat a request for help as an opportunity to show off.&lt;/p&gt;
&lt;h3 id=&quot;in-and-out-of-boxes&quot;&gt;In and out of boxes&lt;/h3&gt;
&lt;p&gt;The other quality we&amp;#8217;ve seen is ingenuity: the ability to think outside the box. Alex knew he had to use the computer keyboard and mouse to locate the Scooby Doo website, but he also worked out he&amp;#8217;d have to leave them, temporarily, in order to reach his destination. How can we train ourselves to think in this way &amp;#8212; to think in a way we wouldn&amp;#8217;t have thought we could think if we&amp;#8217;d stopped to think about it?&lt;/p&gt;
&lt;p&gt;The advice &lt;em&gt;&amp;#8220;think outside the box&amp;#8221;&lt;/em&gt; has become a clich&amp;eacute;, but in this case we should follow it literally. I&amp;#8217;ve already described an &lt;a href=&quot;http://wordaligned.org/articles/an-ideal-working-environment.html&quot;&gt;ideal working environment&lt;/a&gt;, one which has clearly served my children well. My working environment is less ideal: I work on a box (a desktop computer) and in a box (an office). Thinking outside the box starts with logging off and going somewhere else.&lt;/p&gt;</description>
<dc:date>2007-07-21</dc:date>
<guid>http://wordaligned.org/articles/in-on-and-out-of-boxes</guid>
<author>tag@wordaligned.org (Thomas Guest)</author>
<link>http://wordaligned.org/articles/in-on-and-out-of-boxes</link>
<category>Google</category>
</item>

<item>
<title>Google Reader</title>
<description>&lt;p&gt;My google homepage disappeared yesterday. I don&amp;#8217;t know why, but wonder
if an &lt;a href=&quot;http://wordaligned.org/articles/a-tale-of-two-upgrades.html&quot;&gt;upgrade&lt;/a&gt; was botched since it&amp;#8217;s back again today as if
nothing ever happened. During the downtime I investigated &lt;a href=&quot;http://www.google.com/reader&quot;&gt;google
reader&lt;/a&gt;. I like it: just as
&lt;a href=&quot;http://mail.google.com/mail/&quot;&gt;gmail&lt;/a&gt; re-invents the email client, so
google reader re-invents the news reader as a way of finding and
organising feeds. So now I&amp;#8217;ve replaced a number of feeds on my google
homepage with a single google reader gadget.&lt;/p&gt;</description>
<dc:date>2007-04-27</dc:date>
<guid>http://wordaligned.org/articles/google-reader</guid>
<author>tag@wordaligned.org (Thomas Guest)</author>
<link>http://wordaligned.org/articles/google-reader</link>
<category>Google</category>
</item>

<item>
<title>A tale of two upgrades</title>
<description>&lt;p&gt;This week I upgraded my &lt;a href=&quot;http://www.google.com/ig&quot;&gt;google personal homepage&lt;/a&gt; and I upgraded
some software on my PC &amp;#8212; and the two processes couldn&amp;#8217;t have been
more different. This post describes my experience. It goes on to
discuss the two different models of supplying and upgrading software
from both a user&amp;#8217;s and a software provider&amp;#8217;s perspective.&lt;/p&gt;
&lt;p&gt;&lt;span id=&quot;continue-reading&quot;/&gt;&lt;/p&gt;
&lt;h3 id=&quot;google-homepage-upgrade&quot;&gt;Google homepage upgrade&lt;/h3&gt;
&lt;p&gt;The &lt;a href=&quot;http://www.google.com/ig&quot;&gt;google homepage&lt;/a&gt; upgrade was painless. It just happened when I
visited the site. Actually it upgraded me and I&amp;#8217;m probably being
upgraded all the time, it&amp;#8217;s just that I don&amp;#8217;t usually notice: this
time, they&amp;#8217;d introduced another folding widget
&lt;img src=&quot;http://www.google.co.uk/ig/images/zippy_minus_sm.gif&quot; alt=&quot;Close widget&quot;/&gt;
&lt;img src=&quot;http://www.google.co.uk/ig/images/zippy_plus_sm.gif&quot; alt=&quot;Open widget&quot;/&gt;,
allowing me to preview a syndicated article
without having to leave the page.&lt;/p&gt;
&lt;p&gt;Incidentally, I don&amp;#8217;t even know what version of google homepage I&amp;#8217;m
using.  And I don&amp;#8217;t really care. If it&amp;#8217;s like most google software,
it&amp;#8217;s probably labelled as &amp;#8220;beta&amp;#8221; &amp;#8212; despite being rock solid.
Whatever version it is, I don&amp;#8217;t have any choice in the matter. I get
what they give me.&lt;/p&gt;
&lt;h3 id=&quot;pc-software-upgrade&quot;&gt;PC software upgrade&lt;/h3&gt;
&lt;p&gt;The PC software upgrade was less straightforward. As soon as I&amp;#8217;d
booted up my PC, a host of upgrade agents started distracting me
&amp;#8212; it wasn&amp;#8217;t really how I wanted to start my working day, but I&amp;#8217;ve
learned that if you try and click away these agents, they&amp;#8217;ll only come
back and trouble you later at a similarly inconvenient time. The only
way to silence them is to obey. Here&amp;#8217;s what the first friendly
instruction dialog advised:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;This update is for MacBook computers with Intel processors only.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Note: Print or write down these instructions before you begin the update.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;To update the firmware on your Intel-based MacBook:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;Quit all other open applications.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Click Shut Down in the MacBook EFI Firmware Update window and wait for your computer to shut down.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Press and hold the power button on your MacBook until the power indicator light flashes repeatedly to begin the update.&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;A status bar indicates the progress of the update.
   &lt;strong&gt;Important: Do not interrupt the update.&lt;/strong&gt;
   Your computer restarts automatically when the update is completed and opens the MacBook EFI Firmware Update.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Click OK, if the firmware is now up-to-date.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;If these instructions appear on your screen again, the firmware update
was not successful. Repeat steps 2, 3 and 4.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;These are simple enough instructions, but they certainly didn&amp;#8217;t make
me feel comfortable. They carry a strong hint that something might go
wrong:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;There&amp;#8217;s only one thing for it. You&amp;#8217;ll need to send your computer
into a coma then prod it until it revives. It&amp;#8217;s risky but it&amp;#8217;s the
only way.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Consider the poor user who doesn&amp;#8217;t know what processor they&amp;#8217;re
running, or what a processor is, or what firmware means?  The
instructions didn&amp;#8217;t pop up in a document with a print button, so even
obeying the first note about printing them out needed thought &amp;#8212;
fortunately I had access to another PC so I just emailled them to
myself.&lt;/p&gt;
&lt;p&gt;Once I&amp;#8217;d upgraded the firmware &amp;#8212; phew!, it worked &amp;#8212; I dealt with the
other software upgrades. They too required me to restart my PC. They
weren&amp;#8217;t for software I use much.&lt;/p&gt;
&lt;p&gt;If it looks like I&amp;#8217;m quickly taking back everything
&lt;a href=&quot;http://wordaligned.org/articles/happy-mac.html&quot;&gt;I said about Macs&lt;/a&gt;
a couple of weeks back, I&amp;#8217;m not. Upgrade agents on a Windows PC
are even more annoying; but what&amp;#8217;s far worse is protecting yourself
against unwanted software &amp;#8220;upgrades&amp;#8221; (viruses, spyware, etc.). And the
variety of different package management systems on various Linux
distributions indicates that they too haven&amp;#8217;t solved the problem,
though at least the user typically pulls the upgrade rather than have
the computer push it at them.&lt;/p&gt;
&lt;h4 id=&quot;conclusions-users-perspective&quot;&gt;Conclusions: User&amp;#8217;s Perspective&lt;/h4&gt;
&lt;p&gt;It&amp;#8217;s a little glib to suggest that providing software as a service,
rather than as a desktop application, solves the upgrade problem.  For
a start, not all software is suited to being run remotely &amp;#8212; though as
bandwidths increase and browser capabilities improve, more and more
will fall into this category.&lt;/p&gt;
&lt;p&gt;From a user&amp;#8217;s point of view, as I&amp;#8217;ve already pointed out, using a
remotely hosted software service may seem like a loss of control: What&amp;#8217;s to
stop google reading my emails?  What guarantees they won&amp;#8217;t
carelessly delete my calendar appointments?  Will they suddenly
revoke a service I&amp;#8217;ve come depend on? Or will they simply auto-upgrade
me to a version I don&amp;#8217;t like?&lt;/p&gt;
&lt;p&gt;&lt;span /&gt;When we think more carefully, though, we realise these fears are
misplaced and often apply equally to desktop software. A poor quality
desktop application can shred your data, and you&amp;#8217;re also vulnerable to
hardware failures, viruses and burglars. I&amp;#8217;m willing to bet google&amp;#8217;s
backup regime is more rigorous than most domestic ones. Regarding
upgrades: you often get trapped in an upgrade dependency cycle on a PC
&amp;#8212; this package depends on that package, which requires the latest
version of another package, and you suddenly find you&amp;#8217;re running
bleeding edge software when all you wanted was a bugfix to something
which basically worked. And in an age when most computers are
permanently hooked to the internet, even the privacy argument weakens.&lt;/p&gt;
&lt;h4 id=&quot;conclusions-providers-perspective&quot;&gt;Conclusions: Provider&amp;#8217;s Perspective&lt;/h4&gt;
&lt;p&gt;Things are tough for the software provider too. If you decide to host
your software as a web-based service, there are &lt;a href=&quot;http://www.paulgraham.com/road.html&quot;&gt;advantages&lt;/a&gt;:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;you retain full control over the version of software you deploy (and which, therefore, your users use)&lt;/li&gt;
&lt;li&gt;you&amp;#8217;re directly connected to your customers; you can monitor use patterns and improve your application accordingly&lt;/li&gt;
&lt;li&gt;you don&amp;#8217;t need to port to a platform you don&amp;#8217;t like&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;With these advantages come responsibilities. You control your users&amp;#8217;
data, and it&amp;#8217;s your responsibility to make sure it&amp;#8217;s secure and that
their privacy is protected. You&amp;#8217;d better be capable of hosting the
service, 24 hours a day, 7 days a week, 52 weeks a year; and you&amp;#8217;ll
need to be capable of scaling up if necessary &amp;#8212; you can&amp;#8217;t increase
your user-base by printing more CDs.&lt;/p&gt;
&lt;p&gt;If, instead, you decide to deliver a desktop application, you need to
worry about which platforms you&amp;#8217;ll support. Saying you support
Windows, for example, isn&amp;#8217;t really good enough &amp;#8212; you need to consider
the various permutations of versions and service packs, and how you&amp;#8217;ll
test them, and how long you&amp;#8217;ll go on supporting them. And you have to
think about how customers can upgrade between versions of your
software &amp;#8212; a problem which I&amp;#8217;ll discuss in another post.&lt;/p&gt;</description>
<dc:date>2007-01-27</dc:date>
<guid>http://wordaligned.org/articles/a-tale-of-two-upgrades</guid>
<author>tag@wordaligned.org (Thomas Guest)</author>
<link>http://wordaligned.org/articles/a-tale-of-two-upgrades</link>
<category>Google</category>
</item>

<item>
<title>Permission and Forgiveness</title>
<description>&lt;p&gt;I needed to check the times for trains from Bristol to London, so
I went to &lt;a href=&quot;http://thetrainline.com&quot;&gt;http://thetrainline.com&lt;/a&gt; and
filled out the &lt;strong&gt;Quick Timetable&lt;/strong&gt; form, entering &lt;strong&gt;bristol temple meads&lt;/strong&gt;
and &lt;strong&gt;paddington&lt;/strong&gt; as my departure and destination points.&lt;/p&gt;
&lt;p&gt;&lt;span id=&quot;continue-reading&quot;/&gt;&lt;/p&gt;
&lt;h3 id=&quot;which-paddington&quot;&gt;Which Paddington?&lt;/h3&gt;
&lt;p&gt;As you can see, I stick to lowercase when I&amp;#8217;m in a hurry &amp;#8212; but I
did remember to specify which of the Bristol mainline stations I
intended to leave from, knowing from previous experience that the
Quick Timetable wouldn&amp;#8217;t be smart enough to simultaneously provide
answers for both.&lt;/p&gt;
&lt;p&gt;Unfortunately the trainline software couldn&amp;#8217;t figure out which
Paddington I wanted to travel to. What&amp;#8217;s worse, it tried to cover up
its confusion with a plethora of information and options. Sure, a
single click on the LONDON PADDINGTON link was all I needed to do,
but that link was buried half-way down the page, after a text entry field and
26 alphabetic selection links.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://wordaligned.org/files/thetrainline.png&quot; width=&quot;100%&quot; alt=&quot;The trainline station finder&quot;/&gt;&lt;/p&gt;
&lt;p&gt;As you can see, &lt;a href=&quot;http://thetrainline.com&quot;&gt;the trainline&lt;/a&gt; uses uppercase for stations, which isn&amp;#8217;t
reader-friendly.&lt;/p&gt;
&lt;p&gt;London Paddington has to be the best known station in the
country. It&amp;#8217;s also the only mainline Paddington station. It&amp;#8217;s also in
exactly the same place as Paddington Underground. Couldn&amp;#8217;t the
Trainline have made a wild guess that when I said Paddington I meant
&lt;strong&gt;LONDON PADDINGTON&lt;/strong&gt;?&lt;/p&gt;
&lt;p&gt;By this stage, I was curious to find out what would happen if I asked
for train times from Bristol Temple Meads to Paddington Underground. I
got a page full of unhelpful apologies, starting with:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;We cannot find any services that meet your request.&lt;/strong&gt;
Possible reasons and solutions are listed below. You can try and search for another journey by clicking on the back button:&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&quot;state-of-the-art&quot;&gt;State of the Art&lt;/h3&gt;
&lt;p&gt;The trainline isn&amp;#8217;t an egregious website. As you can see, I
prefer it to &lt;a href=&quot;http://www.nationalrail.co.uk/&quot;&gt;National Rail Enquiries&lt;/a&gt;
for timetable queries. But that&amp;#8217;s no excuse.  The
trainline should have figured out which Paddington I meant without
needing my permission to do so and begged my forgiveness if it
misinterpreted me.&lt;/p&gt;
&lt;p&gt;In the same way a &lt;a href=&quot;http://mail.google.com&quot;&gt;good email client&lt;/a&gt; should go ahead and delete an
email when I ask it to, rather than present an irritating confirmation
dialogue asking if I really am really sure I really want to really
delete it. I end up OK&amp;#8217;ing such a confirmation dialogue
on auto-pilot, meaning that the one time it might save me, it
doesn&amp;#8217;t. A good email client just deletes the message without
further permission and provides a way for me to recover it if
necessary.&lt;/p&gt;
&lt;p&gt;It&amp;#8217;s sometimes worth reminding ourselves that computers are here to serve
us. &lt;span /&gt;As programmers, perhaps we&amp;#8217;re rather too used to wrestling them into
submission &amp;ndash; perhaps we sometimes secretly &lt;em&gt;enjoy&lt;/em&gt; it &amp;ndash; and
as a consequence we expect other users to tolerate such impudence.&lt;/p&gt;
&lt;p&gt;Being a programmer, of course I managed to get the train times. I then
found myself thinking about a common &lt;a href=&quot;http://www.google.com/search?q=Python+EAFP&quot;&gt;Python idiom&lt;/a&gt; for handling tricky
inputs gracefully.&lt;/p&gt;
&lt;h3 id=&quot;permission-and-forgiveness&quot;&gt;Permission and Forgiveness&lt;/h3&gt;
&lt;p&gt;Code written in a statically typed language &amp;#8212; even if that language
supports exceptions &amp;#8212; often gets swamped by error handling
code. There are more ways for things to go wrong than right, and they
all need handling.&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://python.org&quot;&gt;Python&lt;/a&gt; is a dynamic language. Doesn&amp;#8217;t that mean that there are even
more ways to go wrong? After all, the compiler isn&amp;#8217;t going to check
that we pass a nice string into the following integer conversion
function.&lt;/p&gt;
&lt;div class=&quot;typocode&quot;&gt;&lt;div class=&quot;codetitle&quot;&gt;bad number converter&lt;/div&gt;

&lt;pre class=&quot;prettyprint&quot;&gt;def string_to_int(number_string):
    from string import digits
    char_to_digit = dict(zip(digits, range(10)))
    number = 0
    for ch in number_string:
        number *= 10
        number += char_to_digit[ch]
    return number

&lt;/pre&gt;

&lt;/div&gt;

&lt;p&gt;This function is woefully under-specified and guaranteed to misfire in
the face of poor input, but with a little more thought it can go
&lt;em&gt;right&lt;/em&gt; in situations which it wasn&amp;#8217;t originally coded for. Here&amp;#8217;s an
improved version:&lt;/p&gt;
&lt;div class=&quot;typocode&quot;&gt;&lt;div class=&quot;codetitle&quot;&gt;better number converter&lt;/div&gt;

&lt;pre class=&quot;prettyprint&quot;&gt;def thing_to_int(thing, default=0):
    &quot;&quot;&quot; Converts the input thing into an integer, returning a
    default value if the conversion fails.

    &amp;gt;&amp;gt;&amp;gt; thing_to_int(&quot;10&quot;)
    10
    &amp;gt;&amp;gt;&amp;gt; assert thing_to_int(1.e12) == 1000000000000
    &amp;gt;&amp;gt;&amp;gt; thing_to_int(&quot;one&quot;)
    0
    &amp;gt;&amp;gt;&amp;gt; thing_to_int(&quot;one&quot;, default=-1)
    -1
    &amp;gt;&amp;gt;&amp;gt; class forty_two(object):
    ...     def __int__(self): return 42
    &amp;gt;&amp;gt;&amp;gt; assert thing_to_int(forty_two()) == 42
    &quot;&quot;&quot;
    try:
        return int(thing)
    except:
        return default

def _test():
    import doctest
    doctest.testmod()

if __name__ == &quot;__main__&quot;:
    _test()

&lt;/pre&gt;

&lt;/div&gt;

&lt;p&gt;The function&amp;#8217;s documentation shows just how flexible this simple
function is. The idiom used here is to proceed assuming that the
function caller has passed a suitable &lt;code&gt;thing&lt;/code&gt; parameter, but to handle
any errors which occur.&lt;/p&gt;
&lt;p&gt;Here&amp;#8217;s another example, showing how we can use &lt;code&gt;set&lt;/code&gt; in a version of
&lt;a href=&quot;http://python.org&quot;&gt;Python&lt;/a&gt; which didn&amp;#8217;t build support for sets into the core
language. Note that we don&amp;#8217;t attempt to query version numbers or check
which libraries have been installed. We just try and use &lt;code&gt;set&lt;/code&gt; and
handle any fall-out.&lt;/p&gt;
&lt;div class=&quot;typocode&quot;&gt;&lt;div class=&quot;codetitle&quot;&gt;Using set in old and new versions of Python&lt;/div&gt;

&lt;pre class=&quot;prettyprint&quot;&gt;try:
    set
except NameError:
    from sets import Set as set

&lt;/pre&gt;

&lt;/div&gt;

&lt;p&gt;This idiom is known as &lt;a href=&quot;http://www.google.com/search?q=Python+EAFP&quot;&gt;&amp;#8220;it&amp;#8217;s easier to ask forgiveness than
permission&amp;#8221;&lt;/a&gt;.&lt;/p&gt;</description>
<dc:date>2006-12-07</dc:date>
<guid>http://wordaligned.org/articles/permission-and-forgiveness</guid>
<author>tag@wordaligned.org (Thomas Guest)</author>
<link>http://wordaligned.org/articles/permission-and-forgiveness</link>
<category>Google</category>
</item>

<item>
<title>Google Mail holiday auto-responder</title>
<description>&lt;p&gt;The more often you use a piece of software, the more important it is
that you should &lt;em&gt;enjoy&lt;/em&gt; using it. For example, I use
&lt;a href=&quot;www.gnu.org/software/emacs/&quot;&gt;Emacs&lt;/a&gt;,
&lt;a href=&quot;http://subversion.tigris.org/&quot;&gt;Subversion&lt;/a&gt; and &lt;a href=&quot;http://www.mozilla.com/firefox/&quot;&gt;Mozilla
Firefox&lt;/a&gt; pretty much every day, and I
really do enjoy using them.&lt;/p&gt;
&lt;p&gt;I use email frequently, but the only email client I&amp;#8217;ve ever enjoyed
using &amp;#8212; actually, the only email client which doesn&amp;#8217;t bug me &amp;#8212; is
&lt;a href=&quot;http://mail.google.com&quot;&gt;Google Mail&lt;/a&gt;. &lt;a href=&quot;http://mail.google.com&quot;&gt;Google
Mail&lt;/a&gt; just gets things right. What things?
Everything! The software doesn&amp;#8217;t get in my way; I don&amp;#8217;t spend ages
sorting and filing emails, yet can always find the one I want; the
interface is both clean and simple. And yet when you think about it,
&lt;a href=&quot;http://mail.google.com&quot;&gt;Google Mail&lt;/a&gt; is radically different from any
other email client. Clearly, a lot of thought and careful design has
gone into every feature, and it shows.&lt;/p&gt;
&lt;p&gt;&lt;span id=&quot;continue-reading&quot;/&gt;&lt;/p&gt;
&lt;p&gt;As a simple example, &lt;a href=&quot;http://mail.google.com&quot;&gt;Google Mail&lt;/a&gt; gets holiday
auto-responses right.&lt;/p&gt;
&lt;p&gt;Recently, I was on holiday and unable to read email. I wanted
anyone who sent me email to be politely informed I was away and
unable to answer their message until my return. It took
me just one click to reach the form I needed to fill in to set up
my &lt;a href=&quot;http://mail.google.com/support/bin/answer.py?ctx=%67mail&amp;amp;hl=en_GB&amp;amp;answer=25922&quot;&gt;holiday auto-response&lt;/a&gt;.
Another &lt;a href=&quot;http://mail.google.com/support/bin/answer.py?ctx=%67mail&amp;amp;hl=en_GB&amp;amp;answer=25922&quot;&gt;click&lt;/a&gt;
confirmed that the auto-responder would behave itself &amp;#8212; it wasn&amp;#8217;t
going to spam people who copied me on lots of emails, it wasn&amp;#8217;t
going to reply to mail reflectors &amp;#8212; it would get &lt;em&gt;things right&lt;/em&gt;.
I filled in the subject and body of my auto-response, saved my changes.
Job done.&lt;/p&gt;
&lt;p&gt;What I really liked, though, was the fact that my &amp;#8220;on-holiday&amp;#8221; status
was reflected immediately and prominently at the top of the front page
of my &lt;a href=&quot;http://mail.google.com&quot;&gt;Google Mail&lt;/a&gt; account. Meaning that, on
my return from holiday it was immediately apparent that my
auto-responder was still in effect &amp;#8212; and it took just a single click
to disable it. In so many other email clients it ends up being
someone else who reminds you to turn off your auto-responder.
Not the end of the world, but not what you want from software you
use every day.&lt;/p&gt;</description>
<dc:date>2006-07-30</dc:date>
<guid>http://wordaligned.org/articles/google-mail-holiday-auto-responder</guid>
<author>tag@wordaligned.org (Thomas Guest)</author>
<link>http://wordaligned.org/articles/google-mail-holiday-auto-responder</link>
<category>Google</category>
</item>

</channel>
</rss>
