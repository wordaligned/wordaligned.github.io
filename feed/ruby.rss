<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:dc="http://purl.org/dc/elements/1.1/" >
<channel>
<title>Word Aligned</title>
<link>http://wordaligned.org</link>
<description>tales from the code face</description>
<dc:creator>tag@wordaligned.org</dc:creator>
<language>en-gb</language>
<item>
<title>Too big or too clever?</title>
<description>&lt;p&gt;When it comes to programming languages, not everyone equates &lt;em&gt;dynamic&lt;/em&gt; with &lt;em&gt;better&lt;/em&gt;, but I was surprised to read Alex Martelli cautioning against it. Here he is though, in a recent &lt;a href="http://groups.google.com/group/comp.lang.python/msg/28422d707512283"&gt;post&lt;/a&gt; on &lt;code&gt;comp.lang.python&lt;/code&gt;, responding eloquently to the topic &amp;#8220;What&amp;#8217;s better about Ruby than Python?&amp;#8221;. 
&lt;/p&gt;
&lt;span id="continue-reading"/&gt;


&lt;h3&gt;Too clever&lt;/h3&gt;
&lt;p&gt;Martelli identifies a fundamental difference between the two languages:
&lt;/p&gt;
&lt;blockquote&gt;&lt;p&gt;&amp;#8230; Ruby&amp;#8217;s TOTAL, unbridled &amp;#8220;dynamicity&amp;#8221;, including the ability to &amp;#8220;reopen&amp;#8221; any existing class, including all built-in ones, and change its behavior at run-time &amp;#8212; vs Python&amp;#8217;s vast but &lt;em&gt;bounded&lt;/em&gt; dynamicity, which never changes the behavior of existing built-in classes and their instances.
&lt;/p&gt;
&lt;/blockquote&gt;&lt;p&gt;He considers this:
&lt;/p&gt;
&lt;blockquote&gt;&lt;p&gt;&amp;#8230; a crucial issue &amp;#8212; one that makes Ruby much more suitable for &amp;#8220;tinkering&amp;#8221;, BUT Python equally more suitable for use in large production applications.  It&amp;#8217;s funny, in a way, because both languages are so MUCH more dynamic than most others, that in the end the key difference between them from my POV should hinge on that &amp;#8212; that Ruby &amp;#8220;goes to eleven&amp;#8221; in this regard (the reference here is to &amp;#8220;Spinal Tap&amp;#8221;, of course).  In Ruby, there are no limits to my creativity &amp;#8212; if I decide that all string comparisons must become case-insensitive, I CAN DO THAT!  I.e., I can dynamically alter the built-in string class so that&lt;/p&gt;
&lt;pre&gt;
    a = "Hello World"
    b = "hello world"
    if a == b
        print "equal!\n"
    else
        print "different!\n"
    end
&lt;/pre&gt;
&lt;p&gt;WILL print &amp;#8220;equal&amp;#8221;.&lt;/p&gt;
&lt;p&gt;In python, there is NO way I can do
that.  For the purposes of metaprogramming, implementing
experimental frameworks, and the like, this amazing dynamic
ability of Ruby is _extremely_ appealing.  BUT &amp;#8212; if we&amp;#8217;re
talking about large applications, developed by many people
and maintained by even more, including all kinds of libraries
from diverse sources, and needing to go into production in
client sites&amp;#8230; well, I don&amp;#8217;t WANT a language that is QUITE
so dynamic, thank you very much.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;I&amp;#8217;ve heard this opinion before, nudged even further along the static-dynamic scale. Some argue Python is &lt;a href="http://wordaligned.org/articles/pitching-python-in-three-syllables.html"&gt;too dynamic&lt;/a&gt; for large applications; that you&amp;#8217;re better off with something more disciplined, statically typed, enterprise ready, something with decent IDEs to keep your code in shape &amp;#8212; something like Java.
&lt;/p&gt;

&lt;h3&gt;Too Big&lt;/h3&gt;
&lt;p&gt;In &lt;a href="http://steve-yegge.blogspot.com/2007/12/codes-worst-enemy.html"&gt;&amp;#8220;Code&amp;#8217;s Worst Enemy&amp;#8221;&lt;/a&gt; Steve Yegge rants about his own large application:
&lt;/p&gt;
&lt;blockquote&gt;&lt;p&gt;&amp;#8230; a beautiful game [written] in an ugly language &amp;#8230; lovely on the outside and quite horrific internally
&lt;/p&gt;
&lt;/blockquote&gt;&lt;p&gt;The ugly language turns out to be Java, 500,000 lines of it. Eclipse won&amp;#8217;t load it. The code base has collapsed under its own weight.
&lt;/p&gt;
&lt;p&gt;Yegge identifies size as the enemy. More controversially, he argues some of our conventional allies in countering this enemy are, in fact, traitors. Refactoring, for one: applied to Java, it can result in code bloat. And all that design-pattern boiler-plate. Look, even our precious IDEs deceive us!
&lt;/p&gt;
&lt;blockquote&gt;&lt;p&gt;Java-style IDEs intrinsically create a circular problem. The circularity stems from the nature of programming languages: the &amp;#8220;game piece&amp;#8221; shapes are determined by the language&amp;#8217;s static type system. Java&amp;#8217;s game pieces don&amp;#8217;t permit code elimination because Java&amp;#8217;s static type system doesn&amp;#8217;t have any compression facilities &amp;#8212; no macros, no lambdas, no declarative data structures, no templates, nothing that would permit the removal of the copy-and-paste duplication patterns that Java programmers think of as &amp;#8220;inevitable boilerplate&amp;#8221;, but which are in fact easily factored out in dynamic languages.
&lt;/p&gt;
&lt;p&gt;Completing the circle, dynamic features make it more difficult for IDEs to work their static code-base-management magic. IDEs don&amp;#8217;t work as well with dynamic code features, so IDEs are responsible for encouraging the use of languages that require&amp;#8230; IDEs. Ouch.
&lt;/p&gt;
&lt;/blockquote&gt;&lt;p&gt;I think Yegge gets a lot wrong in this rant, but it&amp;#8217;s clear he speaks from experience, and for all his swagger it&amp;#8217;s also clear he&amp;#8217;s thought hard about what he says. I agree with his main point: &lt;strong&gt;size is the enemy&lt;/strong&gt;. And I agree with his conclusion too. You need a language which allows you to dispense with boiler-plate, a language in which you &lt;a href="http://c2.com/cgi/wiki?DontRepeatYourself"&gt;don&amp;#8217;t have to repeat yourself&lt;/a&gt;. A powerful language. A dynamic language.
&lt;/p&gt;

&lt;h3&gt;Who&amp;#8217;s Right?&lt;/h3&gt;
&lt;p&gt;So, who&amp;#8217;s right? 
&lt;/p&gt;
&lt;p&gt;For a large application developed by a large team and maintained by a larger one could a language like Ruby be &lt;strong&gt;too dynamic&lt;/strong&gt;? 
&lt;/p&gt;
&lt;p&gt;Or is &lt;strong&gt;size the enemy&lt;/strong&gt;? Do we need a language so powerful it &lt;a href="http://blog.plover.com/prog/design-patterns.html"&gt;absorbs design patterns&lt;/a&gt;, so dynamic we never need repeat ourselves, so succinct we can &lt;a href="http://www.paulgraham.com/head.html"&gt;fit the code in our heads&lt;/a&gt;?
&lt;/p&gt;
&lt;p&gt;I&amp;#8217;d say the latter. A dynamic language might be too slow (for a few parts of a system) but it can&amp;#8217;t be too dynamic. Meta-programming requires taste and restraint, of course, not to mention boundaries; and we mustn&amp;#8217;t expect any one programming language to fix our design. For any large system, I&amp;#8217;d expect multiple components, layers of abstraction &amp;#8212; and layers of languages.
&lt;/p&gt;</description>
<dc:date>2007-12-20</dc:date>
<guid>http://wordaligned.org/articles/too-big-or-too-clever</guid>
<author>tag@wordaligned.org (Thomas Guest)</author>
<link>http://wordaligned.org/articles/too-big-or-too-clever</link>
<category>Ruby</category>
</item>

<item>
<title>Metablog</title>
<description>&lt;h3&gt;blog.wordaligned.org is dead&lt;/h3&gt;
&lt;p&gt;After over 14 months and 130 posts, I&amp;#8217;m closing down http://blog.wordaligned.org.
&lt;/p&gt;
&lt;p&gt;Why?
&lt;/p&gt;
&lt;p&gt;Well, despite trying, I still dislike the word &lt;strong&gt;blog&lt;/strong&gt;. No, I&amp;#8217;m not against neologisms and no, it&amp;#8217;s not as horrible as &lt;a href="http://martinfowler.com/bliki/WhatIsaBliki.html"&gt;&lt;strong&gt;bliki&lt;/strong&gt;&lt;/a&gt; &amp;#8212; but it just doesn&amp;#8217;t &lt;em&gt;smell&lt;/em&gt; nice. And no, I don&amp;#8217;t like &lt;em&gt;&amp;#8217;blog&lt;/em&gt;, &lt;em&gt;weblog&lt;/em&gt;, &lt;em&gt;web-log&lt;/em&gt; or &lt;em&gt;web log&lt;/em&gt; either.
&lt;/p&gt;
&lt;p&gt;There&amp;#8217;s a bit more to it than that, though. This article reviews my experience of running and writing a blog, lessons I&amp;#8217;ve learned, and my plans for the future.
&lt;/p&gt;
&lt;span id="continue-reading"/&gt;


&lt;h3&gt;Quality and Quantity&lt;/h3&gt;
&lt;p&gt;A couple of things Mark Dominus &lt;a href="http://blog.plover.com/meta/200710-delay.html"&gt;writes&lt;/a&gt; ring true:
&lt;/p&gt;
&lt;blockquote&gt;&lt;p&gt;I haven&amp;#8217;t posted in a couple of weeks, and I was wondering why. &amp;#8230; In the past ten days I&amp;#8217;ve written seven articles that are unfinished or that didn&amp;#8217;t work. Usually only about a third of my articles flop; this month a whole bunch flopped in a row. What can I say? Sometimes the muse delivers, and sometimes she doesn&amp;#8217;t.
&lt;/p&gt;
&lt;p&gt;I said a while back that I would try to publish more regularly, and not wait until every article was perfect. But I don&amp;#8217;t want to publish the unfinished articles yet. 
&lt;/p&gt;
&lt;/blockquote&gt;&lt;p&gt;My intention, when I started &lt;a href="http://blog.wordaligned.org"&gt;http://blog.wordaligned.org&lt;/a&gt;, was to publish more and edit less. It hasn&amp;#8217;t entirely worked out that way. Like Mark, much of what I write never makes it into production. I&amp;#8217;m not aiming for perfection, but if I can&amp;#8217;t get things to tie up I don&amp;#8217;t want them online. And for everything I actually write, there&amp;#8217;s an order of magnitude more which barely escapes my head.
&lt;/p&gt;
&lt;p&gt;Why would I ever have wanted to publish more and edit less? After all, there&amp;#8217;s no shortage of material on the web, and I&amp;#8217;d prefer to be noticed for a few thoughtful and original contributions, rather than volume. Here are some reasons:
&lt;/p&gt;
&lt;ul&gt;
 &lt;li&gt;
     I get a huge kick out of immediate publication to a world audience (&amp;#8220;Hello World!&amp;#8221;)
 &lt;/li&gt;

 &lt;li&gt;
     I&amp;#8217;m trying to find out what my subject is and have been using blog.wordaligned.org as a space to explore
 &lt;/li&gt;

 &lt;li&gt;
     I half hoped, at the outset, that readers would help with this exploration &amp;#8212; that I&amp;#8217;d be able feed off their comments
 &lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;Hosting a Web Application&lt;/h3&gt;
&lt;p&gt;I&amp;#8217;ve carefully avoided user interface development for most of my programming career. Now that the net is the computer and the browser the interface, I want to catch up. The dynamic languages I prefer have come into their own. I&amp;#8217;d hoped to learn something about &lt;a href="http://www.rubyonrails.org"&gt;Ruby on Rails&lt;/a&gt; by deploying a Ruby on Rails application (blog.wordaligned.org uses the &lt;a href="http://typosphere.org/"&gt;Typo&lt;/a&gt; blog engine, which itself runs on Ruby on Rails).
&lt;/p&gt;
&lt;p&gt;In fact I&amp;#8217;ve not learned much about Ruby on Rails. I&amp;#8217;ve migrated between versions a couple of times, written a plugin or two, tweaked some settings &amp;#8212; but that&amp;#8217;s about it. This has been a spare time activity, and I&amp;#8217;ve always given priority to writing new material.
&lt;/p&gt;
&lt;p&gt;What I have learned, the hard way, is that a dynamic web application can be slow and hungry. I rent space on a shared server, and the relationship has become uncomfortable &amp;#8212; mainly because the &lt;a href="http://typosphere.org/"&gt;blog application&lt;/a&gt; keeps banging its head against the limits imposed by the hosting company. Probably the sensible thing would be to upgrade my hosting plan or find another host, but I kind of like the deal I&amp;#8217;ve got at &lt;a href="http://textdrive.com"&gt;TextDrive&lt;/a&gt;. The support is excellent, and they&amp;#8217;re permissive about what you can do with your site.
&lt;/p&gt;
&lt;p&gt;I&amp;#8217;ve also learned (again!) I&amp;#8217;d rather use libraries than frameworks. Quite simply, I don&amp;#8217;t know enough about the problems Ruby on Rails is trying to solve. I need to get back to basics and do it myself: to figure out how to generate pages and feeds, how to handle persistence and indexing. Then, when I&amp;#8217;ve reinvented a few wheels, I might just get it.
&lt;/p&gt;

&lt;h3&gt;Comments&lt;/h3&gt;
&lt;p&gt;Comments have been the worst and best thing about running a blog. The comment system for blog.wordaligned.org is very sluggish, and the interaction isn&amp;#8217;t quite right. Perhaps the speed issues arise because I&amp;#8217;ve gradually been ratcheting up the anti-spam filters: now these filters at least seem to be doing their job, but spam-bots continue to bombard blog.wordaligned.org in the hopes the weak spots will reappear. Meanwhile the few who have taken the trouble to post real comments have had to put up with a poor interface. For those few who have persisted, thanks!
&lt;/p&gt;
&lt;p&gt;One solution might be to migrate to WordPress or Movable Type, but I&amp;#8217;m not too excited about PHP.
&lt;/p&gt;

&lt;h3&gt;Long live wordaligned.org&lt;/h3&gt;
&lt;p&gt;As I said, I&amp;#8217;m dismantling blog.wordaligned.org. I plan to keep it alive in its current form for another week or so, then I&amp;#8217;ll start re-directing visitors to the right places on the new site.
&lt;/p&gt;
&lt;p&gt;&lt;a href="http://www.wordaligned.org"&gt;Wordaligned.org&lt;/a&gt; looks very much like blog.wordaligned.org. The content hasn&amp;#8217;t changed, except that everything there relates, however tangentially, to software development (reflections on the Tour de France, pictures of dinosaurs, and so forth will move somewhere else).
   I&amp;#8217;ve retained the &lt;a href="http://quotedprintable.com/pages/scribbish"&gt;Scribbish&lt;/a&gt; theme, which I like: besides, one rule of software development is to change just one thing at a time, and as I&amp;#8217;ve noted before, &lt;a href="http://wordaligned.org/articles/lenient-browsers-and-wobbly-tables.html" title="Lenient Browsers and Wobbly Tables"&gt;re-working a theme&lt;/a&gt; can be a risky activity.
&lt;/p&gt;
&lt;p&gt;Underneath, though, it&amp;#8217;s all static pages generated offline from &lt;a href="http://daringfireball.net/projects/markdown/"&gt;Markdown&lt;/a&gt; source using a blend of domestic and &lt;a href="http://www.freewisdom.org/projects/python-markdown"&gt;imported&lt;/a&gt; Python code. So I&amp;#8217;m hoping it will be quicker to access, more stable, easier to update, easier to develop and run locally, easier (should the need arise) to transfer elsewhere.
&lt;/p&gt;
&lt;p&gt;Comments, for the moment, are missing. I&amp;#8217;ll convert any comments made on blog.wordaligned.org at some point but I haven&amp;#8217;t decided how to solicit comments on &lt;code&gt;wordaligned.org&lt;/code&gt; &amp;#8212; that&amp;#8217;s one thing I&amp;#8217;d be delighted to out-source. For now, you can comment by &lt;a href="mailto:tag@wordaligned.org" title="mail me at tag@wordaligned.org"&gt;email&lt;/a&gt;. I&amp;#8217;d particularly like to hear any thoughts about spam-free zero-maintenance comment systems.
&lt;/p&gt;

&lt;h3&gt;Please update your bookmarks&lt;/h3&gt;
&lt;p&gt;&lt;a href="http://www.wordaligned.org"&gt;Wordaligned.org&lt;/a&gt; is at &lt;strong&gt;http://www.wordaligned.org&lt;/strong&gt;.
&lt;/p&gt;
&lt;p&gt;The &lt;a href="http://feeds.wordaligned.org/wordaligned"&gt;feed&lt;/a&gt; for new material is at &lt;strong&gt;http://feeds.wordaligned.org/wordaligned&lt;/strong&gt;.
&lt;/p&gt;
&lt;p&gt;See you &lt;a href="http://www.wordaligned.org"&gt;there&lt;/a&gt;!
&lt;/p&gt;</description>
<dc:date>2007-11-12</dc:date>
<guid>http://wordaligned.org/articles/metablog</guid>
<author>tag@wordaligned.org (Thomas Guest)</author>
<link>http://wordaligned.org/articles/metablog</link>
<category>Ruby</category>
</item>

<item>
<title>Pitching Python in three syllables</title>
<description>&lt;p&gt;Someone recently posted a question on the &lt;a href="http://accu.org/index.php/mailinglists"&gt;accu-general mailing list&lt;/a&gt;. It went something like this:
&lt;/p&gt;
&lt;blockquote&gt;&lt;p&gt;&amp;#8220;A new project is starting at work using C++, and I was suggesting use the &lt;a href="http://boost.org"&gt;Boost&lt;/a&gt; C++ libraries, only a colleague said there were problems with Boost 64 bit build on some platforms, and wanted to know what people here thought about Boost?&amp;#8221;
&lt;/p&gt;
&lt;/blockquote&gt;&lt;p&gt;My reply unanswered the question:
&lt;/p&gt;
&lt;blockquote&gt;&lt;p&gt;&amp;#8220;Why choose C++ for a new project?&amp;#8221;
&lt;/p&gt;
&lt;/blockquote&gt;&lt;p&gt;When pressed further, I wrote:
&lt;/p&gt;
&lt;blockquote&gt;&lt;p&gt;&amp;#8220;Use Python!&amp;#8221;
&lt;/p&gt;
&lt;/blockquote&gt;&lt;p&gt;Thinking things over, I realised this wasn&amp;#8217;t a particularly helpful suggestion. Maybe the company in question had a team of experienced C++ programmers; maybe they&amp;#8217;d delivered previous projects using C++; maybe the development manager had been promoted following the successful completion of one of these projects.
&lt;/p&gt;
&lt;p&gt;So I asked myself a question: If I were a junior developer at this company, how could I convince management that Python was a better language for a greenfield project than C++. Management time being at a premium and attention-spans being short, I made the question more specific: &lt;strong&gt;how could I best describe Python in a single sentence&lt;/strong&gt;?
&lt;/p&gt;
&lt;span id="continue-reading"/&gt;


&lt;h4&gt;No prize for originality&lt;/h4&gt;
&lt;p&gt;There&amp;#8217;s no need for an original answer. Python has an official &lt;a href="http://python.org"&gt;home page&lt;/a&gt; and the very first sentence on this page supplies Python&amp;#8217;s own answer. Also, although I&amp;#8217;ve used Python as a specific C++ alternative, I might equally well have favoured other languages in a similar niche: &lt;a href="http://ruby-lang.org"&gt;Ruby&lt;/a&gt;, &lt;a href="http://groovy.codehaus.org/"&gt;Groovy&lt;/a&gt;, &lt;a href="http://perl.org"&gt;Perl&lt;/a&gt;, for example. It depends which you&amp;#8217;re happiest to promote. 
&lt;/p&gt;
&lt;p&gt;All these languages offer one sentence introductions on their homepages. Thus, in no particular order (can you guess which is which?), Python/Ruby/Groovy/Perl is:
&lt;/p&gt;
&lt;blockquote&gt;&lt;ol&gt;
 &lt;li&gt;
     A stable, cross platform programming language.
 &lt;/li&gt;

 &lt;li&gt;
     A dynamic object-oriented programming language that can be used for many kinds of software development.
 &lt;/li&gt;

 &lt;li&gt;
     A dynamic, open source programming language with a focus on simplicity and productivity.
 &lt;/li&gt;

 &lt;li&gt;
     An agile dynamic language for the Java Virtual Machine.
 &lt;/li&gt;
&lt;/ol&gt;
&lt;/blockquote&gt;&lt;p&gt;Plenty of other languages occupy a similar domain. All describe themselves using similar words. I wasn&amp;#8217;t entirely happy though, since none of these sentences do a great job of pitching Python etc.
&lt;/p&gt;
&lt;p&gt;So I applied a common programming tactic. I reduced the scope of the problem: &lt;span /&gt;how could I pitch Python in just 3 syllables?
&lt;/p&gt;

&lt;h4&gt;Dynamic?&lt;/h4&gt;
&lt;p&gt;Three of the four sentences above use the term &lt;strong&gt;dynamic&lt;/strong&gt; and there&amp;#8217;s little doubt that Perl (which, with an uncharacteristically serious face on, describes itself as &lt;strong&gt;stable&lt;/strong&gt;) is every bit as dynamic as its peers.
&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Dynamic&lt;/em&gt; appeals, especially to a programmer (as do adjectives like &lt;em&gt;Agile&lt;/em&gt; and  &lt;em&gt;eXtreme&lt;/em&gt;). The word implies change, energy, force. My dictionary has nothing to say about its specific connotations when applied to a computer language, so I &lt;a href="http://www.google.co.uk/search?q=dynamic+programing+language"&gt;googled&lt;/a&gt; and found myself at &lt;a href="http://en.wikipedia.org/wiki/Dynamic_language"&gt;Wikipedia&lt;/a&gt;.
&lt;/p&gt;
&lt;blockquote&gt;&lt;p&gt;&lt;a href="http://en.wikipedia.org/wiki/Dynamic_language"&gt;Dynamic programming language&lt;/a&gt; is a term used broadly in computer science to describe a class of high level programming languages that execute at runtime many common behaviors that other languages might perform during compilation, if at all. These behaviors could include extension of the program, by adding new code, by extending objects and definitions, or by modifying the type system, all during program execution.
&lt;/p&gt;
&lt;/blockquote&gt;&lt;p&gt;I&amp;#8217;m not sure that&amp;#8217;s especially helpful as a sales pitch, and certainly it&amp;#8217;s not a commonly understood definition. If I wanted to promote (for example) Python as a suitable language for a project, I wouldn&amp;#8217;t emphasise these features. And there&amp;#8217;s also the problem of overloaded meaning, as Wikipedia goes on to point out.
&lt;/p&gt;
&lt;blockquote&gt;&lt;p&gt;Dynamic languages and dynamic typing are not identical concepts, and a dynamic language need not be dynamically typed, though many dynamic languages are dynamically typed.
&lt;/p&gt;
&lt;/blockquote&gt;&lt;p&gt;So, if we describe a language as &lt;em&gt;dynamic&lt;/em&gt;, there&amp;#8217;s a risk our C++-biased manager assumes &lt;em&gt;dynamically typed&lt;/em&gt;; and there&amp;#8217;s a common misconception that dynamic typing equals weak typing. There&amp;#8217;s also a danger our audience fears the volatility associated with dynamism (how can a &lt;em&gt;dynamic&lt;/em&gt; language be used to build a &lt;em&gt;solid&lt;/em&gt; application?)
&lt;/p&gt;

&lt;h4&gt;Scripting?&lt;/h4&gt;
&lt;p&gt;None of the languages mentioned describes itself as a scripting language. Nonetheless, the term is commonly used, especially for Perl. Perhaps many of us first pick up these languages when we have a scripting task to do: copy a bunch of files around, change their contents in some way, pull a page from a web server and parse it, convert a spreadsheet into HTML and post it on the intranet &amp;#8212; the kind of quotidian task which is tiresome to implement in a low-level language.
&lt;/p&gt;
&lt;p&gt;By scripting we tend to mean one-shot tasks such as these, where perhaps we can squander a few CPU cycles or expend more memory than strictly necessary. The focus is on getting the job done. Scripts are just little programs.
&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Little&lt;/strong&gt; is &lt;strong&gt;good&lt;/strong&gt; in this context. &lt;span /&gt;When we say we want readable code, we don&amp;#8217;t mean we want to sit in a comfortable chair and page through a Java-saga. We prefer something succinct: something easy to understand, something which fits in our heads. I can imagine the term &lt;em&gt;scripting&lt;/em&gt; being reclaimed as a badge of pride rather like &lt;em&gt;hacker&lt;/em&gt; has been &amp;#8212; but for now scripting means writing little programs, and belittles the language used.
&lt;/p&gt;

&lt;h4&gt;Well what then?&lt;/h4&gt;
&lt;p&gt;Having snubbed the popular terms, scripting and dynamic, what shall we use in their place? Reviewing the original four one-sentence descriptions we find open source, simple, cross platform, agile, object-oriented, productive, used in many kinds of software development &amp;#8212; all of which are fine attributes and true enough, but none of which, on its own, goes far enough.
&lt;/p&gt;

&lt;h4&gt;High Level!&lt;/h4&gt;
&lt;p&gt;Python is a &lt;strong&gt;high-level&lt;/strong&gt; language. Ruby, Groovy and Perl are high-level languages. High-level has become my preferred term.
&lt;/p&gt;
&lt;p&gt;High-level doesn&amp;#8217;t tell the whole story, of course &amp;#8212; nor can any one word. It&amp;#8217;s also relative: C is high-level compared to assembler which itself is high-level compared to machine code &amp;#8212; but these days C is a low-level language and &lt;a href="http://www.networkrail.co.uk/aspx/779.aspx"&gt;Birmingham New Street&lt;/a&gt; is old.
&lt;/p&gt;
&lt;p&gt;Management may think of C++ as high-level. It isn&amp;#8217;t. You must manage memory by hand, understand pointers, budget for each of the bits in each of the various integral types on each of your platforms. Java is better, but not much.
&lt;/p&gt;
&lt;p&gt;High-level no longer applies to C++ etc. and that&amp;#8217;s one reason why I want to appropriate it for today&amp;#8217;s real high-level languages. The benefits of using high-level languages are understood: the language does more for you.
&lt;/p&gt;
&lt;p&gt;One day, Python may not be high-level. Today, it is.
&lt;/p&gt;
&lt;hr /&gt;


&lt;h4&gt;Footnotes&lt;/h4&gt;
&lt;ol&gt;
 &lt;li&gt;
     I delivered this as a lightning speech at &lt;a href="http://www.pyconuk.org/"&gt;PyCon UK&lt;/a&gt; yesterday. Lightning speeches are limited to 5 minutes, and I had to skip some bits and race through others. This is what I meant to say!
 &lt;/li&gt;

 &lt;li&gt;
     I don&amp;#8217;t mean to criticise &lt;a href="http://boost.org"&gt;Boost&lt;/a&gt;, which sets standards very high indeed. If you&amp;#8217;re going to use C++, Boost is the next best thing to the C++ standard library. I would treat any hearsay about Boost not working on particular platforms with skepticism: you don&amp;#8217;t have to look hard to find Boost library test reports for common platforms.
 &lt;/li&gt;

 &lt;li&gt;
     Birmingham New Street opened in 1854.
 &lt;/li&gt;
&lt;/ol&gt;</description>
<dc:date>2007-09-09</dc:date>
<guid>http://wordaligned.org/articles/pitching-python-in-three-syllables</guid>
<author>tag@wordaligned.org (Thomas Guest)</author>
<link>http://wordaligned.org/articles/pitching-python-in-three-syllables</link>
<category>Ruby</category>
</item>

<item>
<title>Pragmatic fashion</title>
<description>&lt;p&gt;The Pragmatic Programmers have released a new title, &lt;a href="http://www.pragmaticprogrammer.com/titles/jaerlang/index.html"&gt;&amp;#8220;Programming Erlang&amp;#8221;&lt;/a&gt;. According to the website:
&lt;/p&gt;
&lt;blockquote&gt;&lt;p&gt;Erlang is a language used by people in-the-know (just like Ruby was a few years ago).
&lt;/p&gt;
&lt;/blockquote&gt;&lt;p&gt;I wonder if they&amp;#8217;ll let me trade in that old &lt;a href="http://www.pragmaticprogrammer.com/titles/ruby/index.html"&gt;Ruby book&lt;/a&gt; I bought from them a few years ago?
&lt;/p&gt;</description>
<dc:date>2007-07-18</dc:date>
<guid>http://wordaligned.org/articles/pragmatic-fashion</guid>
<author>tag@wordaligned.org (Thomas Guest)</author>
<link>http://wordaligned.org/articles/pragmatic-fashion</link>
<category>Ruby</category>
</item>

<item>
<title>Introducing Java</title>
<description>&lt;div class="toc"&gt;
&lt;h2&gt;Contents&lt;/h2&gt;
&lt;ul&gt;
 &lt;li&gt;&lt;a href="http://wordaligned.org/articles/introducing-java#tocgarbage-collection" name="toc0" id="toc0"&gt;Garbage collection&lt;/a&gt;
 &lt;/li&gt;

 &lt;li&gt;&lt;a href="http://wordaligned.org/articles/introducing-java#tocruntime-errors" name="toc1" id="toc1"&gt;Runtime Errors&lt;/a&gt;
 &lt;/li&gt;

 &lt;li&gt;&lt;a href="http://wordaligned.org/articles/introducing-java#tocverbosity" name="toc2" id="toc2"&gt;Verbosity&lt;/a&gt;
 &lt;/li&gt;

 &lt;li&gt;&lt;a href="http://wordaligned.org/articles/introducing-java#tocthe-march-of-ides" name="toc3" id="toc3"&gt;The March of IDEs&lt;/a&gt;
 &lt;/li&gt;

 &lt;li&gt;&lt;a href="http://wordaligned.org/articles/introducing-java#tocin-java-everything-is-an-object" name="toc4" id="toc4"&gt;In Java, everything is an Object&lt;/a&gt;
 &lt;/li&gt;

 &lt;li&gt;&lt;a href="http://wordaligned.org/articles/introducing-java#toccompilation" name="toc5" id="toc5"&gt;Compilation&lt;/a&gt;
 &lt;/li&gt;

 &lt;li&gt;&lt;a href="http://wordaligned.org/articles/introducing-java#toclibraries" name="toc6" id="toc6"&gt;Libraries&lt;/a&gt;
 &lt;/li&gt;

 &lt;li&gt;&lt;a href="http://wordaligned.org/articles/introducing-java#tocjavadoc" name="toc7" id="toc7"&gt;Javadoc&lt;/a&gt;
 &lt;/li&gt;

 &lt;li&gt;&lt;a href="http://wordaligned.org/articles/introducing-java#tocjunit" name="toc8" id="toc8"&gt;JUnit&lt;/a&gt;
 &lt;/li&gt;

 &lt;li&gt;&lt;a href="http://wordaligned.org/articles/introducing-java#tocjava-versus-c" name="toc9" id="toc9"&gt;Java versus C++?&lt;/a&gt;
 &lt;/li&gt;

 &lt;li&gt;&lt;a href="http://wordaligned.org/articles/introducing-java#tocthe-jvm-platform" name="toc10" id="toc10"&gt;The JVM Platform&lt;/a&gt;
 &lt;/li&gt;

 &lt;li&gt;&lt;a href="http://wordaligned.org/articles/introducing-java#toclanguage-wars" name="toc11" id="toc11"&gt;Language Wars&lt;/a&gt;
 &lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;&lt;p&gt;I didn&amp;#8217;t get to use Java until relatively recently in my programming
   career. &lt;span /&gt;As a C++ programmer brought up on C, I suppose I suffered the
   usual prejudice: that Java would be a feeble language designed to stop
   feeble programmers from getting hurt too badly. The truth turned out
   to be rather different.
&lt;/p&gt;
&lt;span id="continue-reading"/&gt;


&lt;h3&gt;&lt;a href="http://wordaligned.org/articles/introducing-java#toc0" name="tocgarbage-collection" id="tocgarbage-collection"&gt;Garbage collection&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;One headline difference between Java and C++ is of course garbage
   collection. On the face of it, C++ provides the best of all worlds:
   there are &lt;a href="http://boost.org/libs/smart_ptr/index.html"&gt;techniques&lt;/a&gt; to precisely encapsulate resource lifecycle;
   there are &lt;a href="http://www.hpl.hp.com/personal/Hans_Boehm/gc/"&gt;libraries&lt;/a&gt; you can get hold of to collect garbage for you; and, finally, it looks like &lt;a href="http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2006/n2129.pdf"&gt;C++09 will include garbage collection&lt;/a&gt;.
&lt;/p&gt;
&lt;p&gt;The sad truth is that the techniques I mention aren&amp;#8217;t as widely used
   as they should be. It&amp;#8217;s hard to blame C++ programmers because the
   various smart pointer classes haven&amp;#8217;t yet been formally standardised
   and most C++ books fail to mention them (and the one smart pointer
   which did make it into the standard library is notoriously
   slippery). So we&amp;#8217;ll have to wait for C++09, roll our own, or get hold of a TR1 implementation &amp;#8212; and without considerable discipline there&amp;#8217;s
   nothing to stop rogue programmers on the team using &lt;code&gt;new&lt;/code&gt; and &lt;code&gt;delete&lt;/code&gt;
   as a high-level interface to heap management.
&lt;/p&gt;
&lt;p&gt;Garbage collection &lt;a href="http://www.octopull.demon.co.uk/java/ImmortalityAtaPrice.html"&gt;doesn&amp;#8217;t release programmers from thinking about
the way a program uses resources&lt;/a&gt;, but it sure does release us
   from some tiresome defects. Running a program though
   &lt;a href="http://valgrind.org"&gt;valgrind&lt;/a&gt; (or similar) doesn&amp;#8217;t prove it&amp;#8217;s clean.
&lt;/p&gt;

&lt;h3&gt;&lt;a href="http://wordaligned.org/articles/introducing-java#toc1" name="tocruntime-errors" id="tocruntime-errors"&gt;Runtime Errors&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Similarly, Java throws runtime errors as soon as it detects problems C++ may not even notice. If you try and read past the end of an array or access a non-existent object, the runtime signals the error soon as it happens. No need for forensic investigation to figure out what trashed the stack.
&lt;/p&gt;
&lt;p&gt;The C++ counter-argument is that this kind of checking &lt;em&gt;costs&lt;/em&gt;. You have to be pretty dumb to try and read past the end of an array, so why ever pay for a safety check on every array access?  It only took a couple of &lt;code&gt;ArrayIndexOutOfBoundsException&lt;/code&gt;s to disabuse me of this notion. Dumb checks save time, especially the ones the programmer doesn&amp;#8217;t have to write; excluding them on the grounds of perceived cost counts as premature optimisation.
&lt;/p&gt;

&lt;h3&gt;&lt;a href="http://wordaligned.org/articles/introducing-java#toc2" name="tocverbosity" id="tocverbosity"&gt;Verbosity&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Unfortunately, though, if you write Java, you usually have to write a lot of it. I&amp;#8217;ll repeat &lt;a href="http://www.paulgraham.com"&gt;Paul Graham&lt;/a&gt;&amp;#8217;s joke about the Java implementation of &amp;#8220;Hello, World!&amp;#8221;.
&lt;/p&gt;
&lt;div class="typocode"&gt;&lt;div class="codetitle"&gt;Hello, World!&lt;/div&gt;

&lt;pre class="prettyprint"&gt;public class Hello {
    public static void main(String[] args) {
        System.out.println("Hello, world!");
    }
}

&lt;/pre&gt;

&lt;/div&gt;

&lt;blockquote&gt;&lt;p&gt;Someone who has never written a program probably looks at this and
   wonders, why do you need to say so much to get the the computer to
   print a message? Curiously, the reaction of experienced programmers
   is identical.
&lt;/p&gt;
&lt;/blockquote&gt;&lt;p&gt;An IDE will write a lot of this for you (and Java is rightly famous for its associated IDEs) but you&amp;#8217;ll still have to read it every time you visit the file. Programs are read more often than they&amp;#8217;re written.
&lt;/p&gt;

&lt;h3&gt;&lt;a href="http://wordaligned.org/articles/introducing-java#toc3" name="tocthe-march-of-ides" id="tocthe-march-of-ides"&gt;The March of IDEs&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;I&amp;#8217;ll admit that refactoring IDEs can be useful. If you have to use Java, use a refactoring IDE to keep your code in shape. The relative simplicity of the Java syntax and compilation model means that a Java IDE is always going to be one step ahead of a C++ one for this kind of thing.
&lt;/p&gt;
&lt;p&gt;While we&amp;#8217;re on the subject of IDEs, I&amp;#8217;ve also noticed some &lt;a href="http://www.regdeveloper.co.uk/2007/02/01/making_sense_ruby/"&gt;grumbling&lt;/a&gt; about the lack of such IDEs for high-level dynamic languages such as Ruby and Python.  If a variable&amp;#8217;s type isn&amp;#8217;t declared when a program is being written, how&amp;#8217;s an IDE going to auto-complete the methods supported by that variable? I&amp;#8217;m not an IDE designer, but the solution to this would seem to me to be to merge the interpreter and the editor: that is, run and write the program at the same time. If I&amp;#8217;m in the Python interpreter, I can just use &lt;code&gt;dir&lt;/code&gt; to tell me what&amp;#8217;s available.
&lt;/p&gt;

&lt;h3&gt;&lt;a href="http://wordaligned.org/articles/introducing-java#toc4" name="tocin-java-everything-is-an-object" id="tocin-java-everything-is-an-object"&gt;In Java, everything is an Object&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Everything except the built in types, that is. Java couldn&amp;#8217;t quite go the whole way: if it&amp;#8217;s going to compete with C and C++, it&amp;#8217;ll have to measure up on performance, and that seems to mean fixed-width built in types. At least Java &lt;em&gt;does&lt;/em&gt; have and always has had an official eight byte long integer, meaning that, for example, millisecond clock values won&amp;#8217;t wrap in the lifetime of this planet.
&lt;/p&gt;
&lt;p&gt;The downside of making everything an object is that few application domains can be modelled in this way. Sure, a windows-based user interface maps nicely to an object hierarchy, but when you get into the core application engine, you&amp;#8217;re likely to find yourself mapping, filtering and reducing collections &amp;#8212; a more functional style programming. C++ provides far more power here: I&amp;#8217;m reluctant to say it does better, because any heavy use of the STL and templated code requires lengthy build times and a willingness to unpick hideous compilation errors.
&lt;/p&gt;

&lt;h3&gt;&lt;a href="http://wordaligned.org/articles/introducing-java#toc5" name="toccompilation" id="toccompilation"&gt;Compilation&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Java is much much quicker to compile than C++. You don&amp;#8217;t have to
   worry about dependencies the way you do in C++. A modern Java IDE
   compiles as you type and can even run unit tests on the fly (though I
   never quite got into this myself). Even better, once you&amp;#8217;ve compiled
   the code, it should run wherever you&amp;#8217;ve got a suitable JVM. Java
   abstracts the platform nicely enough.
&lt;/p&gt;
&lt;p&gt;The flip-side of this is that, if you need to dig beneath the JVM and poke at the system level, you&amp;#8217;ll have to work harder. The JNI is fiddly to use and not documented to Java&amp;#8217;s usual high standards. Of the low-level languages, C and C++ have the edge here; and high-level languages built on the C hardware abstraction layer such as Python and Perl fare better.
&lt;/p&gt;

&lt;h3&gt;&lt;a href="http://wordaligned.org/articles/introducing-java#toc6" name="toclibraries" id="toclibraries"&gt;Libraries&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;With Java, if you&amp;#8217;re doing something someone&amp;#8217;s probably done
   before, they probably have done it before and made a suitably licensed
   library available. I was very impressed with the range and quality of
   Java libraries. The fact that Java has a standard and widely followed
   set of coding conventions makes it easy to work with these libraries, 
   as does the Javadoc documentation system and the JUnit test framework.
&lt;/p&gt;

&lt;h3&gt;&lt;a href="http://wordaligned.org/articles/introducing-java#toc7" name="tocjavadoc" id="tocjavadoc"&gt;Javadoc&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;&lt;a href="http://java.sun.com/j2se/javadoc/"&gt;Javadoc&lt;/a&gt; may seem like an incidental detail. It&amp;#8217;s not part of the core language and you don&amp;#8217;t need to use it when writing Java. The truth is that Javadoc is a defacto standard &amp;#8212; so much so that it&amp;#8217;s cloned itself into &lt;a href="http://www.doxygen.org"&gt;Doxygen&lt;/a&gt;, which does a similar job for C++. Not everyone likes the documentation template which Javadoc imposes but few would complain at the end result: a coherent, consistent, hyper-linked documentation suite, and simple tools which allow you to generate your own documentation in the same format.
&lt;/p&gt;

&lt;h3&gt;&lt;a href="http://wordaligned.org/articles/introducing-java#toc8" name="tocjunit" id="tocjunit"&gt;JUnit&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;&lt;a href="http://www.junit.org"&gt;JUnit&lt;/a&gt;, like Javadoc, is a defacto standard &amp;#8212; a simple and well-documented test framework with great tool support built around it. Again, it&amp;#8217;s been cloned into other languages even when they don&amp;#8217;t naturally support such a framework.
&lt;/p&gt;

&lt;h3&gt;&lt;a href="http://wordaligned.org/articles/introducing-java#toc9" name="tocjava-versus-c" id="tocjava-versus-c"&gt;Java versus C++?&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Java versus C++ for &lt;em&gt;what&lt;/em&gt; exactly? As a general purpose programming language for doing XML-y database-y user-interface-y internet-y things, Java has the edge. Then again, C# probably has the edge over Java in this same domain &amp;#8212; it certainly should do since it&amp;#8217;s had the opportunity to learn from Java&amp;#8217;s mistakes, and it surely has enough brains and backing behind it. I don&amp;#8217;t speak from experience: I&amp;#8217;ve never used C# and I don&amp;#8217;t see any pressing need to use it. In fact, I don&amp;#8217;t see the need to use Java. I&amp;#8217;m convinced that high-level languages such as Python knock the spots off Java and any Java clone in the application development domain.
&lt;/p&gt;
&lt;p&gt;As a general purpose programming language which needs to mix low-level platform access and high-performance algorithms, C++ is probably still where it&amp;#8217;s at. If you&amp;#8217;re prepared to invest the effort to learn it (which I wouldn&amp;#8217;t recommend!) then I&amp;#8217;d say C++ is a more expressive language than Java. I&amp;#8217;d rather be able to overload operators than have to put all my functions in classes. Structs beat beans.
&lt;/p&gt;

&lt;h3&gt;&lt;a href="http://wordaligned.org/articles/introducing-java#toc10" name="tocthe-jvm-platform" id="tocthe-jvm-platform"&gt;The JVM Platform&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Java welcomes high-level languages. Just put the Java &amp;#8220;J&amp;#8221; in front of Python, Ruby, &amp;#8230; and you&amp;#8217;ll find an implementation of your favourite language running on the JVM. Then there are the JVM natives such as Groovy and Scala and no doubt many others. Russel Winder &lt;a href="http://www.accu.org/index.php/conferences/accu_conference_2007/accu2007_sessions#C++%20has%20no%20useful%20purpose"&gt;comments&lt;/a&gt;:
&lt;/p&gt;
&lt;blockquote&gt;&lt;p&gt;What about Java? It survives as the assembly language for Groovy programming.
&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3&gt;&lt;a href="http://wordaligned.org/articles/introducing-java#toc11" name="toclanguage-wars" id="toclanguage-wars"&gt;Language Wars&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Reading through all this, I realise I&amp;#8217;ve not said anything radical or original. At the outset I declared myself &amp;#8220;a C++ programmer brought up on C&amp;#8221; &amp;#8212; which is pretty much what I was doing when I first encountered Java (though my not-so-secret mission was to write code using high-level languages). The truth now is that I&amp;#8217;m actually a Python programmer brought up on C/C++, and as such, anything which might have seemed radical or original about Java seems, well &amp;#8230; ordinary and bland.
&lt;/p&gt;
&lt;p&gt;Certainly I&amp;#8217;ve been cured of any prejudice about Java being a feeble language designed to stop feeble programmers from getting hurt. It&amp;#8217;s the other way round; Java is a powerful language and it&amp;#8217;s the C++ programmers who revel in &lt;a href="http://www.artima.com/weblogs/viewpost.jsp?thread=104707"&gt;pain&lt;/a&gt;.
&lt;/p&gt;
&lt;p&gt;It took me about a year to get round to writing this note, a year in which I&amp;#8217;ve barely touched Java. I haven&amp;#8217;t missed it.
&lt;/p&gt;</description>
<dc:date>2007-05-17</dc:date>
<guid>http://wordaligned.org/articles/introducing-java</guid>
<author>tag@wordaligned.org (Thomas Guest)</author>
<link>http://wordaligned.org/articles/introducing-java</link>
<category>Ruby</category>
</item>

<item>
<title>Shells, Logs and Pipes</title>
<description>&lt;p&gt;I needed to make sense of a lengthy log file. The server had been
   running over the weekend and the log file showed an increasing packet
   error count.  (Don&amp;#8217;t worry what a packet error is, it doesn&amp;#8217;t really
   matter as far as this post goes).  This post explains how the standard
   Unix tools helped me dissect the log file, and indeed any other log
   file.
&lt;/p&gt;
&lt;span id="continue-reading"/&gt;


&lt;h3&gt;Heads and Tails&lt;/h3&gt;
&lt;p&gt;First, I needed the initial and final error counts.
&lt;/p&gt;
&lt;div class="typocode"&gt;&lt;div class="codetitle"&gt;Initial and final error counts&lt;/div&gt;

&lt;pre class="prettyprint"&gt;$ head logfile | grep "packet errors"
Info: Fri 17:34:05, packet errors: 0
$ tail logfile | grep "packet errors"
Info: Mon 08:32:11, packet errors: 11323

&lt;/pre&gt;

&lt;/div&gt;

&lt;p&gt;So what exactly had gone wrong, and when? Paging through the filtered output
   would take some time since the number of reported packet error counts
   ran to five figures.
&lt;/p&gt;
&lt;div class="typocode"&gt;&lt;div class="codetitle"&gt;Paging through the filtered output&lt;/div&gt;

&lt;pre class="prettyprint"&gt;$ grep "packet errors" logfile | less

&lt;/pre&gt;

&lt;/div&gt;

&lt;div class="typocode"&gt;&lt;div class="codetitle"&gt;How many errors were reported?&lt;/div&gt;

&lt;pre class="prettyprint"&gt;$ grep "packet errors" logfile | wc -l
125220

&lt;/pre&gt;

&lt;/div&gt;


&lt;h3&gt;Uniq&lt;/h3&gt;
&lt;p&gt;Part of the problem was that whatever logged the message simply
   printed out the error count every couple of seconds, whether or not
   this error count had changed. Going back to Friday, reconfiguring
   the logger and re-running the experiment wasn&amp;#8217;t an option, but luckily
   I had too much information rather than too little: all I had to do was
   process it correctly.
&lt;/p&gt;
&lt;p&gt;What looked more useful was filtering just the lines at which the
   error count had changed. Filtering out repeated lines using &lt;code&gt;uniq&lt;/code&gt;
   wouldn&amp;#8217;t work, since every line&amp;#8217;s timestamp made it unique. Happily,
   &lt;code&gt;uniq&lt;/code&gt; has an option to ignore a specified number of fields.
&lt;/p&gt;
&lt;div class="typocode"&gt;&lt;div class="codetitle"&gt;Finding when the error count changed&lt;/div&gt;

&lt;pre class="prettyprint"&gt;$ grep "packet errors" logfile | uniq -f 3

&lt;/pre&gt;

&lt;/div&gt;

&lt;p&gt;Piping this command to &lt;code&gt;wc -l&lt;/code&gt; indicated that the number of
   interesting lines had been thinned down to around three thousand &amp;#8212;
   the kind of report which could be paged through comfortably enough.
&lt;/p&gt;
&lt;div class="typocode"&gt;&lt;div class="codetitle"&gt;Counting error count changes&lt;/div&gt;

&lt;pre class="prettyprint"&gt;$ grep "packet errors" logfile | uniq -f 3 | wc -l
3432

&lt;/pre&gt;

&lt;/div&gt;


&lt;h3&gt;Sort&lt;/h3&gt;
&lt;p&gt;It&amp;#8217;s also possible to home in on other points of
   interest. For example, we could investigate the maximum period of
   stability by finding when the error count doesn&amp;#8217;t change for
   longest. This can be done using the &lt;code&gt;-c&lt;/code&gt; option to &lt;code&gt;uniq&lt;/code&gt;, which
   precedes each output line with a count of the the number of times that
   line was repeated in the input; then sorting using this count field as
   a numeric key; then picking the last output value from the
   pipeline.
&lt;/p&gt;
&lt;div class="typocode"&gt;&lt;div class="codetitle"&gt;Locating the most stable period&lt;/div&gt;

&lt;pre class="prettyprint"&gt;$ grep "packet errors" logfile | \
  uniq -f 3 -c | sort -k1 -n | tail -1
    277 Info: Sat 23:00:15, packet errors: 4645

&lt;/pre&gt;

&lt;/div&gt;

&lt;p&gt;This tells us that on Saturday evening the error count remained stable
   for longest &amp;#8212; in fact, an error count of 4645 repeated 277 times
   in the logfile, a duration of just 9 minutes (given that the packet
   error count repeated every couple of seconds).
&lt;/p&gt;

&lt;h3&gt;Et cetera&lt;/h3&gt;
&lt;p&gt;This is just a flavour of what the Unix shell tools can do when piped
   together. We&amp;#8217;ve combined some simple tools (&lt;code&gt;less&lt;/code&gt;,
   &lt;code&gt;head&lt;/code&gt;, &lt;code&gt;tail&lt;/code&gt;, &lt;code&gt;uniq&lt;/code&gt;, &lt;code&gt;sort&lt;/code&gt;, &lt;code&gt;wc&lt;/code&gt;, &lt;code&gt;grep&lt;/code&gt;) into complex and powerful commands
   using just a few keystrokes. Imagine trying to design a GUI which
   would allow you to analyse a log file as shown above. &lt;span /&gt;Now try
   designing a GUI which can analyse any log file ever.
&lt;/p&gt;
&lt;p&gt;I wouldn&amp;#8217;t pretend the Unix shell tools are user-friendly. In fact some
   are distinctly arcane (&lt;code&gt;find&lt;/code&gt; comes to mind). When I started out, I
   found the Unix manual difficult to use, and although &lt;code&gt;info&lt;/code&gt; has
   improved things it&amp;#8217;s still hard to find out about a command without
   knowing its name. And if there&amp;#8217;s a decent, hyper-linked online
   reference, I&amp;#8217;ve yet to find it.
&lt;/p&gt;

&lt;h3&gt;Extending the Toolset&lt;/h3&gt;
&lt;p&gt;Shell tools aren&amp;#8217;t always capable of even the kind of text processing
   described in this article. For example, if the logfile had more
   structure to it &amp;#8212; or even was written out as XML &amp;#8212; then we&amp;#8217;d
   probably be find ourselves struggling.  Fortunately a scripting
   language is very happy to help out in such cases. Perl remains a good
   choice, if it&amp;#8217;s one-liners you like. &lt;a href="http://python.org"&gt;Python&lt;/a&gt; and &lt;a href="http://www.ruby-lang.org"&gt;Ruby&lt;/a&gt; are
   better for longer-lived scripts.
&lt;/p&gt;
&lt;p&gt;Equally, there&amp;#8217;s a point at which you need to convert text into
   something more visual &amp;#8212; a graph or a histogram, perhaps. Text
   processing can be used to generate a format suitable for importing
   into a &lt;a href="http://www.gnuplot.info/"&gt;plotting&lt;/a&gt; package.
&lt;/p&gt;

&lt;h3&gt;Further Reading&lt;/h3&gt;
&lt;p&gt;A Unix expert once told me that the difference between a Unix expert
   and a non-expert wasn&amp;#8217;t aptitude or years of accumulated knowledge
   &amp;#8212; rather it came down to a willingness to read carefully through the
   manual.  I&amp;#8217;m no expert, but regard this as sound advice.
&lt;/p&gt;
&lt;p&gt;For more on the Unix philosophy, and how it applies to software
   development in general, I recommend &lt;a href="http://www.catb.org/~esr/writings/taoup/"&gt;&amp;#8220;The Art of Unix Programming&amp;#8221;&lt;/a&gt; by
   &lt;a href="http://www.catb.org/~esr"&gt;Eric S. Raymond&lt;/a&gt;.
&lt;/p&gt;</description>
<dc:date>2007-03-05</dc:date>
<guid>http://wordaligned.org/articles/shells-logs-and-pipes</guid>
<author>tag@wordaligned.org (Thomas Guest)</author>
<link>http://wordaligned.org/articles/shells-logs-and-pipes</link>
<category>Ruby</category>
</item>

<item>
<title>Code completion for dynamic languages</title>
<description>&lt;p&gt;Here&amp;#8217;s an interesting &lt;a href="http://www.regdeveloper.co.uk/2007/02/01/making_sense_ruby/"&gt;article&lt;/a&gt; in which Huw Collingbourne describes
   his frustration with trying to program a smart code completion system
   for Visual Studio. The problem being, the code in question is
   &lt;a href="http://www.ruby-lang.org" title="Ruby Website"&gt;Ruby&lt;/a&gt;. One particularly juicy quotation reads:
&lt;/p&gt;
&lt;blockquote&gt;&lt;p&gt;&lt;span /&gt;Ruby is a so-called &amp;#8220;dynamic&amp;#8221; language, which is a polite way of saying that it&amp;#8217;s hugely unpredictable.
&lt;/p&gt;
&lt;/blockquote&gt;&lt;span id="continue-reading"/&gt;

&lt;p&gt;He goes on to explain:
&lt;/p&gt;
&lt;blockquote&gt;&lt;p&gt;A &lt;a href="http://www.ruby-lang.org" title="Ruby Website"&gt;Ruby&lt;/a&gt; program is so dynamic that you can never be sure what it is
   up to from one moment to the next. To take a simple example, when
   you write some stand-alone functions into the editor, those
   functions get bound into the base class of the entire Ruby class
   hierarchy. That means that every single Ruby class automatically
   &amp;#8220;inherits&amp;#8221; them - and the IntelliSense system is expected to know
   about it!
&lt;/p&gt;
&lt;/blockquote&gt;&lt;p&gt;Despite overtly grumbling about dynamic languages, the author does a
   good job of promoting them. &lt;span /&gt;Software is supposed to be soft and
   dynamic languages help keep it that way. Everything is
   open. Everything can be queried. Everything can be adapted.
&lt;/p&gt;

&lt;h4&gt;Emacs Python mode&lt;/h4&gt;
&lt;p&gt;My preferred IDE is &lt;a href="http://www.gnu.org/software/emacs"&gt;emacs&lt;/a&gt; &amp;#8212; whatever language I&amp;#8217;m using. It has a
   particularly nice &lt;a href="http://sourceforge.net/projects/python-mode"&gt;Python integration&lt;/a&gt;.
   Here&amp;#8217;s how it works:
&lt;/p&gt;
&lt;ul&gt;
 &lt;li&gt;
     Pull up a full-screen window
 &lt;/li&gt;

 &lt;li&gt;
     Split the window vertically
 &lt;/li&gt;

 &lt;li&gt;
     Use one side for the code you&amp;#8217;re working on
 &lt;/li&gt;

 &lt;li&gt;
     Use the other side to run an interpreted &lt;a href="http://python.org"&gt;Python&lt;/a&gt; session
 &lt;/li&gt;

 &lt;li&gt;
     Switch sides as desired
 &lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;I continually select regions of code to execute. I continually step
   into the interpreter and use the &lt;a href="http://python.org"&gt;Python&lt;/a&gt; &lt;code&gt;help&lt;/code&gt; command to get help on
   modules and functions &amp;#8212; including the ones I&amp;#8217;m creating right now.
   I rework a function in one window then exercise it in the other. I
   sketch experimental code, run it, rub it out.
&lt;/p&gt;
&lt;p&gt;Collingbourne says:
&lt;/p&gt;
&lt;blockquote&gt;&lt;p&gt;Creating real
   &lt;a href="http://www.sapphiresteel.com/IntelliSense"&gt;IntelliSense&lt;/a&gt; is much
   harder. The only way to do it properly is to analyse the code much
   as the Ruby interpreter itself does. The big difference is that the
   interpreter only goes into operation when a program is complete &amp;#8230;
&lt;/p&gt;
&lt;/blockquote&gt;&lt;p&gt;He spots the answer in one sentence &amp;#8212; &lt;em&gt;to do it properly, you do have
   to hook into the interpreter and its powers of reflection&lt;/em&gt; &amp;#8212; then misses
   the point in the next. You just have to run the interpreter alongside the code
   you&amp;#8217;re developing, like emacs Python mode does.
&lt;/p&gt;

&lt;h4&gt;A cheat&amp;#8217;s guide to code-completion&lt;/h4&gt;
&lt;p&gt;Collingbourne also exposes some code-completion systems as &amp;#8220;cheats&amp;#8221;.
&lt;/p&gt;
&lt;blockquote&gt;&lt;p&gt;Some code-completion systems solve this problem in a cunning way -
   they cheat. Instead of working out what type of object x is at any
   given moment, taking into account all the difficult stuff such as
   its scope, inheritance and context, they work alphabetically. If
   someone enters a dot followed by the letters &amp;#8220;my&amp;#8221;, they drop down a
   list of names such as &amp;#8220;my_method&amp;#8221;, &amp;#8220;my_othermethod&amp;#8221; and
   &amp;#8220;my_random_guess&amp;#8221; whether or not those methods have anything to do
   with the object in question.
&lt;/p&gt;
&lt;/blockquote&gt;&lt;p&gt;Well, I&amp;#8217;m happy to cheat using &lt;a href="http://www.gnu.org/software/emacs"&gt;emacs&lt;/a&gt; in this way. The &lt;em&gt;&lt;/em&gt;&lt;code&gt;ALT-/&lt;/code&gt;&lt;em&gt;&lt;/em&gt;
   combination uses alphabetic completion and I use it more
   than any other key sequence, whatever document I&amp;#8217;m working on. More
   often than not, it does the right thing. As usual, simple solutions
   are better.
&lt;/p&gt;</description>
<dc:date>2007-02-02</dc:date>
<guid>http://wordaligned.org/articles/code-completion-for-dynamic-languages</guid>
<author>tag@wordaligned.org (Thomas Guest)</author>
<link>http://wordaligned.org/articles/code-completion-for-dynamic-languages</link>
<category>Ruby</category>
</item>

<item>
<title>My First Typo Sidebar</title>
<description>&lt;p&gt;I recently developed my very own plugin for this &lt;a href="http://blog.wordaligned.org"&gt;blog&lt;/a&gt;. To cut a
   short story even shorter, I wrote a &lt;a href="http://www.ruby-lang.org"&gt;Ruby&lt;/a&gt; class and an HTML
   template, and I was done.
&lt;/p&gt;
&lt;span id="continue-reading"/&gt;


&lt;h3&gt;The Plugin&lt;/h3&gt;
&lt;p&gt;Whilst wandering around the &lt;a href="http://www.google.co.uk/ig/directory?hl=en"&gt;Google gadgets&lt;/a&gt;
   pages, I&amp;#8217;d spotted &lt;a href="http://abowman.com"&gt;Adam Bowman&amp;#8217;s&lt;/a&gt; animated &lt;a href="http://abowman.com/google-modules/tree-frog/"&gt;Treefrog&lt;/a&gt;.
   It appealed. I wanted one on my &lt;a href="http://blog.wordaligned.org"&gt;blog&lt;/a&gt;.
&lt;/p&gt;
&lt;p&gt;What did I have to do? The content required nothing complicated,
   nothing dynamic: just a static chunk of HTML. How difficult could it be?
&lt;/p&gt;

&lt;h3&gt;Read the code, Not the manual&lt;/h3&gt;
&lt;p&gt;I&amp;#8217;ve fiddled round with Typo
   &lt;a href="http://wordaligned.org/articles/my-test-first-ruby-program.html"&gt;before&lt;/a&gt;
   and found reading the code to be the best way to figure out
   what to do. In this case, I needed to look at an existing sidebar
   plugin. I guessed the best model for my new plugin would be the
   &amp;#8220;Static&amp;#8221; sidebar component which I use to list a collection
   of links to favourite web sites.
&lt;/p&gt;
&lt;p&gt;I soon found the controller for this plugin in the
   &lt;code&gt;components/plugins/sidebars/&lt;/code&gt; subdirectory of my &lt;a href="http://www.typosphere.org"&gt;Typo&lt;/a&gt;
   installation. It&amp;#8217;s a simple &lt;a href="http://www.ruby-lang.org"&gt;Ruby&lt;/a&gt; class derived from
   &lt;code&gt;Sidebars::ComponentPlugin&lt;/code&gt;:
&lt;/p&gt;
&lt;div class="typocode"&gt;&lt;div class="codetitle"&gt;components/plugins/sidebars/static_controller.rb&lt;/div&gt;

&lt;pre class="prettyprint"&gt;class Plugins::Sidebars::StaticController &amp;lt; Sidebars::ComponentPlugin
  description "Static content, like links to other sites, advertisements, or blog meta-infomation"

DEFAULT_TEXT = %q{
&amp;lt;ul&amp;gt;
  &amp;lt;li&amp;gt;&amp;lt;a href="http://www.typosphere.org" title="Typo"&amp;gt;Typo&amp;lt;/a&amp;gt;&amp;lt;/li&amp;gt;
  ....
&amp;lt;/ul&amp;gt;
}

setting :title, 'Links'
  setting :body, DEFAULT_TEXT, :input_type =&amp;gt; :text_area

end

&lt;/pre&gt;

&lt;/div&gt;

&lt;p&gt;I also spotted a &lt;code&gt;components/plugins/sidebars/static&lt;/code&gt; subdirectory,
   and in this subdirectory was a two-line HTML template.
&lt;/p&gt;
&lt;div class="typocode"&gt;&lt;div class="codetitle"&gt;components/plugins/sidebars/static/content.html&lt;/div&gt;

&lt;pre class="prettyprint"&gt;&amp;lt;h3&amp;gt;&amp;lt;%= @sb_config['title'] %&amp;gt;&amp;lt;/h3&amp;gt;
&amp;lt;%= @sb_config['body'] %&amp;gt;

&lt;/pre&gt;

&lt;/div&gt;


&lt;h3&gt;My Plugin&lt;/h3&gt;
&lt;p&gt;My plugin was even more simple than the static one. I created a class:
&lt;/p&gt;
&lt;div class="typocode"&gt;&lt;div class="codetitle"&gt;components/plugins/sidebars/treefrog_controller.rb&lt;/div&gt;

&lt;pre class="prettyprint"&gt;class Plugins::Sidebars::TreefrogController &amp;lt; Sidebars::ComponentPlugin
  description 'Treefrog'
  setting :title, 'Treefrog'
end

&lt;/pre&gt;

&lt;/div&gt;

&lt;p&gt;and an HTML template:
&lt;/p&gt;
&lt;div class="typocode"&gt;&lt;div class="codetitle"&gt;components/plugins/sidebars/treefrog/content.rhtml&lt;/div&gt;

&lt;pre class="prettyprint"&gt;&amp;lt;h3&amp;gt;&amp;lt;%= @sb_config['title'] %&amp;gt;&amp;lt;/h3&amp;gt;
&amp;lt;object
type="application/x-shockwave-flash"
data="files/treefrog.swf"
width="150" height="200"&amp;gt;
&amp;lt;param name="movie" value="files/treefrog.swf" /&amp;gt;
&amp;lt;/object&amp;gt;

&lt;/pre&gt;

&lt;/div&gt;

&lt;p&gt;and I was done. As &lt;a href="http://wordaligned.org/articles/my-test-first-ruby-program.html"&gt;before&lt;/a&gt;, I ran a local &lt;a href="http://www.typosphere.org"&gt;Typo&lt;/a&gt; session to check my
   plugin worked, then I copied the files over to my
   live site. Job done.
&lt;/p&gt;

&lt;h3&gt;So What?&lt;/h3&gt;
&lt;p&gt;So what&amp;#8217;s so amazing about this? Absolutely nothing.  This is hardly
   rocket science.
&lt;/p&gt;
&lt;p&gt;Notice, though, that:
&lt;/p&gt;
&lt;ol&gt;
 &lt;li&gt;&lt;p&gt;I didn&amp;#8217;t have to restart my blog server
&lt;/p&gt;

 &lt;/li&gt;

 &lt;li&gt;&lt;p&gt;I didn&amp;#8217;t have to change &lt;em&gt;any&lt;/em&gt; existing part of my &lt;a href="http://www.typosphere.org"&gt;blog
   application&lt;/a&gt; &amp;#8212; the changes were purely additive.
&lt;/p&gt;

 &lt;/li&gt;

 &lt;li&gt;&lt;p&gt;I didn&amp;#8217;t reconfigure anything. I didn&amp;#8217;t have to register my plugin. I
      didn&amp;#8217;t have to tell my class where to find the HTML template. I didn&amp;#8217;t
      have to write or generate loads of XML.
&lt;/p&gt;

 &lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;No, this isn&amp;#8217;t amazing. So why do so many other application
   development frameworks get it so very wrong?
&lt;/p&gt;</description>
<dc:date>2006-11-12</dc:date>
<guid>http://wordaligned.org/articles/my-first-typo-sidebar</guid>
<author>tag@wordaligned.org (Thomas Guest)</author>
<link>http://wordaligned.org/articles/my-first-typo-sidebar</link>
<category>Ruby</category>
</item>

<item>
<title>String literals and regular expressions</title>
<description>&lt;div class="toc"&gt;
&lt;h2&gt;Contents&lt;/h2&gt;
&lt;ul&gt;
 &lt;li&gt;&lt;a href="http://wordaligned.org/articles/string-literals-and-regular-expressions#tocstring-literals" name="toc0" id="toc0"&gt;String Literals&lt;/a&gt;
 &lt;/li&gt;

 &lt;li&gt;&lt;a href="http://wordaligned.org/articles/string-literals-and-regular-expressions#tocescape-sequences" name="toc1" id="toc1"&gt;Escape Sequences&lt;/a&gt;
 &lt;/li&gt;

 &lt;li&gt;&lt;a href="http://wordaligned.org/articles/string-literals-and-regular-expressions#tocliteral-backslashes" name="toc2" id="toc2"&gt;Literal Backslashes&lt;/a&gt;
 &lt;/li&gt;

 &lt;li&gt;&lt;a href="http://wordaligned.org/articles/string-literals-and-regular-expressions#tocregular-expressions" name="toc3" id="toc3"&gt;Regular Expressions&lt;/a&gt;
 &lt;/li&gt;

 &lt;li&gt;&lt;a href="http://wordaligned.org/articles/string-literals-and-regular-expressions#tocattempting-to-match-a-c-string-literal" name="toc4" id="toc4"&gt;Attempting to Match a C++ String Literal&lt;/a&gt;
 &lt;/li&gt;

 &lt;li&gt;&lt;a href="http://wordaligned.org/articles/string-literals-and-regular-expressions#toccorrectly-matching-a-c-string-literal" name="toc5" id="toc5"&gt;Correctly Matching a C++ String Literal&lt;/a&gt;
 &lt;/li&gt;

 &lt;li&gt;&lt;a href="http://wordaligned.org/articles/string-literals-and-regular-expressions#tocnow-lets-do-it-in-c" name="toc6" id="toc6"&gt;Now let&amp;#8217;s do it in C++&lt;/a&gt;
 &lt;/li&gt;

 &lt;li&gt;&lt;a href="http://wordaligned.org/articles/string-literals-and-regular-expressions#toca-complete-c-string-literal-matcher" name="toc7" id="toc7"&gt;A complete C++ string literal matcher&lt;/a&gt;
 &lt;/li&gt;

 &lt;li&gt;&lt;a href="http://wordaligned.org/articles/string-literals-and-regular-expressions#tocraw-strings-in-python" name="toc8" id="toc8"&gt;Raw Strings in Python&lt;/a&gt;
 &lt;/li&gt;

 &lt;li&gt;&lt;a href="http://wordaligned.org/articles/string-literals-and-regular-expressions#tocraw-strings-in-c" name="toc9" id="toc9"&gt;Raw Strings in C++?&lt;/a&gt;
 &lt;/li&gt;

 &lt;li&gt;&lt;a href="http://wordaligned.org/articles/string-literals-and-regular-expressions#tocverbatim-strings-in-c" name="toc10" id="toc10"&gt;Verbatim Strings in C++?&lt;/a&gt;
 &lt;/li&gt;

 &lt;li&gt;&lt;a href="http://wordaligned.org/articles/string-literals-and-regular-expressions#toctheres-no-escape" name="toc11" id="toc11"&gt;There&amp;#8217;s no escape&lt;/a&gt;
 &lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;&lt;p&gt;According to the &lt;a href="http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2005/n1836.pdf"&gt;&amp;#8220;Draft Technical Report on C++ Library Extensions&amp;#8221;&lt;/a&gt;
   (more commonly known as &lt;a href="http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2005/n1836.pdf"&gt;TR1&lt;/a&gt;) regular expressions are making their way
   into the C++ standard library. Actually, &lt;a href="http://boost.org"&gt;Boost&lt;/a&gt; users have had
   a &lt;a href="http://www.boost.org/libs/regex/doc/index.html"&gt;regular expression library&lt;/a&gt; for a while now. The library
   is well designed and easy to use but is let down by the limitations
   of string literals.
&lt;/p&gt;
&lt;span id="continue-reading"/&gt;


&lt;h4&gt;&lt;a href="http://wordaligned.org/articles/string-literals-and-regular-expressions#toc0" name="tocstring-literals" id="tocstring-literals"&gt;String Literals&lt;/a&gt;&lt;/h4&gt;
&lt;p&gt;Let&amp;#8217;s go back to basics and examine a C++ string literal:
&lt;/p&gt;
&lt;div class="typocode"&gt;

&lt;pre class="prettyprint"&gt;char const * s = "string literal";

&lt;/pre&gt;

&lt;/div&gt;

&lt;p&gt;Here, the string literal comprises the sequence of characters &lt;code&gt;s&lt;/code&gt;,
   &lt;code&gt;t&lt;/code&gt;, &amp;#8230; &lt;code&gt;l&lt;/code&gt;. The double-quotes &lt;code&gt;"&lt;/code&gt; serve to delimit the contents of
   the string.
&lt;/p&gt;
&lt;p&gt;All&amp;#8217;s fine until we need a double-quote inside the string:
&lt;/p&gt;
&lt;div class="typocode"&gt;&lt;div class="codetitle"&gt;Broken string literal&lt;/div&gt;

&lt;pre class="prettyprint"&gt;char const * s = "The "x" in C++0x will probably be 9";

&lt;/pre&gt;

&lt;/div&gt;

&lt;p&gt;This line of code gives a compilation error:
&lt;/p&gt;
&lt;div class="typocode"&gt;

&lt;pre class="prettyprint"&gt;error: expected `,' or `;' before "x"

&lt;/pre&gt;

&lt;/div&gt;

&lt;p&gt;since the first internal double-quote closed the string. But how can we
   include a double-quote without closing the string?
&lt;/p&gt;

&lt;h4&gt;&lt;a href="http://wordaligned.org/articles/string-literals-and-regular-expressions#toc1" name="tocescape-sequences" id="tocescape-sequences"&gt;Escape Sequences&lt;/a&gt;&lt;/h4&gt;
&lt;p&gt;Here&amp;#8217;s how: the backslash, &lt;code&gt;\&lt;/code&gt;, is treated as an &lt;em&gt;escape&lt;/em&gt;
   &lt;em&gt;character&lt;/em&gt;. That is to say, normal interpretation of the string is suspended
   for a while &amp;#8212; in this case for a single character &amp;#8212; allowing us to write:
&lt;/p&gt;
&lt;div class="typocode"&gt;&lt;div class="codetitle"&gt;Fixed string literal&lt;/div&gt;

&lt;pre class="prettyprint"&gt;char const * s = "The \"x\" in C++0x will probably be 9";

&lt;/pre&gt;

&lt;/div&gt;

&lt;p&gt;Here, the internal double-quotes have been &lt;em&gt;escaped&lt;/em&gt;, so they don&amp;#8217;t close the
   string literal but are in fact interpreted as double-quote characters
   within the string itself. Yes, it&amp;#8217;s confusing.
&lt;/p&gt;

&lt;h4&gt;&lt;a href="http://wordaligned.org/articles/string-literals-and-regular-expressions#toc2" name="tocliteral-backslashes" id="tocliteral-backslashes"&gt;Literal Backslashes&lt;/a&gt;&lt;/h4&gt;
&lt;p&gt;Now, if the backslash takes on a special meaning, how are
   we to insert a literal backslash into the string? Simple &amp;#8212; we must escape that too:
&lt;/p&gt;
&lt;div class="typocode"&gt;&lt;div class="codetitle"&gt;String literal containing a single backslash&lt;/div&gt;

&lt;pre class="prettyprint"&gt;char const * s = "A backslash \\ starts an escape sequence";

&lt;/pre&gt;

&lt;/div&gt;

&lt;p&gt;Here, despite first appearances, the string contains just a &lt;em&gt;single&lt;/em&gt;
   backslash character.  We did say it was confusing! Which leads us on to &amp;#8230;
&lt;/p&gt;

&lt;h3&gt;&lt;a href="http://wordaligned.org/articles/string-literals-and-regular-expressions#toc3" name="tocregular-expressions" id="tocregular-expressions"&gt;Regular Expressions&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Put string literals aside for now. We&amp;#8217;re going to talk about regular
   expressions (let&amp;#8217;s call them regexes from now on).  Regexes are used
   to find and match patterns in blocks of text.  Like string literals,
   regexes are composed of sequences of characters, and, also like
   string literals, we need to escape the usual meaning of characters in regexes.
&lt;/p&gt;
&lt;p&gt;Once again, the backslash, &lt;code&gt;\&lt;/code&gt;, is used as the escape sequence prefix.
&lt;/p&gt;
&lt;p&gt;&lt;a href="http://www.ruby-lang.org" title="Ruby Website"&gt;Ruby&lt;/a&gt; embeds a powerful regex engine, so let&amp;#8217;s use Ruby for our regex
   examples:
&lt;/p&gt;
&lt;div class="typocode"&gt;&lt;div class="codetitle"&gt;Some Ruby regex patterns&lt;/div&gt;

&lt;pre class="prettyprint"&gt;/w/
/w+/
/\w+/
/"\w*"/
/\\/

&lt;/pre&gt;

&lt;/div&gt;

&lt;p&gt;Notice here that the &lt;em&gt;forward&lt;/em&gt; slash, &lt;code&gt;/&lt;/code&gt;, is used as a delimiter and
   is not part of the body of the regex pattern &amp;#8212; just like the
   double-quote, &lt;code&gt;"&lt;/code&gt;, was not part of the body our string literals.
&lt;/p&gt;
&lt;p&gt;What do these regex patterns mean?
&lt;/p&gt;
&lt;ol&gt;
 &lt;li&gt;
     &lt;code&gt;/w/&lt;/code&gt; matches the character &lt;code&gt;w&lt;/code&gt;.
 &lt;/li&gt;

 &lt;li&gt;
     &lt;code&gt;/w+/&lt;/code&gt; matches a sequence of one or more adjacent &lt;code&gt;w&lt;/code&gt;&amp;#8217;s.
 &lt;/li&gt;

 &lt;li&gt;
     &lt;code&gt;/\w+/&lt;/code&gt; matches one or more adjacent &amp;#8220;word&amp;#8221; characters.
 &lt;/li&gt;

 &lt;li&gt;
     &lt;code&gt;/"\w*"/&lt;/code&gt; matches a double-quote delimited sequence of zero or more &amp;#8220;word&amp;#8221; characters.
 &lt;/li&gt;

 &lt;li&gt;
     &lt;code&gt;/\\/&lt;/code&gt; matches a &lt;em&gt;single&lt;/em&gt; backslash.
 &lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Did you notice that the backslash, &lt;code&gt;\&lt;/code&gt;, gives the succeding &lt;code&gt;w&lt;/code&gt; a special
   meaning? Did you notice that the &lt;code&gt;+&lt;/code&gt; has a special meaning within a regex
   (it means one or more)?  To match a literal &lt;code&gt;+&lt;/code&gt;, we&amp;#8217;d need to escape
   it like this: &lt;code&gt;/\+/&lt;/code&gt;. And did you notice that to match a literal backslash
   we must escape it? Good &amp;#8212; but that was the easy bit!
&lt;/p&gt;

&lt;h4&gt;&lt;a href="http://wordaligned.org/articles/string-literals-and-regular-expressions#toc4" name="tocattempting-to-match-a-c-string-literal" id="tocattempting-to-match-a-c-string-literal"&gt;Attempting to Match a C++ String Literal&lt;/a&gt;&lt;/h4&gt;
&lt;p&gt;Let&amp;#8217;s suppose we want to use our regex pattern matching on some C++ code.
   Now, matching a C++ string literal is going to be tricky. A first attempt,
   &lt;code&gt;/".*"/&lt;/code&gt;, just won&amp;#8217;t do because the &lt;code&gt;.*&lt;/code&gt; is &lt;em&gt;greedy&lt;/em&gt; and will eat up
   everything until the final &lt;code&gt;"&lt;/code&gt; in the text to be matched. So
   we might match too much:
&lt;/p&gt;
&lt;div class="typocode"&gt;

&lt;pre class="prettyprint"&gt;char * s1 = "string", * s2 = "literal";
            ^---------match----------^

&lt;/pre&gt;

&lt;/div&gt;

&lt;p&gt;A non-greedy second attempt, &lt;code&gt;/".*?"/&lt;/code&gt;, won&amp;#8217;t do either since it gets
   confused by an escaped double-quote in a string literal. So
   we might match too little:
&lt;/p&gt;
&lt;div class="typocode"&gt;

&lt;pre class="prettyprint"&gt;char const * s = "The \"x\" in C++0x will probably be 9";
                 ^match^

&lt;/pre&gt;

&lt;/div&gt;


&lt;h4&gt;&lt;a href="http://wordaligned.org/articles/string-literals-and-regular-expressions#toc5" name="toccorrectly-matching-a-c-string-literal" id="toccorrectly-matching-a-c-string-literal"&gt;Correctly Matching a C++ String Literal&lt;/a&gt;&lt;/h4&gt;
&lt;p&gt;To properly match a C++ string literal we need to apply the following
   pattern: start with a double-quote; continue with a sequence of
   &lt;em&gt;either&lt;/em&gt; characters which aren&amp;#8217;t the double-quote or the backslash
   &lt;em&gt;or&lt;/em&gt; escape sequences; then finish with a double-quote.
&lt;/p&gt;
&lt;p&gt;Precisely what makes up a valid escape sequence is a little fiddly;
   there are octal and hexadecimal escapes, there are various whitespace
   characters, and there are unicode values. We can however compose a
   pattern using a suitable short-cut as follows:
&lt;/p&gt;
&lt;div class="typocode"&gt;&lt;div class="codetitle"&gt;A regex to match a C++ string literal&lt;/div&gt;

&lt;pre class="prettyprint"&gt;/"([^"\\]|\\.)*"/

&lt;/pre&gt;

&lt;/div&gt;

&lt;p&gt;We can read this as: a string literal starts with a double quote,
   followed by any number of items which are:
&lt;/p&gt;
&lt;ul&gt;
 &lt;li&gt;
     &lt;em&gt;either&lt;/em&gt; not a double-quote or a backslash
 &lt;/li&gt;

 &lt;li&gt;
     &lt;em&gt;or&lt;/em&gt; are a backslash followed by any single character
 &lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;and then finishes with a closing double-quote.
&lt;/p&gt;
&lt;p&gt;As you&amp;#8217;ve probably spotted, we have to double up the backslashes in
   the regex pattern because the backslash is used as an escape sequence;
   i.e. a literal backslash is matched by the pattern &lt;code&gt;\\\\&lt;/code&gt;.
&lt;/p&gt;

&lt;h4&gt;&lt;a href="http://wordaligned.org/articles/string-literals-and-regular-expressions#toc6" name="tocnow-lets-do-it-in-c" id="tocnow-lets-do-it-in-c"&gt;Now let&amp;#8217;s do it in C++&lt;/a&gt;&lt;/h4&gt;
&lt;p&gt;I&amp;#8217;ll use the &lt;a href="http://www.boost.org/libs/regex/doc/index.html"&gt;Boost&lt;/a&gt; implementation since the compilers I
   have available don&amp;#8217;t support &lt;a href="http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2005/n1836.pdf"&gt;TR1&lt;/a&gt; yet. We&amp;#8217;re going to need to
   construct a &lt;code&gt;boost::regex&lt;/code&gt; using a pattern represented by a string
   literal. Which is where the problems start.  Of course we can&amp;#8217;t write:
&lt;/p&gt;
&lt;div class="typocode"&gt;&lt;div class="codetitle"&gt;This regex won&amp;#8217;t compile!&lt;/div&gt;

&lt;pre class="prettyprint"&gt;boost::regex const
    string_matcher(/"([^"\\]|\\.)*"/);

&lt;/pre&gt;

&lt;/div&gt;

&lt;p&gt;because we haven&amp;#8217;t passed a string literal to the &lt;code&gt;boost::regex&lt;/code&gt;
   constructor.  In order to pass a string literal we&amp;#8217;ll need to use
   double-quotes instead of forward-slashes and we&amp;#8217;ll have to escape
   the internal double-quotes. Let&amp;#8217;s try again:
&lt;/p&gt;
&lt;div class="typocode"&gt;&lt;div class="codetitle"&gt;This regex throws an exception!&lt;/div&gt;

&lt;pre class="prettyprint"&gt;boost::regex const
    string_matcher("\"([^\"\\]|\\.)*\"");

&lt;/pre&gt;

&lt;/div&gt;

&lt;p&gt;Oh dear &amp;#8212; the error moves to run-time. We get an exception:
   &lt;code&gt;Unmatched [ or [^&lt;/code&gt;. This is because the closing square bracket &lt;code&gt;]&lt;/code&gt;
   has been escaped by the time it gets to the regex engine. Unfortunately
   the &lt;code&gt;\\&lt;/code&gt;&amp;#8217;s in the string literal contract to just single backslashes. We need
   to redouble them.
&lt;/p&gt;
&lt;div class="typocode"&gt;&lt;div class="codetitle"&gt;This regex is just right!&lt;/div&gt;

&lt;pre class="prettyprint"&gt;boost::regex const
    string_matcher("\"([^\"\\\\]|\\\\.)*\"");

&lt;/pre&gt;

&lt;/div&gt;

&lt;p&gt;Here, each pair of backslashes has contracted to a single backslash by the
   time the regex engine sees it, which &amp;#8212; believe it or not &amp;#8212; is what&amp;#8217;s
   required.
&lt;/p&gt;
&lt;p&gt;This &lt;code&gt;string_matcher&lt;/code&gt; works, but as code it is rather more cryptic
   than communicative.
&lt;/p&gt;

&lt;h4&gt;&lt;a href="http://wordaligned.org/articles/string-literals-and-regular-expressions#toc7" name="toca-complete-c-string-literal-matcher" id="toca-complete-c-string-literal-matcher"&gt;A complete C++ string literal matcher&lt;/a&gt;&lt;/h4&gt;
&lt;p&gt;Here&amp;#8217;s a complete program for you to try.
&lt;/p&gt;
&lt;div class="typocode"&gt;&lt;div class="codetitle"&gt;A C++ string matcher&lt;/div&gt;

&lt;pre class="prettyprint"&gt;#include &amp;lt;boost/regex.hpp&amp;gt;
#include &amp;lt;iostream&amp;gt;
#include &amp;lt;stdexcept&amp;gt;
#include &amp;lt;string&amp;gt;

int main(int argc, char * argv[])
{
  try
  {
    boost::regex const
      string_matcher("\"([^\"\\\\]|\\\\.)*\"");
    std::string line;
    while (std::getline(std::cin, line))
    {
      if (boost::regex_match(line, string_matcher))
      {
        std::cout &amp;lt;&amp;lt; line &amp;lt;&amp;lt; " is a C++ string literal\n";
      }
    }
  }
  catch (std::exception &amp;amp; exc)
  {
    std::cerr &amp;lt;&amp;lt; "An error occurred: " &amp;lt;&amp;lt; exc.what();
  }
  catch (...)
  {
    std::cerr &amp;lt;&amp;lt; "An error occurred\n";
  }
  return 0;
}

&lt;/pre&gt;

&lt;/div&gt;


&lt;h4&gt;&lt;a href="http://wordaligned.org/articles/string-literals-and-regular-expressions#toc8" name="tocraw-strings-in-python" id="tocraw-strings-in-python"&gt;Raw Strings in Python&lt;/a&gt;&lt;/h4&gt;
&lt;p&gt;Unlike &lt;a href="http://www.ruby-lang.org" title="Ruby Website"&gt;Ruby&lt;/a&gt;, &lt;a href="http://python.org"&gt;Python&lt;/a&gt; doesn&amp;#8217;t include support for regexes in the
   language itself. Instead, regex support is provided by the standard
   &lt;a href="http://docs.python.org/lib/module-re.html"&gt;regular expression library&lt;/a&gt;.
&lt;/p&gt;
&lt;p&gt;&lt;a href="http://python.org"&gt;Python&lt;/a&gt;&amp;#8217;s flexible string literals allow us to simplify the pattern,
   though. Here, we use a &lt;a href="http://docs.python.org/ref/strings.html"&gt;raw string&lt;/a&gt;, and we chose to delimit it with
   single-quotes so we don&amp;#8217;t need to escape the internal double-quotes.
&lt;/p&gt;
&lt;div class="typocode"&gt;

&lt;pre class="prettyprint"&gt;string_literal_pattern = r'"([^"\\]|\\.)*"'

&lt;/pre&gt;

&lt;/div&gt;

&lt;p&gt;This is nice. Basically, &lt;a href="http://docs.python.org/ref/strings.html"&gt;raw strings&lt;/a&gt; leave the backslashes
   unprocessed.  &lt;a href="http://docs.python.org/ref/strings.html"&gt;Raw strings&lt;/a&gt; aren&amp;#8217;t just restricted to regex patterns,
   though perhaps that&amp;#8217;s their most common use.
&lt;/p&gt;

&lt;h4&gt;&lt;a href="http://wordaligned.org/articles/string-literals-and-regular-expressions#toc9" name="tocraw-strings-in-c" id="tocraw-strings-in-c"&gt;Raw Strings in C++?&lt;/a&gt;&lt;/h4&gt;
&lt;p&gt;C++ doesn&amp;#8217;t support raw strings (at least, it doesn&amp;#8217;t support them
   yet, and I haven&amp;#8217;t found them mentioned in &lt;a href="http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2005/n1836.pdf"&gt;TR1&lt;/a&gt;) &amp;#8212; but it does
   support wide-strings, indicated by the &lt;code&gt;L&lt;/code&gt; prefix.
&lt;/p&gt;
&lt;div class="typocode"&gt;

&lt;pre class="prettyprint"&gt;cpp_wide_string = L"this is a wide string";

&lt;/pre&gt;

&lt;/div&gt;

&lt;p&gt;Maybe if we switched the &lt;code&gt;L&lt;/code&gt; for an &lt;code&gt;R&lt;/code&gt; we could allow raw strings into
   C++? It would make regex patterns far more readable.
&lt;/p&gt;

&lt;h4&gt;&lt;a href="http://wordaligned.org/articles/string-literals-and-regular-expressions#toc10" name="tocverbatim-strings-in-c" id="tocverbatim-strings-in-c"&gt;Verbatim Strings in C++?&lt;/a&gt;&lt;/h4&gt;
&lt;p&gt;Alternatively &amp;#8230;
&lt;/p&gt;
&lt;p&gt;I&amp;#8217;ve never used C# but &lt;a href="http://www.google.co.uk/search?q=c%23%20string%20literals&amp;amp;hl=en&amp;amp;meta="&gt;googling&lt;/a&gt;
   suggests raw strings are supported and rather nicely named
   &amp;#8220;verbatim string literals&amp;#8221;. C# uses the &lt;code&gt;@&lt;/code&gt; prefix to indicate that a
   string literal is a verbatim string. Now, &lt;code&gt;@&lt;/code&gt; isn&amp;#8217;t even part of the C++
   source character set, so maybe this too would be possible.
&lt;/p&gt;

&lt;h4&gt;&lt;a href="http://wordaligned.org/articles/string-literals-and-regular-expressions#toc11" name="toctheres-no-escape" id="toctheres-no-escape"&gt;There&amp;#8217;s no escape&lt;/a&gt;&lt;/h4&gt;
&lt;p&gt;The proliferation of backslashes when we combine regexes and string
   literals is unfortunate. &lt;span /&gt;It could be worse. What if the backslash key
   had fallen off our keyboard? Remarkably &amp;ndash; and, as far as I know,
   uniquely &amp;ndash; C++ caters for this situation. A number source characters
   can be written as &amp;#8220;trigraphs&amp;#8221; &amp;#8212; sequences of three characters
   starting &lt;code&gt;??&lt;/code&gt;. The backslash is one such character: it can be
   written as &lt;code&gt;??/&lt;/code&gt;.
&lt;/p&gt;
&lt;div class="typocode"&gt;&lt;div class="codetitle"&gt;regex using trigraphs&lt;/div&gt;

&lt;pre class="prettyprint"&gt;boost::regex const
    string_matcher("??/"([^??/"??/??/??/??/]|??/??/??/??/.)*??/"");

&lt;/pre&gt;

&lt;/div&gt;

&lt;p&gt;For completeness, we could also lose the &lt;code&gt;|&lt;/code&gt;, &lt;code&gt;[&lt;/code&gt; and &lt;code&gt;]&lt;/code&gt; keys.
&lt;/p&gt;
&lt;div class="typocode"&gt;&lt;div class="codetitle"&gt;regex using even more trigraphs&lt;/div&gt;

&lt;pre class="prettyprint"&gt;boost::regex const
    string_matcher("??/"(??(^??/"??/??/??/??/??)??!??/??/??/??/.)*??/"");

&lt;/pre&gt;

&lt;/div&gt;

&lt;p&gt;The string literal used to initialise &lt;code&gt;string_matcher&lt;/code&gt; &lt;em&gt;is&lt;/em&gt; valid, but
   the regex wouldn&amp;#8217;t match it properly. I&amp;#8217;ll leave the fix as an exercise
   for the reader.
&lt;/p&gt;</description>
<dc:date>2006-09-02</dc:date>
<guid>http://wordaligned.org/articles/string-literals-and-regular-expressions</guid>
<author>tag@wordaligned.org (Thomas Guest)</author>
<link>http://wordaligned.org/articles/string-literals-and-regular-expressions</link>
<category>Ruby</category>
</item>

<item>
<title>Octal Literals</title>
<description>&lt;p&gt;I &lt;a href="http://wordaligned.org/articles/binary-literals.html"&gt;recently&lt;/a&gt; discovered that you could write binary literals directly
   using &lt;a href="http://www.ruby-lang.org" title="Ruby home"&gt;Ruby&lt;/a&gt;, which I thought a good idea. Programming languages
   have to think in binary so it&amp;#8217;s important that a language should
   support them naturally. I also spotted that &lt;a href="http://www.ruby-lang.org" title="Ruby home"&gt;Ruby&lt;/a&gt; extends the usual C
   convention for octal literals. In this case, I think &lt;a href="http://www.ruby-lang.org" title="Ruby home"&gt;Ruby&lt;/a&gt; makes the
   mistake of building on a broken design.
&lt;/p&gt;
&lt;span id="continue-reading"/&gt;


&lt;h4&gt;Octal Integers in Ruby&lt;/h4&gt;
&lt;p&gt;Here&amp;#8217;s an example:
&lt;/p&gt;
&lt;div class="typocode"&gt;

&lt;pre class="prettyprint"&gt;irb(main):001:0&amp;gt; puts 0O377, 0377, 377
255
255
377
=&amp;gt; nil

&lt;/pre&gt;

&lt;/div&gt;

&lt;p&gt;&lt;span /&gt;You did notice the Latin Capital Letter O didn&amp;#8217;t you? The one next
   to the number 0. You didn&amp;#8217;t! Then let&amp;#8217;s try a variation:
&lt;/p&gt;
&lt;div class="typocode"&gt;

&lt;pre class="prettyprint"&gt;irb(main):001:0&amp;gt; puts 0o377, 0377, 377
255
255
377
=&amp;gt; nil

&lt;/pre&gt;

&lt;/div&gt;

&lt;p&gt;Perhaps the Latin Small Letter O was more obvious?
&lt;/p&gt;

&lt;h4&gt;The Problem with Octal Numbers&lt;/h4&gt;
&lt;p&gt;The optional O (that&amp;#8217;s the &lt;em&gt;letter&lt;/em&gt; O) to explicitly indicate the
   base does make some sort of sense &amp;#8212; it&amp;#8217;s consistent with the X for
   hexadecimal and indeed the B which Ruby &lt;a href="http://wordaligned.org/articles/binary-literals.html"&gt;adds for binary&lt;/a&gt;. But really it&amp;#8217;s
   just adding confusion to an already confusing design.
&lt;/p&gt;
&lt;p&gt;Consider the following C array of numbers:
&lt;/p&gt;
&lt;div class="typocode"&gt;

&lt;pre class="prettyprint"&gt;static int const countdown[] = {
    100,
    099,
    098,
    097,
    ....
    000
};

&lt;/pre&gt;

&lt;/div&gt;

&lt;p&gt;Here, a novice programmer has padded the numbers in the countdown
   with leading zeros to make them line up nicely. Fortunately the
   &lt;a href="http://gcc.gnu.org/"&gt;compiler&lt;/a&gt;
   catches the problem in this case:
&lt;/p&gt;
&lt;div class="typocode"&gt;

&lt;pre class="prettyprint"&gt;invalid digit "9" in octal constant

&lt;/pre&gt;

&lt;/div&gt;

&lt;p&gt;We might not have been so lucky, though. Here&amp;#8217;s some dangerously
   broken &lt;a href="http://python.org" title="Python Website"&gt;Python&lt;/a&gt;:
&lt;/p&gt;
&lt;div class="typocode"&gt;

&lt;pre class="prettyprint"&gt;roman_numerals = {
    "C" : 100,
    "L" : 050,
    "X" : 010,
    "V" : 005,
    "I" : 001,
}

&lt;/pre&gt;

&lt;/div&gt;

&lt;p&gt;This runs through the interpreter without raising a
   &lt;code&gt;SyntaxError&lt;/code&gt;. We do have a semantic error, though. &lt;code&gt;"L"&lt;/code&gt; and &lt;code&gt;"X"&lt;/code&gt; map to
   &lt;em&gt;octal&lt;/em&gt; literals with decimal values 40 and 8 respectively. 0ops!
&lt;/p&gt;

&lt;h4&gt;When are Octal Literals Needed?&lt;/h4&gt;
&lt;p&gt;I&amp;#8217;ve never really needed them. 8 is a power of two, but so is 16: if
   it&amp;#8217;s a binary number we need, a binary literal would be better; and, in
   the absence of language support for binary literals, a hexadecimal number
   is more useful than an octal since two hex numbers make up a byte.
&lt;/p&gt;
&lt;p&gt;Occasionally octals are useful ways to insert a non-printable character into
   a string literal. Here&amp;#8217;s an example:
&lt;/p&gt;
&lt;div class="typocode"&gt;&lt;div class="codetitle"&gt;Octal value in a String Literal&lt;/div&gt;

&lt;pre class="prettyprint"&gt;std::string s = "ABC\177DEF";

&lt;/pre&gt;

&lt;/div&gt;

&lt;p&gt;Here, the escaped octal value &lt;code&gt;177&lt;/code&gt; is embedded into the string. Octal &lt;code&gt;177&lt;/code&gt;
   equals hexadecimal &lt;code&gt;7F&lt;/code&gt;, but we run into trouble if we try:
&lt;/p&gt;
&lt;div class="typocode"&gt;&lt;div class="codetitle"&gt;Very large Hex value in a String Literal&lt;/div&gt;

&lt;pre class="prettyprint"&gt;std::string s = "ABC\x7FDEF";

&lt;/pre&gt;

&lt;/div&gt;

&lt;p&gt;Here, the &lt;code&gt;"DEF"&lt;/code&gt; characters are valid hexadecimal and therefore
   become part of the number we&amp;#8217;re embedding; so we&amp;#8217;ve tried to put the
   hex number &lt;code&gt;7FDEF&lt;/code&gt; into a byte. If we&amp;#8217;re lucky our
   &lt;a href="http://gcc.gnu.org/"&gt;compiler&lt;/a&gt; will warn us:
&lt;/p&gt;
&lt;div class="typocode"&gt;

&lt;pre class="prettyprint"&gt;warning: hex escape sequence out of range

&lt;/pre&gt;

&lt;/div&gt;

&lt;p&gt;If we&amp;#8217;re unlucky or if we don&amp;#8217;t act on the warning, the result is
   implementation defined. In any case, it&amp;#8217;s certainly not what we
   wanted. Of course, embedded octal escape sequences suffer from the
   exact same problem if succeeded by one of the letters &lt;code&gt;"0" - "7"&lt;/code&gt;.
&lt;/p&gt;
&lt;p&gt;The workaround is simple:
&lt;/p&gt;
&lt;div class="typocode"&gt;&lt;div class="codetitle"&gt;Hex 7F in a String Literal&lt;/div&gt;

&lt;pre class="prettyprint"&gt;std::string s = "ABC\x7F" "DEF";

&lt;/pre&gt;

&lt;/div&gt;

&lt;p&gt;or even:
&lt;/p&gt;
&lt;div class="typocode"&gt;&lt;div class="codetitle"&gt;Hex 7F in a String Literal&lt;/div&gt;

&lt;pre class="prettyprint"&gt;std::string s = "ABC" "\x7F" "DEF";

&lt;/pre&gt;

&lt;/div&gt;

&lt;p&gt;In other words, even this use of octal values is of limited practical use.
&lt;/p&gt;

&lt;h4&gt;Optional Radices for Integral Literals&lt;/h4&gt;
&lt;p&gt;Octal literals &amp;#8212; as implemented in the C family of languages &amp;#8212; are
   problematic and not especially useful. However, it &lt;em&gt;is&lt;/em&gt; occasionally
   useful to be able to write numbers using a different radix (and probably
   &lt;a href="http://www.google.co.uk/search?q=blub%20paradox&amp;amp;hl=en&amp;amp;meta="&gt;more useful than we realise&lt;/a&gt;
    since we&amp;#8217;ve never been able to try it). I&amp;#8217;ve
   &lt;a href="http://wordaligned.org/articles/binary-literals.html"&gt;already said&lt;/a&gt; why I think binary numbers are desirable. Hexadecimal
   numbers, which pack so neatly into bytes, are also of special interest.
&lt;/p&gt;
&lt;p&gt;But why restrict ourselves to radices 10, 16, 8 and 2? A bit of
   &lt;a href="http://www.google.co.uk/search?q=octal%20literals&amp;amp;hl=en&amp;amp;meta="&gt;Googling&lt;/a&gt;
   found this suggestion from Andrew Koenig on a &lt;a href="http://python.org" title="Python Website"&gt;Python&lt;/a&gt; mail list archive:
&lt;/p&gt;
&lt;blockquote&gt;&lt;p&gt;I am personally partial to allowing an optional radix (in decimal)
   followed by the letter r at the beginning of a literal, so 19, 8r23,
   and 16r13 would all represent the same value.
&lt;/p&gt;
&lt;/blockquote&gt;</description>
<dc:date>2006-08-12</dc:date>
<guid>http://wordaligned.org/articles/octal-literals</guid>
<author>tag@wordaligned.org (Thomas Guest)</author>
<link>http://wordaligned.org/articles/octal-literals</link>
<category>Ruby</category>
</item>

<item>
<title>Binary Literals</title>
<description>&lt;p&gt;When I &lt;a href="http://wordaligned.org/articles/my-test-first-ruby-program.html" title="my (test) first Ruby program"&gt;examined Ruby&amp;#8217;s syntax&lt;/a&gt; for integral literals I found the usual
   suspects &amp;#8212; decimal, octal, and hexadecimal numbers. There were also a couple
   of pleasant surprises.
&lt;/p&gt;
&lt;span id="continue-reading"/&gt;


&lt;h4&gt;Binary Literals&lt;/h4&gt;
&lt;p&gt;&lt;span /&gt;Ruby supports binary literals. It&amp;#8217;s always been mystery to me why
   other languages don&amp;#8217;t support these &amp;ndash; you always need them when you
   need to pack and unpack binary data. Many of us old C/C++ hackers
   probably use hexadecimal numbers for this purpose, to the extent that
   we probably &lt;em&gt;know&lt;/em&gt; the binary values of the first sixteen hex numbers
   &amp;#8212; but they still don&amp;#8217;t &lt;a href="http://wordaligned.org/articles/readable-code.html" title="Readable code"&gt;read&lt;/a&gt; well. For example, here, in
   different languages, are bitmasks to get at bits 2 to 5 (inclusive) of
   a number. I&amp;#8217;m counting the least significant bit as bit 0 here.
&lt;/p&gt;
&lt;div class="typocode"&gt;

&lt;pre class="prettyprint"&gt;mask = 0b111100    # Ruby, binary literal
mask = 0x3C        # Python, hexadecimal numeric literal
unsigned long const mask
     = 0x3C;       // C++, hexadecimal numeric literal

&lt;/pre&gt;

&lt;/div&gt;

&lt;p&gt;It&amp;#8217;s clear that the Ruby literal is easiest to interpret as a bit mask.
&lt;/p&gt;
&lt;p&gt;In C++ &amp;#8212; and other C-family languages &amp;#8212; we could equally try
   and express our intent of extracting bits 2, 3, 4, 5 more directly:
&lt;/p&gt;
&lt;div class="typocode"&gt;

&lt;pre class="prettyprint"&gt; unsigned long const mask
     = ~(~0u &amp;lt;&amp;lt; 6 - 2) &amp;lt;&amp;lt; 2;

&lt;/pre&gt;

&lt;/div&gt;

&lt;p&gt;With a bit of squinting, we read this as: &amp;#8220;set bits in the half open range
   from bits 2 to 6&amp;#8221;.
&lt;/p&gt;
&lt;p&gt;Note in passing that the subtraction operator, &lt;code&gt;-&lt;/code&gt;, binds more tightly
   than the left shift operator, &lt;code&gt;&amp;lt;&amp;lt;&lt;/code&gt;, &lt;a href="http://wordaligned.org/articles/brackets_off.html" title="Brackets off!"&gt;despite what you might expect&lt;/a&gt;,
   so we are in fact left shifting &lt;code&gt;~0u&lt;/code&gt; by &lt;code&gt;4&lt;/code&gt;.
&lt;/p&gt;
&lt;p&gt;In C++ we might even consider working around the lack of binary
   literals using a &lt;a href="http://www.sgi.com/tech/stl/bitset.html"&gt;bitset&lt;/a&gt;.
&lt;/p&gt;
&lt;div class="typocode"&gt;

&lt;pre class="prettyprint"&gt;unsigned long const mask
    = std::bitset&amp;lt;6&amp;gt;(std::string("111100")).to_ulong();

&lt;/pre&gt;

&lt;/div&gt;

&lt;p&gt;This is, however, non-idiomatic and inefficient, and really just exposes the
   language&amp;#8217;s lack of binary literals.
&lt;/p&gt;

&lt;h4&gt;Underscore as Separators&lt;/h4&gt;
&lt;p&gt;Binary literals soon get tricky to read. Runs of 1&amp;#8217;s and 0&amp;#8217;s can be
   hard on the eye.  How readable, for example, would our &lt;a href="http://www.ruby-lang.org" title="Ruby home"&gt;Ruby&lt;/a&gt;
   literal be if we wanted to mask out bits 9, 10, 11?
&lt;/p&gt;
&lt;div class="typocode"&gt;

&lt;pre class="prettyprint"&gt;mask = 0b111000000000

&lt;/pre&gt;

&lt;/div&gt;

&lt;p&gt;Fortunately, &lt;a href="http://www.ruby-lang.org" title="Ruby home"&gt;Ruby&lt;/a&gt; allows us to place underscores in numeric
   literals, which, gives us an equivalent number:
&lt;/p&gt;
&lt;div class="typocode"&gt;

&lt;pre class="prettyprint"&gt;mask = 0b1110_0000_0000

&lt;/pre&gt;

&lt;/div&gt;

&lt;p&gt;Here, I&amp;#8217;ve inserted the underscores every &lt;code&gt;4&lt;/code&gt; bits &amp;#8212; that is, at the
   boundaries of nibbles. Nice one &lt;a href="http://www.ruby-lang.org" title="Ruby home"&gt;Ruby&lt;/a&gt;!
&lt;/p&gt;</description>
<dc:date>2006-08-06</dc:date>
<guid>http://wordaligned.org/articles/binary-literals</guid>
<author>tag@wordaligned.org (Thomas Guest)</author>
<link>http://wordaligned.org/articles/binary-literals</link>
<category>Ruby</category>
</item>

<item>
<title>Readable Code</title>
<description>&lt;p&gt;In an &lt;a href="http://wordaligned.org/articles/my-test-first-ruby-program.html"&gt;earlier post&lt;/a&gt; I described how I got started with &lt;a href="http://www.ruby-lang.org" title="Ruby home"&gt;Ruby&lt;/a&gt;
   not by studying the language, but by reading then adapting some
   existing code. Of course I was lucky in that the code I started from
   was good. (At least I&amp;#8217;m pretty sure it was: it came from a trusted
   source, it had unit tests, looked clean &amp;#8212; I think I can recognise
   good code even without knowing the language it&amp;#8217;s been written in.)
   &lt;span /&gt;This approach of learning how to program by reading code is far from
   radical but is perhaps better suited to some languages than others.
&lt;/p&gt;
&lt;span id="continue-reading"/&gt;


&lt;h4&gt;Learning to Program by Reading&lt;/h4&gt;
&lt;p&gt;The suggestion that we can learn how to program by reading code is far
   from original. In his essay &lt;a href="http://catb.org/~esr/faqs/hacker-howto.html"&gt;How to Become a
Hacker&lt;/a&gt; &lt;a href="http://catb.org/~esr/" title="Eric Raymond"&gt;Eric
Raymond&lt;/a&gt; says:
&lt;/p&gt;
&lt;blockquote&gt;&lt;p&gt;Learning to program is like learning to write good natural
   language. &lt;em&gt;The best way to do it is to read some stuff written by masters of the form&lt;/em&gt;,
   write some things yourself, read a lot more,
   write a little more, read a lot more, write some more &amp;#8230; and repeat
   until your writing begins to develop the kind of strength and
   economy you see in your models.
&lt;/p&gt;
&lt;/blockquote&gt;&lt;p&gt;In &lt;a href="http://www.norvig.com/21-days.html"&gt;Teach Yourself Programming in Ten Years&lt;/a&gt;
   &lt;a href="http://www.norvig.com"&gt;Peter Norvig&lt;/a&gt; recommends:
&lt;/p&gt;
&lt;blockquote&gt;&lt;p&gt;Talk to other programmers; &lt;em&gt;read other programs&lt;/em&gt;. This is more
   important than any book or training course.
&lt;/p&gt;
&lt;/blockquote&gt;&lt;p&gt;We must also remember &lt;a href="http://allankelly.net" title="No single link here, but Allan has lots to say about learning"&gt;learning&lt;/a&gt; never stops
   &amp;#8212; meaning that we should always be reading good code.
&lt;/p&gt;

&lt;h4&gt;Finding Good Code&lt;/h4&gt;
&lt;p&gt;Where, then, do we find good code to read? Maybe you&amp;#8217;re lucky enough
   to work with some excellent programmers &amp;#8212; I guess many of us put in
   more time reading code written by colleagues than by anyone else, since
   that&amp;#8217;s what we&amp;#8217;re paid to do. Aside from that, you&amp;#8217;re probably looking at
   code you found somewhere on the internet.
&lt;/p&gt;
&lt;p&gt;Of course, the code will have to be open source (meaning, in this
   case, that you have access to source code, not compiled binaries) and,
   if you wish to adapt it, suitably licensed.
&lt;/p&gt;

&lt;h4&gt;Dynamic Languages&lt;/h4&gt;
&lt;p&gt;One thing I like about the dynamic languages (&lt;a href="http://python.org" title="Python home"&gt;Python&lt;/a&gt;, &lt;a href="http://www.ruby-lang.org" title="Ruby home"&gt;Ruby&lt;/a&gt;,
   &lt;a href="http://www.perl.org" title="The Perl directory"&gt;Perl&lt;/a&gt;, etc.) is their open nature. It may be possible to scramble a
   &lt;a href="http://python.org" title="Python home"&gt;Python&lt;/a&gt; program so it can&amp;#8217;t be read but I don&amp;#8217;t know how to
   do it &amp;#8212; and it&amp;#8217;s certainly not part of the language tradition.
&lt;/p&gt;
&lt;p&gt;Another thing I like is the tradition of, and indeed support for, unit
   testing in these languages. Some form of reflection makes unit testing
   much easier. As does the ability to &lt;a href="http://docs.python.org/lib/module-doctest.html" title="doctest"&gt;dynamically execute
code&lt;/a&gt;.
   Unit tests actually make code easy to read: if you want to know how to
   use a library, look at its unit tests. &lt;a href="http://docs.python.org/lib/module-doctest.html" title="doctest"&gt;Python&amp;#8217;s doctest&lt;/a&gt; presses this
   point home by blurring the boundaries between code, tests and documentation.
&lt;/p&gt;
&lt;p&gt;So, if, for example, you want to learn how to program using &lt;a href="http://python.org" title="Python home"&gt;Python&lt;/a&gt;,
   the Python standard library is a great starting point. You&amp;#8217;ll find it in your
   Python installation. It&amp;#8217;s the code you actually run when you use
   Python, it&amp;#8217;s of excellent quality, and of course there are
   comprehensive unit tests.
&lt;/p&gt;
&lt;p&gt;Finally, dynamic languages are terse, so there&amp;#8217;s less code to read.
   Have a look, for example, at Peter Norvig&amp;#8217;s &lt;a href="http://norvig.com/sudoku.html"&gt;Sudoku
solver&lt;/a&gt; &amp;#8212; or even &lt;a href="http://wordaligned.org/sudoku.cgi"&gt;my
own&lt;/a&gt;!
&lt;/p&gt;

&lt;h4&gt;Not So Dynamic Languages&lt;/h4&gt;
&lt;p&gt;To be fair, &lt;a href="http://java.sun.com"&gt;Java&lt;/a&gt; also has a fine tradition of
   openness.  It&amp;#8217;s far from my favourite language but you don&amp;#8217;t have to
   look to hard to find superb Java source code published by the likes of
   &lt;a href="http://www.sun.com"&gt;Sun&lt;/a&gt; and &lt;a href="http://www.apache.org"&gt;Apache&lt;/a&gt;.
&lt;/p&gt;
&lt;p&gt;You can also find good C code without trouble. C has been around long
   enough that:
&lt;/p&gt;
&lt;ol&gt;
 &lt;li&gt;
     the language is stable, and
 &lt;/li&gt;

 &lt;li&gt;
     we know how to use it
 &lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;C is often used as a portability layer for open source projects. Good
   starting points to find good, readable C code would be
   &lt;a href="http://www.gnu.org/"&gt;GNU&lt;/a&gt;, the Linux kernel, the C-Python
   implementation.
&lt;/p&gt;

&lt;h4&gt;Readable C++&lt;/h4&gt;
&lt;p&gt;Good C++ is rather harder to find &amp;#8212; or at least C++ which is both
   good and readable. Part of the reason for this is that there&amp;#8217;s no
   single way to write good C++. A C++ program which looked OK ten years
   ago probably looks dated now (_&amp;#8221;That&amp;#8217;s not exception safe!&amp;#8221;_,
   &lt;em&gt;&amp;#8220;Why ever didn&amp;#8217;t they use the STL?&amp;#8221;&lt;/em&gt;,
   &lt;em&gt;&amp;#8220;Surely we need a bit of template metaprograming here?&amp;#8221;&lt;/em&gt;).
   If the code hasn&amp;#8217;t been actively maintained,
   it probably doesn&amp;#8217;t even compile: even though the standard is mature,
   different implementations interpret it in different ways &amp;#8212; and their
   interpretations are subject to change.
&lt;/p&gt;
&lt;p&gt;You can probably examine much of your standard library implementation
   &amp;#8212; much of it is templated code delivered in header files &amp;#8212; but some
   of the platform specific ifs and buts may make it hard to read. This
   stuff is heavily optimised, and, when optimisation and readability are
   in opposition, as they often are, your standard library implementation
   is likely to prefer the former.
&lt;/p&gt;
&lt;p&gt;&lt;a href="http://boost.org"&gt;Boost&lt;/a&gt; is packed
   with superb, peer-reviewed, tested, open-source C++ code; but I
   wouldn&amp;#8217;t describe it as an easy read: certainly, it&amp;#8217;s not for
   beginners.
&lt;/p&gt;

&lt;h4&gt;And Finally&lt;/h4&gt;
&lt;p&gt;I&amp;#8217;m going to return to this subject. For now, I&amp;#8217;ll close with a
   favourite quotation, taken from the preface to &lt;a href="http://mitpress.mit.edu/sicp/full-text/book/book.html"&gt;the Wizard
Book&lt;/a&gt;.
&lt;/p&gt;
&lt;blockquote&gt;&lt;p&gt;Programs should be written for people to read, and only incidentally
   for machines to execute.
&lt;/p&gt;
&lt;/blockquote&gt;&lt;p&gt;Happy reading!
&lt;/p&gt;</description>
<dc:date>2006-08-06</dc:date>
<guid>http://wordaligned.org/articles/readable-code</guid>
<author>tag@wordaligned.org (Thomas Guest)</author>
<link>http://wordaligned.org/articles/readable-code</link>
<category>Ruby</category>
</item>

<item>
<title>A Python syntax highlighter</title>
<description>&lt;p&gt;In a &lt;a href="http://wordaligned.org/articles/my-test-first-ruby-program.html"&gt;recent post&lt;/a&gt;
   I described my first ever &lt;a href="http://www.ruby-lang.org"&gt;Ruby&lt;/a&gt; program &amp;#8212; which
   was actually a &lt;a href="http://syntax.rubyforge.org/"&gt;syntax highlighter&lt;/a&gt; for &lt;a href="http://www.python.org"&gt;Python&lt;/a&gt; and written
   in &lt;a href="http://www.ruby-lang.org"&gt;Ruby&lt;/a&gt;, ready to be used in a &lt;a href="http://www.typosphere.org"&gt;Typo web log&lt;/a&gt;. Since the post
   was rather a long one, I decided to post the code itself separately.
   Here it is, then.
&lt;/p&gt;
&lt;span id="continue-reading"/&gt;


&lt;h4&gt;The Test Code&lt;/h4&gt;
&lt;p&gt;As you can see, currently only comments, single- and triple- quoted
   strings, keywords and identifiers are recognised. That&amp;#8217;s really all I
   wanted, for now. For completeness, I may well add support for numeric
   literals.  Watch this space!
&lt;/p&gt;
&lt;div class="typocode"&gt;&lt;div class="codetitle"&gt;typo/vendor/syntax/test/syntax/tc_python.rb&lt;/div&gt;

&lt;pre class="prettyprint"&gt;require File.dirname(__FILE__) + "/tokenizer_testcase"

class TC_Syntax_Python &amp;lt; TokenizerTestCase

syntax "python"

def test_empty
    tokenize ""
    assert_no_next_token
  end
  def test_comment_eol
    tokenize "# a comment\nfoo"
    assert_next_token :comment, "# a comment"
    assert_next_token :normal, "\n"
    assert_next_token :ident, "foo"
  end
  def test_two_comments
    tokenize "# first comment\n# second comment"
    assert_next_token :comment, "# first comment"
    assert_next_token :normal, "\n"
    assert_next_token :comment, "# second comment"
  end
  def test_string
    tokenize "'' 'aa' r'raw' u'unicode' UR''"
    assert_next_token :string, "''"
    skip_token
    assert_next_token :string, "'aa'"
    skip_token
    assert_next_token :string, "r'raw'"
    skip_token
    assert_next_token :string, "u'unicode'"
    skip_token
    assert_next_token :string, "UR''"
    tokenize '"aa\"bb"'
    assert_next_token :string, '"aa\"bb"'
  end
  def test_triple_quoted_string
    tokenize "'''\nfoo\n'''"
    assert_next_token :triple_quoted_string, "'''\nfoo\n'''"
    tokenize '"""\nfoo\n"""'
    assert_next_token :triple_quoted_string, '"""\nfoo\n"""'
    tokenize "uR'''\nfoo\n'''"
    assert_next_token :triple_quoted_string, "uR'''\nfoo\n'''"
    tokenize '"""\\'a\\'"b"c"""'
    assert_next_token  :triple_quoted_string, '"""\\'a\\'"b"c"""'
  end
  def test_keyword
    Syntax::Python::KEYWORDS.each do |word|
      tokenize word
      assert_next_token :keyword, word
    end
    Syntax::Python::KEYWORDS.each do |word|
      tokenize "x#{word}"
      assert_next_token :ident, "x#{word}"
      tokenize "#{word}x"
      assert_next_token :ident, "#{word}x"
    end
  end
end

&lt;/pre&gt;

&lt;/div&gt;


&lt;h4&gt;The Python Tokenizer&lt;/h4&gt;
&lt;div class="typocode"&gt;&lt;div class="codetitle"&gt;typo/vendor/syntax/python.rb&lt;/div&gt;

&lt;pre class="prettyprint"&gt;require 'syntax'

module Syntax

# A basic tokenizer for the Python language. It recognises
  # comments, keywords and strings.
  class Python &amp;lt; Tokenizer
    # The list of all identifiers recognized as keywords.
    # http://docs.python.org/ref/keywords.html
    # Strictly speaking, "as" isn't yet a keyword -- but for syntax
    # highlighting, we'll treat it as such.
    KEYWORDS =
      %w{as and del for is raise assert elif from lambda return break
         else global not try class except if or while continue exec
         import pass yield def finally in print}
    # Step through a single iteration of the tokenization process.
    def step
      if scan(/#.*$/)
        start_group :comment, matched
      elsif scan(/u?r?'''.*?'''|""".*?"""/im)
        start_group :triple_quoted_string, matched
      elsif scan(/u?r?'([^\\']|\\.)*'/i)
        start_group :string, matched
      elsif scan(/u?r?"([^\\"]|\\.)*"/i)
        start_group :string, matched
      elsif check(/[_a-zA-Z]/)
        word = scan(/\w+/)
        if KEYWORDS.include?(word)
          start_group :keyword, word
        else
          start_group :ident, word
        end
      else
        start_group :normal, scan(/./m)
      end
    end
  end
  SYNTAX["python"] = Python

end

&lt;/pre&gt;

&lt;/div&gt;</description>
<dc:date>2006-07-29</dc:date>
<guid>http://wordaligned.org/articles/a-python-syntax-highlighter</guid>
<author>tag@wordaligned.org (Thomas Guest)</author>
<link>http://wordaligned.org/articles/a-python-syntax-highlighter</link>
<category>Ruby</category>
</item>

<item>
<title>My (Test) First Ruby Program</title>
<description>&lt;div class="toc"&gt;
&lt;h2&gt;Contents&lt;/h2&gt;
&lt;ul&gt;
 &lt;li&gt;&lt;a href="http://wordaligned.org/articles/my-test-first-ruby-program#tocthe-requirement" name="toc0" id="toc0"&gt;The Requirement&lt;/a&gt;
 &lt;/li&gt;

 &lt;li&gt;&lt;a href="http://wordaligned.org/articles/my-test-first-ruby-program#tocemacs-ruby-mode" name="toc1" id="toc1"&gt;Emacs ruby mode&lt;/a&gt;
 &lt;/li&gt;

 &lt;li&gt;&lt;a href="http://wordaligned.org/articles/my-test-first-ruby-program#toclocating-the-code-to-change" name="toc2" id="toc2"&gt;Locating the code to change&lt;/a&gt;
 &lt;/li&gt;

 &lt;li&gt;&lt;a href="http://wordaligned.org/articles/my-test-first-ruby-program#tocfiddling-around-with-the-code" name="toc3" id="toc3"&gt;Fiddling around with the code&lt;/a&gt;
 &lt;/li&gt;

 &lt;li&gt;&lt;a href="http://wordaligned.org/articles/my-test-first-ruby-program#tocportability" name="toc4" id="toc4"&gt;Portability&lt;/a&gt;
 &lt;/li&gt;

 &lt;li&gt;&lt;a href="http://wordaligned.org/articles/my-test-first-ruby-program#tochot-updates" name="toc5" id="toc5"&gt;Hot updates&lt;/a&gt;
 &lt;/li&gt;

 &lt;li&gt;&lt;a href="http://wordaligned.org/articles/my-test-first-ruby-program#tocoverenthusiasm" name="toc6" id="toc6"&gt;Overenthusiasm&lt;/a&gt;
 &lt;/li&gt;

 &lt;li&gt;&lt;a href="http://wordaligned.org/articles/my-test-first-ruby-program#tocrunning-the-syntax-unit-tests" name="toc7" id="toc7"&gt;Running the Syntax Unit Tests&lt;/a&gt;
 &lt;/li&gt;

 &lt;li&gt;&lt;a href="http://wordaligned.org/articles/my-test-first-ruby-program#tocadding-a-testcase" name="toc8" id="toc8"&gt;Adding a testcase&lt;/a&gt;
 &lt;/li&gt;

 &lt;li&gt;&lt;a href="http://wordaligned.org/articles/my-test-first-ruby-program#tocgetting-started-on-pythonrb" name="toc9" id="toc9"&gt;Getting started on python.rb&lt;/a&gt;
 &lt;/li&gt;

 &lt;li&gt;&lt;a href="http://wordaligned.org/articles/my-test-first-ruby-program#tocrinse-and-repeat" name="toc10" id="toc10"&gt;Rinse and Repeat&lt;/a&gt;
 &lt;/li&gt;

 &lt;li&gt;&lt;a href="http://wordaligned.org/articles/my-test-first-ruby-program#tocdeploying-the-python-highlighter" name="toc11" id="toc11"&gt;Deploying the Python Highlighter&lt;/a&gt;
 &lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;&lt;p&gt;One of my reasons for starting this blog was to find out more about
   web application frameworks based on dynamic languages in general, and
   about &lt;a href="http://www.rubyonrails.org"&gt;Ruby on Rails&lt;/a&gt; in particular. The only problem being, I&amp;#8217;d never
   actually written any &lt;a href="http://www.ruby-lang.org"&gt;Ruby&lt;/a&gt; before.
&lt;/p&gt;
&lt;p&gt;Now, back when I started out as a programmer I never took a huge
   interest in learning computer languages &amp;#8212; I just figured out what
   existing code was doing then fiddled around with it until it seemed to
   do what I wanted.  Some of the time I got away with it.
&lt;/p&gt;
&lt;p&gt;These days I&amp;#8217;m more interested in computer languages, but I
   still think that reading and tweaking existing code is a good way to
   learn. &lt;a href="http://www.ruby-lang.org"&gt;Ruby&lt;/a&gt;, being a dynamic, interpreted language, is perfect for
   such experimentation. The &lt;a href="http://www.rubyonrails.org"&gt;Ruby on Rails&lt;/a&gt; framework turns out to be
   equally dynamic; by running the development environment, I could see
   my code changes instantly reflected in my &lt;a href="http://www.typosphere.org"&gt;Typo&lt;/a&gt; application. Even
   better, the &lt;em&gt;exact same code&lt;/em&gt; that I tested at home on my Windows
   machine could be deployed on my live &lt;a href="http://www.textdrive.com"&gt;shared UNIX server&lt;/a&gt;.
   Best of all, I soon discovered the test framework for the
   module I needed to alter. By developing the tests and code in parallel,
   I deployed my first ever &lt;a href="http://www.ruby-lang.org"&gt;Ruby&lt;/a&gt; code with reasonable confidence
   that it worked.
&lt;/p&gt;
&lt;span id="continue-reading"/&gt;


&lt;h4&gt;&lt;a href="http://wordaligned.org/articles/my-test-first-ruby-program#toc0" name="tocthe-requirement" id="tocthe-requirement"&gt;The Requirement&lt;/a&gt;&lt;/h4&gt;
&lt;p&gt;I wanted to be able to post code snippets to this blog, and I wanted
   the code to be nicely syntax-highlighted.  Digging through the
   &lt;a href="http://www.typosphere.org"&gt;Typo&lt;/a&gt; admin pages revealed that this was already supported for
   &lt;a href="http://www.ruby-lang.org"&gt;Ruby&lt;/a&gt; (of course!), XML and &lt;a href="http://www.yaml.org"&gt;YAML&lt;/a&gt;.  Futhermore, the
   &lt;a href="http://syntax.rubyforge.org/"&gt;syntax highlighting scheme&lt;/a&gt; was open to extension, which was good,
   since I intended to highlight &lt;a href="http://www.python.org"&gt;Python&lt;/a&gt; and C++ snippets &amp;#8212; and possibly others too.
   All you had to do was extend &lt;code&gt;Syntax::Tokenize&lt;/code&gt;, implementing the &lt;code&gt;#step&lt;/code&gt; method.
&lt;/p&gt;
&lt;p&gt;A few minutes of &lt;a href="http://www.google.co.uk/search?hl=en&amp;amp;q=ruby+syntax+highlight+python"&gt;googling&lt;/a&gt;
   didn&amp;#8217;t turn up any existing solutions to this particular problem,
   so I decided to have a crack at it myself.
&lt;/p&gt;

&lt;h4&gt;&lt;a href="http://wordaligned.org/articles/my-test-first-ruby-program#toc1" name="tocemacs-ruby-mode" id="tocemacs-ruby-mode"&gt;Emacs ruby mode&lt;/a&gt;&lt;/h4&gt;
&lt;p&gt;Before I could even contemplate working with &lt;a href="http://www.ruby-lang.org"&gt;Ruby&lt;/a&gt; code, I needed
   to get my &lt;a href="http://www.gnu.org/software/emacs"&gt;editor&lt;/a&gt; to &lt;a href="http://wiki.rubygarden.org/Ruby/page/show/InstallingEmacsExtensions"&gt;recognise it&lt;/a&gt;.
   This was straightforward.
&lt;/p&gt;

&lt;h4&gt;&lt;a href="http://wordaligned.org/articles/my-test-first-ruby-program#toc2" name="toclocating-the-code-to-change" id="toclocating-the-code-to-change"&gt;Locating the code to change&lt;/a&gt;&lt;/h4&gt;
&lt;p&gt;Grepping the &lt;a href="http://www.typosphere.org"&gt;Typo&lt;/a&gt; code for &lt;code&gt;syntax&lt;/code&gt; yielded several hits:
&lt;/p&gt;
&lt;div class="typocode"&gt;

&lt;pre class="prettyprint"&gt;config/environment.rb     # Adds vendor/syntax/lib to the load path
components/plugins/textfilters/code_controller.rb # Does the syntax highlighting
vendor/syntax             # The syntax module itself

&lt;/pre&gt;

&lt;/div&gt;


&lt;h4&gt;&lt;a href="http://wordaligned.org/articles/my-test-first-ruby-program#toc3" name="tocfiddling-around-with-the-code" id="tocfiddling-around-with-the-code"&gt;Fiddling around with the code&lt;/a&gt;&lt;/h4&gt;
&lt;p&gt;So, the first thing I did was start hacking at &lt;code&gt;code_controller.rb&lt;/code&gt;, adding a
   new class and registering it, just like this:
&lt;/p&gt;
&lt;div class="typocode"&gt;

&lt;pre class="prettyprint"&gt;class PythonTokenizer &amp;lt; Syntax::Tokenizer
  def step
    if digits = scan(/\d+/)
      start_group :digits, digits
    elsif words = scan(/\w+/)
      start_group :words, words
    else
      start_group :normal, scan(/./)
    end
  end
end

Syntax::SYNTAX['python'] = PythonTokenizer

&lt;/pre&gt;

&lt;/div&gt;

&lt;p&gt;This being my first ever attempt at &lt;a href="http://www.ruby-lang.org"&gt;Ruby&lt;/a&gt; code, I didn&amp;#8217;t even write it myself: I
   simply cut-and-pasted it direct from the &lt;a href="http://syntax.rubyforge.org/"&gt;Ruby syntax highlight manual&lt;/a&gt;.
   As you can see, I made no attempt to implement a real &lt;a href="http://www.python.org"&gt;Python&lt;/a&gt; tokenizer &amp;#8212;
   I just wanted to see if I could get any syntax highlighter working. Sure enough,
   when I started up my &lt;a href="http://www.typosphere.org"&gt;Typo&lt;/a&gt; development environment and posted a code snippet
&lt;/p&gt;
&lt;div class="typocode"&gt;

&lt;pre class="prettyprint"&gt;&amp;lt;code lang="python"&amp;gt;
abc 123

&lt;/pre&gt;

&lt;/div&gt;

&lt;/code&gt;

&lt;p&gt;then examined the resultant HTML (CTRL-U in Firefox). It read:
&lt;/p&gt;
&lt;div class="typocode"&gt;

&lt;pre class="prettyprint"&gt;&amp;lt;div class="typocode"&amp;gt;&amp;lt;pre&amp;gt;
&amp;lt;code class="typocode_python "&amp;gt;
&amp;lt;span class="words"&amp;gt;abc&amp;lt;/span&amp;gt; &amp;lt;span class="digits"&amp;gt;123&amp;lt;/span&amp;gt;

&lt;/pre&gt;

&lt;/div&gt;

&lt;p&gt;&lt;/pre&gt;&lt;/div&gt;
   &lt;/code&gt;
&lt;/p&gt;
&lt;p&gt;Perfect!
&lt;/p&gt;

&lt;h4&gt;&lt;a href="http://wordaligned.org/articles/my-test-first-ruby-program#toc4" name="tocportability" id="tocportability"&gt;Portability&lt;/a&gt;&lt;/h4&gt;
&lt;p&gt;Incidentally, my home development environment is on the Windows
   platform; my live blog runs on a &lt;a href="http://www.textdrive.com"&gt;shared server&lt;/a&gt; running
   FreeBSD. Identical &lt;a href="http://www.typosphere.org"&gt;Typo&lt;/a&gt; code runs on both &amp;#8212; the only difference
   being that I use WEBrick as my development webserver and lighttpd on the
   live blog.
&lt;/p&gt;

&lt;h4&gt;&lt;a href="http://wordaligned.org/articles/my-test-first-ruby-program#toc5" name="tochot-updates" id="tochot-updates"&gt;Hot updates&lt;/a&gt;&lt;/h4&gt;
&lt;p&gt;Wouldn&amp;#8217;t it be nice if you could edit &lt;code&gt;code_controller.rb&lt;/code&gt;, hit &lt;code&gt;F5&lt;/code&gt;
   in the web browser and see your changes take immediate effect? I gave it a go,
   switching &lt;code&gt;words&lt;/code&gt; for &lt;code&gt;worms&lt;/code&gt; for a bit of fun.
&lt;/p&gt;
&lt;div class="typocode"&gt;

&lt;pre class="prettyprint"&gt;class PythonTokenizer &amp;lt; Syntax::Tokenizer
    ....
      start_group :worms, words
end

&lt;/pre&gt;

&lt;/div&gt;

&lt;p&gt;Sure enough, the updated HTML page read:
&lt;/p&gt;
&lt;div class="typocode"&gt;

&lt;pre class="prettyprint"&gt;&amp;lt;span class="worms"&amp;gt;abc&amp;lt;/span&amp;gt;

&lt;/pre&gt;

&lt;/div&gt;

&lt;p&gt;which is how things should be. I was pleased to see that the
   &lt;a href="http://syntax.rubyforge.org/"&gt;syntax highlight module&lt;/a&gt; created the new CSS class &lt;code&gt;"worms"&lt;/code&gt; without
   complaining. I didn&amp;#8217;t even have to enter the string literal &lt;code&gt;"worms"&lt;/code&gt;
   anywhere in the code &amp;#8212; some sort of reflection must have figured out how
   to process the &lt;code&gt;:worms&lt;/code&gt; symbol correctly.
&lt;/p&gt;

&lt;h4&gt;&lt;a href="http://wordaligned.org/articles/my-test-first-ruby-program#toc6" name="tocoverenthusiasm" id="tocoverenthusiasm"&gt;Overenthusiasm&lt;/a&gt;&lt;/h4&gt;
&lt;p&gt;Enthused by this early success, I tried editing my &lt;code&gt;PythonTokenizer&lt;/code&gt;
   class to do what it was really meant to do: namely, identify comments,
   strings, keywords. &lt;a href="http://www.typosphere.org"&gt;Typo&lt;/a&gt; reported back the inevitable syntax errors
   through the web interface in a friendly enough way, but I soon
   realised that this was not the correct way to develop code.
&lt;/p&gt;
&lt;p&gt;What I really ought to be doing was developing my new &lt;code&gt;PythonTokenizer&lt;/code&gt;
   class in isolation, then integrating it into the &lt;a href="http://www.rubyonrails.org"&gt;Rails&lt;/a&gt;
   application.
&lt;/p&gt;

&lt;h4&gt;&lt;a href="http://wordaligned.org/articles/my-test-first-ruby-program#toc7" name="tocrunning-the-syntax-unit-tests" id="tocrunning-the-syntax-unit-tests"&gt;Running the Syntax Unit Tests&lt;/a&gt;&lt;/h4&gt;
&lt;p&gt;So, I went looking in the &lt;code&gt;vendor/syntax&lt;/code&gt; directory.
&lt;/p&gt;
&lt;div class="typocode"&gt;

&lt;pre class="prettyprint"&gt;+---api
|   +---classes
|   |   \---Syntax
|   |       \---Convertors
|   \---files
|       \---lib
|           \---syntax
|               +---convertors
|               \---lang
+---doc
|   +---manual
|   |   +---parts
|   |   \---stylesheets
|   \---manual-html
|       \---stylesheets
+---lib
|   \---syntax
|       +---convertors
|       \---lang
\---test
    \---syntax

&lt;/pre&gt;

&lt;/div&gt;

&lt;p&gt;I found the &lt;a href="http://www.ruby-lang.org"&gt;Ruby&lt;/a&gt;, XML and &lt;a href="http://www.yaml.org"&gt;YAML&lt;/a&gt; tokenizers in &lt;code&gt;lib/lang/ruby.rb&lt;/code&gt;,
   &lt;code&gt;lib/lang/xml.rb&lt;/code&gt; and &lt;code&gt;lib/lang/yaml.rb&lt;/code&gt; respectively. I found accompanying
   unit tests in &lt;code&gt;test/syntax/tc_ruby.rb&lt;/code&gt;, &lt;code&gt;test/syntax/tc_xml.rb&lt;/code&gt;
   and &lt;code&gt;test/syntax/tc_yaml.rb&lt;/code&gt;. Running the &lt;code&gt;test/ALL-TESTS.rb&lt;/code&gt; gave:
&lt;/p&gt;
&lt;div class="typocode"&gt;

&lt;pre class="prettyprint"&gt;c:\thomas\typo\vendor\syntax\test&amp;gt;ALL-TESTS.rb
ALL-TESTS.rb
Loaded suite c:/thomas/typo/vendor/syntax/test/ALL-TESTS
Started
............................................................
Finished in 0.359 seconds.

122 tests, 761 assertions, 0 failures, 0 errors

&lt;/pre&gt;

&lt;/div&gt;

&lt;p&gt;My new strategy was clear: develop &lt;code&gt;lib/lang/python.rb&lt;/code&gt; and
   &lt;code&gt;test/syntax/tc_python.rb&lt;/code&gt; in parallel until my new syntax
   highlighter passed all the tests &amp;#8212; then integrate my new
   &lt;a href="http://www.python.org"&gt;Python&lt;/a&gt; highlighter into &lt;a href="http://www.typosphere.org"&gt;Typo&lt;/a&gt;. I reverted my changes
   to &lt;code&gt;code_controller.rb&lt;/code&gt; and started again.
&lt;/p&gt;

&lt;h4&gt;&lt;a href="http://wordaligned.org/articles/my-test-first-ruby-program#toc8" name="tocadding-a-testcase" id="tocadding-a-testcase"&gt;Adding a testcase&lt;/a&gt;&lt;/h4&gt;
&lt;p&gt;So, I created &lt;code&gt;tc_python.rb&lt;/code&gt;, using &lt;code&gt;tc_ruby.rb&lt;/code&gt; as an example.
   Here&amp;#8217;s what the my first test looked like:
&lt;/p&gt;
&lt;div class="typocode"&gt;&lt;div class="codetitle"&gt;tc_python.rb&lt;/div&gt;

&lt;pre class="prettyprint"&gt;require File.dirname(__FILE__) + "/tokenizer_testcase"

class TC_Syntax_Python &amp;lt; TokenizerTestCase

syntax "python"

def test_empty
    tokenize ""
    assert_no_next_token
  end
end

&lt;/pre&gt;

&lt;/div&gt;

&lt;p&gt;Running &lt;code&gt;ALL-TESTS.rb&lt;/code&gt; again gave me:
&lt;/p&gt;
&lt;div class="typocode"&gt;

&lt;pre class="prettyprint"&gt;Started
...F........................................................
Finished in 0.282 seconds.

1) Failure:
test_empty(TC_Syntax_Python)
    [./syntax/tokenizer_testcase.rb:34:in `assert_no_next_token'
     ./syntax/tc_python.rb:9:in `test_empty']:
&amp;lt;false&amp;gt; is not true.

123 tests, 762 assertions, 1 failures, 0 errors

&lt;/pre&gt;

&lt;/div&gt;

&lt;p&gt;This at least confirmed my test was being run. Actually, I was a
   little surprised to get a failure and not an error, since I hadn&amp;#8217;t
   even registered a &lt;a href="http://www.python.org"&gt;Python&lt;/a&gt; syntax highlighter.
&lt;/p&gt;

&lt;h4&gt;&lt;a href="http://wordaligned.org/articles/my-test-first-ruby-program#toc9" name="tocgetting-started-on-pythonrb" id="tocgetting-started-on-pythonrb"&gt;Getting started on python.rb&lt;/a&gt;&lt;/h4&gt;
&lt;p&gt;My first cut at &lt;code&gt;python.rb&lt;/code&gt; simply reproduced the simple tokenizer I&amp;#8217;d
   put into &lt;code&gt;code_controller.rb&lt;/code&gt;.
&lt;/p&gt;
&lt;div class="typocode"&gt;&lt;div class="codetitle"&gt;python.rb&lt;/div&gt;

&lt;pre class="prettyprint"&gt;require 'syntax'

module Syntax
  class Python &amp;lt; Tokenizer

# Step through a single iteration of the tokenization process.
    def step
      if digits = scan(/\d+/)
        start_group :digits, digits
      elsif words = scan(/\w+/)
        start_group :words, words
      else
        start_group :normal, scan(/./)
      end
    end
  end

SYNTAX["python"] = Python
end

&lt;/pre&gt;

&lt;/div&gt;

&lt;p&gt;With this implementation, all the tests passed. Now I wrote a test case
   for finding comments &amp;#8212; about the simplest syntactic element of a &lt;a href="http://www.python.org"&gt;Python&lt;/a&gt;
   program. Perhaps &amp;#8220;wrote&amp;#8221; overstates things. Actually, I just cut-and-pasted
   a testcase from &lt;code&gt;tc_ruby.rb&lt;/code&gt;.
&lt;/p&gt;
&lt;div class="typocode"&gt;

&lt;pre class="prettyprint"&gt;  def test_comment_eol
    tokenize "# a comment\
foo"
    assert_next_token :comment, "# a comment"
    assert_next_token :normal, "\
"
    assert_next_token :ident, "foo"
  end

&lt;/pre&gt;

&lt;/div&gt;

&lt;p&gt;This caused the tests to hang. By playing with the code, I soon
   figured out the problem. My tokenizer wasn&amp;#8217;t getting past the newline.
   I&amp;#8217;d seen enough &lt;a href="http://www.perl.org"&gt;Perl&lt;/a&gt; in my time to figure out what to do. Clearly the
   &lt;code&gt;scan&lt;/code&gt; function accepted a regular expression, and the &lt;code&gt;else&lt;/code&gt; case
   used the regex special character &lt;code&gt;.&lt;/code&gt; to eat any single character
   &lt;em&gt;except an end-of-line&lt;/em&gt;. I  modified the regex so the code read
   &lt;code&gt;start_group :normal, scan(/./m)&lt;/code&gt; (notice the *&lt;code&gt;m&lt;/code&gt;*), and now my test
   failed instead of hanging:
&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;  1) Failure:
test_comment_eol(TC_Syntax_Python)
    [./syntax/tokenizer_testcase.rb:29:in `assert_next_token'
     ./syntax/tc_python.rb:13:in `test_comment_eol']:
&amp;lt;[:comment, "# a comment", :none]&amp;gt; expected but was
&amp;lt;[:normal, "# ", :none]&amp;gt;.
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;It was time to start making my &lt;a href="http://www.python.org"&gt;Python&lt;/a&gt; tokenizer look like it really
   wanted to tokenize &lt;a href="http://www.python.org"&gt;Python&lt;/a&gt;.
&lt;/p&gt;
&lt;div class="typocode"&gt;&lt;div class="codetitle"&gt;python.rb&lt;/div&gt;

&lt;pre class="prettyprint"&gt;  class Python &amp;lt; Tokenizer
    def step
      if comment = scan(/#.*$/)
        start_group :comment, comment
      else
        start_group :normal, scan(/./m)
      end
    end
  end

&lt;/pre&gt;

&lt;/div&gt;

&lt;p&gt;With this change, my failure moved on a line:
&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;  1) Failure:
test_comment_eol(TC_Syntax_Python)
    [./syntax/tokenizer_testcase.rb:29:in `assert_next_token'
     ./syntax/tc_python.rb:14:in `test_comment_eol']:
&amp;lt;[:normal, "\
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&amp;#8221;, :none]&amp;gt; expected but was
       &amp;lt;[:normal, &amp;#8221;
   foo&amp;#8221;, :none]&amp;gt;.
&lt;/p&gt;
&lt;p&gt;Good! My tokenizer had at least recognised the comment. Hardly
   surprisingly, it then treated the rest of the string as &lt;code&gt;normal&lt;/code&gt;,
   which is what the test failure indicates.
&lt;/p&gt;

&lt;h4&gt;&lt;a href="http://wordaligned.org/articles/my-test-first-ruby-program#toc10" name="tocrinse-and-repeat" id="tocrinse-and-repeat"&gt;Rinse and Repeat&lt;/a&gt;&lt;/h4&gt;
&lt;p&gt;You can probably work out the rest. I added code and test cases until
   my &lt;a href="http://www.python.org"&gt;Python&lt;/a&gt; syntax highlighter did all I wanted it to do: namely,
   pick out comments, strings, triple quoted strings. This post is far too
   long already &amp;#8212; I&amp;#8217;ll post my code and the accompanying tests in
   &lt;a href="http://wordaligned.org/articles/a-python-syntax-highlighter.html"&gt;another post&lt;/a&gt;.
&lt;/p&gt;

&lt;h4&gt;&lt;a href="http://wordaligned.org/articles/my-test-first-ruby-program#toc11" name="tocdeploying-the-python-highlighter" id="tocdeploying-the-python-highlighter"&gt;Deploying the Python Highlighter&lt;/a&gt;&lt;/h4&gt;
&lt;p&gt;I didn&amp;#8217;t need to do &lt;em&gt;anything&lt;/em&gt; to deploy the code in my development
   environment. It was already there, since I&amp;#8217;d developed it in place. I
   ran some system level tests to convince myself all was indeed OK, then
   copied it across to my &lt;a href="http://www.textdrive.com"&gt;shared server&lt;/a&gt;.
&lt;/p&gt;
&lt;p&gt;Just to show it all works, here&amp;#8217;s a simple &lt;a href="http://www.python.org"&gt;Python program&lt;/a&gt;
   to generate all the subsets of a set.
&lt;/p&gt;
&lt;div class="typocode"&gt;

&lt;pre class="prettyprint"&gt;def generate_subsets(the_set, m):
   """ Generate all m element subsets of the input set.

If the input set is empty or m is 0, yield the empty set.
   Otherwise, use a recursive solution. Pick any element from
   the set, and yield the subsets which contain this element,
   followed by those which don't.
   """
   if m &amp;gt; len(the_set):
       pass
   elif len(the_set) == 0 or m == 0:
       yield set()
   else:
       e = the_set.pop()
       for subset in generate_subsets(the_set, m - 1):
           subset.add(e)
           yield subset
       for subset in generate_subsets(the_set, m):
           yield subset
       the_set.add(e)

&lt;/pre&gt;

&lt;/div&gt;</description>
<dc:date>2006-07-19</dc:date>
<guid>http://wordaligned.org/articles/my-test-first-ruby-program</guid>
<author>tag@wordaligned.org (Thomas Guest)</author>
<link>http://wordaligned.org/articles/my-test-first-ruby-program</link>
<category>Ruby</category>
</item>

<item>
<title>Getting started with Typo</title>
<description>&lt;p&gt;&lt;a href="http://www.typosphere.org"&gt;Typo&lt;/a&gt; is a
   &lt;a href="http://www.rubyonrails.org/"&gt;Ruby on Rails&lt;/a&gt; blogging application.
   I&amp;#8217;d already installed one Rails application on
   &lt;a href="http://www.textdrive.com"&gt;Textdrive&lt;/a&gt; before, when I set up a
   &lt;a href="http://wiki.wordaligned.org/sicp"&gt;Wiki&lt;/a&gt;, and this time it was even easier.
   It took no more than half an hour to get the thing up and running.
   The steps were:
&lt;/p&gt;
&lt;p&gt;The steps were:
   &lt;em&gt; log into my server
&lt;/em&gt; obtain the latest version of &lt;a href="http://www.typosphere.org"&gt;Typo&lt;/a&gt;
   * create a production database
   &lt;em&gt; edit the database configuration file
&lt;/em&gt; tweak the example &lt;a href="http:/www.lighttpd.net"&gt;lighttpd&lt;/a&gt; server configuration to use my assigned port
   * start up &lt;a href="http://www.typosphere.org"&gt;Typo&lt;/a&gt;
   &lt;em&gt; log in and configure using the Typo admin interface
&lt;/em&gt; shutdown &lt;a href="http://www.typosphere.org"&gt;Typo&lt;/a&gt;
   * reconfigure my main &lt;a href="http:/www.lighttpd.net"&gt;lighttpd&lt;/a&gt;
   * restart &lt;a href="http:/www.lighttpd.net"&gt;lighttpd&lt;/a&gt;
   * &amp;#8230; and we&amp;#8217;re done!
&lt;/p&gt;
&lt;p&gt;&lt;span id="continue-reading"/&gt;
   Here are the details. Note that my domain is &lt;code&gt;wordaligned.org&lt;/code&gt; and my user name is
   &lt;code&gt;wordaligned&lt;/code&gt; &amp;#8212; adjust as required.
   You&amp;#8217;ll also need a two port numbers: one for running &lt;a href="http://www.typosphere.org"&gt;Typo&lt;/a&gt;
   standalone, and one for running &lt;a href="http:/www.lighttpd.net"&gt;lighttpd&lt;/a&gt;.
   &lt;a href="http://www.textdrive.com"&gt;Textdrive&lt;/a&gt; can supply these on request.
&lt;/p&gt;

&lt;h4&gt;Obtaining Typo&lt;/h4&gt;
&lt;p&gt;Apparently the trunk is good and stable and upgrading as simple as
   &lt;code&gt;svn update&lt;/code&gt; so let&amp;#8217;s log in to the server and go for it:
&lt;/p&gt;
&lt;div class="typocode"&gt;

&lt;pre class="prettyprint"&gt;svn checkout svn://typosphere.org/typo/trunk typo

&lt;/pre&gt;

&lt;/div&gt;


&lt;h4&gt;Database Configuration&lt;/h4&gt;
&lt;p&gt;First, create and initialise a &lt;code&gt;mysql&lt;/code&gt; production database.
&lt;/p&gt;
&lt;div class="typocode"&gt;

&lt;pre class="prettyprint"&gt;mysql -u wordaligned -p
mysql&amp;gt; create database wordaligned_typo;
mysql&amp;gt; quit;
cat typo/db/schema.mysql.sql | mysql -u wordaligned -p wordaligned_typo

&lt;/pre&gt;

&lt;/div&gt;

&lt;p&gt;Now configure Typo to use this database by creating a &lt;code&gt;database.yml&lt;/code&gt;
   file which points at your production database, the mysql adapter,
   and the correct user/password credentials.
&lt;/p&gt;
&lt;div class="typocode"&gt;

&lt;pre class="prettyprint"&gt;cd typo/config
cp database.yml.example database.yml
vi database.yml                     # edit as required

&lt;/pre&gt;

&lt;/div&gt;


&lt;h4&gt;Starting Typo Standalone&lt;/h4&gt;
&lt;p&gt;Do you have a port number to run Typo standlone? I&amp;#8217;d obtained 2508 for
   &lt;a href="http://instiki.org"&gt;Instiki&lt;/a&gt;
   which I no longer required (now that I&amp;#8217;m using
   [lighttpd](http:/www.lighttpd.net to serve my &lt;a href="http://wiki.wordaligned.org/sicp"&gt;wiki&lt;/a&gt;), so I just used that.
   I edited the lighttpd configuration file in &lt;tt&gt;config/lighttpd.conf&lt;/tt&gt;
   to use this port number and my Typo production environment:
&lt;/p&gt;
&lt;div class="typocode"&gt;

&lt;pre class="prettyprint"&gt;# Default configuration file for the lighttpd web server
# Start using ./script/server lighttpd
server.port = 2508
....
# Change *-procs to 2 if you need to use Upload Progress or other tasks that
# *need* to execute a second request while the first is still pending.
fastcgi.server = ( ".fcgi" =&amp;gt;
  ( "localhost" =&amp;gt;
      (
        "min-procs" =&amp;gt; 2,
        "max-procs" =&amp;gt; 2,
        "socket"    =&amp;gt; CWD + "/tmp/sockets/fcgi.socket",
        "bin-path"  =&amp;gt; CWD + "/public/dispatch.fcgi",
        "bin-environment" =&amp;gt; ( "RAILS_ENV" =&amp;gt; "production" )
      )
  )
)

&lt;/pre&gt;

&lt;/div&gt;

&lt;p&gt;I also edited the shebang line in both &lt;code&gt;public/dispatch.rb&lt;/code&gt;,
   &lt;code&gt;public/dispatch.fcgi&lt;/code&gt; to explicitly reference &lt;code&gt;ruby&lt;/code&gt; at
   &lt;code&gt;/usr/local/bin/ruby&lt;/code&gt;. Now I started Typo with: &lt;code&gt;script/serverlighttpd&lt;/code&gt;,
   logged in at &lt;code&gt;http://wordaligned.org:2508&lt;/code&gt;, which put me
   directly into the Typo administration section.
&lt;/p&gt;
&lt;p&gt;Having done this, I shutdown Typo with &lt;code&gt;CTRL-C&lt;/code&gt;.
&lt;/p&gt;

&lt;h4&gt;Reconfigure lighttpd&lt;/h4&gt;
&lt;p&gt;Now I merged the example &lt;a href="http:/www.lighttpd.net"&gt;lighttpd&lt;/a&gt;
   configuration with my main one, which now reads something like:
&lt;/p&gt;
&lt;div class="typocode"&gt;

&lt;pre class="prettyprint"&gt;# Making sure file uploads above 64k always work when using IE or Safari
# For more information, see http://trac.lighttpd.net/trac/ticket/360
$HTTP["useragent"] =~ "^(.*MSIE.*)|(.*AppleWebKit.*)$" {
  server.max-keep-alive-requests = 0
}

$HTTP["host"] =~ "\.wordaligned\.org" {
  server.document-root = "/users/home/wordaligned/web/public/"
  ....
}

$HTTP["host"] =~ "wiki\.wordaligned\.org" {
  server.document-root = "/users/home/wordaligned/instiki/public/"
  ....
}
$HTTP["host"] =~ "blog\.wordaligned\.org" {
  server.document-root =  "/users/home/wordaligned/typo/public/"
  ....
}
$HTTP["host"] == "projects.wordaligned.org" {
  server.document-root = "/users/home/wordaligned/trac/"
  ....
}

&lt;/pre&gt;

&lt;/div&gt;</description>
<dc:date>2006-07-17</dc:date>
<guid>http://wordaligned.org/articles/getting-started-with-typo</guid>
<author>tag@wordaligned.org (Thomas Guest)</author>
<link>http://wordaligned.org/articles/getting-started-with-typo</link>
<category>Ruby</category>
</item>

</channel>
</rss>
