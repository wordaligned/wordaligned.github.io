<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:dc="http://purl.org/dc/elements/1.1/" >
<channel>
<title>Word Aligned</title>
<link>https://wordaligned.org</link>
<description>tales from the code face</description>
<dc:creator>tag@wordaligned.org</dc:creator>
<language>en-gb</language>
<item>
<title>Code Reviews - the rules</title>
<description>&lt;p&gt;The rule is: no code gets checked in without a review.&lt;/p&gt;
&lt;p&gt;It&amp;#8217;s not always easy to get a reviewer to sign off a changelist. Does the code build? In all configurations and on all platforms? Do the tests pass? Are all new code paths covered? Does the commit message describe the change? Does the formatting match the style guide? Does the code match its surroundings? How about documentation, compiler warnings, license requirements?&lt;/p&gt;
&lt;p&gt;Is the change really necessary? Could it have been realised more simply?&lt;/p&gt;
&lt;p&gt;Certainly the reviewer&amp;#8217;s task is easier if the task has been &lt;a href=&quot;https://wordaligned.org/articles/programming-paired-and-shared&quot;&gt;paired on&lt;/a&gt;. Small and self-contained changelists are more straightforward. Removing code, too, should be less contentious.&lt;/p&gt;
&lt;p&gt;Depending on infrastructure, some checklist items can be automated. Ideally the changelist has already been though CI, for example, ticking the builds-cleanly and passes-its-tests boxes.&lt;/p&gt;
&lt;p&gt;So far, so what? (So obvious!)&lt;/p&gt;
&lt;p&gt;Here&amp;#8217;s another rule, and one I&amp;#8217;ve not seen written down before.&lt;/p&gt;
&lt;p&gt;When I review code I might well consider how I would have made the change. That doesn&amp;#8217;t mean I&amp;#8217;ll insist the submitter does things my way. In the absence of &lt;a href=&quot;https://blog.golang.org/go-fmt-your-code&quot; title=&quot;go fmt your code&quot;&gt;automated formatters&lt;/a&gt; there will be more than one acceptable way to lay out the code. Sometimes there&amp;#8217;s little reason to prefer an explicit loop over an algorithm + lambda combination, or vice-versa. &lt;a href=&quot;https://wordaligned.org/articles/go-for-short-variable-names&quot;&gt;Short names&lt;/a&gt; work for me but not for everyone. It&amp;#8217;s hard to argue against test coverage, but is more always better?&lt;/p&gt;
&lt;p&gt;In such cases I won&amp;#8217;t try to impose my own style on the changelist. Instead, the question becomes: &lt;strong&gt;does the code match the standards we, as a team, have set&lt;/strong&gt;? Or, &lt;strong&gt;do these changes merit a place in our codebase&lt;/strong&gt;?&lt;/p&gt;
&lt;p&gt;It&amp;#8217;s a simple principle but not an obvious one. It helps me review fairly and also to learn from others on my team.&lt;/p&gt;
&lt;p&gt;There &lt;strong&gt;is&lt;/strong&gt; more than one way to do it!&lt;/p&gt;</description>
<dc:date>2015-08-05</dc:date>
<guid>https://wordaligned.org/articles/code-reviews--the-rules</guid>
<author>tag@wordaligned.org (Thomas Guest)</author>
<link>https://wordaligned.org/articles/code-reviews--the-rules</link>
<category>Build</category>
</item>

<item>
<title>Think, quote, escape</title>
<description>&lt;p&gt;Evidently Jamie had got in before me. Somehow he&amp;#8217;d unpacked the new 2U server and balanced it on the side of his desk. He looked hassled. I didn&amp;#8217;t ask. The server&amp;#8217;s fans whirred noisily. On Jamie&amp;#8217;s second monitor I could see the familiar chatter of Linux installing itself. I stepped over the cardboard and polystyrene, sat, woke my machine.&lt;/p&gt;
&lt;p&gt;Moments later I heard the install disk eject. Jamie typed something, cursed. The disk clattered into the bin. The room grew quiet as the server shut down.&lt;/p&gt;
&lt;p&gt;We were a small, new team. Nonetheless, we&amp;#8217;d put something substantial together. It built on a Java framework and ran on Linux. We&amp;#8217;d tweaked the framework, meaning we had to build it from source before building our own stuff, so a clean build took almost half an hour. Just over half an hour later, Jamie had burned a new install disk. He placed it in the server&amp;#8217;s DVD drive. The fans roared up again. Ten minutes later, more cursing, another disk in the bin.&lt;/p&gt;
&lt;p&gt;I walked across. Jamie was glaring at some code. A Perl list? His cursor was poised over an item in this list, a single-quoted string, inside which was a sed command, whose arguments themselves needed quoting, which was evidently meant to edit the contents of a double-quoted string in some configuration file. Think: quote and escape. I could see there were &lt;em&gt;four&lt;/em&gt; DVDs in the bin. Jamie must have been in for some time. No wonder he looked hassled.&lt;/p&gt;
&lt;p&gt;So, what&amp;#8217;s up?&lt;/p&gt;
&lt;p&gt;A trade show in the States. The salesman was out there. A bare machine had already been delivered and he needed the software, so Jamie had to cut a DVD which would directly install the operating system together with our application. Please don&amp;#8217;t expect a salesman to download an ISO image and set up enough of a network to boot from it. A courier was booked for midday to collect the DVD. That&amp;#8217;s what&amp;#8217;s up. So leave me alone and let me get on with it.&lt;/p&gt;
&lt;p&gt;He didn&amp;#8217;t actually say that last bit. It&amp;#8217;s true, though, he was the Linux expert. I stubbornly watched as he changed some double quotes for single ones, added a couple more backslashes, checked in the file, kicked off another build.&lt;/p&gt;
&lt;p&gt;Back at my desk, I reviewed the version control change logs. Evidently Jamie was working on a post-install script which took the form of a list of actions which would be evaluated and executed in Perl. Looking at the file diffs, the sticking point seemed to be a sed command to edit the X display settings. Embedding sed within Perl was proving tricky.&lt;/p&gt;
&lt;p&gt;Jamie&amp;#8217;s edit-build-burn-install-check cycle seemed crazy to me. Why not recreate the broken post-install step as a standalone operation? Soon enough I&amp;#8217;d found a way to reproduce the problem. After reading documentation and experimenting I figured out how to nest and escape the various strings. I admit, it took me longer than I expected. By this time Jamie solved the problem by trial and error anyway &amp;#8212; and as proof he had an install disk which he knew worked. He may well have spent less time actually concentrating on the issue than I had; the build-burn-install phases of his process all ran as background activities.&lt;/p&gt;
&lt;p&gt;In the event we needed to revise the software anyway. So the salesman had to download a new build at the last minute. Jamie stayed late the next day to talk him through the installation.&lt;/p&gt;</description>
<dc:date>2010-03-30</dc:date>
<guid>https://wordaligned.org/articles/think-quote-escape</guid>
<author>tag@wordaligned.org (Thomas Guest)</author>
<link>https://wordaligned.org/articles/think-quote-escape</link>
<category>Build</category>
</item>

<item>
<title>Code Rot</title>
<description>&lt;blockquote&gt;
&lt;p&gt;Those of us who have to tiptoe around non-standard or ancient compilers will know that template template parameters are off limits. &lt;/p&gt;
&lt;p&gt;&amp;#8212; &lt;a href=&quot;http://www.oxyware.com/CheckedInt.pdf&quot; title=&quot;CheckedInt: A policy-based range-checked integer, Hubert Matthews&quot;&gt;Hubert Matthews (PDF)&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&quot;dvbcodec-fail&quot;&gt;Dvbcodec Fail&lt;/h3&gt;
&lt;p&gt;Long ago, way back in 2004, I wrote an &lt;a href=&quot;http://wordaligned.org/docs/dvbcodec/index.html&quot;&gt;article&lt;/a&gt; for &lt;a href=&quot;http://accu.org/index.php/journals/241&quot; title=&quot;A Mini-project to decode a Mini-Language, Thomas Guest&quot;&gt;Overload&lt;/a&gt; describing how to use the &lt;a href=&quot;http://www.boost.org/doc/libs/1_39_0/libs/spirit/index.html&quot; title=&quot;Boost Spirit C++ parser framework&quot;&gt;Boost Spirit&lt;/a&gt; parser framework to generate C++ code which could convert structured binary data to text. I went on to republish this article on my own website, where I also included a source distribution.&lt;/p&gt;
&lt;p&gt;Much has changed since then. The C++ language may not have, but compiler and platform support for it has improved considerably. Boost survives &amp;#8212; indeed, many of its libraries will feed into the next version of C++. Overload thrives, adapting to an age when printed magazines about programming are all but extinct. My old website proved less durable: I&amp;#8217;ve changed domain name and shuffled things around more than once. But you can still find the article online if you look hard enough, and recently someone did indeed find it. He, let&amp;#8217;s call him Rick, downloaded the source code archive, &lt;a href=&quot;http://wordaligned.org/docs/dvbcodec/dvbcodec-1.0.zip&quot; title=&quot;Rotten dvbcodec source distribution&quot;&gt;dvbcodec-1.0.zip&lt;/a&gt;, extracted it, scanned the README, typed:&lt;/p&gt;
&lt;div class=&quot;typocode&quot;&gt;

&lt;pre class=&quot;prettyprint&quot;&gt;$ make

&lt;/pre&gt;

&lt;/div&gt;

&lt;p&gt;&amp;#8230; and discovered the code didn&amp;#8217;t even build.&lt;/p&gt;
&lt;p&gt;At this point many of us would assume (correctly) the code had not been maintained. We&amp;#8217;d delete it and write off the few minutes it took to evaluate it. Rick decided instead to contact me and let me know my code was broken. He even offered a fix for one problem.&lt;/p&gt;
&lt;h3 id=&quot;code-rot&quot;&gt;Code Rot&lt;/h3&gt;
&lt;p&gt;Sad to say, I wasn&amp;#8217;t entirely surprised. I no longer use this code. Unused code stops working. It decays.&lt;/p&gt;
&lt;p&gt;I&amp;#8217;m not talking about a compiled executable, which the compiler has tied to a particular platform, and which therefore progressively degrades as the platform advances. (I&amp;#8217;ve heard stories about device drivers for which the source code has long been lost, and which require ever more elaborate emulation shims to keep them alive.) I&amp;#8217;m talking about source code. And the decay isn&amp;#8217;t usually literal, though I suppose you might have a source listing on a mouldy printout, or an unreadable floppy disk.&lt;/p&gt;
&lt;p&gt;No, the code itself is usually a pristine copy of the original. Publishers often attach checksums to source distributions so readers can verify their download is correct. I hadn&amp;#8217;t taken this precaution with my &lt;code&gt;dvbcodec-1.0.zip&lt;/code&gt; but I&amp;#8217;m certain the version Rick downloaded was exactly the same as the one I created 5 years ago. Yet in that time it had stopped working. Why?&lt;/p&gt;
&lt;p&gt;&lt;span id=&quot;continue-reading&quot;/&gt;&lt;/p&gt;
&lt;h3 id=&quot;standard-c&quot;&gt;Standard C++&lt;/h3&gt;
&lt;p&gt;As already mentioned, this was C++ code. C++ is backed by an ISO standard, ratified in 1998, with corrigenda published in 2003. You might expect C++ code to improve with age, compiling and running more quickly, less likely to run out of resources.&lt;/p&gt;
&lt;p&gt;Not so. My favourite counter-example comes from a nice paper &lt;a href=&quot;http://www.oxyware.com/CheckedInt.pdf&quot; title=&quot;CheckedInt: A policy-based range-checked integer, Hubert Matthews&quot;&gt;&amp;#8220;CheckedInt: A policy-based range-checked integer&amp;#8221; (PDF)&lt;/a&gt; published by Hubert Matthews in 2004 which discusses how to use C++ templates to implement a range-checked integer. The paper includes a source code listing together with some notes to help readers forced to &amp;#8220;tiptoe around non-standard or ancient compilers&amp;#8221; (think: MSVC6). Yet when I experimented with this code in 2005 I found myself tripped up by a strict and up-to-date compiler.&lt;/p&gt;
&lt;pre&gt;
$ g++ -Wall -c checked_int.cpp
checked_int.cpp: In constructor `CheckedInt&amp;lt;low, high, ValueChecker&amp;gt;::CheckedInt(int)&#x27;:
checked_int.cpp:45: error: there are no arguments to `RangeCheck&#x27; that
depend on a template parameter, so a declaration of `RangeCheck&#x27; must
be available
checked_int.cpp:45: error: (if you use `-fpermissive&#x27;, G++ will accept
your code, but allowing the use of an undeclared name is deprecated)
&lt;/pre&gt;

&lt;p&gt;I emailed Hubert Matthews using the address included at the top of his paper. He swiftly and kindly put me straight on how to fix the problem.&lt;/p&gt;
&lt;p&gt;What&amp;#8217;s interesting here is that this code is pure C++, just over a page of it. It has no dependencies on third party libraries. Hubert Matthews is a C++ expert and he acknowledges the help of two more experts, &lt;a href=&quot;http://erdani.org&quot; title=&quot;Author of Modern C++ and coauthor of C++ Coding Standards&quot;&gt;Andrei Alexandrescu&lt;/a&gt; and &lt;a href=&quot;http://curbralan.com&quot; title=&quot;Programming guru&quot;&gt;Kevlin Henney&lt;/a&gt;, in his paper. Yet the code fails to build using both ancient and modern compilers. In its published form it has the briefest of shelf-lives.&lt;/p&gt;
&lt;h3 id=&quot;support-rot&quot;&gt;Support Rot&lt;/h3&gt;
&lt;p&gt;Code alone is of limited use. What really matters for its ongoing health is that someone cares about it &amp;#8212; someone exercises, maintains and supports it. Hubert Matthews included an email address in his paper and I was able to contact him using that address.&lt;/p&gt;
&lt;p&gt;How well would my code shape up on this front? Putting myself in Rick&amp;#8217;s position, I unzipped the source distribution I&amp;#8217;d archived 5 years ago. I was pleased to find a README which, at the very top, provides a URL for updates, &lt;a href=&quot;http://homepage.ntlworld.com/thomas.guest&quot;&gt;http://homepage.ntlworld.com/thomas.guest&lt;/a&gt;. I was less pleased to find this URL gave me a &lt;strong&gt;404 Not Found&lt;/strong&gt; error. Similarly, when I tried emailling the project maintainer mentioned in the README, I got a &lt;strong&gt;550 Invalid recipient&lt;/strong&gt; error: the attempted delivery to &lt;a href=&quot;mailto:thomas.guest@ntlworld.com&quot;&gt;thomas.guest@ntlworld.com&lt;/a&gt; had failed permanently.&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://homepage.ntlworld.com/thomas.guest&quot;&gt;&lt;img src=&quot;https://wordaligned.org/images/ntlworld-404.png&quot; alt=&quot;NTL World 404&quot; width=&quot;520px&quot; height=&quot;400px&quot;/&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://www.w3.org/Provider/Style/URI&quot; title=&quot;Tim Berners-Lee&#x27;s classic advice on creating stable links&quot;&gt;Cool URIs don&amp;#8217;t change&lt;/a&gt; but my old NTL homepage was anything but cool; it came for free with a dial-up connection I&amp;#8217;ve happily since abandoned. Looking back, maybe I should have found a more stable location for my code. If I&amp;#8217;d set up (e.g.) a Sourceforge project then my &lt;code&gt;dvbcodec&lt;/code&gt; project might still be alive and supported, possibly even by a new maintainer.&lt;/p&gt;
&lt;h3 id=&quot;how-did-this-ever-compile&quot;&gt;How did this ever compile?&lt;/h3&gt;
&lt;p&gt;Wise hindsights wouldn&amp;#8217;t resurrect my code. If I wanted to continue I&amp;#8217;d have to go it alone. Here&amp;#8217;s what the README had to say about platform requirements.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;REQUIREMENTS and PLATFORMS&lt;/p&gt;
&lt;p&gt;To build the dvbcodec you will need Version 1.31.0 of Boost, or later.&lt;/p&gt;
&lt;p&gt;You will also need a good C++ compiler. The dvbcodec has been built and
   tested on the Windows operating system using: GCC 3.3.1, MSVC 7.1&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;A &amp;#8220;good C++ compiler&amp;#8221;, eh? As we&amp;#8217;ve already seen, GCC 3.3.1 may be good but my platform has GCC 4.0.1 installed, which is better. If my records can be believed, this &lt;code&gt;upperCase()&lt;/code&gt; function compiled cleanly using both GCC 3.3.1 and MSVC 7.1.&lt;/p&gt;
&lt;div class=&quot;typocode&quot;&gt;

&lt;pre class=&quot;prettyprint&quot;&gt;std::string
upperCase(std::string const &amp;amp; lower)
{
    std::string upper = lower;

    for (std::string&amp;lt;char&amp;gt;::iterator cc = upper.begin();
         cc != upper.end(); ++cc)
    {
        * cc = std::toupper(* cc);
    }

    return upper;
}

&lt;/pre&gt;

&lt;/div&gt;

&lt;p&gt;Huh? &lt;code&gt;Std::string&lt;/code&gt; is a typedef for &lt;code&gt;std::basic_string&amp;lt;char&amp;gt;&lt;/code&gt; and there&amp;#8217;s no such thing as a &lt;code&gt;std::basic_string&amp;lt;char&amp;gt;&amp;lt;char&amp;gt;::iterator&lt;/code&gt;, which is what GCC 4.0.1 says:&lt;/p&gt;
&lt;pre&gt;
stringutils.cpp:58: error: &#x27;std::string&#x27; is not a template
&lt;/pre&gt;

&lt;p&gt;The simple fix is to write &lt;code&gt;std::string::iterator&lt;/code&gt; instead of &lt;code&gt;std::string&amp;lt;char&amp;gt;::iterator&lt;/code&gt;. A better fix, suggested by Rick, is to use &lt;code&gt;std::transform()&lt;/code&gt;. I wonder why I missed this first time round?&lt;/p&gt;
&lt;div class=&quot;typocode&quot;&gt;

&lt;pre class=&quot;prettyprint&quot;&gt;std::string
upperCase(std::string const &amp;amp; lower)
{
    std::string upper = lower;
    std::transform(upper.begin(), upper.end(), upper.begin(), ::toupper);
    return upper;
}

&lt;/pre&gt;

&lt;/div&gt;

&lt;h3 id=&quot;boost-advances&quot;&gt;Boost advances&lt;/h3&gt;
&lt;p&gt;GCC has become stricter about what it accepts even though the formal specification of what it should do (the C++ standard) has stayed put. The Boost C++ libraries have more freedom to evolve, and the next round of build problems I encountered relate to Boost.Spirit&amp;#8217;s evolution. Whilst it would be possible to require dvbcodec users to build against Boost 1.31 (which can still be downloaded from the &lt;a href=&quot;http://www.boost.org&quot;&gt;Boost website&lt;/a&gt;) it wouldn&amp;#8217;t be reasonable. So I updated my machine (using Macports) to make sure I had an up to date version of Boost, 1.38 at the time of writing.&lt;/p&gt;
&lt;pre&gt;
$ sudo port upgrade boost
&lt;/pre&gt;

&lt;p&gt;Boost&amp;#8217;s various dependencies triggered an upgrade of boost-jam, gperf, libiconv, ncursesw, ncurses, gettext, zlib, bzip2, and this single command took over an hour to complete.&lt;/p&gt;
&lt;p&gt;I discovered that Boost.Spirit, the C++ parser framework on which &lt;code&gt;dvbcodec&lt;/code&gt; is based, has gone through an overhaul. According to the change log the flavour of Spirit used by &lt;code&gt;dvbcodec&lt;/code&gt; is now known respectfully as Spirit Classic. A clever use of namespaces and include path forwarding meant my &amp;#8220;classic&amp;#8221; client code would at least compile, at the expense of some deprecation warnings.&lt;/p&gt;
&lt;pre&gt;
Computing dependencies for decodeout.cpp...
Compiling decodeout.cpp...
In file included from codectypedefs.hpp:11,
                 from decodecontext.hpp:10,
                 from decodeout.cpp:8:
/opt/local/include/boost/spirit/tree/ast.hpp:18:4: warning: #warning &quot;This header is deprecated. Please use: boost/spirit/include/classic_ast.hpp&quot;
In file included from codectypedefs.hpp:12,
                 from decodecontext.hpp:10,
                 from decodeout.cpp:8:
&lt;/pre&gt;

&lt;p&gt;To suppress these warnings I included the preferred header. I then had to change namespace directives from &lt;code&gt;boost::spirit&lt;/code&gt; to &lt;code&gt;boost::spirit::classic&lt;/code&gt;. I fleetingly considered porting my code to Spirit V2, but decided against it: for even after this first round of changes, I still had a build problem.&lt;/p&gt;
&lt;h3 id=&quot;changing-behaviour&quot;&gt;Changing behaviour&lt;/h3&gt;
&lt;p&gt;Actually, this was a second level build problem. The &lt;code&gt;dvbcodec&lt;/code&gt; build has multiple phases:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;it builds a program to generate code. This generator can parse binary format syntax descriptions and emit C++ code which will convert data formatted according to these descriptions&lt;/li&gt;
&lt;li&gt;it runs this generator with the available syntax descriptions as inputs&lt;/li&gt;
&lt;li&gt;it compiles the emitted C++ code into a final &lt;code&gt;dvbcodec&lt;/code&gt; executable&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;img src=&quot;https://wordaligned.org/images/dvbcodec-build.png&quot; alt=&quot;Dvbcodec build process&quot;/&gt;&lt;/p&gt;
&lt;p&gt;I ran into a problem during the second phase of this process. The dvbcodec generator no longer parsed all of the supplied syntax descriptions. Specifically, I was seeing this conditional test raise an exception when trying to parse section format syntax descriptions.&lt;/p&gt;
&lt;div class=&quot;typocode&quot;&gt;

&lt;pre class=&quot;prettyprint&quot;&gt;    if (!parse(section_format,
               section_grammar,
               space_p).full)
    {
        throw SectionFormatParseException(section_format);
    }

&lt;/pre&gt;

&lt;/div&gt;

&lt;p&gt;Here, &lt;code&gt;parse&lt;/code&gt; is &lt;code&gt;boost::spirit::classic::parse&lt;/code&gt;, which parses something &amp;#8212; the section format syntax description, passed as a string in this case &amp;#8212; according to the supplied grammar. The third parameter, &lt;code&gt;boost::spirit::classic::space_p&lt;/code&gt;, is a skip parser which tells &lt;code&gt;parse&lt;/code&gt; to skip whitespace between tokens. &lt;code&gt;Parse&lt;/code&gt; returns a &lt;code&gt;parse_info&lt;/code&gt; struct whose &lt;code&gt;full&lt;/code&gt; field is a boolean which will be set to &lt;code&gt;true&lt;/code&gt; if the input section format has been fully consumed.&lt;/p&gt;
&lt;p&gt;I soon figured out that the parse call was failing to fully consume binary syntax descriptions with trailing spaces, such as the the one shown below.&lt;/p&gt;
&lt;div class=&quot;typocode&quot;&gt;

&lt;pre class=&quot;prettyprint&quot;&gt;&quot; program_association_section() {&quot;
&quot;    table_id                   8&quot;
&quot;    section_syntax_indicator   1&quot;
&quot;    &amp;#x27;0&amp;#x27;                        1&quot;
....
&quot;    CRC_32                    32&quot;
&quot; }                              &quot;

&lt;/pre&gt;

&lt;/div&gt;

&lt;p&gt;If I stripped the trailing whitespace after the closing brace before calling &lt;code&gt;parse()&lt;/code&gt; all would be fine. I wasn&amp;#8217;t fine about this fix though. The Spirit documentation is very good but it had been a while since I&amp;#8217;d read it and, as already mentioned, my code used the &amp;#8220;classic&amp;#8221; version of Spirit, in danger of becoming the &amp;#8220;legacy&amp;#8221; then &amp;#8220;deprecated&amp;#8221; and eventually the &amp;#8220;dead&amp;#8221; version. Re-reading the documentation it wasn&amp;#8217;t clear to me exactly what the correct behaviour of &lt;code&gt;parse()&lt;/code&gt; should be in this case. Should it fully consume trailing space? Had my program ever worked?&lt;/p&gt;
&lt;p&gt;I went back in time, downloading and building against Boost 1.31, and satisfied myself that my code used to work, though maybe it worked due to a bug in the old version of Spirit. Stripping trailing spaces before parsing allowed my code to work with Spirit past and present, so I curtailed my investigation and made the fix.&lt;/p&gt;
&lt;p&gt;(Interestingly, Boost 1.31 found a way to warn me I was using a compiler it didn&amp;#8217;t know about.&lt;/p&gt;
&lt;pre&gt;
boost_1_31_0/boost/config/compiler/gcc.hpp:92:7: warning: 
#warning &quot;Unknown compiler version - please run the configure tests and report the results&quot;
&lt;/pre&gt;

&lt;p&gt;I ignored this warning.)&lt;/p&gt;
&lt;h3 id=&quot;code-inaction&quot;&gt;Code inaction&lt;/h3&gt;
&lt;p&gt;Apologies for the lengthy explanation in the previous section. The point is, few software projects stand alone, and changes in any dependencies, &lt;strong&gt;including bug fixes&lt;/strong&gt;, can have knock on effects. In this instance, I consider myself lucky; &lt;code&gt;dvbcodec&lt;/code&gt;&amp;#8217;s unusual three phase build enabled me to catch a runtime error before generating the final product. Of course, to actually catch that error, I needed to at least try building my code.&lt;/p&gt;
&lt;p&gt;More simply: if you don&amp;#8217;t use your code, it rots.&lt;/p&gt;
&lt;h3 id=&quot;rotten-artefacts&quot;&gt;Rotten artefacts&lt;/h3&gt;
&lt;p&gt;It wasn&amp;#8217;t just the code which had gone off. My source distribution included documentation &amp;#8212; the plain text version of the article I&amp;#8217;d written for Overload &amp;#8212; and the Makefile had a build target to generate an HTML version of this documentation. This target depended on &lt;a href=&quot;http://www.boost.org/doc/tools/quickbook/index.html&quot; title=&quot;Quickbook, a Boost documentation tool&quot;&gt;Quickbook&lt;/a&gt;, another Boost tool. Quickbook generates Docbook XML from plain text source, and Docbook is a good starting point for HTML, PDF and other standard output formats.&lt;/p&gt;
&lt;p&gt;This is quite a sophisticated toolchain. It&amp;#8217;s also one I no longer use. Most of what I write goes straight to the web and I don&amp;#8217;t need such a fiddly process just to produce HTML. So I decided to freshen up dead links, leave the original documentation as a record, and simply cut the documentation target from the Makefile.&lt;/p&gt;
&lt;h3 id=&quot;stopping-the-rot&quot;&gt;Stopping the rot&lt;/h3&gt;
&lt;p&gt;As we&amp;#8217;ve seen, software, like other soft organic things, breaks down over time. How can we stop the rot?&lt;/p&gt;
&lt;p&gt;Freezing software to a particular executable built against a fixed set of dependencies to run on a single platform is one way &amp;#8212; and maybe some of us still have an aging Windows 95 machine, kept alive purely to run some such frozen program.&lt;/p&gt;
&lt;p&gt;A better solution is to actively tend the software and ensure it stays in shape. Exercise it regularly on a build server. Record test results. Fix faults as and when they appear. Review the architecture. Upgrade the platform and dependencies. Prune unused features, splice in new ones. This is the path taken by the Boost project, though certainly the growth far outpaces any pruning (the Boost 1.39 download is 5 times bigger than its 1.31 ancestor). Boost takes forwards and backwards compatibility seriously, hence the ongoing support for Spirit classic and the compiler version certification headers. Maintaining compatibility can be at odds with simplicity.&lt;/p&gt;
&lt;p&gt;There is another way too. Although the &lt;code&gt;dvbcodec&lt;/code&gt; project has collapsed into disrepair the idea behind it certainly hasn&amp;#8217;t. I&amp;#8217;ve taken this same idea &amp;#8212; of parsing formal syntax descriptions to generate code which handles binary formatted data &amp;#8212; and enhanced it to work more flexibly and with a wider range of inputs. Whenever I come across a new binary data structure, I paste its syntax into a text file, regenerate the code, and I can work with this structure. Unfortunately I can&amp;#8217;t show you any code (it&amp;#8217;s proprietary) but I hope I&amp;#8217;ve shown you the idea. Effectively, &lt;span /&gt;the old C++ code has been left to rot but the idea within it remains green, recoded in Python. Maybe I should find a way to humanely destroy the C++ and all links to it, but for now I&amp;#8217;ll let it degrade, an illustration of its time.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Is it possible that software is not like anything else, that it is meant to be discarded: that the whole point is to see it as a soap bubble? &amp;#8212; &lt;a href=&quot;http://www.cs.yale.edu/quotes.html&quot;&gt;Alan J. Perlis&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&quot;thanks&quot;&gt;Thanks&lt;/h3&gt;
&lt;p&gt;I would like to thank to Rick Engelbrecht for reporting and helping to fix the bugs discussed in this article.&lt;/p&gt;
&lt;p&gt;This article first appeared in Overload 92, and I would like to thank the team at Overload for their expert help.&lt;/p&gt;</description>
<dc:date>2009-09-03</dc:date>
<guid>https://wordaligned.org/articles/code-rot</guid>
<author>tag@wordaligned.org (Thomas Guest)</author>
<link>https://wordaligned.org/articles/code-rot</link>
<category>Build</category>
</item>

<item>
<title>Fixing Compiler Warnings the Hard Way</title>
<description>&lt;h3 id=&quot;gcc-makes-a-suggestion&quot;&gt;GCC makes a suggestion&lt;/h3&gt;
&lt;p&gt;The build server &lt;a href=&quot;https://wordaligned.org/articles/antisocial-build-orders.html&quot;&gt;CC&amp;#8217;d me on an ASBO email&lt;/a&gt;. Good old GCC, grumbling about operator precedence again. But Hey! &amp;#8212; at least it had a positive suggestion to make.&lt;/p&gt;
&lt;pre style=&quot;border: 2px solid red; background: white; font-size: 150%;&quot;&gt;
&lt;b&gt;From:&lt;/b&gt; buildmaster@example.com
&lt;b&gt;To:&lt;/b&gt; lem.e.tweakit@example.com
&lt;b&gt;Cc:&lt;/b&gt; developers@example.com
&lt;b&gt;Subject:&lt;/b&gt; Broken build
------------------------------------
&lt;span style=&quot;font-weight: 900; font-variant: small-caps; font-size: 36px;&quot;&gt;Anti Social Build Order&lt;/span&gt;
&lt;b&gt;Version:&lt;/b&gt; svn://svnserver/trunk@999
&lt;b&gt;Platform:&lt;/b&gt; Linux, GCC 4.0.1
&lt;b&gt;Build Log:&lt;/b&gt; 
....
Warning: suggest parentheses around arithmetic
in operand of ^
&lt;/pre&gt;

&lt;p&gt;I looked at the code. Here&amp;#8217;s a much simplified version which generates the same warning.&lt;/p&gt;
&lt;p&gt;&lt;span id=&quot;continue-reading&quot;/&gt;&lt;/p&gt;
&lt;pre&gt;
void
unpack(unsigned char const * bits, int n_bits,
       unsigned char * buf)
{
    unsigned char bit, byte, pos;
    int b;

    for (b = 0; b != n_bits; ++b)
    {
        byte = bits[b / 8];
        pos = 7 - (b % 8);
        &lt;strong&gt;bit = byte &amp;amp; 2^pos;&lt;/strong&gt;
        buf[b] = bit == 0 ? 0 : 255;
    }
}
&lt;/pre&gt;

&lt;p&gt;When compiling this function GCC warns about the line in bold type:&lt;/p&gt;
&lt;pre&gt;
$ gcc -Wall -c unpack_bits.c 
unpack_bits.c: In function `unpack&#x27;:
unpack_bits.c:12: warning: suggest parentheses around 
             arithmetic in operand of ^
&lt;/pre&gt;

&lt;h3 id=&quot;setting-a-precedent&quot;&gt;Setting a precedent&lt;/h3&gt;
&lt;p&gt;Needless to say, the actual offending code was buried in a longer function, indented more deeply, and with a few more &lt;a href=&quot;http://c2.com/cgi/wiki?ThreeStarProgrammer&quot;&gt;indirections&lt;/a&gt; &amp;#8212; so it was indeed tempting to take GCC&amp;#8217;s advice and whack in a couple of brackets. Clearly the author &lt;strong&gt;meant&lt;/strong&gt; to write:&lt;/p&gt;
&lt;div class=&quot;typocode&quot;&gt;

&lt;pre class=&quot;prettyprint&quot;&gt;bit = byte &amp;amp; (2^pos);

&lt;/pre&gt;

&lt;/div&gt;

&lt;p&gt;Why else omit spaces around the &lt;code&gt;^&lt;/code&gt;?&lt;/p&gt;
&lt;p&gt;Fortunately I live by my own rule, to &lt;a href=&quot;https://wordaligned.org/articles/brackets-off.html&quot;&gt;avoid unnecessary parentheses&lt;/a&gt;, so I wasn&amp;#8217;t about to add any here without asking why. Worse than my stubborn principles, &lt;code&gt;^&lt;/code&gt;, the exclusive or operator, has &lt;strong&gt;lower&lt;/strong&gt; precedence than bitwise and, &lt;code&gt;&amp;amp;&lt;/code&gt;, so to keep GCC happy and retain the original behaviour we&amp;#8217;d have to write:&lt;/p&gt;
&lt;div class=&quot;typocode&quot;&gt;

&lt;pre class=&quot;prettyprint&quot;&gt;bit = (byte &amp;amp; 2) ^ pos;

&lt;/pre&gt;

&lt;/div&gt;

&lt;p&gt;This last expression looks very bizarre. Had it ever been exercised?&lt;/p&gt;
&lt;p&gt;GCC was right, the code was wrong, but its diagnostic showed the wrong way to right things. On this occasion GCC should have been proscriptive, not prescriptive, and left the fix in the hands of the programmer&lt;a id=&quot;fn1link&quot; href=&quot;https://wordaligned.org/articles/fixing-compiler-warnings-the-hard-way#footnote1&quot;&gt;&lt;sup&gt;&lt;a href=&quot;https://blog.codeship.com/building-minimal-docker-containers-for-go-applications/&quot;&gt;1&lt;/a&gt;&lt;/sup&gt;&lt;/a&gt;.&lt;/p&gt;
&lt;h3 id=&quot;dont-mix-bits-and-arithmetic&quot;&gt;Don&amp;#8217;t mix bits and arithmetic&lt;/h3&gt;
&lt;pre style=&quot;color:#00cc00;background:#000;float:right;margin-left:4px;&quot;&gt;0000 0000 5589 e58b 5508 89d0 d1e8 2555
5555 5529 c289 d0c1 e802 2533 3333 3381
e233 3333 3301 d089 c2c1 ea04 01d0 250f
0f0f 0f89 c2c1 ea08 01d0 25ff 00ff 0089
c2c1 ea10 01d0 25ff ff00 005d c300 0000
5555 5555 3333 3333 0f0f 0f0f ff00 ff00&lt;/pre&gt;

&lt;p&gt;My personal rule of thumb is to avoid mixing bitwise and arithmetic operations. Although integral types support both kinds of operation, it generally feels like a type-mismatch to combine them in a single expression. An array of bits isn&amp;#8217;t the same as a number, and vice-versa.&lt;/p&gt;
&lt;p&gt;Of course there are some treasured &lt;a href=&quot;http://graphics.stanford.edu/~seander/bithacks.html&quot;&gt;bit-twiddling tricks&lt;/a&gt; which exploit the mapping between binary arithmetic and machine level register operations. So we can, for example, calculate &lt;code&gt;2&lt;/code&gt; raised to the power of &lt;code&gt;19&lt;/code&gt; with a simple left-shift, &lt;code&gt;1 &amp;lt;&amp;lt; 19&lt;/code&gt;, or test if &lt;code&gt;v&lt;/code&gt; is a power of &lt;code&gt;2&lt;/code&gt; with &lt;code&gt;!(v &amp;amp; (v - 1)) &amp;amp;&amp;amp; v&lt;/code&gt;. I&amp;#8217;m not suggesting we blacklist these ingenious hacks &amp;#8212; in fact, anyone off to an interview for a programming job with an embedded systems company might do well to study them &amp;#8212; but I would say their use requires thorough documentation.&lt;/p&gt;
&lt;p&gt;On occasion, then, bitwise operations may legitimately be used for fast arithmetic; but using arithmetic to pack bits is rarely necessary. This line of code is probably wrong&lt;a id=&quot;fn2link&quot; href=&quot;https://wordaligned.org/articles/fixing-compiler-warnings-the-hard-way#footnote2&quot;&gt;&lt;sup&gt;&lt;a href=&quot;http://devcenter.wercker.com/docs/quickstarts/advanced/building-minimal-containers-with-go&quot;&gt;2&lt;/a&gt;&lt;/sup&gt;&lt;/a&gt;:&lt;/p&gt;
&lt;div class=&quot;typocode&quot;&gt;

&lt;pre class=&quot;prettyprint&quot;&gt;r = h &amp;lt;&amp;lt; 4 + 1;

&lt;/pre&gt;

&lt;/div&gt;

&lt;p&gt;The programmer probably intended the (bitwise) shift to happen before the (arithmetic) addition, like this.&lt;/p&gt;
&lt;div class=&quot;typocode&quot;&gt;

&lt;pre class=&quot;prettyprint&quot;&gt;r = (h &amp;lt;&amp;lt; 4) + 1;

&lt;/pre&gt;

&lt;/div&gt;

&lt;p&gt;If we stick to bitwise operations, things become clear. I&amp;#8217;ve written the 1 in hexadecimal as a hint it&amp;#8217;s being used as a bit pattern &amp;#8212; sadly there&amp;#8217;s no way of writing a binary literal directly in C.&lt;/p&gt;
&lt;div class=&quot;typocode&quot;&gt;

&lt;pre class=&quot;prettyprint&quot;&gt;r = h &amp;lt;&amp;lt; 4 | 0x1;

&lt;/pre&gt;

&lt;/div&gt;

&lt;p&gt;Anyway, the problem line in &lt;code&gt;unpack()&lt;/code&gt; adheres to my rule of thumb: &lt;code&gt;&amp;amp;&lt;/code&gt; and &lt;code&gt;^&lt;/code&gt; are indeed both bitwise operations. But after some puzzling I realised the author of the code intended &lt;code&gt;2^pos&lt;/code&gt; to mean &lt;code&gt;2&lt;/code&gt; to the power of &lt;code&gt;pos&lt;/code&gt;, &lt;strong&gt;not for its arithmetic value, but for its bit pattern&lt;/strong&gt; &amp;#8212; which, as every programmer knows, is a &lt;code&gt;1&lt;/code&gt; followed by pos &lt;code&gt;0&lt;/code&gt;s. That is, a &lt;code&gt;1&lt;/code&gt; left shifted &lt;code&gt;pos&lt;/code&gt; times.&lt;/p&gt;
&lt;p&gt;Here&amp;#8217;s what I thought the fix should be. Note, incidentally, that I&amp;#8217;ve used &lt;code&gt;~0&lt;/code&gt; rather than &lt;code&gt;255&lt;/code&gt;, because it clearly says &amp;#8220;set every bit&amp;#8221;. I&amp;#8217;m also using unsigned integers throughout &amp;#8212; always a good idea when working with bits. Some programmers might prefer to parenthesise the expression &lt;code&gt;byte &amp;amp; 1 &amp;lt;&amp;lt; pos&lt;/code&gt;, &lt;a href=&quot;https://wordaligned.org/articles/brackets-off.html&quot;&gt;but I prefer the form shown&lt;/a&gt;: it&amp;#8217;s easy enough to remember that &lt;code&gt;&amp;amp;&lt;/code&gt; groups with the logical operators and &lt;code&gt;&amp;lt;&amp;lt;&lt;/code&gt; with the (higher precedence) arithmetic ones.&lt;/p&gt;
&lt;div class=&quot;typocode&quot;&gt;

&lt;pre class=&quot;prettyprint&quot;&gt;void
unpack(unsigned char const * bits, unsigned n_bits,
       unsigned char * buf)
{
    unsigned char bit, byte;
    unsigned b, pos;

    for (b = 0; b != n_bits; ++b)
    {
        byte = bits[b / 8];
        pos = 7 - b % 8;
        bit = byte &amp;amp; 1 &amp;lt;&amp;lt; pos;
        buf[b] = bit == 0 ? 0 : ~0;
    }
}

&lt;/pre&gt;

&lt;/div&gt;

&lt;p&gt;Despite the absence of documentation, this is now at least a coherent function. It&amp;#8217;s a &amp;#8220;biterator&amp;#8221; which steps through a collection of bits (packed into bytes, the smallest memory units C offers). Each time it encounters a set/clear bit, it sets/clears all the bits in the next byte in the output buffer. That is, it expands each bit value to fill a whole byte.&lt;/p&gt;
&lt;p&gt;This is exactly the kind of function which is surprisingly fiddly to write but simple to unit test. As already mentioned, though, the function didn&amp;#8217;t actually exist in the form shown, and the tests were all at the module level. The responsible way for me to proceed was to create a module test which exposed the defect, then make my candidate fix, confirm it did indeed fix the defect, then check the change in.&lt;/p&gt;
&lt;h3 id=&quot;unit-test&quot;&gt;Unit Test&lt;/h3&gt;
&lt;p&gt;Here&amp;#8217;s how simple a unit test for &lt;code&gt;unpack()&lt;/code&gt; could be. It may be longer than the function it&amp;#8217;s testing, but it&amp;#8217;s less complex. And with just a couple of test cases, it manages to cover several interesting corners of the functionality. Better still, it passes&lt;a id=&quot;fn3link&quot; href=&quot;https://wordaligned.org/articles/fixing-compiler-warnings-the-hard-way#footnote3&quot;&gt;&lt;sup&gt;[3]&lt;/sup&gt;&lt;/a&gt;!&lt;/p&gt;
&lt;div class=&quot;typocode&quot;&gt;

&lt;pre class=&quot;prettyprint&quot;&gt;void
test_unpack()
{
    // Start with a varied bit-pattern.
    // Ensure each byte differs from its reversed self.
    unsigned char const bits[2] = 
    {
        1 &amp;lt;&amp;lt; 7 | 1 &amp;lt;&amp;lt; 5 | 1 &amp;lt;&amp;lt; 4 | 1 &amp;lt;&amp;lt; 0, // 10110001 binary
        1 &amp;lt;&amp;lt; 6 | 1 &amp;lt;&amp;lt; 5 | 1 &amp;lt;&amp;lt; 3 | 1 &amp;lt;&amp;lt; 0, // 01101001 binary
    };
    // The expected output expands bits to bytes (0 =&amp;gt; 0, 1 =&amp;gt; ~0)
    unsigned char expected[2 * 8] = 
    {
        ~0, 0, ~0, ~0, 0, 0, 0, ~0,
        0, ~0, ~0, 0, ~0, 0, 0, ~0
    };
    unsigned char buf[3 * 8] = { 0 };
    unsigned char buf_copy[3 * 8] = { 0 };

    size_t const buf_size = sizeof(buf);

    // Fill the buffer with a pattern of 1s and 0s.
    // Unpack nothing and check nothing changes.
    memset(buf, 0xa5, buf_size);
    memcpy(buf_copy, buf, buf_size);
    unpack(bits, 0, buf);
    assert(memcmp(buf, buf_copy, buf_size) == 0);

    // Unpack some of the bits and check the results.
    // Also check the remainder of the buffer is undamaged.
    unpack(bits, 13, buf);
    assert(memcmp(buf, expected, 13) == 0);
    assert(memcmp(buf + 13, buf_copy + 13, buf_size - 13) == 0);
}

&lt;/pre&gt;

&lt;/div&gt;

&lt;p&gt;This is white-box testing: the test knows enough about the implementation of &lt;code&gt;unpack()&lt;/code&gt; to expose potential problems. In this case, there&amp;#8217;s something unusual about the way the &lt;code&gt;pos&lt;/code&gt; counter goes down as the bit counter &lt;code&gt;b&lt;/code&gt; goes up, so we make sure that the bits we&amp;#8217;re unpacking form asymmetric patterns.&lt;/p&gt;
&lt;h3 id=&quot;refactoring&quot;&gt;Refactoring&lt;/h3&gt;
&lt;p&gt;Should we extract this tested &lt;code&gt;unpack()&lt;/code&gt; function from its surrounding, larger, more complex function? Is it safe to do so? Have we time to spend making changes with no externally visible results? Should we tweak &lt;code&gt;unpack()&lt;/code&gt; for efficiency (after all, it doesn&amp;#8217;t need to use the division and modulus operators each time round the loop)?&lt;/p&gt;
&lt;div class=&quot;amazon&quot;&gt;&lt;a href=&quot;http://www.amazon.com/gp/product/0131177052?ie=UTF8&amp;amp;tag=wordalig-20&amp;amp;linkCode=as2&amp;amp;camp=1789&amp;amp;creative=9325&amp;amp;creativeASIN=0131177052&quot;&gt;&lt;img src=&quot;https://wordaligned.org/images/working-effectively-with-legacy-code.jpg&quot; alt=&quot;Working Effectively with Legacy Code cover&quot;/&gt;&lt;/a&gt;&lt;/div&gt;

&lt;p&gt;These are important questions. eXtreme Programmers &lt;a href=&quot;http://www.extremeprogramming.org/rules/refactor.html&quot;&gt;refactor mercilessly&lt;/a&gt;, confident their extensive test frameworks will provide a safety net. Java programmers select the code block in their IDE then click the &amp;#8220;extract method&amp;#8221; button. C and C++ programmers have less advanced tools, but Michael Feathers&amp;#8217; &lt;a href=&quot;http://www.amazon.com/gp/product/0131177052?ie=UTF8&amp;amp;tag=wordalig-20&amp;amp;linkCode=as2&amp;amp;camp=1789&amp;amp;creative=9325&amp;amp;creativeASIN=0131177052&quot;&gt;&amp;#8220;Working Effectively with Legacy Code&amp;#8221;&lt;/a&gt; offers practical advice on how to transform code safely &amp;#8212; that is, how to put it under test.&lt;/p&gt;
&lt;p&gt;In the real world, we judge each case on merit. A &lt;a href=&quot;https://wordaligned.org/articles/antisocial-build-orders.html&quot;&gt;nag email&lt;/a&gt; from the build server shouldn&amp;#8217;t trigger mass refactoring, even if the test infrastructure is in place. I think Feathers is right though, that poorly tested code is on its way to becoming legacy code: hard to adapt, unpleasant to work with, and a drag on continuing development.&lt;/p&gt;
&lt;h3 id=&quot;lessons&quot;&gt;Lessons&lt;/h3&gt;
&lt;p&gt;This new story repeats the same old lessons, and I think they bear repeating:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Set up a build server. Listen to it.&lt;/li&gt;
&lt;li&gt;Compile on multiple platforms.&lt;/li&gt;
&lt;li&gt;Think! Compilers are concerned with syntax, not semantics. A C compiler reads your code in order to rewrite it for the machine&amp;#8217;s benefit; understanding the code is your job.&lt;/li&gt;
&lt;li&gt;Write small functions. Unit test them. &lt;/li&gt;
&lt;li&gt;Integers and bit arrays are different.&lt;/li&gt;
&lt;li&gt;Take care when using bitwise operations as arithmetic shortcuts.&lt;/li&gt;
&lt;li&gt;Avoid using arithmetic for bit packing.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Oh, and in C, don&amp;#8217;t mistake &lt;code&gt;^&lt;/code&gt; for exponentiation!&lt;/p&gt;
&lt;hr /&gt;
&lt;p&gt;&lt;a href=&quot;http://accu.org&quot; title=&quot;ACCU: professionalism in programming&quot;&gt;&lt;img src=&quot;http://accu.org/content/images/buttonl_88x31.gif&quot; style=&quot;float:right&quot; width=&quot;88&quot; height=&quot;31&quot; alt=&quot;ACCU: professionalism in programming&quot;/&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;This article was originally published in &lt;a href=&quot;http://accu.org/index.php/aboutus/aboutjournals&quot;&gt;CVu&lt;/a&gt;, a print journal for ACCU members, and I would like to thank all at CVu for their help with it.&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://wordaligned.org/articles/fixing-compiler-warnings-the-hard-way#fn1link&quot; id=&quot;footnote1&quot;&gt;&lt;a href=&quot;https://blog.codeship.com/building-minimal-docker-containers-for-go-applications/&quot;&gt;1&lt;/a&gt;&lt;/a&gt; I&amp;#8217;m not complaining about GCC which did an outstanding job of flagging a genuine problem in perfectly well-defined and valid code. The other compiler frequently used on this project, MSVC V8.0, compiles this cleanly, at the same time warning standard C string functions are unsafe and &lt;strong&gt;deprecated&lt;/strong&gt;!&lt;/p&gt;
&lt;div class=&quot;amazon&quot;&gt;&lt;a href=&quot;http://www.amazon.com/gp/product/0201179288?ie=UTF8&amp;amp;tag=wordalig-20&amp;amp;linkCode=as2&amp;amp;camp=1789&amp;amp;creative=9325&amp;amp;creativeASIN=0201179288&quot;&gt;&lt;img  src=&quot;https://wordaligned.org/images/books/c-traps-and-pitfalls.jpg&quot; alt=&quot;Book cover&quot;/&gt;&lt;/a&gt;&lt;/div&gt;

&lt;p&gt;&lt;a href=&quot;https://wordaligned.org/articles/fixing-compiler-warnings-the-hard-way#fn2link&quot; id=&quot;footnote2&quot;&gt;&lt;a href=&quot;http://devcenter.wercker.com/docs/quickstarts/advanced/building-minimal-containers-with-go&quot;&gt;2&lt;/a&gt;&lt;/a&gt; I&amp;#8217;ve taken this example directly from Andrew Koenig&amp;#8217;s &lt;a href=&quot;http://www.amazon.com/gp/product/0201179288?ie=UTF8&amp;amp;tag=wordalig-20&amp;amp;linkCode=as2&amp;amp;camp=1789&amp;amp;creative=9325&amp;amp;creativeASIN=0201179288&quot;&gt;&amp;#8220;C Traps and Pitfalls&amp;#8221;&lt;/a&gt;. This is a nice little book which expands on the ideas presented in a &lt;a href=&quot;http://www.literateprogramming.com/ctraps.pdf&quot;&gt;paper of the same name [PDF]&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://wordaligned.org/articles/fixing-compiler-warnings-the-hard-way#fn3link&quot; id=&quot;footnote3&quot;&gt;[3]&lt;/a&gt; One thing I recommend, though, is to temporarily reverse the logic in the assertions and check they then fail. Unit test frameworks often provide hooks to do this reversed-result test, which confirms the test cases are actually being run.&lt;/p&gt;</description>
<dc:date>2008-05-20</dc:date>
<guid>https://wordaligned.org/articles/fixing-compiler-warnings-the-hard-way</guid>
<author>tag@wordaligned.org (Thomas Guest)</author>
<link>https://wordaligned.org/articles/fixing-compiler-warnings-the-hard-way</link>
<category>Build</category>
</item>

<item>
<title>Anti-Social Build Orders</title>
<description>&lt;pre style=&quot;border: 2px solid red; background: white; font-size: 150%;&quot;&gt;
&lt;b&gt;From:&lt;/b&gt; buildmaster@example.com
&lt;b&gt;To:&lt;/b&gt; noah.shortcut@example.com
&lt;b&gt;Cc:&lt;/b&gt; dev@example.com, mr.deadline@example.com
&lt;b&gt;Subject:&lt;/b&gt; Anti Social Build Order

&lt;span style=&quot;font-weight: 900; font-variant: small-caps; font-size: 36px;&quot;&gt;Anti Social Build Order&lt;/span&gt;
&lt;b&gt;Rev:&lt;/b&gt; svn://svnserver/trunk@666
&lt;b&gt;Log:&lt;/b&gt; Added files to project
&lt;b&gt;Offense:&lt;/b&gt; Breaking the build
&lt;/pre&gt;

&lt;p&gt;&lt;span id=&quot;continue-reading&quot;/&gt;&lt;/p&gt;
&lt;p&gt;I wish I could claim this was an original idea. It isn&amp;#8217;t. Automated builds have existed for at least as long as I&amp;#8217;ve been programming, nag emails are a typical notification technique, and I&amp;#8217;m attributing the reuse of the term &lt;a href=&quot;http://www.crimereduction.homeoffice.gov.uk/asbos/asbos9.htm&quot;&gt;ASBO&lt;/a&gt; to &lt;a href=&quot;http://stonetable.org.uk/&quot;&gt;Matt Bowers&lt;/a&gt;. When I worked for Matt, he awarded a printed Anti Social Build Order in person at one of the development team&amp;#8217;s daily stand up meetings. It was a joke but, from then on, the build pass rate did increase.&lt;/p&gt;
&lt;p&gt;Name-and-shame tactics aren&amp;#8217;t usually a good idea, even if, as in this case, they&amp;#8217;re humourously cast. Team-work, collective code ownership, that&amp;#8217;s what you want. &lt;code&gt;Svn praise&lt;/code&gt;, not &lt;code&gt;svn blame&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;&lt;span /&gt;But anyone who breaks the build &lt;strong&gt;deserves&lt;/strong&gt; an ASBO. It hinders other team members and shows disregard for best practice. In an age of atomic commits, powerful computers, and virtualisation, there can be no excuse. If you&amp;#8217;re developing for multiple platforms, Windows and Linux, say, don&amp;#8217;t assume that GCC and MSVC will agree on what clean code is, and never rely on other team members to correct your mistakes.&lt;/p&gt;
&lt;p&gt;Even with ASBOs in place, even with a disciplined development team, a build may break. The important thing is to catch this event as soon as it happens; that&amp;#8217;s what the build server is for, and as we can see Example.com has an exemplary build server. The ASBO email above was sent by an automated build process which performs an incremental build each time the repository updates. It identifies the revision when things went wrong and who committed that revision. As a result, Noah has cleaned up the build, but has he cleaned up his act? Certainly, when it came to breaking the build he used to be a serial offender. The introduction of ASBOs will help him reform.&lt;/p&gt;
&lt;hr/&gt;

&lt;p&gt;&lt;a href=&quot;http://accu.org/index.php/journals/347&quot;&gt;Find out&lt;/a&gt; more about Noah Shortcut and Mr Deadline.&lt;/p&gt;</description>
<dc:date>2007-11-14</dc:date>
<guid>https://wordaligned.org/articles/antisocial-build-orders</guid>
<author>tag@wordaligned.org (Thomas Guest)</author>
<link>https://wordaligned.org/articles/antisocial-build-orders</link>
<category>Build</category>
</item>

</channel>
</rss>
