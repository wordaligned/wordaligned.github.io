<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:dc="http://purl.org/dc/elements/1.1/" >
<channel>
<title>Word Aligned</title>
<link>http://wordaligned.org</link>
<description>tales from the code face</description>
<dc:creator>tag@wordaligned.org</dc:creator>
<language>en-gb</language>
<item>
<title>Undogfooding</title>
<description>&lt;p&gt;David Jones perfectly &lt;a href="http://drj11.wordpress.com/2009/07/04/tony-hoare-man-of-science/"&gt;captures the look and feel&lt;/a&gt; of Sir Tony Hoare&amp;#8217;s presentation at &lt;a href="http://www.europython.eu"&gt;Europython 2009&lt;/a&gt;
&lt;/p&gt;
&lt;blockquote&gt;&lt;p&gt;Tony Hoare is clearly old skool. His slides had the calm and aged patina of the &lt;a href="http://en.wikipedia.org/wiki/Overhead_projector"&gt;OHP&lt;/a&gt; era, and I thought they were all the better for that. If you have a message, then that message can be conveyed without all the flash and shine that PowerPoint tempts you with (although, being a Microsoft man, of course his slides &lt;em&gt;were&lt;/em&gt; in PowerPoint). 
&lt;/p&gt;
&lt;/blockquote&gt;&lt;p&gt;&lt;a href="http://docs.python.org/library/turtle.html#module-turtle"&gt;&lt;img src="http://wordaligned.org/images/my-1st-turtle.png" alt="My first turtle sketch"/&gt;&lt;/a&gt;
&lt;/p&gt;
&lt;p&gt;Note the parenthetical comment: Tony Hoare works for Microsoft and he uses Microsoft software, an activity developers refer to as &lt;a href="http://catb.org/jargon/html/D/dogfood.html"&gt;&amp;#8220;eating your own dogfood&amp;#8221;&lt;/a&gt;. Also eating dogfood at Europython, &lt;a href="http://www.europython.eu/talks/speakers/index.html#lingl_gregor"&gt;Gregor Lingl&lt;/a&gt; employed his very own &lt;a href="http://docs.python.org/library/turtle.html#module-turtle"&gt;turtle&lt;/a&gt; to guide the audience through a nifty presentation belying the reptile&amp;#8217;s slow-and-steady reputation. I&amp;#8217;ve always enjoyed sketching code using the Python interpreter, and sketching pictures with a turtle feels very pythonic.
&lt;/p&gt;
&lt;div class="typocode"&gt;&lt;div class="codetitle"&gt;My first turtle sketch&lt;/div&gt;

&lt;pre class="prettyprint"&gt;Python 3.1
&amp;gt;&amp;gt;&amp;gt; from turtle import *
&amp;gt;&amp;gt;&amp;gt; shape('turtle')
&amp;gt;&amp;gt;&amp;gt; circle(100)
&amp;gt;&amp;gt;&amp;gt; fillcolour('red')
Traceback (most recent call last):
  File "&amp;lt;stdin&amp;gt;", line 1, in &amp;lt;module&amp;gt;
NameError: name 'fillcolour' is not defined
&amp;gt;&amp;gt;&amp;gt; fillcolor('red')
&amp;gt;&amp;gt;&amp;gt; begin_fill(); circle(100); end_fill()
&amp;gt;&amp;gt;&amp;gt; def grey(pc): c = pc/100; fillcolor(c, c, c)
... 
&amp;gt;&amp;gt;&amp;gt; clear()
&amp;gt;&amp;gt;&amp;gt; def doit(r): begin_fill(); grey(r); circle(r); end_fill()
... 
&amp;gt;&amp;gt;&amp;gt; for r in range(100): doit(r)
... 
^C^C
Traceback (most recent call last):
...
&amp;gt;&amp;gt;&amp;gt; clear()
&amp;gt;&amp;gt;&amp;gt; for r in range(100, 0, -5): doit(r)
...
&amp;gt;&amp;gt;&amp;gt; fillcolor('white')
&amp;gt;&amp;gt;&amp;gt; forward(150)

&lt;/pre&gt;

&lt;/div&gt;

&lt;p&gt;Gregor Lingl&amp;#8217;s session at Europython wasn&amp;#8217;t the only one delivered using software developed by the presenter. What would be the opposite of eating your own dogfood, I wondered? Abusing someone else&amp;#8217;s software, perhaps.
&lt;/p&gt;
&lt;span id="continue-reading"/&gt;

&lt;blockquote&gt;&lt;p&gt;After one too many bad presentations at a meeting in January 2000, I decided to see if I could do something about it. &amp;#8212; &lt;a href="http://norvig.com/Gettysburg/making.html" title="The Making of the Gettysburg PowerPoint Presentation"&gt;Peter Norvig&lt;/a&gt;
&lt;/p&gt;
&lt;/blockquote&gt;&lt;p&gt;I&amp;#8217;m fairly sure Peter Norvig had no part in PowerPoint&amp;#8217;s development. In a &lt;a href="http://norvig.com/Gettysburg"&gt;hilarious satire&lt;/a&gt; he skewers the popular presentation tool with its own Autocontent Wizard.
&lt;/p&gt;
&lt;p&gt;&lt;a href="http://norvig.com/Gettysburg/index.htm"&gt;&lt;img src="http://norvig.com/Gettysburg/img001.gif" width="500px" height="375px" alt="Gettysburg PPT, slide 1"/&gt;&lt;/a&gt;
&lt;/p&gt;
&lt;p&gt;Back on the subject of overhead projectors, I saw one put to good use by another eminent old-skooler, Donald Knuth, at the recent &lt;a href="http://www.dcs.warwick.ac.uk/bshm/meetings/Fiction.html"&gt;Mathematics and Fiction&lt;/a&gt; workshop in Oxford. Asked by passport control at London Heathrow if he&amp;#8217;d be visiting Oxford on a business trip or a pleasure trip, Knuth had answered: no, he&amp;#8217;d come on a ego trip.
&lt;/p&gt;
&lt;p&gt;Knuth was in Oxford to talk to his fans about about &lt;a href="http://www-cs-faculty.stanford.edu/~knuth/sn.html"&gt;Surreal Numbers&lt;/a&gt;, a       book he wrote in just a couple of weeks in 1973 while taking a break from working on &lt;a href="http://en.wikipedia.org/wiki/The_Art_of_Computer_Programming"&gt;The Art of Computer Programming&lt;/a&gt; in a hotel in Oslo, and which may well be the only example of a mathematical &lt;a href="http://en.wikipedia.org/wiki/Surreal_numbers"&gt;theory&lt;/a&gt; first published in fictional form.
&lt;/p&gt;
&lt;p&gt;&lt;a href="http://www-cs-faculty.stanford.edu/~knuth/sn.html"&gt;&lt;img src="http://wordaligned.org/images/books/surreal-numbers.jpg" width="240px" height="240px" alt="Surreal Numbers book cover" style="float:right;"/&gt;&lt;/a&gt;
&lt;/p&gt;
&lt;p&gt;For the workshop Knuth had gone back to his files and found his working notes, the original hotel brochure, photos, hand-written reviews by P&amp;oacute;lya and others, though he couldn&amp;#8217;t locate the paper napkin on which &lt;a href="http://en.wikipedia.org/wiki/John_Horton_Conway"&gt;John Horton Conway&lt;/a&gt; had sketched the axioms underpinning the number system a few months before&lt;a id="fn1link" href="http://wordaligned.org/articles/undogfooding#fn1"&gt;&lt;sup&gt;[1]&lt;/sup&gt;&lt;/a&gt; &amp;#8212; Knuth had copied this source material onto acetates which he then sorted and shuffled on the OHP according to the direction his reminiscences and questions from the audience took him.
&lt;/p&gt;
&lt;p&gt;Unlike Tony Hoare, Donald Knuth wasn&amp;#8217;t making a formal presentation, but I was struck by some advantages offered by the OHP. For one, the process of getting slides displayed seemed foolproof &amp;#8212; at Europython we had the usual catalogue of computer/screen interface glitches (unwanted dialog boxes popping up, batteries dying, screensavers kicking in, missing Mac display dongles, delays while rebooting Ubuntu, alignment issues). The OHP also facilitated a dynamic presentation style: Knuth accessed his slides at random, composing screens from more than one slide on the fly, and pointing to areas of interest directly using a finger. He didn&amp;#8217;t modify his slides during the session by writing on them, but that would also have been possible.
&lt;/p&gt;
&lt;p&gt;In a supreme example of dogfood consumption, a couple of years after publishing Surreal Numbers Knuth took a rather longer break from TAOCP to work on &lt;a href="http://en.wikipedia.org/wiki/TeX"&gt;TeX&lt;/a&gt;, a typesetting system whose results match the beauty of his writing.
&lt;/p&gt;
&lt;p style="text-align:center"&gt;&amp;sect;&lt;/p&gt;

&lt;blockquote&gt;&lt;p&gt;&amp;#8230; You get surreal numbers by playing games. I used to feel guilty in Cambridge that I spent all day playing games, while I was supposed to be doing mathematics. Then, when I discovered surreal numbers, I realized that playing games IS mathematics. &amp;#8212; &lt;a href="http://www.gap-system.org/~history/Quotations/Conway.html"&gt;John Horton Conway&lt;/a&gt;
&lt;/p&gt;
&lt;/blockquote&gt;&lt;hr /&gt;

&lt;p&gt;&lt;a id="fn1" href="http://wordaligned.org/articles/undogfooding#fn1link"&gt;[1]&lt;/a&gt; In fact, he&amp;#8217;d lost the napkin before his stay in the hotel in Oslo, which explains the difference between the axioms used in Surreal Numbers and the ones originally suggested by John Horton Conway.
&lt;/p&gt;</description>
<dc:date>2009-07-08</dc:date>
<guid>http://wordaligned.org/articles/undogfooding</guid>
<author>tag@wordaligned.org (Thomas Guest)</author>
<link>http://wordaligned.org/articles/undogfooding</link>
<category>Drawing</category>
</item>

<item>
<title>Distorted Software</title>
<description>&lt;div class="toc"&gt;
&lt;h2&gt;Contents&lt;/h2&gt;
&lt;ul&gt;
 &lt;li&gt;&lt;a href="http://wordaligned.org/articles/distorted-software#tochelicopter-view" name="toc0" id="toc0"&gt;Helicopter View&lt;/a&gt;
 &lt;/li&gt;

 &lt;li&gt;&lt;a href="http://wordaligned.org/articles/distorted-software#tocquick-pictures" name="toc1" id="toc1"&gt;Quick pictures&lt;/a&gt;
 &lt;/li&gt;

 &lt;li&gt;&lt;a href="http://wordaligned.org/articles/distorted-software#tocdependencies" name="toc2" id="toc2"&gt;Dependencies&lt;/a&gt;
 &lt;/li&gt;

 &lt;li&gt;&lt;a href="http://wordaligned.org/articles/distorted-software#toclines-and-arrows" name="toc3" id="toc3"&gt;Lines and Arrows&lt;/a&gt;
 &lt;/li&gt;

 &lt;li&gt;&lt;a href="http://wordaligned.org/articles/distorted-software#tocdistorted-pictures" name="toc4" id="toc4"&gt;Distorted pictures&lt;/a&gt;
 &lt;/li&gt;

 &lt;li&gt;&lt;a href="http://wordaligned.org/articles/distorted-software#tocsensory-homunculus" name="toc5" id="toc5"&gt;Sensory Homunculus&lt;/a&gt;
 &lt;/li&gt;

 &lt;li&gt;&lt;a href="http://wordaligned.org/articles/distorted-software#tocapplication-in-proportion" name="toc6" id="toc6"&gt;Application in Proportion&lt;/a&gt;
 &lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;&lt;p&gt;&lt;a href="http://piclib.nhm.ac.uk/results.asp?image=041490" title="Sensory homunculus"&gt;&lt;img src="http://wordaligned.org/images/sensory-homunculus.jpg" alt="Sensory homunculus"/&gt;&lt;/a&gt;
&lt;/p&gt;

&lt;h3&gt;&lt;a href="http://wordaligned.org/articles/distorted-software#toc0" name="tochelicopter-view" id="tochelicopter-view"&gt;Helicopter View&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Recently I&amp;#8217;ve been helping scope a project to develop a new Product. In an Agile world &lt;a href="http://c2.com/xp/BigDesignUpFront.html"&gt;big design up front&lt;/a&gt; may be frowned-upon, but commercial reality requires some idea of costs from the outset. You need to plan, to size up the job. You must somehow answer the question: &lt;strong&gt;What will the software for this Product look like?&lt;/strong&gt;
&lt;/p&gt;
&lt;p&gt;&lt;a href="http://www.google.com/enterprise/gsa/"&gt;&lt;img src="http://www.google.co.uk/enterprise/gsa/images/GSA_beautyshot.jpg" alt="Google search appliance, with funky yellow chassis"/&gt;&lt;/a&gt;
&lt;/p&gt;
&lt;p&gt;I don&amp;#8217;t mean &amp;#8220;What does the UI look like?&amp;#8221; any more than I mean &amp;#8220;Will it have a funky yellow chassis?&amp;#8221; or even &amp;#8220;What will &lt;a href="http://vis.cs.ucdavis.edu/~ogawa/codeswarm/"&gt;source tree look like&lt;/a&gt;?&amp;#8221;. 
&lt;/p&gt;
&lt;p&gt;&lt;object width="400" height="302"&gt;&lt;param name="allowfullscreen" value="true" /&gt;&lt;param name="allowscriptaccess" value="always" /&gt;&lt;param name="movie" value="http://www.vimeo.com/moogaloop.swf?clip_id=1093745&amp;amp;server=www.vimeo.com&amp;amp;show_title=1&amp;amp;show_byline=1&amp;amp;show_portrait=0&amp;amp;color=&amp;amp;fullscreen=1" /&gt;&lt;embed src="http://www.vimeo.com/moogaloop.swf?clip_id=1093745&amp;amp;server=www.vimeo.com&amp;amp;show_title=1&amp;amp;show_byline=1&amp;amp;show_portrait=0&amp;amp;color=&amp;amp;fullscreen=1" type="application/x-shockwave-flash" allowfullscreen="true" allowscriptaccess="always" width="400" height="302"&gt;&lt;/embed&gt;&lt;/object&gt;
&lt;/p&gt;
&lt;p&gt;I&amp;#8217;m talking about something less easy to visualise:
&lt;/p&gt;
&lt;ul&gt;
 &lt;li&gt;
     what will the main components be?
 &lt;/li&gt;

 &lt;li&gt;
     how do they connect?
 &lt;/li&gt;

 &lt;li&gt;
     how big are they?
 &lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;So, what exactly does a database look like? How about a web server? Or a message queue? A state machine?
&lt;/p&gt;
&lt;span id="continue-reading"/&gt;


&lt;h3&gt;&lt;a href="http://wordaligned.org/articles/distorted-software#toc1" name="tocquick-pictures" id="tocquick-pictures"&gt;Quick pictures&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;I have my own shorthand for depicting all of these things. I&amp;#8217;m aware of more formal visual languages which aim to define software designs for programmers, much as circuit diagrams do for electricians, but I&amp;#8217;ve resisted learning these languages. For me, the act of making the drawing is a large part of what the drawing communicates. A frozen snapshot only tells half the story.
&lt;/p&gt;
&lt;img src="http://wordaligned.org/images/pipe-and-onion.png" alt="Pipeline and Onion"/&gt;

&lt;p&gt;For our planning exercise we needed a picture of the software. Something simple, archetypal even, like the Pipeline or the Onion, would have been nice, but a few hours at the whiteboard left us looking at something more typical, the Application.
&lt;/p&gt;
&lt;img src="http://wordaligned.org/images/application.png" alt="Application"/&gt;

&lt;p&gt;As a basis for ongoing discussion and design this picture works. It&amp;#8217;s expressive and flexible, and, by uniting my favourite drawing tools (pencil and paper/white board and marker) with my favourite digital imaging tools (a scanner/digital camera) and my favourite project management tool (a &lt;a href="http://trac.edgewall.org"&gt;wiki&lt;/a&gt;), we can create a visual record of the evolving design.
&lt;/p&gt;
&lt;p&gt;For planning purposes, though, such pictures can be dangerously misleading. If you want to know how many people you&amp;#8217;ll need and how long it will take them, you&amp;#8217;d be inclined to focus on the blocks &amp;#8212; the closed shapes on the picture. Won&amp;#8217;t the total effort just be the total area of all the blocks?
&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;No! It won&amp;#8217;t.&lt;/strong&gt;
&lt;/p&gt;

&lt;h3&gt;&lt;a href="http://wordaligned.org/articles/distorted-software#toc2" name="tocdependencies" id="tocdependencies"&gt;Dependencies&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;For one thing, there&amp;#8217;s the issue of dependencies: the UI depends on the Engine, which in turns depends on the Database, which needs a License Key, requiring a Signature, waiting on a Person, who&amp;#8217;s on holiday etc. At this point the Project Manager steps in and turns our simple diagram into an ugly &lt;a href="http://en.wikipedia.org/wiki/Gantt_chart"&gt;Gantt chart&lt;/a&gt;.
&lt;/p&gt;
&lt;p&gt;&lt;a href="http://en.wikipedia.org/wiki/Gantt_chart"&gt;&lt;img src="http://upload.wikimedia.org/wikipedia/commons/thumb/e/e2/GanttChartAnatomy.png/300px-GanttChartAnatomy.png" alt="Gant chart"/&gt;&lt;/a&gt;
&lt;/p&gt;
&lt;p&gt;I consider a Gantt chart a poor way to visualise a project. It&amp;#8217;s brittle, complicated and expensive to maintain. Driving the associated planning software seems a black art. The only good thing about Gantt charts is a side-effect: generating one requires a bit of thought. You have to think how you&amp;#8217;ll transform your Application design into a working Product. Maybe then, just maybe, you&amp;#8217;ll realise the important tasks &amp;#8212; the biggest horizontal bars on the chart &amp;#8212; do not correspond directly to the block shapes on the picture.
&lt;/p&gt;

&lt;h3&gt;&lt;a href="http://wordaligned.org/articles/distorted-software#toc3" name="toclines-and-arrows" id="toclines-and-arrows"&gt;Lines and Arrows&lt;/a&gt;&lt;/h3&gt;
&lt;img style="float:right;" width="30%" src="http://wordaligned.org/images/application.png" alt="Application"/&gt;

&lt;p&gt;Those slender lines and arrows on our Application diagram take time. The bulk of the work will not be developing the boxes, bubbles and circles; connecting them up might take as long again, or, more likely, ten times as long again. There are interfaces to design, protocols to code up, error conditions to handle. 
&lt;/p&gt;
&lt;p&gt;Bugs in individual components are, by definition, easy to isolate, making them straightforward to squash. Combining these same components makes the defects harder to pin-down, let alone fix. It&amp;#8217;s almost impossible to estimate the time required to fix integration issues.
&lt;/p&gt;
&lt;p&gt;The most dangerous mistake of all occurs when we already have some of the components, ready to pull down from the shelf. The argument goes: we have the Database, we have the Server, we can adapt the Engine, bolt on a new Interface, so the Product is nothing more than a software plumbing task. How long can it take?
&lt;/p&gt;

&lt;h3&gt;&lt;a href="http://wordaligned.org/articles/distorted-software#toc4" name="tocdistorted-pictures" id="tocdistorted-pictures"&gt;Distorted pictures&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;I suggest the problem stems, in part, from using a design picture too literally&lt;a id="fn1link" href="http://wordaligned.org/articles/distorted-software#fn1"&gt;&lt;sup&gt;[1]&lt;/sup&gt;&lt;/a&gt; as a planning picture. We need a representation which distorts our original picture to properly emphasise interfaces, connections, protocols, integration.
&lt;/p&gt;
&lt;p&gt;&lt;img src="http://wordaligned.org/images/tube-map-w.png" alt="Tube Map" style="align:top;"/&gt;&lt;img style="align:top;" src="http://maps.google.com/staticmap?center=51.511048,-0.138819&amp;amp;zoom=12&amp;amp;size=250x300&amp;amp;key=ABQIAAAA4XbHXQGTml12zwtM4CjICxTeGXmhp-edP41sIKC3sS2f11di4hR0EgBH_NoVBpYYYf9smXsm4QKQzw" alt="Central London Streetmap"/&gt;
&lt;/p&gt;
&lt;p&gt;The &lt;a href="http://journeyplanner.tfl.gov.uk/im/SI-T.html"&gt;London Underground map&lt;/a&gt; is one famous visual distortion. When you want to travel from, say, &lt;a href="http://www.londontoolkit.com/whattodo/southkensingtonmuseums.htm"&gt;South Kensington&lt;/a&gt; to &lt;a href="http://en.wikipedia.org/wiki/Mornington_Crescent_(game)"&gt;Mornington Crescent&lt;/a&gt;, you need to know which train to take, for how many stops, then which train to change to, and so on. That is: you care about topology rather than geography, and the tube map gets the emphasis right. A street map doesn&amp;#8217;t help much and a visually accurate satellite photo would be almost useless.
&lt;/p&gt;
&lt;img src="http://www.bbc.co.uk/london/content/images/2006/01/13/west_470x321.jpg" alt="Satellite Map of London"/&gt;


&lt;h3&gt;&lt;a href="http://wordaligned.org/articles/distorted-software#toc5" name="tocsensory-homunculus" id="tocsensory-homunculus"&gt;Sensory Homunculus&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;&lt;a href="http://piclib.nhm.ac.uk/results.asp?image=041490" title="Sensory homunculus"&gt;&lt;img width="40%" style="float:right" src="http://wordaligned.org/images/sensory-homunculus.jpg" alt="Sensory homunculus"/&gt;&lt;/a&gt;
&lt;/p&gt;
&lt;p&gt;Another famous distortion, the &lt;a href="http://en.wikipedia.org/wiki/Homunculus"&gt;sensory homunculus&lt;/a&gt;, appears at the top of this page and in miniature here. The image is hosted by the &lt;a href="http://piclib.nhm.ac.uk/results.asp?image=041490"&gt;Natural History Museum&amp;#8217;s online picture library&lt;/a&gt;, with the explanation:
&lt;/p&gt;
&lt;blockquote&gt;&lt;p&gt;This model shows what a man&amp;#8217;s body would look like if each part grew in proportion to the area of the cortex of the brain concerned with its sensory perception.
&lt;/p&gt;
&lt;/blockquote&gt;&lt;p&gt;Or, as &lt;a href="http://en.wikipedia.org/wiki/Homunculus"&gt;Wikipedia&lt;/a&gt; puts it:
&lt;/p&gt;
&lt;blockquote&gt;&lt;p&gt;Well known in the field of neurology, this is also commonly called &amp;#8216;the little man inside the brain.&amp;#8217;
&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3&gt;&lt;a href="http://wordaligned.org/articles/distorted-software#toc6" name="tocapplication-in-proportion" id="tocapplication-in-proportion"&gt;Application in Proportion&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;So, what would our Application diagram look like if each component grew in proportion to the time taken to develop it? Maybe something like this:
&lt;/p&gt;
&lt;img src="http://wordaligned.org/images/distorted-application.png" alt="Distorted application"/&gt;

&lt;p&gt;The sensory homunculus is striking because we&amp;#8217;re all so highly attuned to what people really look like. The figure is instantly recognisable as human but the proportions diverge so radically from what we expect &amp;#8212; from what we &lt;em&gt;know&lt;/em&gt; &amp;#8212; that we&amp;#8217;re forced to look again. A simple image constructed by applying a logical rule can change the way we look at ourselves.
&lt;/p&gt;
&lt;p&gt;Having no such feelings for software, surely we can change our pictures to suit? 
&lt;/p&gt;
&lt;p&gt;I don&amp;#8217;t pretend this final picture, with its fat orange arrows, makes a great planning aid, but perhaps it may help us look afresh at our estimates.
&lt;/p&gt;
&lt;hr /&gt;

&lt;p&gt;There are techniques to reduce the overheads and risks I discuss in this article, but I&amp;#8217;ll save them for another time. Even if careful planning and execution can shrink the arrows down to a more comfortable size, I still maintain connections take longer than blocks. I would be interested to know of any software architecture diagrams which show this clearly.
&lt;/p&gt;
&lt;p&gt;&lt;a id="fn1" href="http://wordaligned.org/articles/distorted-software#fn1link"&gt;[1]&lt;/a&gt; Literally means &amp;#8220;as read&amp;#8221;. Its root meaning has to do with words and text. Is there an equivalent for &amp;#8220;as seen&amp;#8221;?
&lt;/p&gt;</description>
<dc:date>2008-07-23</dc:date>
<guid>http://wordaligned.org/articles/distorted-software</guid>
<author>tag@wordaligned.org (Thomas Guest)</author>
<link>http://wordaligned.org/articles/distorted-software</link>
<category>Drawing</category>
</item>

<item>
<title>Scatter pictures with Google Charts</title>
<description>&lt;p&gt;In a recent &lt;a href="http://www.mattcutts.com/blog/pacman-graph-in-google-chart-api/"&gt;post on his blog&lt;/a&gt; Matt Cutts asks:
&lt;/p&gt;
&lt;blockquote&gt;&lt;p&gt;I almost wanted to call this post &amp;#8220;Stupid Google Tricks&amp;#8221; :-) What fun diagrams can you imagine making with the &lt;a href="http://code.google.com/apis/chart/"&gt;Google Charts Service&lt;/a&gt;?
&lt;/p&gt;
&lt;/blockquote&gt;&lt;p&gt;Here&amp;#8217;s a stupid trick: you can use the &lt;a href="http://www.pythonware.com/library/pil/handbook/"&gt;Python Imaging Library&lt;/a&gt; to convert a picture into a URL which &lt;a href="http://code.google.com/apis/chart/"&gt;Google charts&lt;/a&gt; will render as the original picture.
&lt;/p&gt;
&lt;p&gt;Here&amp;#8217;s the original picture:
&lt;/p&gt;
&lt;img src="http://wordaligned.org/images/buttons/spider-bw-61.png" alt="Spider"/&gt;

&lt;p&gt;here&amp;#8217;s the version served up by Google charts:
&lt;/p&gt;
&lt;img src="http://chart.apis.google.com/chart?cht=s&amp;amp;chd=s:DDEEEEEEEEEEEEEFFFFFFFFFFFFFFGGGGGGGGGGGGHHHHHHHHHHHHHHIIIIIIIIIIIIIIIIIJJJJJJJJJJJJJJJKKKKKKKKKKLLLLLLLMMMMMMMMNNNNNNNNNNNNNNOOOOOOOOOOOOOOOOOOOOOOOOOPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQRRRRRRRRRRRRRRRRRRRSSSSSSSSSSSSSSSSSSSSTTTTTTTTTTTTTTTTTTUUUUUUUUUUUUUUUUUVVVVVVVVVVVVVVVVVWWWWWWWWWWWWWWWWWWWWWXXXXXXXXXXXXXXXXXXXXXXXXYYYYYYYYYYYYYYYYYYYYYYYYYYZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaabbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbccccccccccccccccccccccccccddddddddddddddddddddeeeeeeeeeeeeeeeeeeeeeeeefffffffffffffffffffgggggggggggggggghhhhhhhhhhhhhhhhhhhhiiiiiiiiiiiiiiiiiiiiijjjjjjjjjjjjjjjjjjjjjjjjjkkkkkkkkkkkkkkkkkkkkklllllllllllllllllllmmmmmmmmmmmmmmmmmmmmmnnnnnnnnnnnnnnnnnnnnoooooooooooooooooppppppppppppppppppqqqqqqqqqqqqqqqqqqqqrrrrrrrrrrrrrrrrrssssssssssssssssssssttttttttttttttttuuuuuuuuuuuuuuuuvvvvvvvvvvvvvwwwwwwwxxxxxxxyyyyyyyyzzzzzzzzzzzzzzz00000000000000111111111111111122222222222222333333333333444444444555556666777,YWaZYXWVUTSRQPObaZYXWVUTSRQPOsdcbaZUTSRQPutsrqplkjidcbavutsrqponmlkjiedcwvuqponmlkjihdcxwvonjihdcxwjihdcyxjihdcRzjihdcTSRQPNJHihgdcbaZYUTSRQPONMLKJIHGFtsrjihgfedcbaZYXWVUTSONMLKJIHGFEDvutsrqihgfedcbaZYXWVUTKIHGFEDCvutqpmlihgfedcWVUTSwvponmlkjihgfedVUTSRvqponmlkjihedcTSRQrqponmlkjihedSRQPsrqponmlkjedRQPOLysrqponmlkjdcRQPONMLKyxtsrqponmlkdcSRQPONMLKJyxtsrqponmldcbUTSRQPONMLKJyxtsrqponmlihgfedcbaZWVUTSPONMKJIyxwtsrqponmljihgfedcbaZYXWVUTPONJIHxwvutsrqponmkjihgfedcbaZYXWVUONMJIHGvusrqponmlkjifedcbZXONIHGFsrqponmlkjedcONMHGFE65432rqponmlkjedcONMGFED3210qponmlkjiedcONE10nmlkjigfedPONM0zonmlkjihgfedYXVPON0zonmjihgfeZYXWVUTPON0zqponmlihgfaZYXWVUTSRQPO0zyrqpnmlbaZYVUTSRQPOzytsrqpmlkcbaZTSRQPzyxwvutsrqmlkjcbaTSRQyxwvutsnmlkjicbUTSRQponmlkjihdcbWVUTSqponjihgdcbZYXWVUTrqponjihgfedcbaZYXWVsrqpjihgfedcbaZYXsrqjifedcbaZYXTSRQPOsrkjYXWVUTSRQPONsrkjYXWVUTSQPONMsrqkjXWVUONMLsrqkjihsrqkjihsrqjihgVsrqihgfZYXWVUTSsrqhgfeaZYXWVUsrqpogfedcbaZYXWsrqponfedcbaZYrqponmedcbaZonmlkedcbmlkdclkjijih&amp;amp;chm=s,000000,1,2.0,3.0,0&amp;amp;chs=186x186" alt="Google Chart Spider"/&gt;

&lt;p&gt;here&amp;#8217;s the code:
&lt;/p&gt;
&lt;div class="typocode"&gt;

&lt;pre class="prettyprint"&gt;import Image
import string

def scatter_pixels(img_file):
    """Return the URL of a scatter plot of the supplied image
    
    The image will be rendered square and black on white. Adapt the
    code if you want something else.
    """
    # Use simple chart encoding. To make things really simple
    # use a square image where each X or Y position corresponds
    # to a single encode value.
    simple = string.uppercase + string.lowercase + string.digits
    rsimple = simple[::-1] # Google charts Y reverses PIL Y
    w = len(simple)
    W = w * 3
    img = Image.open(img_file).resize((w, w)).convert("1")
    pels = img.load()
    black_pels = [(x, y) for x in range(w) for y in range(w)
                  if pels[x, y] == 0]
    xs = "".join(simple[x] for x, _ in black_pels)
    ys = "".join(rsimple[y] for _, y in black_pels)
    sqside = 3.0
    return (
        "http://chart.apis.google.com/chart?"
        "cht=s&amp;amp;"                          # Draw a scatter graph
        "chd=s:%(xs)s,%(ys)s&amp;amp;"            # using simple encoding and
        "chm=s,000000,1,2.0,%(sqside)r,0&amp;amp;"# square black markers
        "chs=%(W)rx%(W)r"                 # at this size.
        ) % locals()

&lt;/pre&gt;

&lt;/div&gt;

&lt;p&gt;and here&amp;#8217;s the url it generates:
&lt;/p&gt;
&lt;p&gt;&lt;a href="http://chart.apis.google.com/chart?cht=s&amp;amp;chd=s:DDEEEEEEEEEEEEEFFFFFFFFFFFFFFGGGGGGGGGGGGHHHHHHHHHHHHHHIIIIIIIIIIIIIIIIIJJJJJJJJJJJJJJJKKKKKKKKKKLLLLLLLMMMMMMMMNNNNNNNNNNNNNNOOOOOOOOOOOOOOOOOOOOOOOOOPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQRRRRRRRRRRRRRRRRRRRSSSSSSSSSSSSSSSSSSSSTTTTTTTTTTTTTTTTTTUUUUUUUUUUUUUUUUUVVVVVVVVVVVVVVVVVWWWWWWWWWWWWWWWWWWWWWXXXXXXXXXXXXXXXXXXXXXXXXYYYYYYYYYYYYYYYYYYYYYYYYYYZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaabbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbccccccccccccccccccccccccccddddddddddddddddddddeeeeeeeeeeeeeeeeeeeeeeeefffffffffffffffffffgggggggggggggggghhhhhhhhhhhhhhhhhhhhiiiiiiiiiiiiiiiiiiiiijjjjjjjjjjjjjjjjjjjjjjjjjkkkkkkkkkkkkkkkkkkkkklllllllllllllllllllmmmmmmmmmmmmmmmmmmmmmnnnnnnnnnnnnnnnnnnnnoooooooooooooooooppppppppppppppppppqqqqqqqqqqqqqqqqqqqqrrrrrrrrrrrrrrrrrssssssssssssssssssssttttttttttttttttuuuuuuuuuuuuuuuuvvvvvvvvvvvvvwwwwwwwxxxxxxxyyyyyyyyzzzzzzzzzzzzzzz00000000000000111111111111111122222222222222333333333333444444444555556666777,YWaZYXWVUTSRQPObaZYXWVUTSRQPOsdcbaZUTSRQPutsrqplkjidcbavutsrqponmlkjiedcwvuqponmlkjihdcxwvonjihdcxwjihdcyxjihdcRzjihdcTSRQPNJHihgdcbaZYUTSRQPONMLKJIHGFtsrjihgfedcbaZYXWVUTSONMLKJIHGFEDvutsrqihgfedcbaZYXWVUTKIHGFEDCvutqpmlihgfedcWVUTSwvponmlkjihgfedVUTSRvqponmlkjihedcTSRQrqponmlkjihedSRQPsrqponmlkjedRQPOLysrqponmlkjdcRQPONMLKyxtsrqponmlkdcSRQPONMLKJyxtsrqponmldcbUTSRQPONMLKJyxtsrqponmlihgfedcbaZWVUTSPONMKJIyxwtsrqponmljihgfedcbaZYXWVUTPONJIHxwvutsrqponmkjihgfedcbaZYXWVUONMJIHGvusrqponmlkjifedcbZXONIHGFsrqponmlkjedcONMHGFE65432rqponmlkjedcONMGFED3210qponmlkjiedcONE10nmlkjigfedPONM0zonmlkjihgfedYXVPON0zonmjihgfeZYXWVUTPON0zqponmlihgfaZYXWVUTSRQPO0zyrqpnmlbaZYVUTSRQPOzytsrqpmlkcbaZTSRQPzyxwvutsrqmlkjcbaTSRQyxwvutsnmlkjicbUTSRQponmlkjihdcbWVUTSqponjihgdcbZYXWVUTrqponjihgfedcbaZYXWVsrqpjihgfedcbaZYXsrqjifedcbaZYXTSRQPOsrkjYXWVUTSRQPONsrkjYXWVUTSQPONMsrqkjXWVUONMLsrqkjihsrqkjihsrqjihgVsrqihgfZYXWVUTSsrqhgfeaZYXWVUsrqpogfedcbaZYXWsrqponfedcbaZYrqponmedcbaZonmlkedcbmlkdclkjijih&amp;amp;chm=s,000000,1,2.0,3.0,0&amp;amp;chs=186x186"&gt;http://chart.apis.google.com/chart?cht=s&amp;amp;chd=s:DDEEEEEEE&amp;#8230;&amp;amp;chs=186x186&lt;/a&gt;
&lt;/p&gt;
&lt;hr /&gt;

&lt;p style="font-size:75%"&gt;&lt;strong&gt;Smallprint&lt;/strong&gt;. Google charts may return a 400 error for an image with a long URL (meaning lots of black pixels in this case). The upper limit on URL length doesn&amp;#8217;t seem to be &lt;a href="http://code.google.com/apis/chart/"&gt;documented&lt;/a&gt; but a quick &lt;a href="http://groups.google.com/group/google-chart-api/search?group=google-chart-api&amp;amp;q=url+length&amp;amp;qt_g=Search+this+group"&gt;trawl through topics on the google charts group&lt;/a&gt; suggests others have bumped into it too. Connoisseurs of whacky pictures should pay &lt;a href="http://www.romancortes.com/blog/homer-css/"&gt;CSS Homer Simpson&lt;/a&gt; a visit.&lt;/p&gt;</description>
<dc:date>2008-04-25</dc:date>
<guid>http://wordaligned.org/articles/scatter-pictures-with-google-charts</guid>
<author>tag@wordaligned.org (Thomas Guest)</author>
<link>http://wordaligned.org/articles/scatter-pictures-with-google-charts</link>
<category>Drawing</category>
</item>

<item>
<title>Drawing Chessboards</title>
<description>&lt;div class="toc"&gt;
&lt;h2&gt;Contents&lt;/h2&gt;
&lt;ul&gt;
 &lt;li&gt;&lt;a href="http://wordaligned.org/articles/drawing-chessboards#tocthe-python-imaging-library" name="toc0" id="toc0"&gt;The Python Imaging Library&lt;/a&gt;
 &lt;/li&gt;

 &lt;li&gt;&lt;a href="http://wordaligned.org/articles/drawing-chessboards#tocimagemagick" name="toc1" id="toc1"&gt;ImageMagick&lt;/a&gt;
 &lt;/li&gt;

 &lt;li&gt;&lt;a href="http://wordaligned.org/articles/drawing-chessboards#tocgoogle-chart-api" name="toc2" id="toc2"&gt;Google Chart API&lt;/a&gt;
 &lt;/li&gt;

 &lt;li&gt;&lt;a href="http://wordaligned.org/articles/drawing-chessboards#tocascii-text" name="toc3" id="toc3"&gt;ASCII Text&lt;/a&gt;
 &lt;/li&gt;

 &lt;li&gt;&lt;a href="http://wordaligned.org/articles/drawing-chessboards#tocunicode-block-elements" name="toc4" id="toc4"&gt;Unicode Block Elements&lt;/a&gt;
 &lt;/li&gt;

 &lt;li&gt;&lt;a href="http://wordaligned.org/articles/drawing-chessboards#tocand-more" name="toc5" id="toc5"&gt;And more&lt;/a&gt;
 &lt;/li&gt;

 &lt;li&gt;&lt;a href="http://wordaligned.org/articles/drawing-chessboards#tocwhy" name="toc6" id="toc6"&gt;Why?&lt;/a&gt;
 &lt;/li&gt;

 &lt;li&gt;&lt;a href="http://wordaligned.org/articles/drawing-chessboards#tocteaser" name="toc7" id="toc7"&gt;Teaser&lt;/a&gt;
 &lt;/li&gt;

 &lt;li&gt;&lt;a href="http://wordaligned.org/articles/drawing-chessboards#tocthanks" name="toc8" id="toc8"&gt;Thanks&lt;/a&gt;
 &lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;&lt;p&gt;I wanted a picture of a chessboard. Rather than boot up some drawing software and cut and paste black and white squares I decided to write a program to create the picture.
&lt;/p&gt;
&lt;p&gt;If you&amp;#8217;d like to know &lt;strong&gt;why&lt;/strong&gt; anyone would ever create work for themselves in this way, skip to the end of this article, where you&amp;#8217;ll find justification and a more challenging &lt;a href="http://wordaligned.org/articles/drawing-chessboards.html#why"&gt;follow-on problem&lt;/a&gt;. Otherwise, please read on from top to bottom in the usual way.
&lt;/p&gt;

&lt;h3&gt;&lt;a href="http://wordaligned.org/articles/drawing-chessboards#toc0" name="tocthe-python-imaging-library" id="tocthe-python-imaging-library"&gt;The Python Imaging Library&lt;/a&gt;&lt;/h3&gt;
&lt;img style="border-style:double;" src="http://wordaligned.org/images/chessboard-pil.png" alt="Chessboard created by PIL"/&gt;

&lt;p&gt;Fredrik Lundh&amp;#8217;s &lt;a href="http://effbot.org/imagingbook/pil-index.htm"&gt;Python Imaging Library&lt;/a&gt; (commonly known as &lt;a href="http://effbot.org/imagingbook/pil-index.htm"&gt;PIL&lt;/a&gt;) must surely rank as one of the most popular Python libraries which doesn&amp;#8217;t come as standard&lt;sup&gt;&lt;a id="fn1link" href="http://wordaligned.org/articles/drawing-chessboards.html#fn1"&gt;[1]&lt;/a&gt;&lt;/sup&gt;. It&amp;#8217;s a fabulous tool which I&amp;#8217;ve used to create the graphic above (though note that the double border around this graphic and subsequent ones is applied by a CSS style property). Here&amp;#8217;s how.
   &lt;span id="continue-reading"/&gt;
&lt;/p&gt;
&lt;div class="typocode"&gt;&lt;div class="codetitle"&gt;PIL chessboard&lt;/div&gt;

&lt;pre class="prettyprint"&gt;def draw_chessboard(n=8, pixel_width=200):
    "Draw an n x n chessboard using PIL."
    import Image, ImageDraw
    from itertools import cycle
    def sq_start(i):
        "Return the x/y start coord of the square at column/row i."
        return i * pixel_width / n
    
    def square(i, j):
        "Return the square corners, suitable for use in PIL drawings" 
        return map(sq_start, [i, j, i + 1, j + 1])
    
    image = Image.new("L", (pixel_width, pixel_width))
    draw_square = ImageDraw.Draw(image).rectangle
    squares = (square(i, j)
               for i_start, j in zip(cycle((0, 1)), range(n))
               for i in range(i_start, n, 2))
    for sq in squares:
        draw_square(sq, fill='white')
    image.save("chessboard-pil.png")

&lt;/pre&gt;

&lt;/div&gt;

&lt;p&gt;Note:
&lt;/p&gt;
&lt;ul&gt;
 &lt;li&gt;
     We don&amp;#8217;t draw any black squares, instead relying on the default image background being black.
 &lt;/li&gt;

 &lt;li&gt;
     The &amp;#8220;L&amp;#8221; image type (Luminance?) specifies a greyscale image.
 &lt;/li&gt;

 &lt;li&gt;
     PIL adopts the usual raster graphics convention, of the origin being in the top-left corner.
 &lt;/li&gt;

 &lt;li&gt;
     As we progress &lt;strong&gt;down&lt;/strong&gt; the board row by row, the first white square alternates between being the first and second square of each row. &lt;code&gt;Itertools.cycle((0, 1))&lt;/code&gt; achieves this nicely. 
 &lt;/li&gt;

 &lt;li&gt;
     A regular 8 x 8 chessboard will, then, have a black square at the bottom left, which is the usual convention. For odd values of n the bottom-left square would be white.
 &lt;/li&gt;

 &lt;li&gt;
     There may be rounding problems with this code if the supplied pixel width isn&amp;#8217;t an integral multiple of &lt;code&gt;n&lt;/code&gt;. It&amp;#8217;s probably better to guarantee the image size, rather than round down the board size.
 &lt;/li&gt;

 &lt;li&gt;
     It would be better to parametrise the output file name, or even return the created image to clients. For now, we&amp;#8217;ll just save to a fixed-name PNG.
 &lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;&lt;a href="http://wordaligned.org/articles/drawing-chessboards#toc1" name="tocimagemagick" id="tocimagemagick"&gt;ImageMagick&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;PIL is a general purpose image processing library and it takes a little head-scratching and maths before we can even create something as simple as a chessboard. &lt;a href="http://www.imagemagick.org/script/index.php"&gt;ImageMagick&lt;/a&gt; provides tools to perform a similar job from the command-line, making the chessboard a one-liner.
&lt;/p&gt;
&lt;div class="typocode"&gt;&lt;div class="codetitle"&gt;ImageMagick chessboard&lt;/div&gt;

&lt;pre class="prettyprint"&gt;$ N=8
$ PIXEL_WIDTH=200
$ convert -size $((N*15))x$((N*15)) pattern:checkerboard \
  -monochrome -resize $PIXEL_WIDTH chessboard-magick.png

&lt;/pre&gt;

&lt;/div&gt;

&lt;img style="border-style:double;float:right;margin-left:4px;" src="http://wordaligned.org/images/chessboard-magick.png" alt="Chessboard created by ImageMagick"/&gt;

&lt;p&gt;Here, the checkerboard pattern is an ImageMagick built-in which, inspecting its output, happens to generate 15x15 squares (hence the 15&amp;#8217;s in the script above). The &lt;code&gt;-monochrome&lt;/code&gt; filter renders the pattern in black and white, rather than its native light- on dark-grey. The &lt;code&gt;-size&lt;/code&gt; and &lt;code&gt;-resize&lt;/code&gt; parameters should need no further explanation. The ((double parentheses)) perform Bash shell arithmetic.
&lt;/p&gt;
&lt;p&gt;&lt;a href="http://www.imagemagick.org/script/index.php"&gt;ImageMagick&lt;/a&gt; masquerades as a shell tool but really it&amp;#8217;s a powerful and fully featured programmer&amp;#8217;s imaging tool &amp;#8212; a bit like a command-line version of &lt;a href="http://www.gimp.org"&gt;Gimp&lt;/a&gt;&lt;a id="fn2link" href="http://wordaligned.org/articles/drawing-chessboards#fn2"&gt;&lt;sup&gt;[2]&lt;/sup&gt;&lt;/a&gt;. Although well documented, my gut reaction is that it pushes the command-line interface too far. For more advanced image mangling, you&amp;#8217;ll probably need a program to generate the one-liner needed to drive &lt;code&gt;convert&lt;/code&gt;. Despite this reservation, it does the simple things simply, and it can do complex things too. Recommended!
&lt;/p&gt;

&lt;h3&gt;&lt;a href="http://wordaligned.org/articles/drawing-chessboards#toc2" name="tocgoogle-chart-api" id="tocgoogle-chart-api"&gt;Google Chart API&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;For a bit of fun, we can persuade Google to render the chessboard for us &amp;#8212; in this case as a scatter plot using a square black markers&lt;a id="fn3link" href="http://wordaligned.org/articles/drawing-chessboards#fn3"&gt;&lt;sup&gt;[3]&lt;/sup&gt;&lt;/a&gt;. We flip the PIL processing around, drawing black squares on the (default) white background, and using the usual plotting convention which places the origin at the bottom left.
&lt;/p&gt;
&lt;div class="typocode"&gt;&lt;div class="codetitle"&gt;Google chart chessboard&lt;/div&gt;

&lt;pre class="prettyprint"&gt;def chessboard_url(n=8, pixel_width=200):
    "Returns the URL of a chessboard graphic."
    def sq_midpt(i):
        "Return the x/y midpt of a square in column/row i."
        # For text encoding, the graphic's logical width is 100
        return (0.5 + i) * 100. / n
    
    xys = [(sq_midpt(i), sq_midpt(j))
           for i_start, j in zip(cycle((0, 1)), range(n))
           for i in range(i_start, n, 2)]
    fields = dict(width=pixel_width, sqside=pixel_width/n,
                  xs=",".join("%.02f" % x for x, _ in xys),
                  ys=",".join("%.02f" % y for _, y in xys))
    return (
        "http://chart.apis.google.com/chart?"
        "cht=s&amp;amp;"                        # Draw a scatter graph
        "chd=t:%(xs)s|%(ys)s&amp;amp;"          # using text encoding and
        "chm=s,000000,1,2.0,%(sqside)r&amp;amp;"# square black markers
        "chs=%(width)rx%(width)r"       # at this size.
        ) % fields

&lt;/pre&gt;

&lt;/div&gt;

&lt;p&gt;Note that we plot our chart on a logical 100 x 100 rectangle, the coordinate space mandated by the encoding we&amp;#8217;ve chosen, then resize it to the physical dimensions supplied by the client.
&lt;/p&gt;
&lt;p&gt;This function actually returns the URL of a PNG which the &lt;a href="http://code.google.com/apis/chart/"&gt;Google chart API&lt;/a&gt; serves up. Paste this URL into your browser address bar to see the graphic, or curl it to a local file.
&lt;/p&gt;
&lt;p&gt;&lt;a href="http://chart.apis.google.com/chart?cht=s&amp;amp;chd=t:6.25,31.25,56.25,81.25,18.75,43.75,68.75,93.75,6.25,31.25,56.25,81.25,18.75,43.75,68.75,93.75,6.25,31.25,56.25,81.25,18.75,43.75,68.75,93.75,6.25,31.25,56.25,81.25,18.75,43.75,68.75,93.75|6.25,6.25,6.25,6.25,18.75,18.75,18.75,18.75,31.25,31.25,31.25,31.25,43.75,43.75,43.75,43.75,56.25,56.25,56.25,56.25,68.75,68.75,68.75,68.75,81.25,81.25,81.25,81.25,93.75,93.75,93.75,93.75&amp;amp;chm=s,000000,1,2.0,25.0&amp;amp;chs=200x200"&gt;http://chart.apis.google.com/chart?cht=s&amp;amp;chd=t:6.25,31.25&amp;#8230;&amp;amp;chs=200x200&lt;/a&gt;
&lt;/p&gt;
&lt;div class="typocode"&gt;

&lt;pre class="prettyprint"&gt;$ url=`python chessboard_url.py`
$ curl $url &amp;gt; chessboard.png

&lt;/pre&gt;

&lt;/div&gt;

&lt;p&gt;We could embed the image into HTML using the IMG element, which is how I&amp;#8217;ve embedded the image which you should see below.
&lt;/p&gt;
&lt;div class="typocode"&gt;

&lt;pre class="prettyprint"&gt;&amp;gt;&amp;gt;&amp;gt; from cgi import escape
&amp;gt;&amp;gt;&amp;gt; img = '&amp;lt;img src="%s" alt="chessboard graphic"/&amp;gt;'
&amp;gt;&amp;gt;&amp;gt; img % escape(chessboard_url())

&lt;/pre&gt;

&lt;/div&gt;

&lt;img src="http://chart.apis.google.com/chart?cht=s&amp;amp;chd=t:6.25,31.25,56.25,81.25,18.75,43.75,68.75,93.75,6.25,31.25,56.25,81.25,18.75,43.75,68.75,93.75,6.25,31.25,56.25,81.25,18.75,43.75,68.75,93.75,6.25,31.25,56.25,81.25,18.75,43.75,68.75,93.75|6.25,6.25,6.25,6.25,18.75,18.75,18.75,18.75,31.25,31.25,31.25,31.25,43.75,43.75,43.75,43.75,56.25,56.25,56.25,56.25,68.75,68.75,68.75,68.75,81.25,81.25,81.25,81.25,93.75,93.75,93.75,93.75&amp;amp;chm=s,000000,1,2.0,25.0&amp;amp;chs=200x200" alt="Chessboard chart" style="float:right;border-style:double;margin-left:4px;"/&gt;

&lt;p&gt;As you can see, we have plenty of options, but unfortunately the image itself isn&amp;#8217;t suitable. You can&amp;#8217;t get rid of the axes &amp;#8212; or at least, I haven&amp;#8217;t found a way to &amp;#8212; and the rendered chart has some padding to the top and the right. And worse, we&amp;#8217;re pretty much at the end of the line for this hack: if we wanted to do something more interesting, such as place pieces on the board, we&amp;#8217;re out of luck. 
&lt;/p&gt;
&lt;p&gt;Of course this isn&amp;#8217;t a flaw in the &lt;a href="http://code.google.com/apis/chart/"&gt;Google Chart API&lt;/a&gt;: we&amp;#8217;ve actually asked it to draw a scatter plot of the centres of black squares on a chessboard, using square black markers, a job it&amp;#8217;s done well enough. Some examples showing the proper use of Google charts can be found in an &lt;a href="http://wordaligned.org/articles/the-maximum-subsequence-problem.html"&gt;article I wrote about maximum sum subsequences&lt;/a&gt;.
&lt;/p&gt;

&lt;h3&gt;&lt;a href="http://wordaligned.org/articles/drawing-chessboards#toc3" name="tocascii-text" id="tocascii-text"&gt;ASCII Text&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;The chart URL might be considered a text encoding of the image; the actual graphic is returned by a server. There are other, more direct, textual representations.
&lt;/p&gt;
&lt;div class="typocode"&gt;&lt;div class="codetitle"&gt;ASCII art chessboard&lt;/div&gt;

&lt;pre class="prettyprint"&gt;def outer_join(sep, ss):
    """Like string.join, but encloses the result with outer separators.
    
    Example:
    &amp;gt;&amp;gt;&amp;gt; outer_join('|', ['1', '2', '3'])
    '|1|2|3|'
    """
    return "%s%s%s" % (sep, sep.join(ss), sep)
    
def ascii_chessboard(n=8):
    """Draws an ASCII art chessboard.
    
    Returns a string representation of an n x n board.
    """
    from itertools import islice, cycle
    divider = outer_join("+", "-" * n) + "\n"
    row0 = outer_join("|", islice(cycle(" B"), n)) + "\n"
    row1 = outer_join("|", islice(cycle("B "), n)) + "\n"
    return outer_join(divider, islice(cycle([row0, row1]), n))

&lt;/pre&gt;

&lt;/div&gt;

&lt;p&gt;I suspect this code was easier for me to write than it is for you to read! It treats the chessboard as a sequence of alternating rows of alternating squares, which are then joined together for output.
&lt;/p&gt;
&lt;div class="typocode"&gt;

&lt;pre class="prettyprint"&gt;&amp;gt;&amp;gt;&amp;gt; print ascii_chessboard(8)
+-+-+-+-+-+-+-+-+
| |B| |B| |B| |B|
+-+-+-+-+-+-+-+-+
|B| |B| |B| |B| |
+-+-+-+-+-+-+-+-+
| |B| |B| |B| |B|
+-+-+-+-+-+-+-+-+
|B| |B| |B| |B| |
+-+-+-+-+-+-+-+-+
| |B| |B| |B| |B|
+-+-+-+-+-+-+-+-+
|B| |B| |B| |B| |
+-+-+-+-+-+-+-+-+
| |B| |B| |B| |B|
+-+-+-+-+-+-+-+-+
|B| |B| |B| |B| |
+-+-+-+-+-+-+-+-+

&lt;/pre&gt;

&lt;/div&gt;

&lt;p&gt;Not pretty, but such graphics may be useful in source code, which is typically viewed in a plain-text editor, and where ASCII art provides a way of embedding pictures right where they&amp;#8217;re needed. 
&lt;/p&gt;
&lt;p&gt;On which point: if you&amp;#8217;re working through &amp;#8220;Structure and Interpretation of Computer Programs&amp;#8221; you may like to know the book is &lt;a href="http://www.neilvandyke.org/sicp-texi/"&gt;available in Texinfo format&lt;/a&gt;, with the pictures all rendered in ASCII art. So you can split your editor window and run the code on one side, while browsing the book on the other. Here&amp;#8217;s one of the figures:
&lt;/p&gt;
&lt;pre&gt;
*Figure 4.6:* The `or' combination of two queries is produced by
operating on the stream of frames in parallel and merging the
results.
    
            +---------------------------+
            |          (or A B)         |
            |    +---+                  |
 input      | +-&amp;gt;| A |------------+     |  output
 stream of  | |  +---+            V     |  stream of
 frames     | |    ^          +-------+ |  frames
 -------------*    |          | merge +---------------&amp;gt;
            | |    |          +-------+ |
            | |    |              ^     |
            | |    |   +---+      |     |
            | +-------&amp;gt;| B +------+     |
            |      |   +---+            |
            |      |     ^              |
            |      |     |              |
            |      +--*--+              |
            +---------|-----------------+
                      |
                  data base
&lt;/pre&gt;

&lt;p&gt;Even though I own a copy of the book and the &lt;a href="http://mitpress.mit.edu/sicp/full-text/book/book.html"&gt;full text is available on-line&lt;/a&gt;, this primitive info version has become my preferred format when actually running the code examples and exercises.
&lt;/p&gt;

&lt;h3&gt;&lt;a href="http://wordaligned.org/articles/drawing-chessboards#toc4" name="tocunicode-block-elements" id="tocunicode-block-elements"&gt;Unicode Block Elements&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Most programming languages may be &lt;a href="http://wordaligned.org/articles/a-yen-for-more-symbols.html"&gt;stuck in ASCII&lt;/a&gt;, but we needn&amp;#8217;t restict ourselves in this way. I found some block elements in the &lt;a href="http://www.unicode.org/charts/symbols.html"&gt;Geometrical Symbols&lt;/a&gt; section of the Unicode code charts (&lt;a href="http://www.unicode.org/charts/PDF/U2580.pdf"&gt;Unicode Block Elements (PDF)&lt;/a&gt;). Here&amp;#8217;s a pre-rendered block of text composed of the light and dark shade block characters, U+2591 LIGHT SHADE and U+2593 DARK SHADE.
&lt;/p&gt;
&lt;pre&gt;
&amp;#x2591;&amp;#x2593;&amp;#x2591;&amp;#x2593;&amp;#x2591;&amp;#x2593;&amp;#x2591;&amp;#x2593;
&amp;#x2593;&amp;#x2591;&amp;#x2593;&amp;#x2591;&amp;#x2593;&amp;#x2591;&amp;#x2593;&amp;#x2591;
&amp;#x2591;&amp;#x2593;&amp;#x2591;&amp;#x2593;&amp;#x2591;&amp;#x2593;&amp;#x2591;&amp;#x2593;
&amp;#x2593;&amp;#x2591;&amp;#x2593;&amp;#x2591;&amp;#x2593;&amp;#x2591;&amp;#x2593;&amp;#x2591;
&amp;#x2591;&amp;#x2593;&amp;#x2591;&amp;#x2593;&amp;#x2591;&amp;#x2593;&amp;#x2591;&amp;#x2593;
&amp;#x2593;&amp;#x2591;&amp;#x2593;&amp;#x2591;&amp;#x2593;&amp;#x2591;&amp;#x2593;&amp;#x2591;
&amp;#x2591;&amp;#x2593;&amp;#x2591;&amp;#x2593;&amp;#x2591;&amp;#x2593;&amp;#x2591;&amp;#x2593;
&amp;#x2593;&amp;#x2591;&amp;#x2593;&amp;#x2591;&amp;#x2593;&amp;#x2591;&amp;#x2593;&amp;#x2591;
&lt;/pre&gt;


&lt;h3&gt;&lt;a href="http://wordaligned.org/articles/drawing-chessboards#toc5" name="tocand-more" id="tocand-more"&gt;And more&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;I can think of plenty of other ways to draw a chessboard. My favourite &lt;a href="http://wordaligned.org/articles/drawing-software-design.htmls"&gt;drawing&lt;/a&gt; environments are the &lt;a href="http://blogoscoped.com/archive/2008-02-11-n78.html"&gt;pencil and paper&lt;/a&gt;, and the pen and whiteboard; combine the former with a scanner and the latter with a digital camera and you&amp;#8217;ve got an easy route to an electronic version of your design.
&lt;/p&gt;
&lt;p&gt;For an HTML document I suspect &lt;a href="http://www.w3.org/Graphics/SVG/"&gt;SVG&lt;/a&gt; would be a good choice, but I don&amp;#8217;t know enough about SVG to state this with confidence. I bet you could go a long way with &lt;a href="http://www.w3.org/Style/CSS/"&gt;CSS&lt;/a&gt; too. &lt;a href="http://en.wikipedia.org/wiki/Chessboard"&gt;Wikipedia&amp;#8217;s chess board&lt;/a&gt; is a table built on top of two small images, a light and a dark square, which I guess saves on bandwidth.
&lt;/p&gt;

&lt;h3&gt;&lt;a href="http://wordaligned.org/articles/drawing-chessboards#toc6" name="tocwhy" id="tocwhy"&gt;Why?&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Why ever bother programming when all we want is a simple graphic?
&lt;/p&gt;
&lt;p&gt;Well, for one thing, there&amp;#8217;s not &lt;strong&gt;that&lt;/strong&gt; much programming. The actual work of pushing pixels around is done by &lt;a href="http://code.google.com/apis/chart/"&gt;Google&lt;/a&gt;, or &lt;a href="http://effbot.org/imagingbook/pil-index.htm"&gt;PIL&lt;/a&gt;, or &lt;a href="http://www.imagemagick.org/script/index.php"&gt;ImageMagick&lt;/a&gt;.
&lt;/p&gt;
&lt;p&gt;Once we&amp;#8217;ve got a program written, it should be easy to adapt it. We&amp;#8217;ve already put in hooks to specify the number of squares and the image dimensions. It&amp;#8217;s equally easy to, for example, write out a JPEG rather than a PNG, or use different colours.
&lt;/p&gt;
&lt;p&gt;A programmatic solution is dynamic. Google&amp;#8217;s chart API generates pictures on the fly, based on data points, ranges etc. which clients choose as and when. It&amp;#8217;s rather  like lazy-evaluation: pre-rendering all possibilities isn&amp;#8217;t just expensive, it&amp;#8217;s out of the question.
&lt;/p&gt;

&lt;h3&gt;&lt;a href="http://wordaligned.org/articles/drawing-chessboards#toc7" name="tocteaser" id="tocteaser"&gt;Teaser&lt;/a&gt;&lt;/h3&gt;
&lt;img src="http://tbn0.google.com/images?q=tbn:AmRSkxMo-1W5iM:http://web.usna.navy.mil/~wdj/images_chess/chess011.gif" alt="Lurid chessboard" style="float:right;margin-left:4px;"/&gt;

&lt;p&gt;That&amp;#8217;s quite enough pixels and characters for now, so this article will have to appear in two parts. If I&amp;#8217;ve still not convinced you of the merits of creating images programmatically, please consider the following puzzle.
&lt;/p&gt;
&lt;p&gt;&lt;span /&gt;How would you draw a position reached in a game of chess, showing both the board and the pieces?
&lt;/p&gt;
&lt;p&gt;And if I &lt;strong&gt;have&lt;/strong&gt; convinced you, this exercise makes for a good workout.
&lt;/p&gt;
&lt;p&gt;Some Q&amp;amp;A&amp;#8217;s.
&lt;/p&gt;
&lt;ul&gt;
 &lt;li&gt;
     &lt;strong&gt;Q&lt;/strong&gt;: What position, exactly?
 &lt;/li&gt;

 &lt;li&gt;
     &lt;strong&gt;A&lt;/strong&gt;: Any!
 &lt;/li&gt;

 &lt;li&gt;
     &lt;strong&gt;Q&lt;/strong&gt;: How will the position be described?
 &lt;/li&gt;

 &lt;li&gt;
     &lt;strong&gt;A&lt;/strong&gt;: Your choice &amp;#8212; it&amp;#8217;s an interesting part of the puzzle.
 &lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;A great starting point would be to solve the puzzle using an ASCII art representation.
&lt;/p&gt;
&lt;p&gt;You can find my solution in &lt;a href="http://wordaligned.org/articles/drawing-chess-positions.html"&gt;this follow-up article&lt;/a&gt;.
&lt;/p&gt;

&lt;h3&gt;&lt;a href="http://wordaligned.org/articles/drawing-chessboards#toc8" name="tocthanks" id="tocthanks"&gt;Thanks&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Thanks to &lt;a href="http://gedmin.as"&gt;Marius Gedminas&lt;/a&gt; and Johannes Hoff for their help bug-fixing this article.
&lt;/p&gt;
&lt;hr /&gt;

&lt;p&gt;&lt;a id="fn1" href="http://wordaligned.org/articles/drawing-chessboards#fn1link"&gt;[1]&lt;/a&gt;
   I&amp;#8217;m confused about where exactly PIL belongs; the official homepage seems to be on the PythonWare website (&lt;a href="http://www.pythonware.com/library/pil/handbook/"&gt;http://www.pythonware.com/library/pil/handbook/&lt;/a&gt;), but I usually head for the Effbot site, &lt;a href="http://effbot.org/imagingbook/"&gt;http://effbot.org/imagingbook/&lt;/a&gt;. I think the sites mirror the same information, so it boils down to whether you prefer a blue or green theme, and how off-putting you find all the ads-by-google.
&lt;/p&gt;
&lt;p&gt;&lt;a id="fn2" href="http://wordaligned.org/articles/drawing-chessboards#fn2link"&gt;[2]&lt;/a&gt;
   Actually, you can use &lt;a href="http://www.gimp.org/tutorials/Basic_Batch/"&gt;Gimp from the command-line&lt;/a&gt;, and it comes with some tools for creating and editing batch files, and indeed for creating a personal suite of image processing scripts. I&amp;#8217;ve never used &lt;a href="http://www.gimp.org"&gt;Gimp&lt;/a&gt; in this way, so I can&amp;#8217;t say much more about this.
&lt;/p&gt;
&lt;p&gt;&lt;a id="fn3" href="http://wordaligned.org/articles/drawing-chessboards#fn3link"&gt;[3]&lt;/a&gt;
   In theory you could use the Google Chart API to render any image in a pointillist manner: just plot enough pixels in the right places.
&lt;/p&gt;</description>
<dc:date>2008-03-18</dc:date>
<guid>http://wordaligned.org/articles/drawing-chessboards</guid>
<author>tag@wordaligned.org (Thomas Guest)</author>
<link>http://wordaligned.org/articles/drawing-chessboards</link>
<category>Drawing</category>
</item>

<item>
<title>Drawing Software Designs</title>
<description>&lt;p&gt;Here&amp;#8217;s &lt;a href="http://mitpress.mit.edu/sicp/full-text/book/book-Z-H-28.html#%_thm_4.45"&gt;Exercise 4.45&lt;/a&gt; from the &lt;a href="http://mitpress.mit.edu/sicp/"&gt;Wizard Book&lt;/a&gt;.
&lt;/p&gt;
&lt;blockquote&gt;&lt;p&gt;The following sentence can be parsed in five different ways: &amp;#8220;The
   professor lectures to the student in the class with the cat.&amp;#8221;
   Give the five parses and explain the differences in shades of
   meaning among them.
&lt;/p&gt;
&lt;/blockquote&gt;&lt;p&gt;You can find a formal representation of the five parses at the end of
   this post. I found it easiest to describe the different shades of
   meaning with a diagram.
&lt;/p&gt;
&lt;span id="continue-reading"/&gt;


&lt;h2&gt;The Different Shades of Meaning&lt;/h2&gt;
&lt;img src="http://wordaligned.org/images/ex4.45.jpg" width="100%" alt="The cat, the class, the student, the professor"/&gt;


&lt;h2&gt;Drawing as a Design Tool&lt;/h2&gt;
&lt;p&gt;I use drawings all the time when I&amp;#8217;m writing software. Pencil and
   paper are good enough for many jobs; whiteboard and pen are perfect
   for others. I enjoy using these tools and they allow me to communicate
   ideas very efficiently &amp;#8212; when you work in this way, you soon build a
   &lt;a href="http://www.hasbro.com/default.cfm?page=browse&amp;amp;product_id=9475"&gt;Pictionary&lt;/a&gt;-style rapport with colleagues, and a simple rectangle becomes a
   class, or a server, or an item on a queue, or anything else you want it to be.
&lt;/p&gt;
&lt;p&gt;Often, the drawings themselves are ephemeral. It&amp;#8217;s the act of
   producing the picture which shapes the design. There&amp;#8217;s never been any
   question of feeding the drawing into the computer and having it
   generate code. (Though the reverse trip sometimes works: given source
   code, a computer can sketch a hyper-linked class heirarchy, for
   example). Similarly, I&amp;#8217;ve never seen real benefits from the various 
   corners of the UML syntax. Please, keep it simple.
&lt;/p&gt;
&lt;p&gt;If you hit on a drawing you do want to save, there&amp;#8217;s no need to transpose
   it into a computer drawing package; that&amp;#8217;s sure to take time and risks
   stifling the picture. Instead, just scan in or photograph the original
   and put it on the wiki.
&lt;/p&gt;

&lt;h2&gt;Computer Drawing Packages&lt;/h2&gt;
&lt;p&gt;Computer drawing packages generally leave me cold. They really don&amp;#8217;t
   seem to have moved on since the version of Mac Draw I encountered over
   twenty years ago, back when a mouse was a novel input device. It took
   me about 10 minutes to draw the picture above by hand, of which most
   of the time was spent thinking. Using a computer, I should think it
   would have taken well over an hour, of which most of my time would
   have been spent cursing.
&lt;/p&gt;
&lt;p&gt;The one thing I &lt;em&gt;do&lt;/em&gt; like about computer drawing packages is that they
   allow you to animate a drawing &amp;#8212; for example to replay it, starting from 
   a blank page, adding features in turn. I&amp;#8217;ve seen this technique used very effectively
   in presentations. Building these pictures is, however, a painful process.
&lt;/p&gt;

&lt;h2&gt;The Five Parses&lt;/h2&gt;
&lt;p&gt;For the record, the five different parses are:
&lt;/p&gt;
&lt;div class="typocode"&gt;

&lt;pre class="prettyprint"&gt;;; 1st parse
(sentence
  (simple-noun-phrase
    (article the) (noun professor))
  (verb-phrase
    (verb-phrase
      (verb-phrase
        (verb lectures)
        (prep-phrase
          (prep to)
          (simple-noun-phrase (article the) (noun student))))
      (prep-phrase
        (prep in)
        (simple-noun-phrase (article the) (noun class))))
    (prep-phrase
      (prep with)
      (simple-noun-phrase (article the) (noun cat)))))

;; 2nd parse
(sentence
  (simple-noun-phrase (article the) (noun professor))
  (verb-phrase
    (verb-phrase
      (verb lectures)
      (prep-phrase
        (prep to)
        (simple-noun-phrase (article the) (noun student))))
    (prep-phrase
      (prep in)
      (noun-phrase
        (simple-noun-phrase (article the) (noun class))
        (prep-phrase 
           (prep with) 
           (simple-noun-phrase (article the) (noun cat)))))))

;; 3rd parse
(sentence
  (simple-noun-phrase (article the) (noun professor))
  (verb-phrase
    (verb-phrase
      (verb lectures)
      (prep-phrase
        (prep to)
        (noun-phrase
          (simple-noun-phrase (article the) (noun student))
          (prep-phrase
            (prep in)
            (simple-noun-phrase (article the) (noun class))))))
    (prep-phrase
      (prep with)
      (simple-noun-phrase (article the) (noun cat)))))

;; 4th parse
(sentence
  (simple-noun-phrase (article the) (noun professor))
  (verb-phrase
    (verb lectures)
    (prep-phrase
      (prep to)
      (noun-phrase
        (noun-phrase
          (simple-noun-phrase (article the) (noun student))
          (prep-phrase 
            (prep in)
            (simple-noun-phrase (article the) (noun class))))
        (prep-phrase 
          (prep with) 
          (simple-noun-phrase (article the) (noun cat)))))))

;; 5th parse
(sentence
  (simple-noun-phrase (article the) (noun professor))
  (verb-phrase
    (verb lectures)
    (prep-phrase
      (prep to)
      (noun-phrase
        (simple-noun-phrase (article the) (noun student))
        (prep-phrase
          (prep in)
          (noun-phrase
            (simple-noun-phrase (article the) (noun class))
            (prep-phrase
              (prep with)
              (simple-noun-phrase (article the) (noun cat)))))))))

&lt;/pre&gt;

&lt;/div&gt;</description>
<dc:date>2007-03-04</dc:date>
<guid>http://wordaligned.org/articles/drawing-software-designs</guid>
<author>tag@wordaligned.org (Thomas Guest)</author>
<link>http://wordaligned.org/articles/drawing-software-designs</link>
<category>Drawing</category>
</item>

</channel>
</rss>
