<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:dc="http://purl.org/dc/elements/1.1/" >
<channel>
<title>Word Aligned</title>
<link>http://wordaligned.org</link>
<description>tales from the code face</description>
<dc:creator>tag@wordaligned.org</dc:creator>
<language>en-gb</language>
<item>
<title>Code Reviews - the rules</title>
<description>&lt;p&gt;The rule is: no code gets checked in without a review.
&lt;/p&gt;
&lt;p&gt;It&amp;#8217;s not always easy to get a reviewer to sign off a changelist. Does the code build? In all configurations and on all platforms? Do the tests pass? Are all new code paths covered? Does the commit message describe the change? Does the formatting match the style guide? Does the code match its surroundings? How about documentation, compiler warnings, license requirements?
&lt;/p&gt;
&lt;p&gt;Is the change really necessary? Could it have been realised more simply?
&lt;/p&gt;
&lt;p&gt;Certainly the reviewer&amp;#8217;s task is easier if the task has been &lt;a href="http://wordaligned.org/articles/programming-paired-and-shared"&gt;paired on&lt;/a&gt;. Small and self-contained changelists are more straightforward. Removing code, too, should be less contentious.
&lt;/p&gt;
&lt;p&gt;Depending on infrastructure, some checklist items can be automated. Ideally the changelist has already been though CI, for example, ticking the builds-cleanly and passes-its-tests boxes.
&lt;/p&gt;
&lt;p&gt;So far, so what? (So obvious!)
&lt;/p&gt;
&lt;p&gt;Here&amp;#8217;s another rule, and one I&amp;#8217;ve not seen written down before.
&lt;/p&gt;
&lt;p&gt;When I review code I might well consider how I would have made the change. That doesn&amp;#8217;t mean I&amp;#8217;ll insist the submitter does things my way. In the absence of &lt;a href="https://blog.golang.org/go-fmt-your-code" title="go fmt your code"&gt;automated formatters&lt;/a&gt; there will be more than one acceptable way to lay out the code. Sometimes there&amp;#8217;s little reason to prefer an explicit loop over an algorithm + lambda combination, or vice-versa. &lt;a href="http://wordaligned.org/articles/go-for-short-variable-names"&gt;Short names&lt;/a&gt; work for me but not for everyone. It&amp;#8217;s hard to argue against test coverage, but is more always better?
&lt;/p&gt;
&lt;p&gt;In such cases I won&amp;#8217;t try to impose my own style on the changelist. Instead, the question becomes: &lt;strong&gt;does the code match the standards we, as a team, have set&lt;/strong&gt;? Or, &lt;strong&gt;do these changes merit a place in our codebase&lt;/strong&gt;?
&lt;/p&gt;
&lt;p&gt;It&amp;#8217;s a simple principle but not an obvious one. It helps me review fairly and also to learn from others on my team.
&lt;/p&gt;
&lt;p&gt;There &lt;strong&gt;is&lt;/strong&gt; more than one way to do it!
&lt;/p&gt;</description>
<dc:date>2015-08-05</dc:date>
<guid>http://wordaligned.org/articles/code-reviews--the-rules</guid>
<author>tag@wordaligned.org (Thomas Guest)</author>
<link>http://wordaligned.org/articles/code-reviews--the-rules</link>
<category>Design</category>
</item>

<item>
<title>Programming Paired and Shared</title>
<description>&lt;p&gt;We &lt;a href="http://en.wikipedia.org/wiki/Pair_programming"&gt;pair program&lt;/a&gt; where I work. Two people, one desk. It can get intense.
&lt;/p&gt;
&lt;p&gt;&lt;a href="http://en.wikipedia.org/wiki/Vim_%28cleaning_product%29"&gt;&lt;img style="align:top" src="http://wordaligned.org/images/vim.jpg" alt="Floor cleaner"/&gt;&lt;/a&gt;
   &lt;a href="http://wordaligned.org/articles/accidental-emacs"&gt;&lt;img style="align:top" src="http://wordaligned.org/images/gnu.jpg" alt="Emacs"/&gt;&lt;/a&gt;
&lt;/p&gt;
&lt;p&gt;Editor wars claim few casualties &amp;mdash; until an emacs and a vim user are forced to share a keyboard and screen, that is. Anyone for notepad?
&lt;/p&gt;
&lt;p&gt;Sharing the typing isn&amp;#8217;t why we pair. Where I work we also do code reviews. Whilst pair programming is encouraged, code reviews are mandated: code cannot be checked in until approved by a reviewer. That reviewer could be the person you paired with, and it soon becomes apparent that reviews conducted with a pair go more smoothly than ones where the reviewer is new to the task. It&amp;#8217;s hard for someone to review a tricky changeset without the context of its development.
&lt;/p&gt;
&lt;p&gt;The &lt;strong&gt;context of its development&lt;/strong&gt; turns out to be paramount for understanding a codebase, not just a changeset. Pair programming helps provide that context.
&lt;/p&gt;
&lt;p&gt;The term &lt;strong&gt;pairing&lt;/strong&gt; serves better than &lt;strong&gt;pair programming&lt;/strong&gt;. The former suggests sharing; the latter, typing. The benefits come from sharing all aspects of the work: decisions and responsibility; research, design, development; how to test; where to cut corners and where to go beyond the immediate requirement; when to take a break. Anyone for table football?
&lt;/p&gt;
&lt;p&gt;&lt;a href="http://www.snsystems.com/careers/"&gt;&lt;img src="http://wordaligned.org/images/table-football.jpg" alt="Edd and Bridget vs Bridget and Edd" title="Edd and Bridget kicking a ball around" /&gt;&lt;/a&gt;
&lt;/p&gt;</description>
<dc:date>2015-05-27</dc:date>
<guid>http://wordaligned.org/articles/programming-paired-and-shared</guid>
<author>tag@wordaligned.org (Thomas Guest)</author>
<link>http://wordaligned.org/articles/programming-paired-and-shared</link>
<category>Design</category>
</item>

<item>
<title>Drawing Software Designs</title>
<description>&lt;p&gt;Here&amp;#8217;s &lt;a href="http://mitpress.mit.edu/sicp/full-text/book/book-Z-H-28.html#%_thm_4.45"&gt;Exercise 4.45&lt;/a&gt; from the &lt;a href="http://mitpress.mit.edu/sicp/"&gt;Wizard Book&lt;/a&gt;.
&lt;/p&gt;
&lt;blockquote&gt;&lt;p&gt;The following sentence can be parsed in five different ways: &amp;#8220;The
   professor lectures to the student in the class with the cat.&amp;#8221;
   Give the five parses and explain the differences in shades of
   meaning among them.
&lt;/p&gt;
&lt;/blockquote&gt;&lt;p&gt;You can find a formal representation of the five parses at the end of
   this post. I found it easiest to describe the different shades of
   meaning with a diagram.
&lt;/p&gt;
&lt;span id="continue-reading"/&gt;


&lt;h2&gt;The Different Shades of Meaning&lt;/h2&gt;
&lt;img src="http://wordaligned.org/images/ex4.45.jpg" width="100%" alt="The cat, the class, the student, the professor"/&gt;


&lt;h2&gt;Drawing as a Design Tool&lt;/h2&gt;
&lt;p&gt;I use drawings all the time when I&amp;#8217;m writing software. Pencil and
   paper are good enough for many jobs; whiteboard and pen are perfect
   for others. I enjoy using these tools and they allow me to communicate
   ideas very efficiently &amp;#8212; when you work in this way, you soon build a
   &lt;a href="http://www.hasbro.com/default.cfm?page=browse&amp;amp;product_id=9475"&gt;Pictionary&lt;/a&gt;-style rapport with colleagues, and a simple rectangle becomes a
   class, or a server, or an item on a queue, or anything else you want it to be.
&lt;/p&gt;
&lt;p&gt;Often, the drawings themselves are ephemeral. It&amp;#8217;s the act of
   producing the picture which shapes the design. There&amp;#8217;s never been any
   question of feeding the drawing into the computer and having it
   generate code. (Though the reverse trip sometimes works: given source
   code, a computer can sketch a hyper-linked class heirarchy, for
   example). Similarly, I&amp;#8217;ve never seen real benefits from the various 
   corners of the UML syntax. Please, keep it simple.
&lt;/p&gt;
&lt;p&gt;If you hit on a drawing you do want to save, there&amp;#8217;s no need to transpose
   it into a computer drawing package; that&amp;#8217;s sure to take time and risks
   stifling the picture. Instead, just scan in or photograph the original
   and put it on the wiki.
&lt;/p&gt;

&lt;h2&gt;Computer Drawing Packages&lt;/h2&gt;
&lt;p&gt;Computer drawing packages generally leave me cold. They really don&amp;#8217;t
   seem to have moved on since the version of Mac Draw I encountered over
   twenty years ago, back when a mouse was a novel input device. It took
   me about 10 minutes to draw the picture above by hand, of which most
   of the time was spent thinking. Using a computer, I should think it
   would have taken well over an hour, of which most of my time would
   have been spent cursing.
&lt;/p&gt;
&lt;p&gt;The one thing I &lt;em&gt;do&lt;/em&gt; like about computer drawing packages is that they
   allow you to animate a drawing &amp;#8212; for example to replay it, starting from 
   a blank page, adding features in turn. I&amp;#8217;ve seen this technique used very effectively
   in presentations. Building these pictures is, however, a painful process.
&lt;/p&gt;

&lt;h2&gt;The Five Parses&lt;/h2&gt;
&lt;p&gt;For the record, the five different parses are:
&lt;/p&gt;
&lt;div class="typocode"&gt;

&lt;pre class="prettyprint"&gt;;; 1st parse
(sentence
  (simple-noun-phrase
    (article the) (noun professor))
  (verb-phrase
    (verb-phrase
      (verb-phrase
        (verb lectures)
        (prep-phrase
          (prep to)
          (simple-noun-phrase (article the) (noun student))))
      (prep-phrase
        (prep in)
        (simple-noun-phrase (article the) (noun class))))
    (prep-phrase
      (prep with)
      (simple-noun-phrase (article the) (noun cat)))))

;; 2nd parse
(sentence
  (simple-noun-phrase (article the) (noun professor))
  (verb-phrase
    (verb-phrase
      (verb lectures)
      (prep-phrase
        (prep to)
        (simple-noun-phrase (article the) (noun student))))
    (prep-phrase
      (prep in)
      (noun-phrase
        (simple-noun-phrase (article the) (noun class))
        (prep-phrase 
           (prep with) 
           (simple-noun-phrase (article the) (noun cat)))))))

;; 3rd parse
(sentence
  (simple-noun-phrase (article the) (noun professor))
  (verb-phrase
    (verb-phrase
      (verb lectures)
      (prep-phrase
        (prep to)
        (noun-phrase
          (simple-noun-phrase (article the) (noun student))
          (prep-phrase
            (prep in)
            (simple-noun-phrase (article the) (noun class))))))
    (prep-phrase
      (prep with)
      (simple-noun-phrase (article the) (noun cat)))))

;; 4th parse
(sentence
  (simple-noun-phrase (article the) (noun professor))
  (verb-phrase
    (verb lectures)
    (prep-phrase
      (prep to)
      (noun-phrase
        (noun-phrase
          (simple-noun-phrase (article the) (noun student))
          (prep-phrase 
            (prep in)
            (simple-noun-phrase (article the) (noun class))))
        (prep-phrase 
          (prep with) 
          (simple-noun-phrase (article the) (noun cat)))))))

;; 5th parse
(sentence
  (simple-noun-phrase (article the) (noun professor))
  (verb-phrase
    (verb lectures)
    (prep-phrase
      (prep to)
      (noun-phrase
        (simple-noun-phrase (article the) (noun student))
        (prep-phrase
          (prep in)
          (noun-phrase
            (simple-noun-phrase (article the) (noun class))
            (prep-phrase
              (prep with)
              (simple-noun-phrase (article the) (noun cat)))))))))

&lt;/pre&gt;

&lt;/div&gt;</description>
<dc:date>2007-03-04</dc:date>
<guid>http://wordaligned.org/articles/drawing-software-designs</guid>
<author>tag@wordaligned.org (Thomas Guest)</author>
<link>http://wordaligned.org/articles/drawing-software-designs</link>
<category>Design</category>
</item>

</channel>
</rss>
