<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:dc="http://purl.org/dc/elements/1.1/" >
<channel>
<title>Word Aligned</title>
<link>https://wordaligned.org</link>
<description>tales from the code face</description>
<dc:creator>tag@wordaligned.org</dc:creator>
<language>en-gb</language>
<item>
<title>On Exactitude in Programming</title>
<description>&lt;p&gt;Recently I attended a demonstration of a product intended to help design software, right down to implementation details. It failed to convince me. It did, however, succeed in reminding me of this short work by Jorge Luis Borges:&lt;/p&gt;
&lt;blockquote&gt;&lt;h3&gt;On Exactitude in Science&lt;/h3&gt;
&lt;p&gt;Jorge Luis Borges, Collected Fictions, translated by Andrew Hurley.
&lt;p&gt;&amp;#8230;In that Empire, the Art of Cartography attained such Perfection that the map of a single Province occupied the entirety of a City, and the map of the Empire, the entirety of a Province. In time, those Unconscionable Maps no longer satisfied, and the Cartographers Guilds struck a Map of the Empire whose size was that of the Empire, and which coincided point for point with it. The following Generations, who were not so fond of the Study of Cartography as their Forebears had been, saw that that vast Map was Useless, and not without some Pitilessness was it, that they delivered it up to the Inclemencies of Sun and Winters. In the Deserts of the West, still today, there are Tattered Ruins of that Map, inhabited by Animals and Beggars; in all the Land there is no other Relic of the Disciplines of Geography.
&lt;p&gt;&amp;#8212;Suarez Miranda, Viajes devarones prudentes, Libro IV,Cap. XLV, Lerida, 1658
&lt;/blockquote&gt;

&lt;p&gt;and also of this tweet by &lt;a href=&quot;https://twitter.com/KevlinHenney&quot;&gt;@KevlinHenney&lt;/a&gt;:&lt;/p&gt;
&lt;blockquote class=&quot;twitter-tweet&quot;&gt;&lt;p lang=&quot;en&quot; dir=&quot;ltr&quot;&gt;The act of describing a program in unambiguous detail and the act of programming are one and the same.&lt;/p&gt;&amp;mdash; Kevlin Henney (@KevlinHenney) &lt;a href=&quot;https://twitter.com/KevlinHenney/status/3361631527?ref_src=twsrc%5Etfw&quot;&gt;August 17, 2009&lt;/a&gt;&lt;/blockquote&gt;
&lt;script async src=&quot;https://platform.twitter.com/widgets.js&quot; charset=&quot;utf-8&quot;&gt;&lt;/script&gt;</description>
<dc:date>2021-01-05</dc:date>
<guid>https://wordaligned.org/articles/on-exactitude-in-programming</guid>
<author>tag@wordaligned.org (Thomas Guest)</author>
<link>https://wordaligned.org/articles/on-exactitude-in-programming</link>
<category>Design</category>
</item>

<item>
<title>Computer World</title>
<description>&lt;p&gt;&lt;a data-flickr-embed=&quot;true&quot;  href=&quot;https://www.flickr.com/photos/thomasguest/37406493811/in/dateposted-friend/&quot; title=&quot;The Hitchhiker&amp;#x27;s Guide to the Galaxy&quot;&gt;&lt;img src=&quot;https://farm5.staticflickr.com/4371/37406493811_0d17fab6cf.jpg&quot; width=&quot;401&quot; height=&quot;500&quot; alt=&quot;The Hitchhiker&amp;#x27;s Guide to the Galaxy&quot;&gt;&lt;/a&gt;&lt;script async src=&quot;https://wordaligned.org//embedr.flickr.com/assets/client-code.js&quot; charset=&quot;utf-8&quot;&gt;&lt;/script&gt;&lt;/p&gt;
&lt;p&gt;Douglas Adams&amp;#8217; &amp;#8220;Hitchhiker&amp;#8217;s Guide to the Galaxy&amp;#8221; tells the story of the two most powerful computers ever made. The first, Deep Thought, was designed to figure out the meaning of Life the Universe and Everything. After 7,500,000 years of processing it came up with the concise but unedifying Ultimate Answer of 42. It then undertook the task of designing its successor, a computer sophisticated enough to calculate the Ultimate Question:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&amp;#8220;&amp;#8230; A computer which can calculate the Question to the Ultimate Answer, a computer of such infinite and subtle complexity that organic life itself shall form part of its operational matrix &amp;#8230; Yes! I shall design this computer for you. And I shall name it also unto you. And it shall be called &amp;#8230; The Earth.&amp;#8221;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;When I first heard this it seemed ridiculous. Now, almost 40 years on, I&amp;#8217;ve realised it&amp;#8217;s true.&lt;/p&gt;
&lt;p&gt;It&amp;#8217;s no longer correct to think of computers as discrete units. Computers have the property that when you connect two of them you get another computer, and so on. The network &lt;strong&gt;is&lt;/strong&gt; the computer. The Apple in your hand, the Echo on your shelf, the chip in your &lt;a href=&quot;https://www.amazon.co.uk/Scepticism-Inc-Bo-Fowler/dp/009927468X&quot;&gt;shopping trolley&lt;/a&gt; &amp;#8212; all combine to form a global connected device. And as Adams predicted, we ourselves form part of the operating system, constantly feeding data back in.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://wordaligned.org/images/planet-earth.jpg&quot; alt=&quot;Planet Earth&quot;/&gt;&lt;/p&gt;
&lt;p&gt;Douglas Adams&amp;#8217; insight puts software development into perspective. True: we no longer print our product on silicon or ship it in boxes, and yes: we accept &lt;a href=&quot;http://wordaligned.org/articles/why-software-development-isnt-like-construction&quot;&gt;construction&lt;/a&gt; is not the right metaphor, but: nor is production. &lt;a href=&quot;http://swanseacon.co.uk/schedule/#session-27&quot;&gt;Professor Dave Snowden&lt;/a&gt; talks about entanglement &amp;#8212; think of a system growing like brambles in a thicket. He emphasises what&amp;#8217;s natural, evolutionary and human. Object oriented design lost out when it narrowed its focus. Remember, people are objects too. The world is our platform.&lt;/p&gt;</description>
<dc:date>2017-09-30</dc:date>
<guid>https://wordaligned.org/articles/computer-world</guid>
<author>tag@wordaligned.org (Thomas Guest)</author>
<link>https://wordaligned.org/articles/computer-world</link>
<category>Design</category>
</item>

<item>
<title>Code Reviews - the rules</title>
<description>&lt;p&gt;The rule is: no code gets checked in without a review.&lt;/p&gt;
&lt;p&gt;It&amp;#8217;s not always easy to get a reviewer to sign off a changelist. Does the code build? In all configurations and on all platforms? Do the tests pass? Are all new code paths covered? Does the commit message describe the change? Does the formatting match the style guide? Does the code match its surroundings? How about documentation, compiler warnings, license requirements?&lt;/p&gt;
&lt;p&gt;Is the change really necessary? Could it have been realised more simply?&lt;/p&gt;
&lt;p&gt;Certainly the reviewer&amp;#8217;s task is easier if the task has been &lt;a href=&quot;https://wordaligned.org/articles/programming-paired-and-shared&quot;&gt;paired on&lt;/a&gt;. Small and self-contained changelists are more straightforward. Removing code, too, should be less contentious.&lt;/p&gt;
&lt;p&gt;Depending on infrastructure, some checklist items can be automated. Ideally the changelist has already been though CI, for example, ticking the builds-cleanly and passes-its-tests boxes.&lt;/p&gt;
&lt;p&gt;So far, so what? (So obvious!)&lt;/p&gt;
&lt;p&gt;Here&amp;#8217;s another rule, and one I&amp;#8217;ve not seen written down before.&lt;/p&gt;
&lt;p&gt;When I review code I might well consider how I would have made the change. That doesn&amp;#8217;t mean I&amp;#8217;ll insist the submitter does things my way. In the absence of &lt;a href=&quot;https://blog.golang.org/go-fmt-your-code&quot; title=&quot;go fmt your code&quot;&gt;automated formatters&lt;/a&gt; there will be more than one acceptable way to lay out the code. Sometimes there&amp;#8217;s little reason to prefer an explicit loop over an algorithm + lambda combination, or vice-versa. &lt;a href=&quot;https://wordaligned.org/articles/go-for-short-variable-names&quot;&gt;Short names&lt;/a&gt; work for me but not for everyone. It&amp;#8217;s hard to argue against test coverage, but is more always better?&lt;/p&gt;
&lt;p&gt;In such cases I won&amp;#8217;t try to impose my own style on the changelist. Instead, the question becomes: &lt;strong&gt;does the code match the standards we, as a team, have set&lt;/strong&gt;? Or, &lt;strong&gt;do these changes merit a place in our codebase&lt;/strong&gt;?&lt;/p&gt;
&lt;p&gt;It&amp;#8217;s a simple principle but not an obvious one. It helps me review fairly and also to learn from others on my team.&lt;/p&gt;
&lt;p&gt;There &lt;strong&gt;is&lt;/strong&gt; more than one way to do it!&lt;/p&gt;</description>
<dc:date>2015-08-05</dc:date>
<guid>https://wordaligned.org/articles/code-reviews--the-rules</guid>
<author>tag@wordaligned.org (Thomas Guest)</author>
<link>https://wordaligned.org/articles/code-reviews--the-rules</link>
<category>Design</category>
</item>

<item>
<title>Programming Paired and Shared</title>
<description>&lt;p&gt;We &lt;a href=&quot;http://en.wikipedia.org/wiki/Pair_programming&quot;&gt;pair program&lt;/a&gt; where I work. Two people, one desk. It can get intense.&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://en.wikipedia.org/wiki/Vim_%28cleaning_product%29&quot;&gt;&lt;img style=&quot;align:top&quot; src=&quot;https://wordaligned.org/images/vim.jpg&quot; alt=&quot;Floor cleaner&quot;/&gt;&lt;/a&gt;
&lt;a href=&quot;https://wordaligned.org/articles/accidental-emacs&quot;&gt;&lt;img style=&quot;align:top&quot; src=&quot;https://wordaligned.org/images/gnu.jpg&quot; alt=&quot;Emacs&quot;/&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Editor wars claim few casualties &amp;mdash; until an emacs and a vim user are forced to share a keyboard and screen, that is. Anyone for notepad?&lt;/p&gt;
&lt;p&gt;Sharing the typing isn&amp;#8217;t why we pair. Where I work we also do code reviews. Whilst pair programming is encouraged, code reviews are mandated: code cannot be checked in until approved by a reviewer. That reviewer could be the person you paired with, and it soon becomes apparent that reviews conducted with a pair go more smoothly than ones where the reviewer is new to the task. It&amp;#8217;s hard for someone to review a tricky changeset without the context of its development.&lt;/p&gt;
&lt;p&gt;The &lt;strong&gt;context of its development&lt;/strong&gt; turns out to be paramount for understanding a codebase, not just a changeset. Pair programming helps provide that context.&lt;/p&gt;
&lt;p&gt;The term &lt;strong&gt;pairing&lt;/strong&gt; serves better than &lt;strong&gt;pair programming&lt;/strong&gt;. The former suggests sharing; the latter, typing. The benefits come from sharing all aspects of the work: decisions and responsibility; research, design, development; how to test; where to cut corners and where to go beyond the immediate requirement; when to take a break. Anyone for table football?&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://www.snsystems.com/careers/&quot;&gt;&lt;img src=&quot;https://wordaligned.org/images/table-football.jpg&quot; alt=&quot;Edd and Bridget vs Bridget and Edd&quot; title=&quot;Edd and Bridget kicking a ball around&quot; /&gt;&lt;/a&gt;&lt;/p&gt;</description>
<dc:date>2015-05-27</dc:date>
<guid>https://wordaligned.org/articles/programming-paired-and-shared</guid>
<author>tag@wordaligned.org (Thomas Guest)</author>
<link>https://wordaligned.org/articles/programming-paired-and-shared</link>
<category>Design</category>
</item>

<item>
<title>Drawing Software Designs</title>
<description>&lt;p&gt;Here&amp;#8217;s &lt;a href=&quot;http://mitpress.mit.edu/sicp/full-text/book/book-Z-H-28.html#%_thm_4.45&quot;&gt;Exercise 4.45&lt;/a&gt; from the &lt;a href=&quot;http://mitpress.mit.edu/sicp/&quot;&gt;Wizard Book&lt;/a&gt;.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;The following sentence can be parsed in five different ways: &amp;#8220;The
professor lectures to the student in the class with the cat.&amp;#8221;
Give the five parses and explain the differences in shades of
meaning among them.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;You can find a formal representation of the five parses at the end of
this post. I found it easiest to describe the different shades of
meaning with a diagram.&lt;/p&gt;
&lt;p&gt;&lt;span id=&quot;continue-reading&quot;/&gt;&lt;/p&gt;
&lt;h2 id=&quot;the-different-shades-of-meaning&quot;&gt;The Different Shades of Meaning&lt;/h2&gt;
&lt;p&gt;&lt;img src=&quot;https://wordaligned.org/images/ex4.45.jpg&quot; width=&quot;100%&quot; alt=&quot;The cat, the class, the student, the professor&quot;/&gt;&lt;/p&gt;
&lt;h2 id=&quot;drawing-as-a-design-tool&quot;&gt;Drawing as a Design Tool&lt;/h2&gt;
&lt;p&gt;I use drawings all the time when I&amp;#8217;m writing software. Pencil and
paper are good enough for many jobs; whiteboard and pen are perfect
for others. I enjoy using these tools and they allow me to communicate
ideas very efficiently &amp;#8212; when you work in this way, you soon build a
&lt;a href=&quot;http://www.hasbro.com/default.cfm?page=browse&amp;amp;product_id=9475&quot;&gt;Pictionary&lt;/a&gt;-style rapport with colleagues, and a simple rectangle becomes a
class, or a server, or an item on a queue, or anything else you want it to be.&lt;/p&gt;
&lt;p&gt;Often, the drawings themselves are ephemeral. It&amp;#8217;s the act of
producing the picture which shapes the design. There&amp;#8217;s never been any
question of feeding the drawing into the computer and having it
generate code. (Though the reverse trip sometimes works: given source
code, a computer can sketch a hyper-linked class heirarchy, for
example). Similarly, I&amp;#8217;ve never seen real benefits from the various 
corners of the UML syntax. Please, keep it simple.&lt;/p&gt;
&lt;p&gt;If you hit on a drawing you do want to save, there&amp;#8217;s no need to transpose
it into a computer drawing package; that&amp;#8217;s sure to take time and risks
stifling the picture. Instead, just scan in or photograph the original
and put it on the wiki.&lt;/p&gt;
&lt;h2 id=&quot;computer-drawing-packages&quot;&gt;Computer Drawing Packages&lt;/h2&gt;
&lt;p&gt;Computer drawing packages generally leave me cold. They really don&amp;#8217;t
seem to have moved on since the version of Mac Draw I encountered over
twenty years ago, back when a mouse was a novel input device. It took
me about 10 minutes to draw the picture above by hand, of which most
of the time was spent thinking. Using a computer, I should think it
would have taken well over an hour, of which most of my time would
have been spent cursing.&lt;/p&gt;
&lt;p&gt;The one thing I &lt;em&gt;do&lt;/em&gt; like about computer drawing packages is that they
allow you to animate a drawing &amp;#8212; for example to replay it, starting from 
a blank page, adding features in turn. I&amp;#8217;ve seen this technique used very effectively
in presentations. Building these pictures is, however, a painful process.&lt;/p&gt;
&lt;h2 id=&quot;the-five-parses&quot;&gt;The Five Parses&lt;/h2&gt;
&lt;p&gt;For the record, the five different parses are:&lt;/p&gt;
&lt;div class=&quot;typocode&quot;&gt;

&lt;pre class=&quot;prettyprint&quot;&gt;;; 1st parse
(sentence
  (simple-noun-phrase
    (article the) (noun professor))
  (verb-phrase
    (verb-phrase
      (verb-phrase
        (verb lectures)
        (prep-phrase
          (prep to)
          (simple-noun-phrase (article the) (noun student))))
      (prep-phrase
        (prep in)
        (simple-noun-phrase (article the) (noun class))))
    (prep-phrase
      (prep with)
      (simple-noun-phrase (article the) (noun cat)))))

;; 2nd parse
(sentence
  (simple-noun-phrase (article the) (noun professor))
  (verb-phrase
    (verb-phrase
      (verb lectures)
      (prep-phrase
        (prep to)
        (simple-noun-phrase (article the) (noun student))))
    (prep-phrase
      (prep in)
      (noun-phrase
        (simple-noun-phrase (article the) (noun class))
        (prep-phrase 
           (prep with) 
           (simple-noun-phrase (article the) (noun cat)))))))

;; 3rd parse
(sentence
  (simple-noun-phrase (article the) (noun professor))
  (verb-phrase
    (verb-phrase
      (verb lectures)
      (prep-phrase
        (prep to)
        (noun-phrase
          (simple-noun-phrase (article the) (noun student))
          (prep-phrase
            (prep in)
            (simple-noun-phrase (article the) (noun class))))))
    (prep-phrase
      (prep with)
      (simple-noun-phrase (article the) (noun cat)))))

;; 4th parse
(sentence
  (simple-noun-phrase (article the) (noun professor))
  (verb-phrase
    (verb lectures)
    (prep-phrase
      (prep to)
      (noun-phrase
        (noun-phrase
          (simple-noun-phrase (article the) (noun student))
          (prep-phrase 
            (prep in)
            (simple-noun-phrase (article the) (noun class))))
        (prep-phrase 
          (prep with) 
          (simple-noun-phrase (article the) (noun cat)))))))

;; 5th parse
(sentence
  (simple-noun-phrase (article the) (noun professor))
  (verb-phrase
    (verb lectures)
    (prep-phrase
      (prep to)
      (noun-phrase
        (simple-noun-phrase (article the) (noun student))
        (prep-phrase
          (prep in)
          (noun-phrase
            (simple-noun-phrase (article the) (noun class))
            (prep-phrase
              (prep with)
              (simple-noun-phrase (article the) (noun cat)))))))))

&lt;/pre&gt;

&lt;/div&gt;</description>
<dc:date>2007-03-04</dc:date>
<guid>https://wordaligned.org/articles/drawing-software-designs</guid>
<author>tag@wordaligned.org (Thomas Guest)</author>
<link>https://wordaligned.org/articles/drawing-software-designs</link>
<category>Design</category>
</item>

</channel>
</rss>
