<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:dc="http://purl.org/dc/elements/1.1/" >
<channel>
<title>Word Aligned</title>
<link>https://wordaligned.org</link>
<description>tales from the code face</description>
<dc:creator>tag@wordaligned.org</dc:creator>
<language>en-gb</language>
<item>
<title>From CVS to Subversion</title>
<description>&lt;p&gt;&lt;a href=&quot;https://wordaligned.org/docs/cvs2svn/index.html&quot;&gt;&amp;#8220;From CVS to Subversion&amp;#8221;&lt;/a&gt; begins:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;The time had come to upgrade our source control system. As &lt;a href=&quot;http://www.nongnu.org/cvs/&quot;&gt;CVS&lt;/a&gt;
users, the obvious choice was &lt;a href=&quot;http://subversion.tigris.org&quot;&gt;Subversion&lt;/a&gt;. This &lt;a href=&quot;https://wordaligned.org/docs/cvs2svn/index.html&quot;&gt;article&lt;/a&gt; describes
how the upgrade went and provides some practical advice for anyone
considering making a similar move.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;The full article is available &lt;a href=&quot;https://wordaligned.org/docs/cvs2svn/index.html&quot;&gt;here&lt;/a&gt; or in
&lt;a href=&quot;http://accu.org&quot;&gt;Overload&lt;/a&gt; 75.&lt;/p&gt;</description>
<dc:date>2006-10-07</dc:date>
<guid>https://wordaligned.org/articles/from-cvs-to-subversion</guid>
<author>tag@wordaligned.org (Thomas Guest)</author>
<link>https://wordaligned.org/articles/from-cvs-to-subversion</link>
<category>CVS</category>
</item>

<item>
<title>Pcl-cvs and Psvn Incompatibilities</title>
<description>&lt;p&gt;I think I &lt;a href=&quot;https://wordaligned.org/articles/version-control-for-third-party-software.html&quot;&gt;already mentioned&lt;/a&gt;
that I&amp;#8217;m using both &lt;a href=&quot;http://www.nongnu.org/cvs/&quot;&gt;CVS&lt;/a&gt; and
&lt;a href=&quot;http://subversion.tigris.org&quot;&gt;Subversion&lt;/a&gt; now: &lt;a href=&quot;http://subversion.tigris.org&quot;&gt;Subversion&lt;/a&gt; at home, &lt;a href=&quot;http://www.nongnu.org/cvs/&quot;&gt;CVS&lt;/a&gt; at work. In
general the similarities between the two make the context switch
fairly painless, but there&amp;#8217;s one gotcha which keeps on getting me.&lt;/p&gt;
&lt;p&gt;I use &lt;a href=&quot;http://www.cs.utah.edu/dept/old/texinfo/cvs/pcl-cvs_toc.html&quot;&gt;pcl-cvs&lt;/a&gt; as my &lt;a href=&quot;http://www.nongnu.org/cvs/&quot;&gt;CVS&lt;/a&gt; client: it&amp;#8217;s not perfect but it&amp;#8217;s more
than good enough if you&amp;#8217;re prepared to use the &lt;code&gt;cvs&lt;/code&gt; command line
client every so often for advanced merging and similar. One of the
routine &lt;a href=&quot;http://www.cs.utah.edu/dept/old/texinfo/cvs/pcl-cvs_toc.html&quot;&gt;pcl-cvs&lt;/a&gt; commands I use is &lt;code&gt;U&lt;/code&gt; which &lt;em&gt;undoes&lt;/em&gt; local
modifications.&lt;/p&gt;
&lt;p&gt;I use &lt;a href=&quot;http://www.xsteve.at/prg/emacs/psvn.el&quot;&gt;psvn&lt;/a&gt; as my &lt;a href=&quot;http://subversion.tigris.org&quot;&gt;Subversion&lt;/a&gt; client: it&amp;#8217;s not perfect but it&amp;#8217;s
more than good enough if you&amp;#8217;re prepared to use the &lt;code&gt;svn&lt;/code&gt; command line
client every so often for advanced merging and similar. One of the
routine commands I use is &lt;code&gt;U&lt;/code&gt;, which &lt;em&gt;updates&lt;/em&gt; everything.&lt;/p&gt;
&lt;p&gt;Ouch! &lt;code&gt;U&lt;/code&gt; means &lt;em&gt;update&lt;/em&gt; in &lt;a href=&quot;http://www.xsteve.at/prg/emacs/psvn.el&quot;&gt;psvn&lt;/a&gt; and &lt;em&gt;undo&lt;/em&gt; in &lt;a href=&quot;http://www.cs.utah.edu/dept/old/texinfo/cvs/pcl-cvs_toc.html&quot;&gt;pcl-cvs&lt;/a&gt;. For
once I&amp;#8217;m glad of the confirmation dialog which appears in the status bar:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Undo N files? (yes or no)&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;That&amp;#8217;s a no! I suppose I could hack the elisp &amp;#8230;&lt;/p&gt;</description>
<dc:date>2006-10-07</dc:date>
<guid>https://wordaligned.org/articles/pcl-cvs-and-psvn-incompatibilities</guid>
<author>tag@wordaligned.org (Thomas Guest)</author>
<link>https://wordaligned.org/articles/pcl-cvs-and-psvn-incompatibilities</link>
<category>CVS</category>
</item>

<item>
<title>Version Control for Third Party Software</title>
<description>&lt;p&gt;I had an email response from &lt;a href=&quot;http://www.CoDoJo.net&quot;&gt;Mike&lt;/a&gt; to my
earlier &lt;a href=&quot;https://wordaligned.org/articles/personal-version-control.html&quot;&gt;post on personal version control&lt;/a&gt;.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&amp;#8230; What&amp;#8217;s your take on third party sources? We had a discussion
today about putting &lt;a href=&quot;http://sourceforge.net/projects/cppunit&quot;&gt;CPPUnit&lt;/a&gt; under &lt;a href=&quot;http://www.nongnu.org/cvs/&quot;&gt;CVS&lt;/a&gt; control for instance and
didn&amp;#8217;t really come to a solution. Do we drop the raw source download
into CVS? Or do we build it first and just import the headers and
libraries? Or do we just copy the headers and libraries into the
project-under-test&amp;#8217;s source tree? Be interested to hear your
thoughts.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Coincidentally, this comes at a time when:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;I&amp;#8217;m busy putting some third party code under source control, and&lt;/li&gt;
&lt;li&gt;I find myself using &lt;a href=&quot;http://www.nongnu.org/cvs/&quot;&gt;CVS&lt;/a&gt; rather than &lt;a href=&quot;http://subversion.tigris.org&quot;&gt;Subversion&lt;/a&gt;.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;span id=&quot;continue-reading&quot;/&gt;&lt;/p&gt;
&lt;h4 id=&quot;back-to-cvs&quot;&gt;Back to CVS&lt;/h4&gt;
&lt;p&gt;If I had to use a version control system which wasn&amp;#8217;t &lt;a href=&quot;http://subversion.tigris.org&quot;&gt;Subversion&lt;/a&gt;
then it would be &lt;a href=&quot;http://www.nongnu.org/cvs/&quot;&gt;CVS&lt;/a&gt;, no question. CVS is excellent, but &amp;#8212; in
my opinion &amp;#8212; Subversion is better in just about every
way. Fortunately it isn&amp;#8217;t too hard to switch between the two:
Subversion at home, CVS at work. Of course, it&amp;#8217;s &lt;em&gt;technically&lt;/em&gt;
not that hard to migrate a CVS repository to a Subversion one,
but I digress &amp;#8230;&lt;/p&gt;
&lt;h4 id=&quot;version-control-for-third-party-software&quot;&gt;Version Control for Third Party Software&lt;/h4&gt;
&lt;p&gt;Question: When should you put third party software under version control?&lt;/p&gt;
&lt;p&gt;Answer: It depends.&lt;/p&gt;
&lt;p&gt;Question: &lt;span /&gt;When should you put third party source code under version
control, and when should you put in pre-built binaries?&lt;/p&gt;
&lt;p&gt;Answer: It depends. You can always do both!&lt;/p&gt;
&lt;p&gt;The goal, I suppose, is to be able to build your product starting with
nothing more than access to the version control system. This is a
little simplistic. For a start, you can&amp;#8217;t access the version control
system unless you have the client software installed. And what about a
compiler? Are you going to check out GCC and build it from source?
Probably not. Though, if your product happens to be a Linux
distribution, maybe. Clearly, a line has to be drawn.&lt;/p&gt;
&lt;p&gt;I think it&amp;#8217;s fairly clear which side of the line &lt;a href=&quot;http://sourceforge.net/projects/cppunit&quot;&gt;CPPUnit&lt;/a&gt; lies on.&lt;/p&gt;
&lt;h4 id=&quot;putting-cppunit-under-version-control&quot;&gt;Putting &lt;a href=&quot;http://sourceforge.net/projects/cppunit&quot;&gt;CPPUnit&lt;/a&gt; under version control&lt;/h4&gt;
&lt;p&gt;In &lt;a href=&quot;http://www.CoDoJo.net&quot;&gt;Mike&amp;#8217;s&lt;/a&gt; case, I think right the choice is
fairly clear. &lt;a href=&quot;http://sourceforge.net/projects/cppunit&quot;&gt;CPPUnit&lt;/a&gt; is &lt;em&gt;only&lt;/em&gt; available as source code &amp;#8212; there
are no pre-built libraries for different platforms.&lt;/p&gt;
&lt;p&gt;This means that you&amp;#8217;ll have to figure out how to build it yourself and
how to integrate it into your product, which is a non-trivial
activity. Even if you do decide, for convenience, to check the
derived libraries into the version control system, you&amp;#8217;ll want to
make sure that you also check in the source itself and the build
scripts, so you can regenerate the libraries easily.&lt;/p&gt;
&lt;p&gt;Ideally, though, you just check in the source code and the derived
files are handled directly by your build system. If the build system
is sound, a simple dependency check means you won&amp;#8217;t waste time
regenerating the libraries.&lt;/p&gt;
&lt;p&gt;In fact, if you don&amp;#8217;t intend to tinker with the &lt;a href=&quot;http://sourceforge.net/projects/cppunit&quot;&gt;CPPUnit&lt;/a&gt; source,
you might even just check in the tarred and zipped archive &amp;#8212; exactly
as downloaded from &lt;a href=&quot;http://sourceforge.net&quot;&gt;SourceForge&lt;/a&gt; &amp;#8212; and have
your build system unpack and build it.&lt;/p&gt;
&lt;h4 id=&quot;vendor-branches&quot;&gt;Vendor Branches&lt;/h4&gt;
&lt;p&gt;Both CVS and Subversion have a concept of &lt;a href=&quot;http://svnbook.red-bean.com/en/1.2/svn.advanced.vendorbr.html&quot;&gt;vendor
branches&lt;/a&gt;.
Vendor branches are used to manage third party code, and also to manage
any changes you make to this code. Thus, if you decide, at some point
in future, to upgrade to a newer revision of &lt;a href=&quot;http://sourceforge.net/projects/cppunit&quot;&gt;CPPUnit&lt;/a&gt;, you can do
so in a way which merges in any local modifications you made to your
current version of &lt;a href=&quot;http://sourceforge.net/projects/cppunit&quot;&gt;CPPUnit&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;This is a bit fiddly &amp;#8212; in both
&lt;a href=&quot;http://ximbiot.com/cvs/manual/cvs-1.11.22/cvs_13.html#SEC103&quot;&gt;CVS&lt;/a&gt;
and
&lt;a href=&quot;http://svnbook.red-bean.com/en/1.2/svn.advanced.vendorbr.html&quot;&gt;Subversion&lt;/a&gt;. If
you can avoid such modifications, or apply them directly to the code
in the CPPUnit SourceForge
&lt;a href=&quot;http://sourceforge.net/projects/cppunit&quot;&gt;project&lt;/a&gt;, I&amp;#8217;d suggest you
do.&lt;/p&gt;
&lt;h4 id=&quot;subversion-externals&quot;&gt;Subversion Externals&lt;/h4&gt;
&lt;p&gt;If you use Subversion you might also consider using an
&lt;a href=&quot;http://svnbook.red-bean.com/en/1.2/svn.advanced.externals.html&quot;&gt;externals&lt;/a&gt;
reference to the third party code. But that will have to be the subject
of another post.&lt;/p&gt;</description>
<dc:date>2006-09-15</dc:date>
<guid>https://wordaligned.org/articles/version-control-for-third-party-software</guid>
<author>tag@wordaligned.org (Thomas Guest)</author>
<link>https://wordaligned.org/articles/version-control-for-third-party-software</link>
<category>CVS</category>
</item>

<item>
<title>Keyword Substitution - Just say No!</title>
<description>&lt;p&gt;&lt;a href=&quot;http://subversion.tigris.org&quot;&gt;Subversion&lt;/a&gt; supports keyword substitution &amp;#8212; and has to, really, since it
claims to be &amp;#8220;a compelling replacement for &lt;a href=&quot;http://www.nongnu.org/cvs/&quot;&gt;CVS&lt;/a&gt;&amp;#8221;.&lt;/p&gt;
&lt;p&gt;Now, by default, when you import a text file into &lt;a href=&quot;http://www.nongnu.org/cvs/&quot;&gt;CVS&lt;/a&gt;, keyword
substitution is enabled. And by default, when you use
&lt;a href=&quot;http://cvs2svn.tigris.org&quot;&gt;&lt;code&gt;cvs2svn&lt;/code&gt;&lt;/a&gt; to
convert your &lt;a href=&quot;http://www.nongnu.org/cvs/&quot;&gt;CVS&lt;/a&gt; repository into a &lt;a href=&quot;http://subversion.tigris.org&quot;&gt;Subversion&lt;/a&gt; repository these
particular &lt;a href=&quot;http://www.nongnu.org/cvs/&quot;&gt;CVS&lt;/a&gt; settings are honoured, and keyword substitution properties
are enabled. Out of the box, however, &lt;a href=&quot;http://subversion.tigris.org&quot;&gt;Subversion&lt;/a&gt; does not apply
keyword substitution to text files. Yes, you can configure it to
&lt;a href=&quot;http://svnbook.red-bean.com/en/1.2/svn.advanced.props.html#svn.advanced.props.auto&quot;&gt;automatically&lt;/a&gt;
turn keyword substitution on for certain file types, but by
default, the file you check out is the same as the file you checked in.&lt;/p&gt;
&lt;p&gt;&lt;span /&gt;Let&amp;#8217;s repeat that: &lt;em&gt;the file you check out is the same as the file you checked in&lt;/em&gt;.
Surely this is the behaviour we really want from a version control system?&lt;/p&gt;
&lt;p&gt;So, while &lt;a href=&quot;http://subversion.tigris.org&quot;&gt;Subversion&lt;/a&gt; does maintain backwards compatability with &lt;a href=&quot;http://www.nongnu.org/cvs/&quot;&gt;CVS&lt;/a&gt;,
moving forwards, we should leave keyword substitution disabled. If you
are migrating from &lt;a href=&quot;http://www.nongnu.org/cvs/&quot;&gt;CVS&lt;/a&gt; to &lt;a href=&quot;http://subversion.tigris.org&quot;&gt;Subversion&lt;/a&gt;, take the opportunity to use
&lt;a href=&quot;http://cvs2svn.tigris.org&quot;&gt;&lt;code&gt;cvs2svn&lt;/code&gt;&lt;/a&gt;&amp;#8217;s
&lt;code&gt;--keywords-off&lt;/code&gt; switch.&lt;/p&gt;
&lt;p&gt;&lt;span id=&quot;continue-reading&quot;/&gt;&lt;/p&gt;
&lt;h4 id=&quot;what-keyword-substitution-does&quot;&gt;What Keyword Substitution Does&lt;/h4&gt;
&lt;p&gt;If a file has keyword substitution enabled, then tags within that file of
the form &lt;code&gt;$Id: $&lt;/code&gt; will be expanded when the file is checked in. That is to say,
they end up reading something like:&lt;/p&gt;
&lt;p&gt;$Id: calc.c 148 2002-07-28 21:30:43Z sally $&lt;/p&gt;
&lt;p&gt;which is interpreted to mean that the file &lt;code&gt;calc.c&lt;/code&gt; was last changed
in revision 148 on the evening of July 28, 2002 by the user &lt;code&gt;sally&lt;/code&gt;.&lt;/p&gt;
&lt;h4 id=&quot;why-keyword-substitution-is-a-bad-idea&quot;&gt;Why Keyword Substitution is a Bad Idea&lt;/h4&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;Clearly, the substituted text duplicates information which properly
  belongs within the source control system. By enabling it, we
  introduce unnecessary differences in file comparisons.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Keyword substitution modifies the file during check in, leading to a
  subsequent re-rebuild. Not good if lots of files depend on the file
  you&amp;#8217;ve modified.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;When performing a diff/patch between source trees, it often happens
  that a patch will result in dozens of conflicts over the &lt;code&gt;$Id:$&lt;/code&gt;
  field alone, because the patch tool is not intelligent enough to
  ignore it.&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;</description>
<dc:date>2006-08-02</dc:date>
<guid>https://wordaligned.org/articles/keyword-substitution-just-say-no</guid>
<author>tag@wordaligned.org (Thomas Guest)</author>
<link>https://wordaligned.org/articles/keyword-substitution-just-say-no</link>
<category>CVS</category>
</item>

</channel>
</rss>
