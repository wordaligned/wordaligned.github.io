<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:dc="http://purl.org/dc/elements/1.1/" >
<channel>
<title>Word Aligned</title>
<link>http://wordaligned.org</link>
<description>tales from the code face</description>
<dc:creator>tag@wordaligned.org</dc:creator>
<language>en-gb</language>
<item>
<title>From bytes to strings in Python and back again</title>
<description>&lt;p&gt;Low level languages like C have little opinion about what goes in a string, which is simply a null-terminated sequence of bytes. Those bytes could be ASCII or UTF-8 encoded text, or they could be raw data &amp;#8212; object code, for example. It&amp;#8217;s quite possible and legal to have a C string with mixed content.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;char const * mixed =
    &quot;EURO SIGN &quot;          // ASCII
    &quot;UTF-8 \xE2\x82\xAC &quot; // UTF-8 encoded EURO SIGN
    &quot;Latin-9 \xA4&quot;;       // Latin-9 encoded EURO SIGN
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;This might seem indisciplined and risky but it can be useful. Environment variables are notionally text but actually C strings, for example, meaning they can hold whatever data you want. Similarly filenames and command line parameters are only loosely text.&lt;/p&gt;
&lt;p&gt;A higher level language like Python makes a strict distinction between bytes and strings. Bytes objects contain raw data &amp;#8212; a sequence of octets &amp;#8212; whereas strings are Unicode sequences. Conversion between the two types is explicit: you encode a string to get bytes, specifying an encoding (which defaults to UTF-8); and you decode bytes to get a string. Clients of these functions should be aware that such conversions may fail, and should consider how failures are handled.&lt;/p&gt;
&lt;p&gt;Simply put, a string in Python is a valid Unicode sequence. Real world text data may not be. Programmers need to take charge of reconciling any discrepancies.&lt;/p&gt;
&lt;p&gt;We faced such problems recently &lt;a href=&quot;https://clinithink.com&quot;&gt;at work&lt;/a&gt;. We&amp;#8217;re in the business of extracting meaning from clinical narratives &amp;#8212; text data stored on medical records systems in hospitals, for example. These documents may well have passed through a variety of systems. They may be unclear about their text encoding. They may not be encoded as they claim. So what? They can and do contain abbreviations, mispellings, jargon and colloquialisms. Refining the signal from such noise is our core business: if we can correctly interpret positional and temporal aspects of a sentence such as:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Previous fracture of left neck of femur&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;then we can surely deal with text which claims to be UTF-8 encoded but isn&amp;#8217;t really.&lt;/p&gt;
&lt;p&gt;Our application stack is server-based: a REST API to a Python application handles document ingest; lower down, a C++ engine does the actual document processing. The problem we faced was supporting a modern API capable of handling real world data.&lt;/p&gt;
&lt;p&gt;It&amp;#8217;s both undesirable and unnecessary to require clients to clean their text before submitting it. We want to make the ingest direct and idiomatic. Also, we shouldn&amp;#8217;t penalise clients whose data &lt;strong&gt;is&lt;/strong&gt; clean. Thus document upload is an HTTP POST request, and the document content is a JSON string &amp;#8212; rather than, say, base64 encoded binary data. Our server, however, will be permissive about the contents of this string.&lt;/p&gt;
&lt;p&gt;So far so good. &lt;a href=&quot;http://www.catb.org/jargon/html/P/Postels-Prescription.html&quot; title=&quot;Postel&#x27;s prescription&quot;&gt;Postel&amp;#8217;s prescription&lt;/a&gt; advises:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Be liberal in what you accept, and conservative in what you send.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;This would suggest accepting messy text data but presenting it in a cleaned up form. In our case, we &lt;strong&gt;do&lt;/strong&gt; normalise the input data &amp;#8212; a process which includes detecting and standardising date/time information, expanding abbreviations, fixing typos and so on &amp;#8212; but this normalised form links back to a faithful copy of the original data. What gets presented to the user is their own text annotated with our findings. That is, we subscribe to a &lt;a href=&quot;https://en.wikipedia.org/wiki/Garbage_in,_garbage_out&quot;&gt;more primitive prescription&lt;/a&gt; than Postel&amp;#8217;s:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Garbage in, garbage out&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;with the caveat that the garbage shouldn&amp;#8217;t be damaged in transit.&lt;/p&gt;
&lt;p&gt;Happily, there is a simple way to pass dodgy strings through Python. It&amp;#8217;s used in the standard library to handle text data which isn&amp;#8217;t guaranteed to be clean &amp;#8212; those environment variables, command line parameters, and filenames for example.&lt;/p&gt;
&lt;p&gt;The &lt;code&gt;surrogateescape&lt;/code&gt; error handler smuggles non-decodable bytes into the (Unicode) Python string in such a way that the original bytes can be recovered on encode, as described in &lt;a href=&quot;https://www.python.org/dev/peps/pep-0383/&quot; title=&quot;PEP 383 -- Non-decodable Bytes in System Character Interfaces&quot;&gt;PEP 383&lt;/a&gt;:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;On POSIX systems, Python currently applies the locale&amp;#8217;s encoding to convert the byte data to Unicode, failing for characters that cannot be decoded. With &lt;a href=&quot;https://www.python.org/dev/peps/pep-0383/&quot; title=&quot;PEP 383 -- Non-decodable Bytes in System Character Interfaces&quot;&gt;this PEP&lt;/a&gt;, non-decodable bytes &amp;gt;= 128 will be represented as lone surrogate codes U+DC80..U+DCFF.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;This workaround is possible because Unicode surrogates are intended for use in pairs. Quoting the Unicode specification, they &lt;a href=&quot;http://www.unicode.org/versions/Unicode9.0.0/ch03.pdf#G2630&quot;&gt;&amp;#8220;have no interpretation on their own&amp;#8221;&lt;/a&gt;. The lone trailing surrogate code &amp;#8212; the half-a-pair &amp;#8212; can only be the result of a &lt;code&gt;surrogateescape&lt;/code&gt; error handler being invoked, and the original bytes can be recovered by using the same error handler on encode.&lt;/p&gt;
&lt;p&gt;In conclusion, text data is handled differently in C++ and Python, posing a problem for layered applications. The &lt;code&gt;surrogateescape&lt;/code&gt; error handler provides a standard and robust way of closing the gap.&lt;/p&gt;
&lt;h2 id=&quot;unicode-surrogate-pairs&quot;&gt;Unicode Surrogate Pairs&lt;/h2&gt;
&lt;p&gt;&lt;a href=&quot;http://www.unicode.org/versions/Unicode9.0.0/ch03.pdf#G2630&quot;&gt;&lt;img src=&quot;http://wordaligned.org/images/unicode-surrogates.png&quot; alt=&quot;Surrogates&quot;/&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&quot;code-listing&quot;&gt;Code Listing&lt;/h2&gt;
&lt;pre&gt;&lt;code&gt;&amp;gt;&amp;gt;&amp;gt; mixed = b&quot;EURO SIGN \xE2\x82\xAC \xA4&quot;
&amp;gt;&amp;gt;&amp;gt; mixed
b&#x27;EURO SIGN \xe2\x82\xac \xa4&#x27;
&amp;gt;&amp;gt;&amp;gt; mixed.decode()
Traceback (most recent call last):
  File &quot;&amp;lt;stdin&amp;gt;&quot;, line 1, in &amp;lt;module&amp;gt;
UnicodeDecodeError: &#x27;utf-8&#x27; codec can&#x27;t decode byte 0xa4 in position 14:
  invalid start byte
&amp;gt;&amp;gt;&amp;gt; help(mixed.decode)
Help on built-in function decode:

decode(encoding=&#x27;utf-8&#x27;, errors=&#x27;strict&#x27;) method of builtins.bytes instance
    Decode the bytes using the codec registered for encoding.

    encoding
      The encoding with which to decode the bytes.
    errors
      The error handling scheme to use for the handling of decoding errors.
      The default is &#x27;strict&#x27; meaning that decoding errors raise a
      UnicodeDecodeError. Other possible values are &#x27;ignore&#x27; and &#x27;replace&#x27;
      as well as any other name registered with codecs.register_error that
      can handle UnicodeDecodeErrors.

&amp;gt;&amp;gt;&amp;gt; mixed.decode(errors=&#x27;surrogateescape&#x27;)
&#x27;EURO SIGN &amp;euro; \udca4&#x27;
&amp;gt;&amp;gt;&amp;gt; s = mixed.decode(errors=&#x27;surrogateescape&#x27;)
&amp;gt;&amp;gt;&amp;gt; s.encode()
Traceback (most recent call last):
  File &quot;&amp;lt;stdin&amp;gt;&quot;, line 1, in &amp;lt;module&amp;gt;
UnicodeEncodeError: &#x27;utf-8&#x27; codec can&#x27;t encode character &#x27;\udca4&#x27; in position 12:
  surrogates not allowed
&amp;gt;&amp;gt;&amp;gt; s.encode(errors=&#x27;surrogateescape&#x27;)
b&#x27;EURO SIGN \xe2\x82\xac \xa4&#x27;
&lt;/code&gt;&lt;/pre&gt;</description>
<dc:date>2017-03-24</dc:date>
<guid>http://wordaligned.org/articles/from-bytes-to-strings-in-python-and-back-again</guid>
<author>tag@wordaligned.org (Thomas Guest)</author>
<link>http://wordaligned.org/articles/from-bytes-to-strings-in-python-and-back-again</link>
<category>Unicode</category>
</item>

</channel>
</rss>
