<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:dc="http://purl.org/dc/elements/1.1/" >
<channel>
<title>Word Aligned</title>
<link>http://wordaligned.org</link>
<description>tales from the code face</description>
<dc:creator>tag@wordaligned.org</dc:creator>
<language>en-gb</language>
<item>
<title>Productivity++ != Better</title>
<description>&lt;p&gt;When it comes to productivity there seems to be an assumption that it&amp;#8217;s a good thing, and that more equals better. I&amp;#8217;d like to question that. What matters is producing the right stuff, whatever that is, and if you&amp;#8217;re not sure, producing less would be better.&lt;/p&gt;
&lt;p&gt;It can be hard to cancel work which is in progress or which has already been completed, even though, as software developers, version control can faithfully store and restore our work should we need it.&lt;/p&gt;
&lt;p&gt;More tests does not equal better either. An increasing unit test count would seem uncontroversial, but let&amp;#8217;s not forget we&amp;#8217;re aiming for coverage and completeness whilst avoiding redundancy.  Good unit tests and good design go hand in hand. Good unit tests avoid extended setup and good design reduces the need for combinatorial test suites. More system tests &lt;strong&gt;will&lt;/strong&gt; slow down development, especially if they&amp;#8217;re &lt;a href=&quot;http://googletesting.blogspot.co.uk/2016/05/flaky-tests-at-google-and-how-we.html&quot;&gt;flaky&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;I went to a wonderful and detailed &lt;a href=&quot;https://www.infoq.com/presentations/test-complexity&quot;&gt;talk at ACCU 2014 by Wojciech Seliga&lt;/a&gt;. He described his time as a development manager at Atlassian and the various steps taken to improve their CI builds: to speed them up and get them passing, that is. One particularly effective step was the daring elimination of an entire suite of fragile system tests. Late one evening, after a drink or two, a senior engineer just deleted them. Those tests haven&amp;#8217;t failed since (!).&lt;/p&gt;
&lt;p&gt;I wonder how that engineer felt. Nervous maybe, a bit reckless perhaps. But productive? Can destruction be productive?&lt;/p&gt;
&lt;p&gt;On a similar note, one of the best changes made to the code base I work on has been to kill off unwanted configurations. We no longer support 32 bit builds: eliminating them has removed an entire class of integer conversion issues and slashed CI turnaround times. A reductive act, but one which allows us to produce more of what&amp;#8217;s wanted.&lt;/p&gt;
&lt;p&gt;What is wanted though?&lt;/p&gt;
&lt;p&gt;The trouble is, if we&amp;#8217;re not sure what to do, we like to do something, and we like to be seen to do something. We like to produce. We like to deliver. We don&amp;#8217;t like to sit around in meetings talking about what to do. In these circumstances, though, production is questionable. More than once I have seen clean architecture crumble then decay, smothered by unwanted features.&lt;/p&gt;
&lt;p&gt;Project dashboards can add to the problem. Graphics showing who added the most lines of code are open to misinterpretation and gaming. Who had the best ideas? Who reduced, removed or simplified? Does your dashboard display these metrics?&lt;/p&gt;
&lt;p&gt;Remember, we are software developers, not software producers.&lt;/p&gt;</description>
<dc:date>2016-07-14</dc:date>
<guid>http://wordaligned.org/articles/productivity</guid>
<author>tag@wordaligned.org (Thomas Guest)</author>
<link>http://wordaligned.org/articles/productivity</link>
<category>ACCU</category>
</item>

<item>
<title>Go! Steady. Ready?</title>
<description>&lt;p&gt;I&amp;#8217;m looking forward to &lt;a href=&quot;http://accu.org/index.php/conferences/accu_conference_2016/accu2016_sessions#Go!_Steady._Ready?&quot;&gt;talking about Go&lt;/a&gt; at the &lt;a href=&quot;http://accu.org/index.php/conferences/accu_conference_2016&quot;&gt;ACCU 2016 Conference&lt;/a&gt; this Friday. If you&amp;#8217;d like to find out what connects an Easter egg with &lt;a href=&quot;https://en.wikipedia.org/wiki/Eadweard_Muybridge#Stanford_and_horse_gaits&quot;&gt;flying horses&lt;/a&gt; and the runner in the green vest, then come along. Expect live coding, concurrent functions and answers.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;&amp;gt;&amp;gt;&amp;gt; import antigravity
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;a data-flickr-embed=&quot;true&quot;  href=&quot;https://www.flickr.com/photos/thomasguest/25883297343/in/dateposted-friend/&quot; title=&quot;muybridge-horse&quot;&gt;&lt;img src=&quot;https://farm2.staticflickr.com/1707/25883297343_356cc33871.jpg&quot; width=&quot;500&quot; height=&quot;310&quot; alt=&quot;muybridge-horse&quot;&gt;&lt;/a&gt;&lt;script async src=&quot;http://wordaligned.org//embedr.flickr.com/assets/client-code.js&quot; charset=&quot;utf-8&quot;&gt;&lt;/script&gt;&lt;/p&gt;
&lt;p&gt;&lt;a data-flickr-embed=&quot;true&quot;  href=&quot;https://www.flickr.com/photos/thomasguest/17301552044/in/datetaken/&quot; title=&quot;Tyntesfield 10k 2014&quot;&gt;&lt;img src=&quot;https://farm6.staticflickr.com/5449/17301552044_92e033c6d2_z.jpg&quot; width=&quot;547&quot; height=&quot;640&quot; alt=&quot;Tyntesfield 10k 2014&quot;&gt;&lt;/a&gt;&lt;script async src=&quot;http://wordaligned.org//embedr.flickr.com/assets/client-code.js&quot; charset=&quot;utf-8&quot;&gt;&lt;/script&gt;&lt;/p&gt;</description>
<dc:date>2016-04-18</dc:date>
<guid>http://wordaligned.org/articles/go-steady-ready</guid>
<author>tag@wordaligned.org (Thomas Guest)</author>
<link>http://wordaligned.org/articles/go-steady-ready</link>
<category>ACCU</category>
</item>

<item>
<title>Jokey Code?</title>
<description>&lt;h3 id=&quot;choose-talks&quot;&gt;Choose Talks&lt;/h3&gt;
&lt;p&gt;I usually leave it as late as possible before deciding which sessions to attend at the &lt;a href=&quot;http://accu.org/index.php/conferences/accu_conference_2015&quot;&gt;ACCU conference&lt;/a&gt;. There&amp;#8217;s ample time to study the &lt;a href=&quot;http://accu.org/index.php/conferences/accu_conference_2015/accu2015_schedule&quot;&gt;schedule&lt;/a&gt; when you&amp;#8217;re there and anyway, it&amp;#8217;s subject to change.&lt;/p&gt;
&lt;p&gt;This year I stuck with this policy with a couple of notable exceptions. First, there was &lt;a href=&quot;http://wordaligned.org/docs/oulipo/&quot;&gt;my own talk&lt;/a&gt;, where I noted that computer programmers are writers who impose formal constraints on their texts, and who can learn from other writers who practice the same discipline. Second, there was Peter Hilton&amp;#8217;s talk, &lt;a href=&quot;http://accu.org/index.php/conferences/accu_conference_2015/accu2015_sessions#how_to_name_things_-_the_hardest_problem_in_programming&quot;&gt;&amp;#8220;How to name things &amp;#8212; the hardest problem in programming&amp;#8221;&lt;/a&gt;, in which he argued more generally that programmers had much to learn from writers.&lt;/p&gt;
&lt;p&gt;I &lt;strong&gt;had&lt;/strong&gt; to see Peter Hilton&amp;#8217;s talk and it did not disappoint. It engaged me at the time, in discussions afterwards, and it continues to make me think. I won&amp;#8217;t post a full response here but I do want to consider one aspect: humour.&lt;/p&gt;
&lt;div&gt;&lt;iframe src=&quot;http://wordaligned.org//www.slideshare.net/slideshow/embed_code/key/qnND7jVVQOmWCS&quot; width=&quot;425&quot; height=&quot;355&quot; frameborder=&quot;0&quot; marginwidth=&quot;0&quot; marginheight=&quot;0&quot; scrolling=&quot;no&quot; style=&quot;border:1px solid #CCC; border-width:1px; margin-bottom:5px; max-width: 100%;&quot; allowfullscreen&gt;&lt;/iframe&gt;&lt;/div&gt;

&lt;h3 id=&quot;tell-jokes&quot;&gt;Tell Jokes&lt;/h3&gt;
&lt;p&gt;Peter Hilton argued we should pay attention to tips from the likes of George Orwell and Stephen King because their advice is better written and also because it&amp;#8217;s &lt;strong&gt;funnier&lt;/strong&gt;. Why does this humourous aspect matter? Well, perhaps we&amp;#8217;re more likely to listen to someone who makes us laugh. Witty advice sounds less pompous.&lt;/p&gt;
&lt;p&gt;It goes deeper than this, though. Another point from the talk:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Improve your general vocabulary. Read books, especially funny novels.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Why &lt;strong&gt;funny novels&lt;/strong&gt;? At this point in the talk Peter Hilton disingenously suggested such books were easier to read. A point he made later goes deeper:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Tell jokes &amp;#8230; Puns are important for naming, because they rely on double-meanings. Spotting double-meanings is the essential skill for avoiding ambiguous names.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Interesting! I agree that word play and word power are linked: but do you need to be a punster to avoid ambiguity? I&amp;#8217;m not sure. In the words of &lt;a href=&quot;http://chrisoldwood.blogspot.co.uk/2015/04/the-daily-stand-up.html&quot;&gt;Chris Oldwood&lt;/a&gt;:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;I&amp;#8217;ve been writing more functional code lately. I recently tried a few numerical recipes with currying functions, but all I got was a NaN.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;a href=&quot;http://en.wikipedia.org/wiki/Naan&quot;&gt;&lt;img src=&quot;http://wordaligned.org/images/naan.jpg&quot; alt=&quot;all I got was a NaN&quot;/&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h3 id=&quot;laughable-code&quot;&gt;Laughable Code&lt;/h3&gt;
&lt;p&gt;Is there a place for humour in code? Rarely, I&amp;#8217;d say. Code is read,
re-read and then read again: most jokes become tired and then
irritating under such scrutiny. Peter Hilton, though, described his
amusement on discovering this &lt;a href=&quot;http://www.slideshare.net/pirhilton/how-to-name-things-the-hardest-problem-in-programming/55&quot;&gt;function&lt;/a&gt;, which configures
and starts &lt;a href=&quot;http://camel.apache.org/&quot;&gt;Apache Camel&lt;/a&gt;:&lt;/p&gt;
&lt;div class=&quot;typocode&quot;&gt;

&lt;pre class=&quot;prettyprint&quot;&gt;/** Configure and start Apache Camel */
def mountCamel() {
    Logger.info(&quot;Starting Camel...&quot;)
    val context = new DefaultCamelContext()
    configuredRoutes foreach { route =&amp;gt;
        context.addRoutes(route)
    }
    context.start()
}

&lt;/pre&gt;

&lt;/div&gt;

&lt;p&gt;The obvious alternative, &lt;code&gt;startCamel()&lt;/code&gt;, just isn&amp;#8217;t funny enough, apparently. I&amp;#8217;m glad the author resisted the temptation to call it &lt;code&gt;humpCamel()&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;I&amp;#8217;m reminded of a colleague with a fondness for &lt;a href=&quot;http://en.wikipedia.org/wiki/Franglais&quot;&gt;franglais&lt;/a&gt; who
would, for example, check in a graphics routine called
&lt;code&gt;do_le_render()&lt;/code&gt;. Mildly amusing first time round, maybe, but less so
each time it got revisited to fix les bugs.&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://www.flickr.com/photos/ahmedrabea/7929947448&quot; title=&quot;Ark of Desert - Camel by Ahmed Rabea, on Flickr&quot;&gt;&lt;img src=&quot;https://farm9.staticflickr.com/8180/7929947448_06dd57700c_z.jpg&quot; width=&quot;640&quot; height=&quot;427&quot; alt=&quot;Ark of Desert - Camel&quot;/&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;I don&amp;#8217;t see many jokes in the code I read and I don&amp;#8217;t think it&amp;#8217;s
because the authors lack a sense of humour. Just as &lt;a href=&quot;http://wordaligned.org/articles/entertaining-documentation&quot; title=&quot;Entertaining documentation&quot;&gt;good
documentation should inform rather than entertain&lt;/a&gt;, good code
should express complex ideas as plainly as possible: humour doesn&amp;#8217;t
get a look in.&lt;/p&gt;
&lt;p&gt;There are exceptions. We&amp;#8217;ve already seen the name &amp;#8220;camel&amp;#8221; used for something which isn&amp;#8217;t a camel: libraries, products and projects can benefit from short, memorable and quirky names. In unit tests, too, code is less complex, which can leave space for quips and in-jokes. When an integer is expected it often turns out to be &lt;a href=&quot;https://www.google.co.uk/webhp?q=the%20answer%20to%20life%20the%20universe%20and%20everything&quot;&gt;42&lt;/a&gt;. Binary input data is laid out to form strange messages when viewed as &lt;a href=&quot;http://nedbatchelder.com/text/hexwords.html&quot;&gt;hexadecimal&lt;/a&gt;. If some text &amp;#8212; any old text &amp;#8212; is needed, &lt;a href=&quot;http://en.wikipedia.org/wiki/Lorem_ipsum&quot;&gt;lorem ipsum&lt;/a&gt; would indicate a lack of imagination. Even so, well-chosen names and values from the domain under test would probably be more helpful when a failing test needs fixing.&lt;/p&gt;
&lt;h3 id=&quot;charming-code&quot;&gt;Charming code&lt;/h3&gt;
&lt;p&gt;I&amp;#8217;m down on jokes in code but I do think code can be a pleasure to read and that well written programs can delight. Whilst I agree with Peter Hilton&amp;#8217;s recommendation to read widely and well, I was surprised he didn&amp;#8217;t recommend reading &lt;strong&gt;code&lt;/strong&gt;, and when I discussed this with him afterwards he asked, where is it? Where is it! That will be the subject of another article, but off the top of my head, &lt;a href=&quot;http://www.freetype.org&quot;&gt;freetype&lt;/a&gt;, &lt;a href=&quot;https://www.ffmpeg.org/&quot;&gt;ffmpeg&lt;/a&gt;, &lt;a href=&quot;http://llvm.org/&quot;&gt;llvm&lt;/a&gt;, the Go and Python standard libraries. If you read through any of these you&amp;#8217;ll enjoy their clarity and internal consistency &amp;#8212; their style; and should you code against them, these same attributes show through their interfaces.&lt;/p&gt;
&lt;p&gt;I haven&amp;#8217;t found any jokes in the &lt;a href=&quot;https://www.sqlite.org/&quot;&gt;SQLite&lt;/a&gt; source but if you decide
to integrate it in your application, when you check the license you&amp;#8217;ll
find, instead, a &lt;a href=&quot;https://www.sqlite.org/different.html&quot;&gt;blessing&lt;/a&gt;. This may seem funny &amp;#8212; unusual,
certainly &amp;#8212; but it&amp;#8217;s actually quite serious.&lt;/p&gt;
&lt;blockquote&gt;&lt;p&gt;May you do good and not evil&lt;br/&gt;
May you find forgiveness for yourself and forgive others&lt;br/&gt;
May you share freely, never taking more than you give.&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;We may not issue blessings with our own code but maybe we can find other ways to surprise and delight.&lt;/p&gt;</description>
<dc:date>2015-05-11</dc:date>
<guid>http://wordaligned.org/articles/jokey-code</guid>
<author>tag@wordaligned.org (Thomas Guest)</author>
<link>http://wordaligned.org/articles/jokey-code</link>
<category>ACCU</category>
</item>

<item>
<title>Speaking at the ACCU Conference 2015</title>
<description>&lt;p&gt;This time last week I was on my way to the &lt;a href=&quot;http://accu.org/index.php/conferences/accu_conference_2015&quot; title=&quot;ACCU 2015 main page&quot;&gt;ACCU 2015 conference&lt;/a&gt; in Bristol. The past couple of years I&amp;#8217;ve been, but for one day only. This year, as a presenter of a full length (90 minute!) session I got to go to the whole thing.&lt;/p&gt;
&lt;p&gt;Being a speaker made all the difference. Having the chance to attend plenty of sessions meant I was more relaxed about choosing which ones to pick &amp;#8212; each slot during the day offered &lt;a href=&quot;http://accu.org/index.php/conferences/accu_conference_2015/accu2015_schedule&quot; title=&quot;ACCU 2015 Schedule&quot;&gt;5 options&lt;/a&gt; &amp;#8212; and less upset if I thought, 10 minutes into a presentation, that I could have picked something else. Perhaps as a consequence of this, I was happy with all my choices. That said, I&amp;#8217;d love the whole thing to run again so I could take a second route through the schedule.&lt;/p&gt;
&lt;blockquote class=&quot;twitter-tweet&quot; lang=&quot;en&quot;&gt;&lt;p&gt;I have no idea what &lt;a href=&quot;https://twitter.com/thomasguest&quot;&gt;@thomasguest&lt;/a&gt;&amp;rsquot;s &lt;a href=&quot;https://twitter.com/hashtag/accu2015?src=hash&quot;&gt;#accu2015&lt;/a&gt; talk will be about, which is why I&amp;rsquot;m here. &amp;ldqou;Lessons from the OuLiPo&amp;rdquo;. &lt;a href=&quot;http://t.co/l6CKhCBJ7f&quot;&gt;pic.twitter.com/l6CKhCBJ7f&lt;/a&gt;&lt;/p&gt;&amp;mdash; Robert Smallshire (@robsmallshire) &lt;a href=&quot;https://twitter.com/robsmallshire/status/591256120783728640&quot;&gt;April 23, 2015&lt;/a&gt;&lt;/blockquote&gt;

&lt;p&gt;I&amp;#8217;d run a couple of practice versions of my talk at ACCU local groups in &lt;a href=&quot;http://www.meetup.com/ACCU-Bristol&quot;&gt;Bristol&lt;/a&gt; and then in &lt;a href=&quot;http://www.meetup.com/ACCU-Oxford&quot;&gt;Oxford&lt;/a&gt;, which meant I was comfortable with the material and convinced it would hold an audience&amp;#8217;s interest.&lt;/p&gt;
&lt;div&gt;&lt;blockquote class=&quot;twitter-tweet&quot; lang=&quot;en&quot;&gt;&lt;p&gt;Beautiful talk by &lt;a href=&quot;https://twitter.com/thomasguest&quot;&gt;@thomasguest&lt;/a&gt; at &lt;a href=&quot;https://twitter.com/hashtag/accu2015?src=hash&quot;&gt;#accu2015&lt;/a&gt; on adopting artificial constraints in design and programming guided by the OuLiPo.&lt;/p&gt;&amp;mdash; Robert Smallshire (@robsmallshire) &lt;a href=&quot;https://twitter.com/robsmallshire/status/591264421470666752&quot;&gt;April 23, 2015&lt;/a&gt;&lt;/blockquote&gt;&lt;script async src=&quot;http://wordaligned.org//platform.twitter.com/widgets.js&quot; charset=&quot;utf-8&quot;&gt;&lt;/script&gt;&lt;/div&gt;

&lt;p&gt;Some things to consider for next year:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;I&amp;#8217;m going to submit another talk proposal, and if it&amp;#8217;s accepted&lt;/li&gt;
&lt;li&gt;I&amp;#8217;ll practise it twice, at least and&lt;/li&gt;
&lt;li&gt;I&amp;#8217;ll get a remote control.&lt;/li&gt;
&lt;li&gt;My laptop is too bulky for comfort. &lt;a href=&quot;https://www.themobilepresenter.com/&quot;&gt;Dirk Haun&lt;/a&gt; ran &lt;a href=&quot;http://www.slideshare.net/dhaun/braindump-how-to-leave-your-knowledge-when-leaving-your-job&quot;&gt;his talk&lt;/a&gt; from a tablet. Could a phone be used?&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;My lightning talk &amp;#9758; &lt;a href=&quot;http://wordaligned.org/knights-tour&quot; title=&quot;Perhaps the greatest 20th century novel &amp;mdash; Donald Knuth&quot;&gt;Life A User&amp;#8217;s Manual&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Slides for my main talk &amp;#9758; &lt;a href=&quot;http://wordaligned.org/docs/oulipo/&quot;&gt;Lessons from the OuLiPo&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;I would like to thank all the organisers of the conference, everyone who presented, and everyone who attended. Especial mention to &lt;a href=&quot;https://twitter.com/jonjagger&quot; title=&quot;Loves people; software; fishing; built http://cyber-dojo.org&quot;&gt;Jon Jagger&lt;/a&gt; who announced that this would be his last year as conference chair. Let&amp;#8217;s hope that in future years the mail bag continues to be inundated with letters! &lt;a href=&quot;http://www.goodliffe.net/&quot;&gt;Pete Goodliffe&lt;/a&gt; too deserves a special mention for setting up three excellent lightning talk sessions. Controlled anarchy &amp;mdash; he&amp;#8217;s good at it!&lt;/p&gt;</description>
<dc:date>2015-04-28</dc:date>
<guid>http://wordaligned.org/articles/speaking-at-the-accu-conference-2015</guid>
<author>tag@wordaligned.org (Thomas Guest)</author>
<link>http://wordaligned.org/articles/speaking-at-the-accu-conference-2015</link>
<category>ACCU</category>
</item>

<item>
<title>Lessons from the OuLiPo</title>
<description>&lt;p&gt;I&amp;#8217;m delighted to announce that my talk, &lt;a href=&quot;http://accu.org/index.php/conferences/accu_conference_2015/accu2015_sessions#lessons_from_the_oulipo&quot;&gt;Lessons from the OuLiPo&lt;/a&gt;, has been accepted for the &lt;a href=&quot;http://accu.org/index.php/conferences/accu_conference_2015&quot; title=&quot;ACCU 2015 conference&quot;&gt;ACCU 2015 conference&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://wordaligned.org/images/lessons-from-the-oulipo.png&quot; alt=&quot;Slide 1&quot;/&gt;&lt;/p&gt;
&lt;p&gt;The talk follows up on a lightning talk I gave at &lt;a href=&quot;http://www.snsystems.com/&quot; title=&quot;SN Systems website&quot;&gt;my employer&amp;#8217;s&lt;/a&gt; last year about Georges Perec&amp;#8217;s masterpiece, &lt;a href=&quot;http://wordaligned.org/knights-tour&quot;&gt;Life A User&amp;#8217;s Manual&lt;/a&gt;. Click the graphic below to play the animation and read the transcript.&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://wordaligned.org/knights-tour&quot;&gt;&lt;img src=&quot;http://wordaligned.org/images/knights-tour.jpg&quot; alt=&quot;Knights tour&quot;/&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;I&amp;#8217;ll be giving a preview of the full version here in Bristol in a couple of weeks. I hope you can come along. More details on &lt;a href=&quot;http://www.meetup.com/ACCU-Bristol/events/219301279/&quot;&gt;Meetup&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;In the meanwhile, the next section of this page introduces the ideas I&amp;#8217;ll be exploring in my talk.&lt;/p&gt;
&lt;p style=&quot;text-align:center&quot;&gt;&amp;sect;&lt;/p&gt;

&lt;p&gt;As software developers we often ponder what it is we do: are we architects, engineers, or scientists? Are we &amp;#8212; &lt;em&gt;gasp!&lt;/em&gt; &amp;#8212; rock stars or ninjas? Which metaphors best fit? Tending a code base is like gardening. Through the seasons we encourage new growth, whilst pruning back dead code and squashing bugs. Programming is like carpentry, maybe. Select the right tool from a set kept sharp and ready for action. Programming is like cooking. Source the finest ingredients and follow the recipe.&lt;/p&gt;
&lt;p&gt;I think there&amp;#8217;s a more obvious metaphor. Actually there&amp;#8217;s nothing meta- about it. It is what we do.&lt;/p&gt;
&lt;p&gt;&lt;big&gt;We&amp;#8217;re writers.&lt;/big&gt;&lt;/p&gt;
&lt;p&gt;We write to communicate and to instruct. We write for fun and profit. We edit and adapt. We rewrite. We borrow text from other writers. The languages we think we write in &amp;#8212; C++, Python, Javascript &amp;#8212; are actually just highly stylised dialects of our native tongue. Like poets we&amp;#8217;re particular about punctuation and space. We have strange ideas about spelling. The texts we write, &lt;em&gt;programs&lt;/em&gt;, are subject to formal constraints.&lt;/p&gt;
&lt;p&gt;&lt;big&gt;We&amp;#8217;re writers bound by mathematical rules.&lt;/big&gt;&lt;/p&gt;
&lt;p&gt;November, 1960. Paris. The poet Raymond Queneau organises the first meeting of a group which will become known as OuLiPo. A dozen turn up: writers, mathematicians, pataphysicians and surrealists. Their mission: to explore the literary potential of applying mathematical constraints to texts.&lt;/p&gt;
&lt;p&gt;Of course constrained writing is nothing new &amp;#8212; consider the haiku: 17 syllables, arranged as 3 phrases of 5, 7 and 5 syllables, a Japanese form many centuries old &amp;#8212; and one strand of the OuLiPo&amp;#8217;s efforts is devoted to researching past experiments and structures; but I claim it&amp;#8217;s no coincidence the OuLiPo emerged at much the same time as our own novel form of constrained writing: computer programming.&lt;/p&gt;
&lt;p&gt;In &lt;a href=&quot;http://accu.org/index.php/conferences/accu_conference_2015/accu2015_sessions#lessons_from_the_oulipo&quot;&gt;this talk&lt;/a&gt; I&amp;#8217;ll discuss the OuLiPo in more depth, investigating the parallels between their work and ours. We&amp;#8217;ll focus on Georges Perec, whose book &lt;a href=&quot;http://wordaligned.org/knights-tour&quot;&gt;Life A User&amp;#8217;s Manual&lt;/a&gt; is an Oulipian tour de force. There will be some code, as well as quines, easter eggs and &amp;#8212; as you&amp;#8217;d expect &amp;#8212; bugs.&lt;/p&gt;</description>
<dc:date>2015-01-12</dc:date>
<guid>http://wordaligned.org/articles/lessons-from-the-oulipo</guid>
<author>tag@wordaligned.org (Thomas Guest)</author>
<link>http://wordaligned.org/articles/lessons-from-the-oulipo</link>
<category>ACCU</category>
</item>

<item>
<title>ACCU 2013</title>
<description>&lt;p&gt;&lt;img src=&quot;http://accu.org/content/images/conferences/2013/accu2013web.png&quot; alt=&quot;ACCU 2013&quot; /&gt;&lt;/p&gt;
&lt;p&gt;Brian Marick opened the second day of ACCU 2013 with a keynote presentation entitled: &lt;a href=&quot;http://accu.org/index.php/conferences/accu_conference_2013/accu2013_sessions#cheating_decline:acting_now_to_let_you_program_well_for_a_really_long_time&quot;&gt;&amp;#8220;Cheating Decline: Acting now to let you program well for a really long time&amp;#8221;&lt;/a&gt;. He drew a distinction between effortful and automatic thinking. For example, we can drive a car along a clear road automatically but it requires considerable concentration to parallel park that same car. By tuning out unwanted signals crickets can locate their mates using minimal brainpower, and cricket players have no need of Newtonian dynamics to track the trajectory of a ball &amp;#8212; they apply a simple visual self-calibrating algorithm to catch out batsmen. Tango dancers disturb and re-establish invariants. A robot can walk for hours without thinking about what it&amp;#8217;s doing. Actually, if it&amp;#8217;s your job to park cars, you can probably do &lt;strong&gt;that&lt;/strong&gt; without thinking; and this was Brian Marick&amp;#8217;s main cheat &amp;#8212; find the work practices which allow you to lean on your perceptions and so avoid effortful thinking.&lt;/p&gt;
&lt;iframe width=&quot;560&quot; height=&quot;315&quot; src=&quot;http://www.youtube.com/embed/rhu2xNIpgDE?rel=0&quot; frameborder=&quot;0&quot; allowfullscreen&gt;&lt;/iframe&gt;

&lt;p&gt;Anthony Williams&amp;#8217; talk on &lt;a href=&quot;http://accu.org/index.php/conferences/accu_conference_2013/accu2013_sessions#c_11_features_and_real-world_code&quot;&gt;C++11 Features and Real World code&lt;/a&gt; did require effortful thinking but that was what I&amp;#8217;d hoped for. He provided a concise and expert summary of the new language features in action, focusing on the biggest early winners. Leading with &lt;code&gt;auto&lt;/code&gt;, &lt;code&gt;lambda&lt;/code&gt;, &lt;code&gt;range-for&lt;/code&gt;, he went on to talk about concurrency and move semantics. I learned that &lt;code&gt;lambda&lt;/code&gt; functions can have a mutable qualifier. Ha!&lt;/p&gt;
&lt;p&gt;I couldn&amp;#8217;t resist &lt;a href=&quot;http://www.pvv.org/~oma/&quot;&gt;Olve Maudal&amp;#8217;s&lt;/a&gt; C++11 pub quiz, appropriately held in the Marriot Hotel bar, for which we formed teams and mentally compiled and executed dodgy code, capturing standard output on an answer sheet. Some of the answers may well have have been implementation dependent but Olve specified an implementation: our answers should match &lt;strong&gt;this&lt;/strong&gt; laptop running &lt;strong&gt;this&lt;/strong&gt; software. I was simultaneously appalled by the limits of my knowledge on fundamental subjects such as integral promotion and initialisation order, and surprised by my ability to correctly predict the behaviour of some esoteric and perverse code. I&amp;#8217;m chastened and will be studying the answers in the cold light of day. Brian Marick may have advocated programming after a beer or two in his morning session, but the afternoon pub quiz proved that coffee works better for me!&lt;/p&gt;
&lt;p&gt;A programmer&amp;#8217;s dozen (13, which is 12 counting from zero!) lightning talks kept the day crackling with energy. Ewan Milne chaired the session expertly, adeptly dispatching a birthday cake as proceedings commenced. I wish I could describe all the talks but you really had to be there. Phil Nash&amp;#8217;s use of the little known &lt;a href=&quot;http://ideone.com/jWHxu2&quot;&gt;left arrow operator&lt;/a&gt; &amp;larr; got a well deserved response from the audience. Sander Hoogendoorn stuck the boot into &lt;a href=&quot;http://sanderhoogendoorn.com/blog/?p=1059&quot;&gt;&amp;#8220;Agile Fluffiness&amp;#8221;&lt;/a&gt;. &lt;a href=&quot;http://www.renaissancesoftware.net/blog/&quot;&gt;James Grenning&amp;#8217;s&lt;/a&gt; talk on embedded development was a lightning keynote: hilarious, moving and, ultimately, tragic.&lt;/p&gt;</description>
<dc:date>2013-04-11</dc:date>
<guid>http://wordaligned.org/articles/accu-2013</guid>
<author>tag@wordaligned.org (Thomas Guest)</author>
<link>http://wordaligned.org/articles/accu-2013</link>
<category>ACCU</category>
</item>

<item>
<title>An Exploration of the Phenomenology of Software Development</title>
<description>&lt;p&gt;I was lucky to be in the audience last week, when &lt;a href=&quot;http://charlestolman.com/&quot;&gt;Charles Tolman&lt;/a&gt; visited Accu Bristol to preview his Accu 2013 conference talk: &lt;a href=&quot;http://www.meetup.com/ACCU-Bristol-Bath/events/105025942&quot; title=&quot;An Exploration of the Phenomenology of Software Development&quot;&gt;&amp;#8220;An Exploration of the Phenomenology of Software Development&amp;#8221;&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;The talk precis is entirely accurate &amp;#8212; but maybe not so helpful. What this talk actually delivers is a highly original and thoughtful examination of what the software development revolution is and how we can make sense of it.&lt;/p&gt;
&lt;p&gt;Charles Tolman&amp;#8217;s central insight is that we have crossed a boundary. New tools and technologies have extended our powers. Just as  machinery developed in the industrial revolution extended our physical abilities, so software developed in the information technology revolution extends our capacity for thought.&lt;/p&gt;
&lt;p&gt;Essentially, software development &lt;strong&gt;is&lt;/strong&gt; thinking, so to analyse it we need to think about thought. With this realisation we can view our industry as a continuation of the efforts of earlier thought workers &amp;#8212; philosophers such as Descartes and Goethe.&lt;/p&gt;
&lt;p&gt;If this all sounds a bit heavy, Charles made space for anecdotes, humourous insights and pictures of gliders. I look forward to future episodes.&lt;/p&gt;</description>
<dc:date>2013-04-02</dc:date>
<guid>http://wordaligned.org/articles/an-exploration-of-the-phenomenology-of-software-development</guid>
<author>tag@wordaligned.org (Thomas Guest)</author>
<link>http://wordaligned.org/articles/an-exploration-of-the-phenomenology-of-software-development</link>
<category>ACCU</category>
</item>

<item>
<title>More adventures in C++</title>
<description>&lt;div class=&quot;typocode&quot;&gt;

&lt;pre class=&quot;prettyprint&quot;&gt;bool operator&amp;lt;(version const &amp;amp; v1, version const &amp;amp; v2)
{
    if (v1.major != v2.major)
        return v1.major &amp;lt; v2.major;
    if (v1.minor != v2.minor)
        return v1.minor &amp;lt; v2.minor;
    if (v1.patch != v2.patch)
        return v1.patch &amp;lt; v2.patch;
    return v1.build &amp;lt; v2.build;
}

&lt;/pre&gt;

&lt;/div&gt;

&lt;p&gt;C++ programmers are sticklers for tradition and unlikely to be swayed by &lt;a href=&quot;http://www.zemanta.com/blog/i-bet-you-over-engineered-your-startup/#comment-685047168&quot; title=&quot;unlike web developers&quot;&gt;what&amp;#8217;s in fashion&lt;/a&gt;. C++ suits those who want to control the machine, and who respect the rigour and discipline this imposes. C++ programmers are generally a conservative bunch.&lt;/p&gt;
&lt;p&gt;Some history: C++ was standardized in 1998. The next major revision of the language was developed under the working title of C++0x, where the &amp;#8220;0x&amp;#8221; stood for the year the job would be finished. The X gave the standardizers some slack, but not enough. C++0x became C++11 which is now, thankfully, simply C++.&lt;/p&gt;
&lt;p&gt;Although the language&amp;#8217;s development has been painstakingly slow the developments themselves have been extensive and radical. What&amp;#8217;s more, users are rushing to use the new features &amp;#8212; even before they have access to compilers which support them! I&amp;#8217;ve seen answers to C++ topics on Q&amp;amp;A sites which use aspects of the language the contributors cheerfully admit they have no access to. I&amp;#8217;ve worked on a project which used elaborate shims to hide the fact that GCC 4.6 couldn&amp;#8217;t compile C++ as well as GCC 4.7 does, and this despite the fact that &lt;a href=&quot;http://gcc.gnu.org/projects/cxx0x.html&quot; title=&quot;Important: GCC&#x27;s support for C++11 is still experimental&quot;&gt;GCC&amp;#8217;s C++11 support remains, officially, &amp;#8220;experimental&amp;#8221;&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;&lt;span id=&quot;continue-reading&quot;/&gt;&lt;/p&gt;
&lt;p&gt;At home, I&amp;#8217;m downloading compiler and library updates I&amp;#8217;m in no position to use at work; and at work, I&amp;#8217;ve already been sent on a C++11 training course.  I&amp;#8217;ve streamed high quality &lt;a href=&quot;http://channel9.msdn.com/Events/GoingNative/GoingNative-2012&quot; title=&quot;Going Native 2012 - good stuff here!&quot;&gt;videos&lt;/a&gt; starring C++&amp;#8217;s big hitters which promote the new C++, explaining its principles, its foundations, and even where it&amp;#8217;s going next.&lt;/p&gt;
&lt;p&gt;What exactly is it about C++11 that&amp;#8217;s roused such a normally phlegmatic audience?&lt;/p&gt;
&lt;p&gt;Before I try and answer that, I&amp;#8217;ll venture to suggest new C++ isn&amp;#8217;t going to win many new recruits. I don&amp;#8217;t even think it will persuade those who have abandoned the language to return. C++11 contains all of C++98, a notoriously complex and subtle language, then adds &lt;a href=&quot;http://www.stroustrup.com/C++11FAQ.html#learn&quot; title=&quot;Is C++11 hard to learn? Stroustrup C++11 FAQ&quot;&gt;a whole lot more&lt;/a&gt;. Yes, it &lt;strong&gt;is&lt;/strong&gt; possible to write new C++ which is more compact and efficient than traditional C++, but you&amp;#8217;ll also need to maintain old C++ code and build new expertise. And the language update fails to address some of C++&amp;#8217;s worst characteristics: slow compile times and impenetrable compiler diagnostics.&lt;/p&gt;
&lt;p&gt;No, C++11 is primarily a win for existing C++ programmers; those of us who already have a fair understanding of the language and its trade-offs, and who can appreciate the rationale behind the changes. For traditionalists and pragmatists, the transition isn&amp;#8217;t hard &amp;#8212; at least, no harder than any port between compiler revisions. For progressives, there are several immediate wins: the &lt;code&gt;auto&lt;/code&gt; keyword has been repurposed, reducing repetition and making code more flexible; lambdas enable functions to be plugged directly into algorithms; smart pointers are standard, allowing accurate memory management; and on the subject of memory, rvalues and move semantics mean you&amp;#8217;ll waste less of it on temporaries.&lt;/p&gt;
&lt;p&gt;I could go on.&lt;/p&gt;
&lt;p&gt;Rather than risk more generalisations, here&amp;#8217;s a specific example of C++11 in action. Consider an object with multiple fields, a four part version number, say.&lt;/p&gt;
&lt;div class=&quot;typocode&quot;&gt;

&lt;pre class=&quot;prettyprint&quot;&gt;struct version
{
    unsigned major, minor, patch, build;
};

&lt;/pre&gt;

&lt;/div&gt;

&lt;p&gt;To compare version numbers, or sort them, or put them in a &lt;code&gt;std::set&lt;/code&gt;, we&amp;#8217;ll need &lt;code&gt;operator&amp;lt;()&lt;/code&gt;. This operator must model a &lt;a href=&quot;http://www.sgi.com/tech/stl/StrictWeakOrdering.html&quot;&gt;strict weak ordering&lt;/a&gt;. The canonical form looks something like.&lt;/p&gt;
&lt;div class=&quot;typocode&quot;&gt;

&lt;pre class=&quot;prettyprint&quot;&gt;bool operator&amp;lt;(version const &amp;amp; v1, version const &amp;amp; v2)
{
    if (v1.major != v2.major)
        return v1.major &amp;lt; v2.major;
    if (v1.minor != v2.minor)
        return v1.minor &amp;lt; v2.minor;
    if (v1.patch != v2.patch)
        return v1.patch &amp;lt; v2.patch;
    return v1.build &amp;lt; v2.build;
}

&lt;/pre&gt;

&lt;/div&gt;

&lt;p&gt;It&amp;#8217;s not so hard to write this code for the &lt;code&gt;version&lt;/code&gt; struct, where we have a clear idea of what it means for one version number to be less than another. It would be rather more tricky if we were dealing with points, for example, &lt;code&gt;struct point { int x, y; };&lt;/code&gt;. Ordering points makes little sense but we might well want them as keys in an associative container, and we&amp;#8217;d better have a suitable &lt;code&gt;operator&amp;lt;()&lt;/code&gt;.&lt;/p&gt;
&lt;div class=&quot;typocode&quot;&gt;&lt;div class=&quot;codetitle&quot;&gt;No, no, no!&lt;/div&gt;

&lt;pre class=&quot;prettyprint&quot;&gt;bool operator&amp;lt;(point const &amp;amp; p1, point const &amp;amp; p2)
{
    return p1.x &amp;lt; p2.x &amp;amp;&amp;amp; p1.y &amp;lt; p2.y;
}

&lt;/pre&gt;

&lt;/div&gt;

&lt;p&gt;With C++11 &amp;#8212; &lt;strong&gt;with the current version of C++&lt;/strong&gt; &amp;#8212; we can use &lt;code&gt;std::tie()&lt;/code&gt; to create a tuple of references, recasting &lt;code&gt;operator&amp;lt;()&lt;/code&gt; into a form that&amp;#8217;s easy to read and hard to get wrong.&lt;/p&gt;
&lt;div class=&quot;typocode&quot;&gt;&lt;div class=&quot;codetitle&quot;&gt;Yes, yes, yes!&lt;/div&gt;

&lt;pre class=&quot;prettyprint&quot;&gt;bool operator&amp;lt;(version const &amp;amp; v1, version const &amp;amp; v2)
{
    return std::tie(v1.major, v1.minor, v1.patch, v1.build)
         &amp;lt; std::tie(v2.major, v2.minor, v2.patch, v2.build);
}

bool operator&amp;lt;(point const &amp;amp; p1, point const &amp;amp; p2)
{
    return std::tie(p1.x, p1.y) &amp;lt; std::tie(p2.x, p2.y);
}

&lt;/pre&gt;

&lt;/div&gt;

&lt;p style=&quot;text-align:center&quot;&gt;&amp;sect;&lt;/p&gt;

&lt;p&gt;My thanks to Jonathan Wakely for sharing the &lt;code&gt;std::tie()&lt;/code&gt; recipe on the &lt;a href=&quot;http://accu.org/index.php/mailinglists&quot;&gt;accu-general mailing list&lt;/a&gt; and for letting me use it here.&lt;/p&gt;</description>
<dc:date>2013-02-21</dc:date>
<guid>http://wordaligned.org/articles/more-adventures-in-c++</guid>
<author>tag@wordaligned.org (Thomas Guest)</author>
<link>http://wordaligned.org/articles/more-adventures-in-c++</link>
<category>ACCU</category>
</item>

<item>
<title>ACCU Bristol and Bath</title>
<description>&lt;p&gt;Lightning talks. In a pub. Me first! I hadn&amp;#8217;t actually practised but I knew what I wanted to say and had picked a subject so trivial I couldn&amp;#8217;t possibly overrun.&lt;/p&gt;
&lt;p&gt;Yes, it was time, at last, for the first &lt;a href=&quot;https://twitter.com/accuBristol&quot; title=&quot;Follow ACCU Bristol &amp;amp; Bath on twitter&quot;&gt;ACCU Bristol &amp;amp; Bath&lt;/a&gt; meeting, to be held in an upstairs room at the Cornubia. We&amp;#8217;d reconnoitred the venue a few weeks earlier. Although the room was dingy and we couldn&amp;#8217;t work out where to put a screen, and despite disturbance from the increasingly raucous CAMRA meeting next door, the location was ideal and the beer superb. I looked forward to returning.&lt;/p&gt;
&lt;p&gt;Plans change. In an agile last minute switch the meeting relocated to the Marriot &amp;#8212; which, coincidentally, had just been announced as the host of next year&amp;#8217;s &lt;a href=&quot;http://accu.org/index.php/conferences&quot; title=&quot;ACCU 2013 comes to Bristol!&quot;&gt;ACCU conference&lt;/a&gt;. I shuffled through revolving doors into the hotel&amp;#8217;s vacant lobby rehearsing my talk in my head. Where was everyone? It took some backtracking and interrogation to locate the subterranean room but fortunately they hadn&amp;#8217;t started without me.&lt;/p&gt;
&lt;p&gt;Now &lt;strong&gt;this&lt;/strong&gt; was a proper meeting room. Panelled walls, no windows. A blank TV screen; green apples; red glasses; bottled water.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://wordaligned.org/images/apple-display-adapter.jpg&quot; alt=&quot;I carry one with me at all times&quot;/&gt;&lt;/p&gt;
&lt;p&gt;Ewan welcomed me. &amp;#8220;Have you got a macbook display adapter?&amp;#8221;&lt;/p&gt;
&lt;p&gt;No. I didn&amp;#8217;t even have the slides to my own presentation &amp;#8212; I&amp;#8217;d emailed them ahead to be merged into a single deck.&lt;/p&gt;
&lt;p&gt;The screen flicked to life. Nine talks, five minutes each. We&amp;#8217;d be done in an hour. After a brief welcome my slides were on screen and I was off.&lt;/p&gt;
&lt;p&gt;Unfortunately I ran out of time, laughing too long at my own lightning anecdote which framed a talk about ellipses, the triple-dots &amp;#8230; which mean different things in different places in different programming languages. Next up was Dan Towner who walked us through the algorithm used by compilers for allocating registers. It&amp;#8217;s a greedy colouring of a planar map, he said, wrapped in a bail-and-retry loop. Dan Tallis spoke about the single committer model which works so well on open source projects. Developers don&amp;#8217;t have write access to the repository and must submit patches to the committer for review, a protocol which encourages incremental and considered changes to a codebase. &lt;a href=&quot;http://curbralan.com&quot;&gt;Kevlin Henney&lt;/a&gt; needed just a single slide to clear up some misconceptions in exactly five minutes. Chris Simons didn&amp;#8217;t need any slides to describe where designs come from. Pacing the floor and waving his fingers, he explained that &lt;span /&gt;computer systems are punchlines; design is a matter of figuring out the joke. Attack the solution space with ants! No ACCU meeting would be complete without a discourse on C++ test frameworks and Malcolm Noyes duly dazzled us developing a C++ mocking library before our very eyes. Jim Thomson compared before and after binaries to prove his source code rearrangements hadn&amp;#8217;t caused any damage. Ewan Milne, who&amp;#8217;d not only organised and chaired the meeting, also contributed a talk on (guess what?) planning, subtitled how agile can Kanban be (say it!)&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://www.jaggersoft.com&quot;&gt;Jon Jagger&lt;/a&gt; postponed his closing talk. Macs just work if you&amp;#8217;ve got the right connectors. We hadn&amp;#8217;t. The audience wanted more but that&amp;#8217;s no bad thing. We regathered in the hotel bar to crunch apples and chew over the evening. The ACCU Bristol &amp;amp; Bath launch had been a success! The price of a pint and anodyne surroundings discouraged lingering. We drank up and headed off towards trains, homes, and, for a select few, the &lt;a href=&quot;http://www.travelswithbeer.com/2010/07/09/the-cornubia-bristol/&quot; title=&quot;CAMRA members can get pints at a reduced prices depending on the strength of the ale&quot;&gt;Cornubia&lt;/a&gt;.&lt;/p&gt;</description>
<dc:date>2012-08-31</dc:date>
<guid>http://wordaligned.org/articles/accu-bristol-and-bath</guid>
<author>tag@wordaligned.org (Thomas Guest)</author>
<link>http://wordaligned.org/articles/accu-bristol-and-bath</link>
<category>ACCU</category>
</item>

<item>
<title>Inner, Outer, Shake it all abouter</title>
<description>&lt;p&gt;C++ programmers enjoy three levels of access control: &lt;a href=&quot;http://www.parashift.com/c++-faq-lite/basics-of-inheritance.html#faq-19.5&quot;&gt;private, protected and public&lt;/a&gt;. Some programmers use protected instead of private just in case someone might want to derive from their class some day. Others keep everything as private as possible, hiding nested classes in anonymous namespaces; these inner classes never seem to work quite the way you&amp;#8217;d want, but if you get tangled up a &lt;a href=&quot;http://www.parashift.com/c++-faq-lite/friends.html&quot;&gt;friend&lt;/a&gt; can cut through the knots!&lt;/p&gt;
&lt;p&gt;Python is less sophisticated. Prefix class members with a double underscore and &lt;a href=&quot;http://docs.python.org/tutorial/classes.html#private-variables&quot;&gt;their names are disguised&lt;/a&gt; to the world outside. Prefix module members with a single underscore to indicate they won&amp;#8217;t be exported from that module. Many Python programmers use single underscore prefix in classes too (no mangling but better looking).&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://accu.org&quot;&gt;&lt;img style=&quot;float:right&quot; src=&quot;http://accu.org/content/images/buttonl_120x60.gif&quot; width=&quot;120px&quot; alt=&quot;ACCU Button&quot; height=&quot;60px&quot;/&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Once you&amp;#8217;ve used Python for a while you may well question the benefits of the C++ model. Recently a C++ question came up on the &lt;a href=&quot;http://accu.org/index.php/mailinglists&quot;&gt;accu-general&lt;/a&gt; mailing list. It involved nested classes, &lt;code&gt;operator&amp;lt;&amp;lt;()&lt;/code&gt; and code which refused to compile. You&amp;#8217;ll have to trawl through the list archives if you want the exact question: I didn&amp;#8217;t give it much attention since it seemed an example of the kind of struggle with the language which causes me to throw in the towel. I would like to quote from one of the answers though.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Surely your issue is that f() is a friend of Inner only. f() is &lt;b&gt;not&lt;/b&gt; a friend of Outer. Inner is private to Outer. Therefore in the global scope, outside Outer, f() cannot access Inner via Outer::Inner, as that is private.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Wow, some &lt;a href=&quot;http://yosefk.com/c++fqa/class.html#fqa-7.7&quot; title=&quot;#define private public from the C++ FQA&quot;&gt;brain twister&lt;/a&gt;!&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://www.kleinbottle.com&quot;&gt;&lt;img src=&quot;http://www.kleinbottle.com/images/giantKleinbotandCliff2.jpg&quot; alt=&quot;Giant Klein bottle and Cliff Stoll&quot; width=&quot;240px&quot; height=&quot;461px&quot;/&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Time to get back to basics.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Encapsulation is about allocating responsibility and easing utility rather than protecting data, which is a side effect. &amp;#8212; &lt;a href=&quot;http://twitter.com/KevlinHenney/status/2684963420&quot;&gt;@KevlinHenney&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p style=&quot;text-align:center&quot;&gt;&amp;sect;&lt;/p&gt;

&lt;p&gt;My thanks to &lt;a href=&quot;http://libjmmcg.sourceforge.net&quot;&gt;Jason McGuiness&lt;/a&gt; for allowing me to quote from his expert answer to a tricky C++ question. The photo shows Cliff Stoll holding the world&amp;#8217;s largest glass klein bottle, which was produced by the company he owns, operates and mismanages, &lt;a href=&quot;http://www.kleinbottle.com&quot;&gt;Acme Klein Bottles&lt;/a&gt;. Klein bottles get a mention here because they don&amp;#8217;t have an outside or an inside, they just have a side. You can solve every computing problem with an extra dimension, except the problem of too many dimensions.&lt;/p&gt;</description>
<dc:date>2009-07-29</dc:date>
<guid>http://wordaligned.org/articles/inner-outer-shake-it-all-abouter</guid>
<author>tag@wordaligned.org (Thomas Guest)</author>
<link>http://wordaligned.org/articles/inner-outer-shake-it-all-abouter</link>
<category>ACCU</category>
</item>

<item>
<title>Software development checklist += 3</title>
<description>&lt;p&gt;Various people better qualified than me have created &lt;a href=&quot;http://www.joelonsoftware.com/articles/fog0000000043.html&quot; title=&quot;The Joel Test&quot;&gt;checklists&lt;/a&gt; for healthy software development &lt;a href=&quot;http://wordaligned.org/articles/an-ideal-working-environment.html&quot; title=&quot;An ideal working environment&quot;&gt;environments&lt;/a&gt;. I won&amp;#8217;t be offering my own such list, but I would like to mention a couple of items which deserve a place on it.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Does your company have a good library? Can anyone order a book for this library, easily?&lt;/li&gt;
&lt;li&gt;Do team members attend conferences? Do they give presentations at conferences?&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;span id=&quot;continue-reading&quot;/&gt;&lt;/p&gt;
&lt;h3 id=&quot;libraries&quot;&gt;Libraries&lt;/h3&gt;
&lt;p&gt;&lt;a href=&quot;http://cm.bell-labs.com/cm/cs/cbook/&quot;&gt;&lt;img style=&quot;float:right;&quot; src=&quot;http://cm.bell-labs.com/cm/cs/cbook/covers/main.gif&quot; alt=&quot;K &amp;amp; R 2nd edition cover&quot;/&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;I hope no one disputes the first item. Sure, many software developers like buying their own books; but they deserve access to company copies of favourite references rather than having to bring personal copies into work. And yes, equally many software developers can find better things than books to spend their own money on, but give them access to a good library and they may well make good use of it.&lt;/p&gt;
&lt;p&gt;Please, minimise infrastructure. Don&amp;#8217;t track who has which book: just understand that when a book gets taken home it should be returned in a timely fashion. Current editions of books should be available, as should multiple copies of popular books: don&amp;#8217;t waste time waiting for the company copy of &lt;a href=&quot;http://cm.bell-labs.com/cm/cs/cbook/&quot;&gt;K&amp;amp;R&lt;/a&gt; to become available, get another. This simple infrastructure should extend to the maintenance of the library. A team knows which books it needs and which books it is interested in, and team members should be able to order these books without pre-approval.&lt;/p&gt;
&lt;h3 id=&quot;conferences&quot;&gt;Conferences&lt;/h3&gt;
&lt;p&gt;&lt;a href=&quot;http://accu.org/index.php/conferences/accu_conference_2009&quot;&gt;&lt;img src=&quot;http://accu.org/content/images/conferences/2009/accu2009web.png&quot; alt=&quot;ACCU 2009 logo&quot;/&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Conferences aren&amp;#8217;t for everyone but events like the &lt;a href=&quot;http://accu.org/index.php/conferences&quot;&gt;ACCU conference&lt;/a&gt; (being held in Oxford this week) provide an invaluable opportunity to step outside your own organisation and routine.&lt;/p&gt;
&lt;p&gt;If you&amp;#8217;re a C# programmer, say, attending ACCU won&amp;#8217;t be like going on a 5 day Microsoft certified .NET training course. For one thing, ACCU isn&amp;#8217;t trying to make a profit. More importantly, the ACCU &lt;a href=&quot;http://accu.org/index.php/conferences/accu_conference_2009/accu2009_schedule&quot;&gt;schedule&lt;/a&gt; is varied and stimulating, with presentations from acknowledged world experts and &lt;a href=&quot;http://fellowhackers.com&quot; title=&quot;Whois fellowhackers.com? Not stack overflow!&quot;&gt;fellow hackers&lt;/a&gt;. Come with an open mind. Who knows what you&amp;#8217;ll learn?&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://www.europython.eu&quot;&gt;&lt;img src=&quot;http://www.europython.eu/images/europython_logo.png&quot; alt=&quot;Europython Logo&quot;/&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;I long ago decided that, for me, attending conferences was one of the most effective ways of continuing to develop as a programmer. I also quickly learned that a conference can be an intense experience, so I limit my exposure to them. This year, sadly, I&amp;#8217;m skipping ACCU. But I will be off to &lt;a href=&quot;http://www.europython.eu&quot;&gt;EuroPython&lt;/a&gt;, which I&amp;#8217;m looking forward to.&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://en.wikipedia.org/wiki/Graeco-Latin_square&quot; title=&quot;Graeco-Latin square, on Wikipedia. Order 10 would be better&quot;&gt;&lt;img src=&quot;http://upload.wikimedia.org/wikipedia/commons/8/88/GraecoLatinSquare-Order5.png&quot; style=&quot;float:right;&quot; alt=&quot;Graeco-Latin square, on Wikipedia&quot;/&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;I&amp;#8217;ll also be going to a &lt;a href=&quot;http://www.dcs.warwick.ac.uk/bshm/meetings/Fiction.html&quot;&gt;Mathematics and Fiction&lt;/a&gt; workshop in Oxford. It&amp;#8217;s not aimed at software developers, but literate programmer Donald Knuth will be there, as will &lt;a href=&quot;http://web.princeton.edu/sites/fit/faculty/bellos.html&quot;&gt;David Bellos&lt;/a&gt;, translator of &lt;a href=&quot;http://en.wikipedia.org/wiki/La_Vie_mode_d%27emploi#The_constraints&quot; title=&quot;Life A User&#x27;s Manual, Wikipedia&quot;&gt;the ultimate algorithm-driven fiction&lt;/a&gt;.&lt;/p&gt;
&lt;h3 id=&quot;contributing&quot;&gt;Contributing&lt;/h3&gt;
&lt;p&gt;So, I suggest employers support developers who wish to attend conferences as part of their ongoing training. Should an employer allow staff to burn company time to develop presentations for these conferences?&lt;/p&gt;
&lt;p&gt;It depends. &lt;/p&gt;
&lt;p&gt;Without more specific detail, I really can&amp;#8217;t say. No two cases will be exactly alike. One thing I will say is that, increasingly, organisations realise the benefits of the kind of grass-roots advertising which can be had from sending people to conferences and letting them talk openly about the work they&amp;#8217;re doing.&lt;/p&gt;
&lt;p&gt;Since I&amp;#8217;ve danced around that question, I&amp;#8217;ll end by asking another &amp;#8212; a third item for my incomplete checklist.&lt;/p&gt;
&lt;ol start=&quot;3&quot;&gt;&lt;li&gt;Does your company contribute towards the open source code which it uses?&lt;/li&gt;&lt;/ol&gt;</description>
<dc:date>2009-04-21</dc:date>
<guid>http://wordaligned.org/articles/checklist-inc-3</guid>
<author>tag@wordaligned.org (Thomas Guest)</author>
<link>http://wordaligned.org/articles/checklist-inc-3</link>
<category>ACCU</category>
</item>

<item>
<title>Spolsky podcast causes exercise bike incident</title>
<description>&lt;p&gt;&lt;a href=&quot;http://www.objectmentor.com/omTeam/martin_r.html&quot;&gt;&lt;img src=&quot;http://www.objectmentor.com/Images/photo_martin_r.jpg&quot; alt=&quot;Robert C. Martin&quot; width=&quot;192&quot; height=&quot;256&quot;/&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Robert C. Martin opens &lt;a href=&quot;http://blog.objectmentor.com/articles/2009/01/31/quality-doesnt-matter-that-much-jeff-and-joel&quot;&gt;a rant&lt;/a&gt; on his Object Mentor blog with one of the best sentences I&amp;#8217;ve read in a while.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;I was riding my exercise bike, listening to Stack Overflow #38 when I heard Jeff Atwood and Joel Spolsky say &amp;#8220;Quality just doesn&amp;#8217;t matter that much.&amp;#8221; &lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;I&amp;#8217;ve never been one for exercise bikes or podcasts but I&amp;#8217;m guessing Robert Martin tuned in for some light entertainment rather than provocation. As it turned out, though:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;I nearly fell off my bike.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Happily no real harm was done and Robert Martin recovered sufficiently to post &lt;a href=&quot;http://blog.objectmentor.com/articles/2009/01/31/quality-doesnt-matter-that-much-jeff-and-joel&quot;&gt;his response&lt;/a&gt; to the &lt;a href=&quot;http://blog.stackoverflow.com/2009/01/podcast-38/&quot;&gt;podcast&lt;/a&gt;. The debate continues in the &lt;a href=&quot;http://blog.objectmentor.com/articles/2009/01/31/quality-doesnt-matter-that-much-jeff-and-joel#comments&quot;&gt;comments&lt;/a&gt; on this article and &lt;a href=&quot;http://glyph.twistedmatrix.com/2009/02/joel-un-test.html&quot;&gt;elsewhere&lt;/a&gt;. I don&amp;#8217;t want to weigh into this particular argument myself, but out of curiosity I did listen to exactly what Atwood and Spolsky had to say around 42 minutes into the show (yes, a &lt;a href=&quot;http://www.joelonsoftware.com/items/2009/01/31.html&quot;&gt;transcript of the relevant segment exists&lt;/a&gt;, but I wanted to listen to the original; having done so, I don&amp;#8217;t think I&amp;#8217;ll bother with the rest, thanks). Spolsky does almost all of the talking. Whilst managing to sound calm and thoughtful, his actual words are plain rude.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;[&amp;#8230;] it seems to me like a lot of the Object Oriented Design principles you&amp;#8217;re hearing lately from people like &lt;strong&gt;Robert Martin&lt;/strong&gt; and Kent Beck and so forth have gone off the deep end into architecture for architecture&amp;#8217;s sake [&amp;#8230;] They&amp;#8217;ve just gone off the deep end, and &lt;strong&gt;I don&amp;#8217;t think these people write very much code&lt;/strong&gt; if they&amp;#8217;re coming up with these principles, to be honest, it doesn&amp;#8217;t even make sense.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;(Emphasis mine.)&lt;/p&gt;
&lt;p&gt;&lt;span id=&quot;continue-reading&quot;/&gt;&lt;/p&gt;
&lt;p&gt;I think it&amp;#8217;s Spolsky&amp;#8217;s suggestion that people like Robert Martin don&amp;#8217;t write much code which bugs Martin the most, and I&amp;#8217;m not surprised. Listening to the podcast, I didn&amp;#8217;t hear anyone actually say &amp;#8220;Quality doesn&amp;#8217;t matter&amp;#8221;. Maybe I didn&amp;#8217;t listen long enough, but I wonder if it&amp;#8217;s actually Martin&amp;#8217;s spin on what&amp;#8217;s been said. Robert Martin is a fervent promoter of code quality. His view (as I understand it) is that there are no shortcuts, and that test driven development is a great way to deliver quality.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;You see, I think quality matters. I think the quality of my code matters, even at the smallest scale. I think the quality of my systems matters. I think the quality of my tests matters. And&amp;#8230; I think the quality of my advice matters.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;div class=&quot;amazon&quot;&gt;&lt;a href=&quot;http://www.amazon.com/gp/product/0135974445?ie=UTF8&amp;amp;tag=wordalig-20&quot;&gt;&lt;img src=&quot;http://wordaligned.org/images/books/agile-software-development.jpg&quot; alt=&quot;Agile Software Design cover&quot;/&gt;&lt;/a&gt;&lt;/div&gt;

&lt;p&gt;Reading this prompts me to mention a book I&amp;#8217;ve been wanting to discuss here for a while &amp;#8212; &lt;a href=&quot;http://www.amazon.com/gp/product/0135974445?ie=UTF8&amp;amp;tag=wordalig-20&quot;&gt;&amp;#8220;Agile Software Development: Principles, Patterns, and Practices&amp;#8221;&lt;/a&gt;, by Robert C. Martin. It&amp;#8217;s a book I don&amp;#8217;t hesistate to recommend: packed with code, knowledge and character, it demonstrates real world software development by example. It&amp;#8217;s arguably a better guide to design patterns for C++ and Java programmers than the more famous &lt;a href=&quot;http://en.wikipedia.org/wiki/Design_Patterns&quot;&gt;&amp;#8220;Gang of Four&amp;#8221;&lt;/a&gt; book. It&amp;#8217;s also a wide-ranging and ambitious book. You&amp;#8217;ll find a manifesto, checklists of principles and practices, cartoons, quotations, a dialogue between pair-programmers, an Appendix on UML, even a satirical short story.&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://www.amazon.com/gp/product/0135974445?ie=UTF8&amp;amp;tag=wordalig-20&quot;&gt;Agile Software Development&lt;/a&gt; tells it like it is. It&amp;#8217;s as a survival guide for working programmers who want to do the best they can. Programmers who use C++, Java and UML. Programmers who suffer constant pressure from pointy-haired bosses. Programmers who resist the urge to add global variables to solve their immediate problems, who introduce interfaces to improve architecture, who write Java code which generates more boilerplate Java. Programmers who care.&lt;/p&gt;
&lt;p&gt;Yet I have reservations. Agile Software Development is far from perfect. The mix of fonts on the front cover is a fair indication of what&amp;#8217;s inside: the book is poorly designed. The book promotes clean, well-factored code, yet this advice doesn&amp;#8217;t seem to have been applied to itself. In the preface Robert Martin describes the historical forces which have shaped the book &amp;#8212; an article from here, some chapters from there, a change of direction &amp;#8212; it&amp;#8217;s reminiscent of a stop-start software project, and too much of that history shows.  Reading the book I also tripped over several typos and the occasional broken code sample. Sad to say, but the flaws in this book have coloured my judgement of what Robert Martin has to say about code quality.&lt;/p&gt;
&lt;p&gt;Robert Martin suggests Spolsky&amp;#8217;s comments are:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;a symptom of someone has focussed on business and lost his technical chops.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Certainly Joel Spolsky seems focused on business and his business revolves around the &lt;a href=&quot;http://www.joelonsoftware.com&quot;&gt;Joel-on-Software&lt;/a&gt; brand. Whether or not you buy into that brand, he&amp;#8217;s a skilful writer. The material on his website is always carefully written and well presented.&lt;/p&gt;
&lt;hr /&gt;
&lt;div class=&quot;amazon&quot;&gt;&lt;a href=&quot;http://www.amazon.com/Clean-Code-Handbook-Software-Craftsmanship/dp/0132350882&quot;&gt;&lt;img src=&quot;http://wordaligned.org/images/books/clean-code.jpg&quot; alt=&quot;Clean Code cover&quot;/&gt;&lt;/a&gt;&lt;/div&gt;

&lt;p&gt;&lt;a href=&quot;http://accu.org/index.php/conferences/accu_conference_2009&quot;&gt;&lt;img src=&quot;http://accu.org/content/images/conferences/2009/accu2009web.png&quot; alt=&quot;ACCU 2009&quot;/&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Robert C. Martin will be opening &lt;a href=&quot;http://accu.org/index.php/conferences/accu_conference_2009&quot;&gt;ACCU 2009&lt;/a&gt; with a keynote presentation entitled &amp;#8220;The Birth of Software Craftsmanship&amp;#8221;. I&amp;#8217;d love to be there to hear him speak. I see he has a new book out, &lt;a href=&quot;http://www.amazon.com/Clean-Code-Handbook-Software-Craftsmanship/dp/0132350882&quot;&gt;Clean Code: A Handbook of Agile Software Craftsmanship&lt;/a&gt;. Should I read it?&lt;/p&gt;
&lt;h5&gt;&lt;a name=&quot;feedback&quot;&gt;Feedback&lt;/a&gt;&lt;/h5&gt;
&lt;div id=&quot;feedback_div&quot;&gt;&lt;ol id=&quot;feedback&quot; class=&quot;feedback&quot;&gt;&lt;li class=&quot;feedbackitem&quot;&gt;&lt;div class=&quot;author&quot;&gt;&lt;cite&gt;Greg Wilson&lt;/cite&gt; 2009-02-03&lt;/div&gt;&lt;div class=&quot;content&quot;&gt;&lt;p&gt;Well, I liked it: &lt;a href=&quot;http://pyre.third-bit.com/blog/archives/1763.html&quot;&gt;http://pyre.third-bit.com/blog/archives/1763.html&lt;/a&gt;.&lt;/p&gt;&lt;/div&gt;&lt;/li&gt;&lt;/ol&gt;&lt;/div&gt;</description>
<dc:date>2009-02-03</dc:date>
<guid>http://wordaligned.org/articles/spolsky-podcast</guid>
<author>tag@wordaligned.org (Thomas Guest)</author>
<link>http://wordaligned.org/articles/spolsky-podcast</link>
<category>ACCU</category>
</item>

<item>
<title>Tell me about &#8230; Virtualization</title>
<description>&lt;h3 id=&quot;introduction&quot;&gt;Introduction&lt;/h3&gt;
&lt;p&gt;Virtualization solves a computing problem by adding a layer of indirection. The problem being: how to run multiple operating systems on a single computer; and the indirection: to slip a software shim between a guest operating system and the hosting platform, which continues to run its native operating system.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://wordaligned.org/images/imac-parallels.png&quot; alt=&quot;Imac running OS X, Windows XP, Linux&quot;/&gt;&lt;/p&gt;
&lt;p&gt;An example makes this clear. I work on an Apple computer which runs OS X, a flavour of BSD Unix. To develop portable code which will build and run on Linux and Windows as well as OS X, I use virtualization software. Using this software enables my Apple computer to run (for example) Windows XP and Linux Fedora Core 7 as guest operating systems alongside its native OS X. Effectively, I have three computers running on the same physical machine with no need for extra power supplies, keyboards, mice, monitors and so on.&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://www.vmware.com&quot;&gt;&lt;img src=&quot;http://wordaligned.org/images/vmware.gif&quot; style=&quot;float:right&quot; alt=&quot;VMware logo&quot;/&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;The &lt;a href=&quot;http://www.parallels.com/&quot;&gt;Parallels Desktop&lt;/a&gt; virtualization software I use doesn&amp;#8217;t come free but it&amp;#8217;s cheaper and more convenient than buying more hardware. &lt;a href=&quot;http://www.vmware.com&quot;&gt;VMware&lt;/a&gt;, perhaps the single biggest name in virtualization, does offer free entry-level products for doing a similar job on Windows and Linux platforms.&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://www.parallels.com&quot;&gt;&lt;img src=&quot;http://wordaligned.org/images/parallels-logo.gif&quot; style=&quot;float:right&quot; alt=&quot;Parallels logo&quot;/&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;This article will not provide details on installing and configuring virtualization software, troubleshooting problems, and so on: the products have matured to the extent that these details are hardly needed, and any problems are quickly answered by online forums. We won&amp;#8217;t attempt to explain how exactly virtualization works. Instead, we&amp;#8217;ll talk more about what virtualization is, how we can use it, and why we should be interested it.&lt;/p&gt;
&lt;p&gt;&lt;span id=&quot;continue-reading&quot;/&gt;&lt;/p&gt;
&lt;h3 id=&quot;virtualization-in-general&quot;&gt;Virtualization in general&lt;/h3&gt;
&lt;p&gt;Before we go further I should explain this article uses the term &amp;#8220;virtualization&amp;#8221; in the specific way described in the introduction. More generally, in computing, virtualization refers to the abstraction in software of the platform on which a program runs. The Java Virtual Machine is a well known example, allowing software developers to build a single executable which should run on any machine. The JVM also isolates the application from the rest of the machine. These advantages, of portability and isolation, also apply to the full  virtualization we&amp;#8217;ll discuss in this article.&lt;/p&gt;
&lt;h3 id=&quot;creating-a-virtual-machine&quot;&gt;Creating a virtual machine&lt;/h3&gt;
&lt;p&gt;Setting up a virtual machine feels just like setting up a normal machine, except you don&amp;#8217;t need new hardware. All you need is your host machine, the guest operating system media, and a suitable license to use it. With your host up and running, mount the install media, start up the virtualization software, click &amp;#8220;Create new machine&amp;#8221;, and follow the prompts. You&amp;#8217;ll have to specify what resources to grant the machine (disk space, RAM, etc.) but very quickly you&amp;#8217;ll be following the standard install procedure for your guest OS, selecting languages, packages and so on.&lt;/p&gt;
&lt;p&gt;You don&amp;#8217;t need actual physical media: you can create your virtual machine by booting it up from a DVD image on disk or over a network in much the same way.&lt;/p&gt;
&lt;h3 id=&quot;heres-one-we-made-earlier&quot;&gt;Here&amp;#8217;s one we made earlier&lt;/h3&gt;
&lt;p&gt;Actually, you may not require &lt;em&gt;any&lt;/em&gt; install media. Your virtualization software is capable of booting up a pre-built virtual machine. VMware terms such machines &lt;a href=&quot;http://www.vmware.com/appliances/&quot;&gt;virtual appliances&lt;/a&gt;. Running such an appliance is as easy as downloading it (which, at around 300Mb or less, requires far less bandwidth than a typical install image) and clicking on the downloaded file.&lt;/p&gt;
&lt;p&gt;What you&amp;#8217;ll typically be getting is a stripped-down Unix server, pre-built for a specific purpose, with stable, tested, compatible versions of whatever packages it requires for that purpose, and capable of operating within, say, 256Mb of RAM and as much hard disk as you&amp;#8217;re prepared to allow it. You can run this Unix server on a Windows machine. You can reconfigure it. You can even transfer it to a different machine.&lt;/p&gt;
&lt;p&gt;As an example, suppose you want evaluate &lt;a href=&quot;http://trac.edgewall.org&quot;&gt;Trac&lt;/a&gt;, an integrated version control and project management application. Trac may be open-source, popular and free, but I can personally vouch that on a Unix system it takes some setting up, and I can&amp;#8217;t imagine getting it to work natively on a Windows server. Using virtualization, you simply download a virtual machine which has been loaded with the latest stable release of Trac. Boot up this machine using your host virtualisation software and run it on any supported operating system &amp;#8212; Windows included. Do the same with &lt;a href=&quot;http://www.redmine.org&quot;&gt;Redmine&lt;/a&gt;, another web-based project management application, and you can compare it with Trac. Once you&amp;#8217;ve completed your evaluation, delete the one you don&amp;#8217;t like and keep going with the other. As a virtual machine, it&amp;#8217;s easy to move it to a new host, if desired. &lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://www.jumpbox.com&quot;&gt;&lt;img style=&quot;float:right&quot; src=&quot;http://www.jumpbox.com/sites/all/themes/jumpbox/logo-white.gif&quot; alt=&quot;JumpBox logo&quot;/&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;VMware provide instructions for creating appliances and host a &lt;a href=&quot;http://www.vmware.com/appliances/&quot;&gt;library of such appliances&lt;/a&gt; on their website. Organisations like &lt;a href=&quot;http://www.jumpbox.com&quot;&gt;JumpBox&lt;/a&gt; make a business out of providing virtual machines which run on a number of different virtual platforms.&lt;/p&gt;
&lt;h3 id=&quot;running-a-virtual-machine&quot;&gt;Running a virtual machine&lt;/h3&gt;
&lt;p&gt;&lt;img style=&quot;float:right&quot; src=&quot;http://wordaligned.org/images/win-xp-and-fc7.gif&quot; alt=&quot;Virtual machine shortcuts&quot;/&gt;&lt;/p&gt;
&lt;p&gt;Parallels Desktop creates shortcuts which I click on to power up the virtual machines. VMware on Windows does something similar. My perception is that these virtual machines boot as quickly as their physical counterparts would, but it could simply be that I&amp;#8217;m using the host system to do something else while they  start up in the background.&lt;/p&gt;
&lt;p&gt;Exactly how the guest operating system integrates with the host varies. Some systems/configurations give you a window within a window; the guest user interface is displayed as a whole within a single window on the host, and you switch focus to this window to use it. More sophisticated systems integrate seamlessly, so you can tab between host and guest applications as if they were all running natively, and guest and host file browsers see both machines&amp;#8217; file systems transparently. The end-user experience is of the host and guest operating in parallel, as a single computer which can run software native to both systems.&lt;/p&gt;
&lt;p&gt;In my experience, the first mode can be awkward to use. I much prefer the second: any friction context-switching between machines, and you find yourself preferring separate machines and a KVM, or using an X server to display X windows presented by a remote machine.&lt;/p&gt;
&lt;h3 id=&quot;peripheral-access&quot;&gt;Peripheral Access&lt;/h3&gt;
&lt;p&gt;Which peripherals can the guest operating system access? Certainly, the guest wouldn&amp;#8217;t be much use if it couldn&amp;#8217;t make use of monitor, keyboard and mouse &amp;#8212; although you may suffer translation and configuration wrinkles due to the different keyboard layout and mouse button conventions used by different operating systems.&lt;/p&gt;
&lt;p&gt;Access to other peripherals and interfaces will depend on the virtualization software: check the product information. My guest Windows XP can use its host&amp;#8217;s:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;network interfaces&lt;/li&gt;
&lt;li&gt;USB ports&lt;/li&gt;
&lt;li&gt;DVD drive&lt;/li&gt;
&lt;li&gt;speakers&lt;/li&gt;
&lt;li&gt;built-in camera&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Actually, I didn&amp;#8217;t realise it could use the camera, having never had cause to use the camera from within Windows, but a quick check shows it can. Access to networked printers also just works.&lt;/p&gt;
&lt;h3 id=&quot;opportunities&quot;&gt;Opportunities&lt;/h3&gt;
&lt;p&gt;I&amp;#8217;ve already mentioned some obvious uses for virtualization, and I&amp;#8217;ll add some more which I&amp;#8217;ve found useful in the past:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;you can develop for multiple platforms using a single machine&lt;/li&gt;
&lt;li&gt;you can download pre-built machines designed to run particular applications, saving you from package management headaches&lt;/li&gt;
&lt;li&gt;if you use a laptop, virtualization allows you to carry many machines around with you: a sales person could demonstrate Unix-based software on a Windows machine, for example&lt;/li&gt;
&lt;li&gt;you can script the creation of machines, and test e.g. clustered server configurations, without needing a rack filled with hardware&lt;/li&gt;
&lt;li&gt;you can test on multiple platforms&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Even if your application itself is server-based and only runs on a single platform, virtualization allows you to test its web interface on multiple browsers. And even if your development is tied to a single operating system, virtualization allows you to keep old versions of that operating system alive on new hardware, and indeed to constrain the resources available to these old versions.&lt;/p&gt;
&lt;p&gt;Hosting companies often use virtualization to create an indirection between user accounts and the hosting hardware farm. Users have root access to their own virtual machine yet are isolated from other root users on the same hardware (for example, rebooting a virtual machine doesn&amp;#8217;t affect other machines on the same host); and their virtual machine can be transferred between physical hosts without them even realising.&lt;/p&gt;
&lt;p&gt;It would even be possible to distribute software as a virtual appliance. Rather than requiring your users to install version X of Python, version Y of SQLite, version Z of the database bindings and so on, you might consider distributing an entire system which runs as a virtual machine.&lt;/p&gt;
&lt;h3 id=&quot;considerations&quot;&gt;Considerations&lt;/h3&gt;
&lt;p&gt;Running a virtual machine requires real resources. I deliberately chose Windows XP over Vista for this reason; XP has the smaller footprint and it&amp;#8217;s all I personally need for developing software which ports to Windows.&lt;/p&gt;
&lt;p&gt;As already mentioned, your guest operating system needs licensing. You need to pay to use Windows even if you&amp;#8217;re running it on an Apple computer and have already paid for OS X. You&amp;#8217;ll also need to go through the usual activation procedure.&lt;/p&gt;
&lt;p&gt;You&amp;#8217;ll need to tend to your virtual machines like any others on your local network. They need naming and backing up. User accounts must be created. Depending on what presence they have on your network, you may want to configure DHCP, or take anti-virus measures. You also need to consider upgrading them.&lt;/p&gt;
&lt;p&gt;I have run into wrinkles and irritations with the hardware abstraction side of virtualization. For example, the Apple keyboard I use doesn&amp;#8217;t map exactly to what I&amp;#8217;d want when using Windows. It&amp;#8217;s occasionally taken me some fiddling with X configuration files to get a Linux graphical interface displaying properly. Generally, though, someone else will have found and fixed the problem before you, and searching online forums turns up an answer.&lt;/p&gt;
&lt;p&gt;In this article&amp;#8217;s introduction we classed virtualization as yet another computing problem solved by indirection. Indirection has a price. What about the accumulated expense of everything passing through the software shim which abstracts the platform? Surely a guest operating system can&amp;#8217;t be as fast as a native one on equivalent hardware? I have no hard figures to present here but personal experience suggests no perceptible difference: the only thing I have noticed is that my guest Windows XP seems to use only one of its host&amp;#8217;s two CPUs.&lt;/p&gt;
&lt;h3 id=&quot;just-for-fun&quot;&gt;Just for fun&lt;/h3&gt;
&lt;p&gt;We&amp;#8217;ve seen it&amp;#8217;s possible and sensible for a platform to host a guest operating system within its native operating system. How about trying something silly? Could our guest operating system itself use virtualization to become a host for a guest of its own?&lt;/p&gt;
&lt;p&gt;I gave it a go. Using Parallels Desktop on my OS X host, running Windows XP as a guest, I installed (the free) VMware Player virtualization software for Windows. So far, so good. Next I downloaded vmTrac, a 113Mb VMware appliance which packages Trac, Subversion, WebMin and Lighttpd on a FreeBSD core. I extracted the archive and opened the appliance using VMware Player. &lt;/p&gt;
&lt;p&gt;The picture shows my desktop. I&amp;#8217;ve used Google Chrome and Internet Explorer to access Trac and WebMin, which are running as web applications on FreeBSD, itself running as a Windows XP guest, and Windows XP is a guest on OS X.&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://www.flickr.com/photos/thomasguest/2851613748/&quot; title=&quot;Virtualization by Thomas Guest, on Flickr&quot;&gt;&lt;img src=&quot;http://farm4.static.flickr.com/3011/2851613748_0d3db38a4a.jpg&quot; width=&quot;500&quot; height=&quot;313&quot; alt=&quot;virtualization&quot; /&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h3 id=&quot;further-reading&quot;&gt;Further reading&lt;/h3&gt;
&lt;p&gt;Although virtualization products are mature and modern hardware is ready to accommodate them, the options and possibilities still take some explaining. You&amp;#8217;ll find plenty of good material on the &lt;a href=&quot;http://www.vmware.com&quot;&gt;VMware&lt;/a&gt; and &lt;a href=&quot;http://www.parallels.com/&quot;&gt;Parallels&lt;/a&gt; websites. It&amp;#8217;s also worth searching for other virtualization platforms. This is a growing market, there are lots of competitors and good deals to be had.&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://www.justsoftwaresolutions.co.uk/testing/testing-on-multiple-platforms-with-vmware.html&quot;&gt;Testing on Multiple Platforms with VMware&lt;/a&gt;, by Anthony Williams provides a clear overview of the subject addressed in this article.&lt;/p&gt;
&lt;hr /&gt;
&lt;h3 id=&quot;thanks&quot;&gt;Thanks&lt;/h3&gt;
&lt;p&gt;&lt;a href=&quot;http://accu.org/index.php/aboutus/aboutjournals&quot;&gt;&lt;img style=&quot;float:right;&quot; src=&quot;http://accu.org/content/images/journals/CVu205Cover.png&quot; alt=&quot;CVu 20.5 cover&quot;/&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;This article was first published in CVu 20.5, an &lt;a href=&quot;http://accu.org/index.php/aboutus/aboutjournals&quot;&gt;ACCU journal&lt;/a&gt;, and I would like to thank everyone at CVu for their help with it. In particular, I&amp;#8217;d like to thank Gail Ollis, who edited CVu 20.5, and who suggested contributors should try and step back from the details of &lt;strong&gt;how&lt;/strong&gt; to do something, and instead explain &lt;strong&gt;what&lt;/strong&gt; exactly that something is and &lt;strong&gt;why&lt;/strong&gt; it might be of interest.&lt;/p&gt;
&lt;p&gt;This remit inspired several authors and CVu 20.5 turned out to be a great read. I particularly enjoyed Matthew Wilson&amp;#8217;s article, &amp;#8220;!(C ^ C++)&amp;#8221;. &lt;a href=&quot;http://en.wikipedia.org/wiki/Matthew_Wilson_(author)&quot;&gt;Matthew Wilson&lt;/a&gt; is known as a C++ expert, but it came as no surprise to find he also knows his way around C. What did surprise me was to discover he prefers to use C in certain situations, and why.&lt;/p&gt;</description>
<dc:date>2009-01-07</dc:date>
<guid>http://wordaligned.org/articles/virtualization</guid>
<author>tag@wordaligned.org (Thomas Guest)</author>
<link>http://wordaligned.org/articles/virtualization</link>
<category>ACCU</category>
</item>

<item>
<title>Entertaining Documentation</title>
<description>&lt;h3 id=&quot;a-programmers-first-language&quot;&gt;A Programmer&amp;#8217;s first language&lt;/h3&gt;
&lt;p&gt;&lt;a href=&quot;http://personal.ee.surrey.ac.uk/Personal/L.Wood/double-plus-ungood/&quot; title=&quot;BDFL wearing ++ungood T-shirt and snake&quot;&gt;&lt;img src=&quot;http://info.ee.surrey.ac.uk/Personal/L.Wood/softwear/ungood-guido-van-rossum-small.jpeg&quot; alt=&quot;BDFL wearing ++ungood T-shirt&quot;/&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;A recent enquiry on the &lt;a href=&quot;http://accu.org/index.php/mailinglists&quot;&gt;ACCU mailing list&lt;/a&gt; asked which programming language would be most suitable for a beginner. The general response favoured Python. This should come as no surprise: &lt;a href=&quot;http://www.techworld.com.au/article/255835/-z_programming_languages_python&quot;&gt;elsewhere&lt;/a&gt;, Python&amp;#8217;s benevolent dictator for life explains: &lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;how his funky title came about, and &lt;/li&gt;
&lt;li&gt;how (somewhat to his surprise) Python has become increasingly popular for teaching and as a first language.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Hang on though! Back on the mailing list Mike Small voiced his dissent and spoke up for Perl.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&amp;#8230; I also think the online &lt;a href=&quot;http://perldoc.perl.org/&quot;&gt;Perl documentation&lt;/a&gt; blows away the online &lt;a href=&quot;http://docs.python.org&quot;&gt;Python docs&lt;/a&gt;.  One I can read for entertainment. The other has just the bare facts and is dull, although not as bad as the run of the mill doxygen-type tool generated, fill in the required fields docs you get for mainstream stuff like Java or .NET.&lt;/p&gt;
&lt;p&gt;Compare&amp;#8230;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://perldoc.perl.org/perlbot.html&quot;&gt;http://perldoc.perl.org/perlbot.html&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&amp;#8230; with &amp;#8230;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://docs.python.org/ref/types.html&quot;&gt;http://docs.python.org/ref/types.html&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;(if that&amp;#8217;s an unfair comparison someone feel free to find me an excerpt from the standard python docs that isn&amp;#8217;t a complete snore-fest).&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;span id=&quot;continue-reading&quot;/&gt;&lt;/p&gt;
&lt;h3 id=&quot;should-documentation-entertain&quot;&gt;Should documentation entertain?&lt;/h3&gt;
&lt;p&gt;Well, this &lt;em&gt;did&lt;/em&gt; surprise me, primarily because it seemed such an unusual charge. It&amp;#8217;s hard &amp;#8212; harder than generally acknowledged, I think &amp;#8212; to write good documentation. In the case of a language reference manual or a standard library user guide, &amp;#8220;good&amp;#8221; would mean accurate, accessible and written as simply as possible. Surely entertainment value doesn&amp;#8217;t get a look in?&lt;/p&gt;
&lt;p&gt;What&amp;#8217;s more, for a language up there with Perl and Python, many readers face text written by an author from a different culture and in a language which may not be their first. Irony and wit easily get mistranslated.&lt;/p&gt;
&lt;p&gt;Most &lt;a href=&quot;http://c2.com/cgi/wiki?FunnyThingsSeenInSourceCodeAndDocumentation&quot;&gt;jokes in software and its documentation fall flat&lt;/a&gt;. If it&amp;#8217;s hard to write clearly, it&amp;#8217;s almost impossible to write clearly and entertainingly. Guido van Rossum may be a fan of Monty Python, but I imagine he&amp;#8217;s happy leave the humour up to experts like &lt;a href=&quot;http://www.cleeseblog.com/&quot;&gt;Cleese&lt;/a&gt; et al.&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://www.cleeseblog.com/&quot;&gt;&lt;img src=&quot;http://upload.wikimedia.org/wikipedia/en/a/ae/Tv_muppet_show_john_cleese.jpg&quot; alt=&quot;Humour Experts&quot;/&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Maybe.&lt;/p&gt;
&lt;p&gt;On the other hand, even the &lt;a href=&quot;http://www.google.co.uk/search?q=14882%3A2003&quot; title=&quot;Search for the current C++ standard&quot;&gt;driest reference in computer programming&lt;/a&gt; makes space for an amusing &amp;#8212; and &lt;em&gt;informative&lt;/em&gt; &amp;#8212; limerick.&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://www-cs-faculty.stanford.edu/~knuth&quot;&gt;&lt;img style=&quot;float:right;&quot; src=&quot;http://www-cs-faculty.stanford.edu/~uno/don.gif&quot; alt=&quot;Don Knuth&quot;/&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;I happen to think the standard Python documentation is generally very good. I wouldn&amp;#8217;t recommend Python as a language for learners if this wasn&amp;#8217;t the case. But perhaps Mike Small has a point. The very best software writers can entertain and amuse as well as inform &amp;#8212; Donald Knuth being the outstanding example. &lt;a href=&quot;http://www-cs-faculty.stanford.edu/~knuth/taocp.html&quot;&gt;&amp;#8220;The Art of Computer Programming&amp;#8221;&lt;/a&gt; manages to be academic without being dry, a readable reference. Classics like Jon Bentley&amp;#8217;s &amp;#8220;Programming Pearls&amp;#8221; and Abelson and Sussman&amp;#8217;s &lt;a href=&quot;http://mitpress.mit.edu/sicp/full-text/book/book.html&quot;&gt;&amp;#8220;Structure and Interpretation of Computer Programs&amp;#8221;&lt;/a&gt; also show what can be achieved. From what I&amp;#8217;ve read of his, &lt;a href=&quot;http://www.wall.org/~larry&quot;&gt;Larry Wall&lt;/a&gt; is up there too, and his wit and linguistic energy shine through Perl, even if he didn&amp;#8217;t personally document all of it.&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://www.wall.org/~larry/&quot;&gt;&lt;img src=&quot;http://www.linuxjournal.com/files/linuxjournal.com/linuxjournal/articles/033/3394/3394f1.png&quot; alt=&quot;Larry Wall&quot;/&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h3 id=&quot;unix-sets-the-standard&quot;&gt;Unix sets the standard&lt;/h3&gt;
&lt;p&gt;We mustn&amp;#8217;t equate &amp;#8220;entertaining&amp;#8221; with &amp;#8220;funny&amp;#8221;. The Unix documentation (available at terminal near you via &lt;code&gt;man&lt;/code&gt; or &lt;code&gt;info&lt;/code&gt;) is hardly a chuckle-fest, but its vigour and clarity make it a fine read. Although it never aims to amuse, sometimes its deadpan delivery makes me laugh. Here&amp;#8217;s the BSD documentation for a handy but non-standard C string function:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Note that because strlcpy(3) is not defined in any standards, it should only be used when portability is not a concern.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Typing &lt;code&gt;man gamma&lt;/code&gt; on a nearby Linux box generates the painfully funny story of the confusion surrounding the naming and usage of the &lt;a href=&quot;http://www.johndcook.com/blog/2008/04/24/how-to-calculate-binomial-probabilities/&quot;&gt;Gamma function&lt;/a&gt;.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;HISTORY&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;4.2BSD had a &lt;strong&gt;gamma()&lt;/strong&gt; that computed ln(|Gamma(|x|)|), leaving the sign of  Gamma(|x|) in the external integer signgam.  In 4.3BSD the name was changed to &lt;strong&gt;lgamma()&lt;/strong&gt;, and the man page promises&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&amp;#8220;At some time in the future the name gamma will be rehabilitated and used for the Gamma function&amp;#8221;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;This  did indeed happen in 4.4BSD, where &lt;strong&gt;gamma()&lt;/strong&gt; computes the Gamma function (with no effect on signgam).  However, this came too late, and we now have &lt;strong&gt;tgamma()&lt;/strong&gt;, the &amp;#8220;true gamma&amp;#8221; function.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;CONFORMING TO&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;4.2BSD. Compatible with previous mistakes.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;In the main, though, the Unix documentation is plain, understated and accurate. It sets the standard for written software reference documentation. &lt;/p&gt;
&lt;p&gt;Maybe this is why Mike enjoys the Perl documentation? I&amp;#8217;ve heard Perl described as &amp;#8220;shell on steroids&amp;#8221;; and while the Perl documentation &lt;em&gt;does&lt;/em&gt; have the look and feel of a man page, there&amp;#8217;s also something a bit more pumped up and manic about it.&lt;/p&gt;
&lt;h3 id=&quot;entertaining-python-documentation&quot;&gt;Entertaining Python documentation&lt;/h3&gt;
&lt;p&gt;What about the standard Python documentation? Certainly, it aims for a friendly, informal tone. Here&amp;#8217;s an &lt;a href=&quot;http://docs.python.org/tut/node3.html&quot;&gt;excerpt&lt;/a&gt; from the tutorial introduction:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;By the way, the language is named after the BBC show &amp;#8220;Monty Python&amp;#8217;s Flying Circus&amp;#8221; and has nothing to do with nasty reptiles. Making references to Monty Python skits in documentation is not only allowed, it is encouraged! &lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Later, this same tutorial makes good on that promise, taking us through the subtleties of &lt;a href=&quot;http://docs.python.org/tut/node6.html&quot;&gt;keyword arguments&lt;/a&gt; with reference to the famous &lt;a href=&quot;http://en.wikipedia.org/wiki/Dead_Parrot&quot;&gt;dead parrot sketch&lt;/a&gt;.&lt;/p&gt;
&lt;blockquote&gt;&lt;p&gt;Functions can also be called using keyword arguments of the form &amp;#8220;&lt;tt&gt;keyword = value&lt;/tt&gt;&amp;#8221;.  For instance, the following function:&lt;/p&gt;
&lt;pre&gt;
def parrot(voltage, state=&#x27;a stiff&#x27;, action=&#x27;voom&#x27;, type=&#x27;Norwegian Blue&#x27;):
    print &quot;-- This parrot wouldn&#x27;t&quot;, action,
    print &quot;if you put&quot;, voltage, &quot;volts through it.&quot;
    print &quot;-- Lovely plumage, the&quot;, type
    print &quot;-- It&#x27;s&quot;, state, &quot;!&quot;
&lt;/pre&gt;
&lt;p&gt;could be called in any of the following ways:&lt;/p&gt;
&lt;pre&gt;
parrot(1000)
parrot(action = &#x27;VOOOOOM&#x27;, voltage = 1000000)
parrot(&#x27;a thousand&#x27;, state = &#x27;pushing up the daisies&#x27;)
parrot(&#x27;a million&#x27;, &#x27;bereft of life&#x27;, &#x27;jump&#x27;)
&lt;/pre&gt;&lt;/blockquote&gt;

&lt;p&gt;Well, I guess it beats the weary employee database examples found in so many programming texts. Sadly, though, the parrot sketch has been repeated too often, and in this case the &amp;#8220;snore-fest&amp;#8221; epithet sticks.&lt;/p&gt;
&lt;h3 id=&quot;multimedia-documentation&quot;&gt;Multimedia documentation&lt;/h3&gt;
&lt;p&gt;Mike talks explicitly about &amp;#8220;online documentation&amp;#8221;, and these days online (for programmers, at least) implies:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;a decent browser&lt;/li&gt;
&lt;li&gt;plenty of pixels&lt;/li&gt;
&lt;li&gt;a high bandwidth connection&lt;/li&gt;
&lt;li&gt;javascript&lt;/li&gt;
&lt;li&gt;excellent graphics&lt;/li&gt;
&lt;li&gt;a means to collaborate and contribute&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;These factors, in combination, enable some novel possibilities for documentation. Hyperlinks provide basic navigation; mix in folding documentation and search facilities, and readers quickly find what they&amp;#8217;re looking for. There&amp;#8217;s ample space for examples and comments, for contributions, for diagrams, for &lt;a href=&quot;http://showmedo.com/videos/python&quot;&gt;audio and video&lt;/a&gt; content. Why bother reading how to create a &lt;a href=&quot;http://showmedo.com/videos/series?name=PythonWxPythonBeginnersSeries&quot;&gt;graphical user interface using wxPython&lt;/a&gt;, for example, when you can effectively look over someone&amp;#8217;s shoulder while they walk through its features?&lt;/p&gt;
&lt;p&gt;I said earlier that the Unix documentation set the standard for written documentation. If you&amp;#8217;re reading at a terminal 40 rows deep and 72 columns wide, with limited font rendering and graphical capabilities, you couldn&amp;#8217;t do better. If you have a larger screen and more than one monitor, maybe you can.&lt;/p&gt;
&lt;h3 id=&quot;ducking-the-challenge&quot;&gt;Ducking the challenge&lt;/h3&gt;
&lt;p&gt;Returning to Mike Small&amp;#8217;s challenge:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&amp;#8230; someone feel free to find me an excerpt from the standard python docs that isn&amp;#8217;t a complete snore-fest.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;I can see where he&amp;#8217;s coming from, but I disagree. In my opinion the Python documentation is well-organised, accessible and accurate. The documentation for some modules may be rather thin, but that&amp;#8217;s the strongest criticism I would make. I do struggle to single out an entertaining excerpt, though: the documentation aims to inform, and at that it does well.&lt;/p&gt;
&lt;h3 id=&quot;looking-further&quot;&gt;Looking further&lt;/h3&gt;
&lt;div class=&quot;amazon&quot;&gt;&lt;a href=&quot;http://www.amazon.com/gp/product/0596007973?ie=UTF8&amp;amp;tag=wordalig-20&quot;&gt;&lt;img src=&quot;http://wordaligned.org/images/books/python-cookbook.jpg&quot; alt=&quot;Python Cookbook cover&quot;/&gt;&lt;/a&gt;&lt;/div&gt;

&lt;p&gt;If you&amp;#8217;re prepared to venture away from &lt;a href=&quot;http://docs.python.org&quot;&gt;docs.python.org&lt;/a&gt;, you&amp;#8217;ll find the Python community is served by some &lt;a href=&quot;http://diveintomark.org&quot; title=&quot;Mark Pilgrim&quot;&gt;talented&lt;/a&gt; &lt;a href=&quot;http://www.dabeaz.com&quot; title=&quot;David Beazley&quot;&gt;and&lt;/a&gt; &lt;a href=&quot;http://www.aleax.it/python_mat_en.html&quot; title=&quot;Alex Martelli&quot;&gt;entertaining&lt;/a&gt; writers. I&amp;#8217;ve &lt;a href=&quot;http://wordaligned.org/articles/essential-python-reading-list.html&quot; title=&quot;My essential Python reading list&quot;&gt;mentioned&lt;/a&gt; the &lt;a href=&quot;http://www.amazon.com/gp/product/0596007973?ie=UTF8&amp;amp;tag=wordalig-20&quot;&gt;Python Cookbook&lt;/a&gt; before: the entire text can now be found &lt;a href=&quot;http://www.ubookcase.com/book/Oreilly/Python.Cookbook.2nd.edition&quot;&gt;online&lt;/a&gt;, but I recommend getting hold of hard-copy so you can sit down and read it from cover to cover &amp;#8212; definite armchair material. Many programmers contributed recipes to the book but it&amp;#8217;s pulled together by some skillful editing and by the fine essays which introduce each chapter.&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://www.flickr.com/photos/codebear/7409127/&quot;&gt;&lt;img style=&quot;float:left;&quot; src=&quot;http://static.flickr.com/4/7409127_53df0dd56c_s.jpg&quot; alt=&quot;Tim Peters by codebear&quot;/&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Tim Peters introduces the chapter on &lt;a href=&quot;http://www.ubookcase.com/book/Oreilly/Python.Cookbook.2nd.edition/0596007973/ch05-77003.html&quot;&gt;Searching and Sorting&lt;/a&gt; and if you scratch at Python a little harder you&amp;#8217;ll find plenty more written by him. &lt;a href=&quot;http://svn.python.org/projects/python/trunk/Objects/listsort.txt&quot;&gt;Here are his notes&lt;/a&gt; on Python&amp;#8217;s hybrid sort algorithm. &lt;a href=&quot;http://svn.python.org/projects/python/trunk/Objects/listobject.c&quot;&gt;Here&amp;#8217;s&lt;/a&gt; the implementation. Enjoy!&lt;/p&gt;</description>
<dc:date>2008-08-27</dc:date>
<guid>http://wordaligned.org/articles/entertaining-documentation</guid>
<author>tag@wordaligned.org (Thomas Guest)</author>
<link>http://wordaligned.org/articles/entertaining-documentation</link>
<category>ACCU</category>
</item>

<item>
<title>Fixing Compiler Warnings the Hard Way</title>
<description>&lt;h3 id=&quot;gcc-makes-a-suggestion&quot;&gt;GCC makes a suggestion&lt;/h3&gt;
&lt;p&gt;The build server &lt;a href=&quot;http://wordaligned.org/articles/antisocial-build-orders.html&quot;&gt;CC&amp;#8217;d me on an ASBO email&lt;/a&gt;. Good old GCC, grumbling about operator precedence again. But Hey! &amp;#8212; at least it had a positive suggestion to make.&lt;/p&gt;
&lt;pre style=&quot;border: 2px solid red; background: white; font-size: 150%;&quot;&gt;
&lt;b&gt;From:&lt;/b&gt; buildmaster@example.com
&lt;b&gt;To:&lt;/b&gt; lem.e.tweakit@example.com
&lt;b&gt;Cc:&lt;/b&gt; developers@example.com
&lt;b&gt;Subject:&lt;/b&gt; Broken build
------------------------------------
&lt;span style=&quot;font-weight: 900; font-variant: small-caps; font-size: 36px;&quot;&gt;Anti Social Build Order&lt;/span&gt;
&lt;b&gt;Version:&lt;/b&gt; svn://svnserver/trunk@999
&lt;b&gt;Platform:&lt;/b&gt; Linux, GCC 4.0.1
&lt;b&gt;Build Log:&lt;/b&gt; 
....
Warning: suggest parentheses around arithmetic
in operand of ^
&lt;/pre&gt;

&lt;p&gt;I looked at the code. Here&amp;#8217;s a much simplified version which generates the same warning.&lt;/p&gt;
&lt;p&gt;&lt;span id=&quot;continue-reading&quot;/&gt;&lt;/p&gt;
&lt;pre&gt;
void
unpack(unsigned char const * bits, int n_bits,
       unsigned char * buf)
{
    unsigned char bit, byte, pos;
    int b;

    for (b = 0; b != n_bits; ++b)
    {
        byte = bits[b / 8];
        pos = 7 - (b % 8);
        &lt;strong&gt;bit = byte &amp;amp; 2^pos;&lt;/strong&gt;
        buf[b] = bit == 0 ? 0 : 255;
    }
}
&lt;/pre&gt;

&lt;p&gt;When compiling this function GCC warns about the line in bold type:&lt;/p&gt;
&lt;pre&gt;
$ gcc -Wall -c unpack_bits.c 
unpack_bits.c: In function `unpack&#x27;:
unpack_bits.c:12: warning: suggest parentheses around 
             arithmetic in operand of ^
&lt;/pre&gt;

&lt;h3 id=&quot;setting-a-precedent&quot;&gt;Setting a precedent&lt;/h3&gt;
&lt;p&gt;Needless to say, the actual offending code was buried in a longer function, indented more deeply, and with a few more &lt;a href=&quot;http://c2.com/cgi/wiki?ThreeStarProgrammer&quot;&gt;indirections&lt;/a&gt; &amp;#8212; so it was indeed tempting to take GCC&amp;#8217;s advice and whack in a couple of brackets. Clearly the author &lt;strong&gt;meant&lt;/strong&gt; to write:&lt;/p&gt;
&lt;div class=&quot;typocode&quot;&gt;

&lt;pre class=&quot;prettyprint&quot;&gt;bit = byte &amp;amp; (2^pos);

&lt;/pre&gt;

&lt;/div&gt;

&lt;p&gt;Why else omit spaces around the &lt;code&gt;^&lt;/code&gt;?&lt;/p&gt;
&lt;p&gt;Fortunately I live by my own rule, to &lt;a href=&quot;http://wordaligned.org/articles/brackets-off.html&quot;&gt;avoid unnecessary parentheses&lt;/a&gt;, so I wasn&amp;#8217;t about to add any here without asking why. Worse than my stubborn principles, &lt;code&gt;^&lt;/code&gt;, the exclusive or operator, has &lt;strong&gt;lower&lt;/strong&gt; precedence than bitwise and, &lt;code&gt;&amp;amp;&lt;/code&gt;, so to keep GCC happy and retain the original behaviour we&amp;#8217;d have to write:&lt;/p&gt;
&lt;div class=&quot;typocode&quot;&gt;

&lt;pre class=&quot;prettyprint&quot;&gt;bit = (byte &amp;amp; 2) ^ pos;

&lt;/pre&gt;

&lt;/div&gt;

&lt;p&gt;This last expression looks very bizarre. Had it ever been exercised?&lt;/p&gt;
&lt;p&gt;GCC was right, the code was wrong, but its diagnostic showed the wrong way to right things. On this occasion GCC should have been proscriptive, not prescriptive, and left the fix in the hands of the programmer&lt;a id=&quot;fn1link&quot; href=&quot;http://wordaligned.org/articles/fixing-compiler-warnings-the-hard-way#footnote1&quot;&gt;&lt;sup&gt;&lt;a href=&quot;https://blog.codeship.com/building-minimal-docker-containers-for-go-applications/&quot;&gt;1&lt;/a&gt;&lt;/sup&gt;&lt;/a&gt;.&lt;/p&gt;
&lt;h3 id=&quot;dont-mix-bits-and-arithmetic&quot;&gt;Don&amp;#8217;t mix bits and arithmetic&lt;/h3&gt;
&lt;pre style=&quot;color:#00cc00;background:#000;float:right;margin-left:4px;&quot;&gt;0000 0000 5589 e58b 5508 89d0 d1e8 2555
5555 5529 c289 d0c1 e802 2533 3333 3381
e233 3333 3301 d089 c2c1 ea04 01d0 250f
0f0f 0f89 c2c1 ea08 01d0 25ff 00ff 0089
c2c1 ea10 01d0 25ff ff00 005d c300 0000
5555 5555 3333 3333 0f0f 0f0f ff00 ff00&lt;/pre&gt;

&lt;p&gt;My personal rule of thumb is to avoid mixing bitwise and arithmetic operations. Although integral types support both kinds of operation, it generally feels like a type-mismatch to combine them in a single expression. An array of bits isn&amp;#8217;t the same as a number, and vice-versa.&lt;/p&gt;
&lt;p&gt;Of course there are some treasured &lt;a href=&quot;http://graphics.stanford.edu/~seander/bithacks.html&quot;&gt;bit-twiddling tricks&lt;/a&gt; which exploit the mapping between binary arithmetic and machine level register operations. So we can, for example, calculate &lt;code&gt;2&lt;/code&gt; raised to the power of &lt;code&gt;19&lt;/code&gt; with a simple left-shift, &lt;code&gt;1 &amp;lt;&amp;lt; 19&lt;/code&gt;, or test if &lt;code&gt;v&lt;/code&gt; is a power of &lt;code&gt;2&lt;/code&gt; with &lt;code&gt;!(v &amp;amp; (v - 1)) &amp;amp;&amp;amp; v&lt;/code&gt;. I&amp;#8217;m not suggesting we blacklist these ingenious hacks &amp;#8212; in fact, anyone off to an interview for a programming job with an embedded systems company might do well to study them &amp;#8212; but I would say their use requires thorough documentation.&lt;/p&gt;
&lt;p&gt;On occasion, then, bitwise operations may legitimately be used for fast arithmetic; but using arithmetic to pack bits is rarely necessary. This line of code is probably wrong&lt;a id=&quot;fn2link&quot; href=&quot;http://wordaligned.org/articles/fixing-compiler-warnings-the-hard-way#footnote2&quot;&gt;&lt;sup&gt;&lt;a href=&quot;http://devcenter.wercker.com/docs/quickstarts/advanced/building-minimal-containers-with-go&quot;&gt;2&lt;/a&gt;&lt;/sup&gt;&lt;/a&gt;:&lt;/p&gt;
&lt;div class=&quot;typocode&quot;&gt;

&lt;pre class=&quot;prettyprint&quot;&gt;r = h &amp;lt;&amp;lt; 4 + 1;

&lt;/pre&gt;

&lt;/div&gt;

&lt;p&gt;The programmer probably intended the (bitwise) shift to happen before the (arithmetic) addition, like this.&lt;/p&gt;
&lt;div class=&quot;typocode&quot;&gt;

&lt;pre class=&quot;prettyprint&quot;&gt;r = (h &amp;lt;&amp;lt; 4) + 1;

&lt;/pre&gt;

&lt;/div&gt;

&lt;p&gt;If we stick to bitwise operations, things become clear. I&amp;#8217;ve written the 1 in hexadecimal as a hint it&amp;#8217;s being used as a bit pattern &amp;#8212; sadly there&amp;#8217;s no way of writing a binary literal directly in C.&lt;/p&gt;
&lt;div class=&quot;typocode&quot;&gt;

&lt;pre class=&quot;prettyprint&quot;&gt;r = h &amp;lt;&amp;lt; 4 | 0x1;

&lt;/pre&gt;

&lt;/div&gt;

&lt;p&gt;Anyway, the problem line in &lt;code&gt;unpack()&lt;/code&gt; adheres to my rule of thumb: &lt;code&gt;&amp;amp;&lt;/code&gt; and &lt;code&gt;^&lt;/code&gt; are indeed both bitwise operations. But after some puzzling I realised the author of the code intended &lt;code&gt;2^pos&lt;/code&gt; to mean &lt;code&gt;2&lt;/code&gt; to the power of &lt;code&gt;pos&lt;/code&gt;, &lt;strong&gt;not for its arithmetic value, but for its bit pattern&lt;/strong&gt; &amp;#8212; which, as every programmer knows, is a &lt;code&gt;1&lt;/code&gt; followed by pos &lt;code&gt;0&lt;/code&gt;s. That is, a &lt;code&gt;1&lt;/code&gt; left shifted &lt;code&gt;pos&lt;/code&gt; times.&lt;/p&gt;
&lt;p&gt;Here&amp;#8217;s what I thought the fix should be. Note, incidentally, that I&amp;#8217;ve used &lt;code&gt;~0&lt;/code&gt; rather than &lt;code&gt;255&lt;/code&gt;, because it clearly says &amp;#8220;set every bit&amp;#8221;. I&amp;#8217;m also using unsigned integers throughout &amp;#8212; always a good idea when working with bits. Some programmers might prefer to parenthesise the expression &lt;code&gt;byte &amp;amp; 1 &amp;lt;&amp;lt; pos&lt;/code&gt;, &lt;a href=&quot;http://wordaligned.org/articles/brackets-off.html&quot;&gt;but I prefer the form shown&lt;/a&gt;: it&amp;#8217;s easy enough to remember that &lt;code&gt;&amp;amp;&lt;/code&gt; groups with the logical operators and &lt;code&gt;&amp;lt;&amp;lt;&lt;/code&gt; with the (higher precedence) arithmetic ones.&lt;/p&gt;
&lt;div class=&quot;typocode&quot;&gt;

&lt;pre class=&quot;prettyprint&quot;&gt;void
unpack(unsigned char const * bits, unsigned n_bits,
       unsigned char * buf)
{
    unsigned char bit, byte;
    unsigned b, pos;

    for (b = 0; b != n_bits; ++b)
    {
        byte = bits[b / 8];
        pos = 7 - b % 8;
        bit = byte &amp;amp; 1 &amp;lt;&amp;lt; pos;
        buf[b] = bit == 0 ? 0 : ~0;
    }
}

&lt;/pre&gt;

&lt;/div&gt;

&lt;p&gt;Despite the absence of documentation, this is now at least a coherent function. It&amp;#8217;s a &amp;#8220;biterator&amp;#8221; which steps through a collection of bits (packed into bytes, the smallest memory units C offers). Each time it encounters a set/clear bit, it sets/clears all the bits in the next byte in the output buffer. That is, it expands each bit value to fill a whole byte.&lt;/p&gt;
&lt;p&gt;This is exactly the kind of function which is surprisingly fiddly to write but simple to unit test. As already mentioned, though, the function didn&amp;#8217;t actually exist in the form shown, and the tests were all at the module level. The responsible way for me to proceed was to create a module test which exposed the defect, then make my candidate fix, confirm it did indeed fix the defect, then check the change in.&lt;/p&gt;
&lt;h3 id=&quot;unit-test&quot;&gt;Unit Test&lt;/h3&gt;
&lt;p&gt;Here&amp;#8217;s how simple a unit test for &lt;code&gt;unpack()&lt;/code&gt; could be. It may be longer than the function it&amp;#8217;s testing, but it&amp;#8217;s less complex. And with just a couple of test cases, it manages to cover several interesting corners of the functionality. Better still, it passes&lt;a id=&quot;fn3link&quot; href=&quot;http://wordaligned.org/articles/fixing-compiler-warnings-the-hard-way#footnote3&quot;&gt;&lt;sup&gt;[3]&lt;/sup&gt;&lt;/a&gt;!&lt;/p&gt;
&lt;div class=&quot;typocode&quot;&gt;

&lt;pre class=&quot;prettyprint&quot;&gt;void
test_unpack()
{
    // Start with a varied bit-pattern.
    // Ensure each byte differs from its reversed self.
    unsigned char const bits[2] = 
    {
        1 &amp;lt;&amp;lt; 7 | 1 &amp;lt;&amp;lt; 5 | 1 &amp;lt;&amp;lt; 4 | 1 &amp;lt;&amp;lt; 0, // 10110001 binary
        1 &amp;lt;&amp;lt; 6 | 1 &amp;lt;&amp;lt; 5 | 1 &amp;lt;&amp;lt; 3 | 1 &amp;lt;&amp;lt; 0, // 01101001 binary
    };
    // The expected output expands bits to bytes (0 =&amp;gt; 0, 1 =&amp;gt; ~0)
    unsigned char expected[2 * 8] = 
    {
        ~0, 0, ~0, ~0, 0, 0, 0, ~0,
        0, ~0, ~0, 0, ~0, 0, 0, ~0
    };
    unsigned char buf[3 * 8] = { 0 };
    unsigned char buf_copy[3 * 8] = { 0 };

    size_t const buf_size = sizeof(buf);

    // Fill the buffer with a pattern of 1s and 0s.
    // Unpack nothing and check nothing changes.
    memset(buf, 0xa5, buf_size);
    memcpy(buf_copy, buf, buf_size);
    unpack(bits, 0, buf);
    assert(memcmp(buf, buf_copy, buf_size) == 0);

    // Unpack some of the bits and check the results.
    // Also check the remainder of the buffer is undamaged.
    unpack(bits, 13, buf);
    assert(memcmp(buf, expected, 13) == 0);
    assert(memcmp(buf + 13, buf_copy + 13, buf_size - 13) == 0);
}

&lt;/pre&gt;

&lt;/div&gt;

&lt;p&gt;This is white-box testing: the test knows enough about the implementation of &lt;code&gt;unpack()&lt;/code&gt; to expose potential problems. In this case, there&amp;#8217;s something unusual about the way the &lt;code&gt;pos&lt;/code&gt; counter goes down as the bit counter &lt;code&gt;b&lt;/code&gt; goes up, so we make sure that the bits we&amp;#8217;re unpacking form asymmetric patterns.&lt;/p&gt;
&lt;h3 id=&quot;refactoring&quot;&gt;Refactoring&lt;/h3&gt;
&lt;p&gt;Should we extract this tested &lt;code&gt;unpack()&lt;/code&gt; function from its surrounding, larger, more complex function? Is it safe to do so? Have we time to spend making changes with no externally visible results? Should we tweak &lt;code&gt;unpack()&lt;/code&gt; for efficiency (after all, it doesn&amp;#8217;t need to use the division and modulus operators each time round the loop)?&lt;/p&gt;
&lt;div class=&quot;amazon&quot;&gt;&lt;a href=&quot;http://www.amazon.com/gp/product/0131177052?ie=UTF8&amp;amp;tag=wordalig-20&amp;amp;linkCode=as2&amp;amp;camp=1789&amp;amp;creative=9325&amp;amp;creativeASIN=0131177052&quot;&gt;&lt;img src=&quot;http://wordaligned.org/images/working-effectively-with-legacy-code.jpg&quot; alt=&quot;Working Effectively with Legacy Code cover&quot;/&gt;&lt;/a&gt;&lt;/div&gt;

&lt;p&gt;These are important questions. eXtreme Programmers &lt;a href=&quot;http://www.extremeprogramming.org/rules/refactor.html&quot;&gt;refactor mercilessly&lt;/a&gt;, confident their extensive test frameworks will provide a safety net. Java programmers select the code block in their IDE then click the &amp;#8220;extract method&amp;#8221; button. C and C++ programmers have less advanced tools, but Michael Feathers&amp;#8217; &lt;a href=&quot;http://www.amazon.com/gp/product/0131177052?ie=UTF8&amp;amp;tag=wordalig-20&amp;amp;linkCode=as2&amp;amp;camp=1789&amp;amp;creative=9325&amp;amp;creativeASIN=0131177052&quot;&gt;&amp;#8220;Working Effectively with Legacy Code&amp;#8221;&lt;/a&gt; offers practical advice on how to transform code safely &amp;#8212; that is, how to put it under test.&lt;/p&gt;
&lt;p&gt;In the real world, we judge each case on merit. A &lt;a href=&quot;http://wordaligned.org/articles/antisocial-build-orders.html&quot;&gt;nag email&lt;/a&gt; from the build server shouldn&amp;#8217;t trigger mass refactoring, even if the test infrastructure is in place. I think Feathers is right though, that poorly tested code is on its way to becoming legacy code: hard to adapt, unpleasant to work with, and a drag on continuing development.&lt;/p&gt;
&lt;h3 id=&quot;lessons&quot;&gt;Lessons&lt;/h3&gt;
&lt;p&gt;This new story repeats the same old lessons, and I think they bear repeating:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Set up a build server. Listen to it.&lt;/li&gt;
&lt;li&gt;Compile on multiple platforms.&lt;/li&gt;
&lt;li&gt;Think! Compilers are concerned with syntax, not semantics. A C compiler reads your code in order to rewrite it for the machine&amp;#8217;s benefit; understanding the code is your job.&lt;/li&gt;
&lt;li&gt;Write small functions. Unit test them. &lt;/li&gt;
&lt;li&gt;Integers and bit arrays are different.&lt;/li&gt;
&lt;li&gt;Take care when using bitwise operations as arithmetic shortcuts.&lt;/li&gt;
&lt;li&gt;Avoid using arithmetic for bit packing.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Oh, and in C, don&amp;#8217;t mistake &lt;code&gt;^&lt;/code&gt; for exponentiation!&lt;/p&gt;
&lt;hr /&gt;
&lt;p&gt;&lt;a href=&quot;http://accu.org&quot; title=&quot;ACCU: professionalism in programming&quot;&gt;&lt;img src=&quot;http://accu.org/content/images/buttonl_88x31.gif&quot; style=&quot;float:right&quot; width=&quot;88&quot; height=&quot;31&quot; alt=&quot;ACCU: professionalism in programming&quot;/&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;This article was originally published in &lt;a href=&quot;http://accu.org/index.php/aboutus/aboutjournals&quot;&gt;CVu&lt;/a&gt;, a print journal for ACCU members, and I would like to thank all at CVu for their help with it.&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://wordaligned.org/articles/fixing-compiler-warnings-the-hard-way#fn1link&quot; id=&quot;footnote1&quot;&gt;&lt;a href=&quot;https://blog.codeship.com/building-minimal-docker-containers-for-go-applications/&quot;&gt;1&lt;/a&gt;&lt;/a&gt; I&amp;#8217;m not complaining about GCC which did an outstanding job of flagging a genuine problem in perfectly well-defined and valid code. The other compiler frequently used on this project, MSVC V8.0, compiles this cleanly, at the same time warning standard C string functions are unsafe and &lt;strong&gt;deprecated&lt;/strong&gt;!&lt;/p&gt;
&lt;div class=&quot;amazon&quot;&gt;&lt;a href=&quot;http://www.amazon.com/gp/product/0201179288?ie=UTF8&amp;amp;tag=wordalig-20&amp;amp;linkCode=as2&amp;amp;camp=1789&amp;amp;creative=9325&amp;amp;creativeASIN=0201179288&quot;&gt;&lt;img  src=&quot;http://wordaligned.org/images/books/c-traps-and-pitfalls.jpg&quot; alt=&quot;Book cover&quot;/&gt;&lt;/a&gt;&lt;/div&gt;

&lt;p&gt;&lt;a href=&quot;http://wordaligned.org/articles/fixing-compiler-warnings-the-hard-way#fn2link&quot; id=&quot;footnote2&quot;&gt;&lt;a href=&quot;http://devcenter.wercker.com/docs/quickstarts/advanced/building-minimal-containers-with-go&quot;&gt;2&lt;/a&gt;&lt;/a&gt; I&amp;#8217;ve taken this example directly from Andrew Koenig&amp;#8217;s &lt;a href=&quot;http://www.amazon.com/gp/product/0201179288?ie=UTF8&amp;amp;tag=wordalig-20&amp;amp;linkCode=as2&amp;amp;camp=1789&amp;amp;creative=9325&amp;amp;creativeASIN=0201179288&quot;&gt;&amp;#8220;C Traps and Pitfalls&amp;#8221;&lt;/a&gt;. This is a nice little book which expands on the ideas presented in a &lt;a href=&quot;http://www.literateprogramming.com/ctraps.pdf&quot;&gt;paper of the same name [PDF]&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://wordaligned.org/articles/fixing-compiler-warnings-the-hard-way#fn3link&quot; id=&quot;footnote3&quot;&gt;[3]&lt;/a&gt; One thing I recommend, though, is to temporarily reverse the logic in the assertions and check they then fail. Unit test frameworks often provide hooks to do this reversed-result test, which confirms the test cases are actually being run.&lt;/p&gt;</description>
<dc:date>2008-05-20</dc:date>
<guid>http://wordaligned.org/articles/fixing-compiler-warnings-the-hard-way</guid>
<author>tag@wordaligned.org (Thomas Guest)</author>
<link>http://wordaligned.org/articles/fixing-compiler-warnings-the-hard-way</link>
<category>ACCU</category>
</item>

<item>
<title>Programming Nirvana, Plan B</title>
<description>&lt;h3 id=&quot;caging-the-effects-monster&quot;&gt;Caging the Effects Monster&lt;/h3&gt;
&lt;p&gt;&lt;a href=&quot;http://research.microsoft.com/~simonpj/&quot;&gt;&lt;img src=&quot;http://research.microsoft.com/~simonpj/GIFs/spj-snow.jpg&quot; alt=&quot;Simon Peyton Jones in the snow&quot; style=&quot;float:right;&quot;/&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://research.microsoft.com/~simonpj/&quot;&gt;Simon Peyton Jones&lt;/a&gt; gave an outstanding &lt;a href=&quot;http://accu.org/index.php/conferences/accu_conference_2008/accu2008_sessions#Caging%20the%20Effects%20Monster:%20the%20next%20decade&#x27;s%20big%20challenge&quot;&gt;keynote&lt;/a&gt; on functional programming at &lt;a href=&quot;http://accu.org/index.php/conferences/accu_conference_2008&quot;&gt;ACCU 2008&lt;/a&gt;. A language researcher at Microsoft in Cambridge, he&amp;#8217;s perhaps best known as the man behind the &lt;a href=&quot;http://haskell.org&quot;&gt;Haskell&lt;/a&gt; programming language and &lt;a href=&quot;http://haskell.org/ghc/&quot;&gt;GHC&lt;/a&gt;, the leading Haskell compiler. He also happens to be a superb presenter who positively exudes enthusiasm. &lt;span /&gt;Not many compiler writers connect so well with an audience.&lt;/p&gt;
&lt;p&gt;&lt;span id=&quot;continue-reading&quot;/&gt;&lt;/p&gt;
&lt;p&gt;I&amp;#8217;m a huge fan of a functional programming &lt;em&gt;style&lt;/em&gt;, by which I mean I like first class functions, higher order functions, anonymous functions, list comprehensions, closures and so on. In the languages I use most often, &lt;a href=&quot;http://wordaligned.org/tags/c++&quot;&gt;C++&lt;/a&gt;, &lt;a href=&quot;http://wordaligned.org/tags/python&quot;&gt;Python&lt;/a&gt; and &lt;a href=&quot;http://wordaligned.org/tags/shell&quot;&gt;Shell&lt;/a&gt;, functional programming is a central paradigm &amp;#8212; every bit as useful and important as object-oriented and procedural programming.&lt;/p&gt;
&lt;p&gt;For Haskell and other pure functional languages it&amp;#8217;s not just about style. Simon Peyton Jones&amp;#8217; central argument was that &lt;span /&gt;programming will increasingly be about the control of side-effects: to write correct programs, side-effects must be contained. A pure function has &lt;strong&gt;no&lt;/strong&gt; side-effects. Thus you can be sure what it does. You can even &lt;strong&gt;prove&lt;/strong&gt; it correct. A pure program built entirely from pure functions is equally correct but, sadly, of limited use. Haskell&amp;#8217;s type system distinguishes pure functions from impure ones &amp;#8212; the ones which change the world. If you minimise and contain impurity, you&amp;#8217;re winning!&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://wordaligned.org/images/the-challenge-of-effects.jpg&quot; alt=&quot;The challenge of effects&quot;/&gt;&lt;/p&gt;
&lt;p&gt;It&amp;#8217;s certainly a compelling argument. In the languages I use from day to day, as already mentioned, I favour a functional style. I also adopt value-based programming (sometimes known as single assignment programming &amp;#8212; once you&amp;#8217;ve set something, you don&amp;#8217;t change it) as far as possible: it&amp;#8217;s easier to figure out what a program does, and you can avoid a whole class of defects. Simon Peyton Jones describes my approach as &amp;#8220;Plan A&amp;#8221;, the mainstream route towards writing programs which are both useful and safe. He promotes &amp;#8220;Plan B&amp;#8221;, a more radical approach, where &amp;#8220;useless&amp;#8221; languages like Haskell find ways to change the world.&lt;/p&gt;
&lt;h3 id=&quot;strong-static-typing&quot;&gt;Strong Static Typing&lt;/h3&gt;
&lt;p&gt;Static type checking is central to Haskell and the language comes with a rich type system allowing static analysis and compile-time checking. It&amp;#8217;s the type system which determines, rigorously, which parts of a program have side-effects. Unlike C++, the type system doesn&amp;#8217;t seem to get in the way. A lot more is inferred. In fact, some type declarations are unnecessary since the compiler could deduce them from the code &amp;#8212; but in Haskell type declarations, at least for module exports, are seen as a good thing. &lt;/p&gt;
&lt;p&gt;I found this interesting. Although I like dynamic languages I also like strong typing (yes, you can have both). In theory, static strong typing would be best of all; you eliminate the bug before you run the code. My experience with languages like C++ and Java have caused me to kick against this theory. The C++ type system just seems to get in your way: by the time you&amp;#8217;ve &lt;a href=&quot;http://wordaligned.org/articles/koenigs-first-rule-of-debugging.html#a-problem-on-line-106&quot;&gt;wrestled the compiler into submission&lt;/a&gt; and got a program you can actually run you&amp;#8217;ve worked so hard you feel like it &lt;em&gt;must&lt;/em&gt; be good, when actually you&amp;#8217;d have been better off running, testing, revising the code in an iterative manner. You&amp;#8217;d certainly have had more fun! Haskell, though, may cause me to revise my opinion once again. It may indeed offer the benefits of strong static typing without the baggage.&lt;/p&gt;
&lt;h3 id=&quot;a-taste-of-haskell&quot;&gt;A Taste of Haskell&lt;/h3&gt;
&lt;p&gt;&lt;a href=&quot;http://haskell.org&quot;&gt;&lt;img src=&quot;http://haskell.org/wikistatic/haskellwiki_logo.png&quot; alt=&quot;Haskell wiki logo&quot; style=&quot;float:right;&quot;/&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;In the afternoon I attended Simon Peyton Jones&amp;#8217; &lt;a href=&quot;http://accu.org/index.php/conferences/accu_conference_2008/accu2008_sessions#A%20Taste%20of%20Haskell&quot;&gt;&amp;#8220;Taste of Haskell&amp;#8221;&lt;/a&gt; tutorial, which went into Haskell in more depth. The room was packed and people had to be turned away. Although I have written and read some Haskell I know very little about it, and three hours training with the world expert on the subject haven&amp;#8217;t really altered that. Nonetheless, I&amp;#8217;d like to record my first impressions here. They may all turn out to be wrong!&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;I still maintain &lt;a href=&quot;http://wordaligned.org/articles/from-hash-key-to-haskell.html&quot;&gt;Haskell could do with proper characters&lt;/a&gt; for arrows, lambda, forall, function composition and so on. And guess what: GHC does indeed support Unicode, so you &lt;em&gt;can&lt;/em&gt; write a program which uses &amp;#x2200; instead of &lt;code&gt;forall&lt;/code&gt;, for example. All you have to do is figure out how to input these characters.&lt;/li&gt;
&lt;li&gt;It&amp;#8217;s not a minimal language, unlike, say, Scheme; there&amp;#8217;s a lot of syntactic sugar, a deliberate decision, but nonetheless a concern. It will take a while before I get used to the syntax even if the concepts seem clear.&lt;/li&gt;
&lt;li&gt;Most (possibly all?) functions take a single argument; so a function taking two arguments is actually a one-argument function which returns another one-argument function.&lt;/li&gt;
&lt;li&gt;You can write your own infix operators and set their precedence.&lt;/li&gt;
&lt;li&gt;Don&amp;#8217;t be frightened by &lt;a href=&quot;http://homepages.inf.ed.ac.uk/wadler/topics/monads.html&quot;&gt;Monads&lt;/a&gt;. They should really be called &amp;#8220;warm fluffy things&amp;#8221;.&lt;/li&gt;
&lt;li&gt;Haskell is, by default, lazily evaluated. So it elegantly solves all the &lt;a href=&quot;http://wordaligned.org/tag/streams/&quot;&gt;stream-based&lt;/a&gt; puzzles I&amp;#8217;ve been posing on this site. What was new to me was the suggestion that lazy evaluation somehow removes the need for Lisp-style macros. I wonder &lt;a href=&quot;http://reddit.com/r/programming/info/6en91/comments/&quot;&gt;what&amp;#8217;s meant by this&lt;/a&gt;?&lt;/li&gt;
&lt;li&gt;Perhaps Haskell remains a vehicle for programming language research as well as for practical application. &lt;a href=&quot;http://haskell.org/ghc/&quot;&gt;GHC&lt;/a&gt; provides many extensions to the Haskell 98 standard, to the extent that some extensions have effectively become standard.&lt;/li&gt;
&lt;li&gt;The best book about Haskell hasn&amp;#8217;t been finished yet. It&amp;#8217;s called &lt;a href=&quot;http://book.realworldhaskell.org/&quot;&gt;&amp;#8220;Real World Haskell&amp;#8221;&lt;/a&gt; and it&amp;#8217;s being written collaboratively.&lt;/li&gt;
&lt;/ul&gt;</description>
<dc:date>2008-04-04</dc:date>
<guid>http://wordaligned.org/articles/programming-nirvana-plan-b</guid>
<author>tag@wordaligned.org (Thomas Guest)</author>
<link>http://wordaligned.org/articles/programming-nirvana-plan-b</link>
<category>ACCU</category>
</item>

<item>
<title>Fun with Erlang, ACCU 2008</title>
<description>&lt;p&gt;I&amp;#8217;ve just got back from a &lt;a href=&quot;http://accu.org/index.php/conferences/accu_conference_2008/accu2008_sessions#Fun%20with%20Erlang&quot;&gt;one day course on Erlang&lt;/a&gt; given by its inventor, Joe Armstrong, at day 0 of the &lt;a href=&quot;http://accu.org/index.php/conferences/accu_conference_2008&quot;&gt;ACCU 2008 conference&lt;/a&gt;. Actually, he crammed as much as he could from a three day course into a single day. I&amp;#8217;m not too disappointed we didn&amp;#8217;t reach the stated aim of the course, of developing and running a networked application and changing it on the fly: I&amp;#8217;m happy enough to have written some &lt;a href=&quot;http://erlang.org&quot;&gt;Erlang&lt;/a&gt; code and been exposed to some new ideas.&lt;/p&gt;
&lt;div class=&quot;amazon&quot;&gt;&lt;a href=&quot;http://www.amazon.com/gp/product/193435600X?ie=UTF8&amp;amp;tag=wordalig-20&amp;amp;linkCode=as2&amp;amp;camp=1789&amp;amp;creative=9325&amp;amp;creativeASIN=193435600X&quot;&gt;&lt;img src=&quot;http://wordaligned.org/images/programming-erlang.jpg&quot; alt=&quot;Programming Erlang&quot;/&gt;&lt;/a&gt;&lt;/div&gt;

&lt;p&gt;Armstrong is affable and enthusiastic and not afraid to voice his opinions. He&amp;#8217;s a good teacher. I do recommend his book, &lt;a href=&quot;http://www.amazon.com/gp/product/193435600X?ie=UTF8&amp;amp;tag=wordalig-20&amp;amp;linkCode=as2&amp;amp;camp=1789&amp;amp;creative=9325&amp;amp;creativeASIN=193435600X&quot;&gt;&amp;#8220;Programming Erlang: Software for a Concurrent World&amp;#8221;&lt;/a&gt;, but found the tone a bit matey in places. In person he&amp;#8217;s much more direct and engaging.&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://erlang.org&quot;&gt;Erlang&lt;/a&gt; is a functional programming language which builds in support for multiple processes &amp;#8212; these are &lt;em&gt;not&lt;/em&gt; operating system processes; and in some ways, Erlang &lt;em&gt;is&lt;/em&gt; the operating system. You define functions and other rules and controls using pattern matching. When patterns are used to dispatch message responses in a &lt;code&gt;receive&lt;/code&gt; statement, the code reads well, and functions can be defined using patterns in an elegant and concise way &amp;#8212; no if-this-then-that-else-other.&lt;/p&gt;
&lt;div class=&quot;typocode&quot;&gt;

&lt;pre class=&quot;prettyprint&quot;&gt;-module(accum).
-export([evens_and_odds/1]).
-import(lists, [reverse/1]).

evens_and_odds(L) -&amp;gt; evens_and_odds(L,[], []).

evens_and_odds([H|T], E, O) when H rem 2 =:= 0 -&amp;gt; evens_and_odds(T, [H|E], O);
evens_and_odds([H|T], E, O) -&amp;gt;  evens_and_odds(T, E, [H|O]);
evens_and_odds([], E, O)    -&amp;gt;  {E, O}.

&lt;/pre&gt;

&lt;/div&gt;

&lt;p&gt;(I know this example should be coded using &lt;code&gt;lists:partition&lt;/code&gt;, it&amp;#8217;s just here to show the pattern syntax.)&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://www.sics.se/~joe/images/mc.jpg&quot; title=&quot;Joe Armstrong and the big thumper&quot;&gt;&lt;img src=&quot;http://www.sics.se/~joe/images/joe_mc.jpg&quot; alt=&quot;Joe Armstrong and the big thumper&quot; style=&quot;float:right;&quot;/&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Erlang is no academic pure functional language, though. It originated at &lt;a href=&quot;http://www.ericsson.com&quot;&gt;Ericsson&lt;/a&gt; over 20 years ago and has been used to develop &lt;em&gt;extremely&lt;/em&gt; reliable distributed concurrent systems. Hence the current interest: Erlang can take advantage of multiple processor cores on multiple machines, which is why it&amp;#8217;s been adopted by up and coming projects like &lt;a href=&quot;http://couchdb.org&quot;&gt;CouchDB&lt;/a&gt;. Given its proprietary origins, I think we&amp;#8217;re lucky to find the language available under an open source license. (Armstrong has some stories to tell about that!) On the other hand, Armstrong admitted that some of the documentation was weak &amp;#8212; at Ericsson you could always  ask one of the Erlang developers if you didn&amp;#8217;t understand something. Personally, I&amp;#8217;d be wary of the OTP platform, a full-featured distributed application framework built on top of Erlang.&lt;/p&gt;
&lt;p&gt;Processes communicate by messages and by generating exceptions. You can link processes together. This doesn&amp;#8217;t mean designing a distributed system is easy, but I&amp;#8217;d say it gives us an appropriate language for such systems. Or as Armstrong puts it:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&amp;#8220;You cannot describe concurrent systems in sequential languages.&amp;#8221;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;hr /&gt;
&lt;p&gt;By the way, I&amp;#8217;ll be back at the conference on Thursday, to hear what &lt;a href=&quot;http://wordaligned.org/articles/programming-nirvana-plan-b.html&quot;&gt;Simon Peyton Jones has to say about functional programming and Haskell&lt;/a&gt;. See some of you then.&lt;/p&gt;</description>
<dc:date>2008-04-01</dc:date>
<guid>http://wordaligned.org/articles/fun-with-erlang-accu-2008</guid>
<author>tag@wordaligned.org (Thomas Guest)</author>
<link>http://wordaligned.org/articles/fun-with-erlang-accu-2008</link>
<category>ACCU</category>
</item>

<item>
<title>Ima Lumberjack, (s)he&#8217;s OK</title>
<description>&lt;h3 id=&quot;introducing-the-team&quot;&gt;Introducing the team&lt;/h3&gt;
&lt;p&gt;Ima, the new recruit, paired with Alyssa, our most experienced programmer. The two of them worked on the user interface. Noah and Seymour looked after the persistent storage layer. Once Seymour got Noah into unit testing &amp;#8212; well, you just couldn&amp;#8217;t stop them. Cy managed the build, installation, porting, tools, and generally helped sweep up any regressions. What a star! That left me, Lem and Eva free to work on the core of the product. Ben led the team, but you know Ben &amp;#8212; Ben kept a hand in.&lt;/p&gt;
&lt;h3 id=&quot;he-started-it&quot;&gt;He started it&lt;/h3&gt;
&lt;p&gt;This all started when &lt;a href=&quot;http://www.simonsebright.com/&quot;&gt;Simon Sebright&lt;/a&gt; posted a question on an &lt;a href=&quot;http://accu.org/index.php/mailinglists&quot;&gt;email reflector&lt;/a&gt;:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Just wondering what people think of the approaches of expressing the gender-neutrality of developers in particular when reading books/articles on the subject.  The approach I have encountered most recently is the subtle mixing of &amp;#8220;he&amp;#8221; and &amp;#8220;she&amp;#8221; from paragraph to paragraph.  Personally, I find this really grating, although better than he/she.  My preference is for the 3rd person plural, i.e. they found that joining &lt;a href=&quot;http://accu.org&quot;&gt;accu&lt;/a&gt; was useful for their career.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;I don&amp;#8217;t want to revive that discussion here, except to say that it caused me to rethink my personal approach to this problem, that I&amp;#8217;ve always considered it unacceptable to use &amp;#8220;he&amp;#8221; to mean &amp;#8220;he or she&amp;#8221;, that I&amp;#8217;ll avoid &lt;a href=&quot;http://www.paulgraham.com/boss.html&quot;&gt;using &amp;#8220;they&amp;#8221; in place of &amp;#8220;he&amp;#8221; or &amp;#8220;she&amp;#8221;&lt;/a&gt; &amp;#8212; oh, and that &lt;a href=&quot;http://curbralan.com&quot;&gt;the best technical writers&lt;/a&gt; avoid any mention of gender without sounding stilted.&lt;/p&gt;
&lt;p&gt;Sometimes though, however technical your subject, you may want to introduce a character to bring a story to life. At which point being gender-neutral becomes harder. You need a person. A person needs a name.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&amp;#8220;&lt;strong&gt;Isobel&lt;/strong&gt; might be more interested in becoming a programmer if she sees a few more women around when she visits her father at work.&amp;#8221;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&quot;name-taking&quot;&gt;Name taking&lt;/h3&gt;
&lt;p&gt;One technique I like is to give these fictional characters fictional names &amp;#8212; and a carefully invented name can be gender-neutral. Here are a few examples taken from some great technical writing:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Alyssa P Hacker, Cy D Fect, Lem E Tweakit, Eva Lu Ator, Ben Bitdiddle, employees of &lt;a href=&quot;http://mitpress.mit.edu/sicp/full-text/sicp/book/node93.html&quot;&gt;Microshaft&lt;/a&gt;, a thriving high-technology company in the Boston area.&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://www.artima.com/weblogs/viewpost.jsp?thread=227041&quot;&gt;Ima Lumberjack&lt;/a&gt;, who&amp;#8217;s implemented a web 2.0 app for managing his sawmill, who&amp;#8217;s not OK about Python 3000, and who wishes he&amp;#8217;d been &lt;a href=&quot;http://www.guntheranderson.com/v/data/imalumbe.htm&quot;&gt;a girlie just like his dear Papa&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;Noah Shortcut, Seymour Checks and Mr Deadline, who fall into archetypal r&amp;ocirc;les in a &lt;a href=&quot;http://accu.org/index.php/journals/347&quot;&gt;late-running project&lt;/a&gt;. People, communicate!&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Inventing names isn&amp;#8217;t easy, which is why I shall &lt;a href=&quot;http://wordaligned.org/articles/antisocial-build-orders.html&quot;&gt;continue&lt;/a&gt; to shamelessly &lt;a href=&quot;http://wordaligned.org/articles/rtm-vs-stw.html&quot;&gt;plunder&lt;/a&gt; these ones and any more I come across. Call it a homage.&lt;/p&gt;</description>
<dc:date>2008-03-24</dc:date>
<guid>http://wordaligned.org/articles/ima-lumberjack-s-hes-ok</guid>
<author>tag@wordaligned.org (Thomas Guest)</author>
<link>http://wordaligned.org/articles/ima-lumberjack-s-hes-ok</link>
<category>ACCU</category>
</item>

<item>
<title>Tracing function calls using Python decorators</title>
<description>&lt;h3 id=&quot;introduction&quot;&gt;Introduction&lt;/h3&gt;
&lt;p&gt;Let&amp;#8217;s suppose you want to trace calls to a function. That is, every time the function gets called, you want to print out its name and the values of any arguments passed by the caller. To provide a concrete example, here&amp;#8217;s a function which calculates the dot product of two vectors.&lt;/p&gt;
&lt;div class=&quot;typocode&quot;&gt;

&lt;pre class=&quot;prettyprint&quot;&gt;def dot(v, w):
    &quot;&quot;&quot;Calculate the dot product of two vectors.

    Example:
    &amp;gt;&amp;gt;&amp;gt; dot((1, 2, 3), (3, 2, 1))
    10
    &quot;&quot;&quot;
    return sum(vv * ww for vv, ww in zip(v, w))

&lt;/pre&gt;

&lt;/div&gt;

&lt;p&gt;To trace calls to the function you could just edit it and insert a print statement.&lt;/p&gt;
&lt;div class=&quot;typocode&quot;&gt;

&lt;pre class=&quot;prettyprint&quot;&gt;def dot(v, w):
    print &quot;dot(v=%r, w=%r)&quot; % (v, w)
    return sum(vv * ww for vv, ww in zip(v, w))

&lt;/pre&gt;

&lt;/div&gt;

&lt;p&gt;When you no longer want calls traced you can remove the &lt;code&gt;print&lt;/code&gt; statement or even comment it out. This approach works well enough for a while but you soon discover there are more functions you want to trace; and you&amp;#8217;ll eventually end up with lots of functions being traced and lots of commented-out tracing code. You might even end up with &lt;a href=&quot;http://wordaligned.org/articles/code-in-comments.html&quot;&gt;broken commented-out code&lt;/a&gt;:&lt;/p&gt;
&lt;div class=&quot;typocode&quot;&gt;&lt;div class=&quot;codetitle&quot;&gt;broken comment&lt;/div&gt;

&lt;pre class=&quot;prettyprint&quot;&gt;def dot(vec1, vec2):
    # print &quot;dot(v=%r, w=%r)&quot; % (v, w)
    return sum(v1 * v2 for v1, v2 in zip(vec1, vec2))

&lt;/pre&gt;

&lt;/div&gt;

&lt;p&gt;At this point, you realise that calling a function and tracing these calls are orthogonal operations. Isn&amp;#8217;t there a less invasive way to do this?&lt;/p&gt;
&lt;p&gt;&lt;span id=&quot;continue-reading&quot;/&gt;&lt;/p&gt;
&lt;h3 id=&quot;a-less-invasive-way&quot;&gt;A less invasive way&lt;/h3&gt;
&lt;p&gt;Rather than change the original function you can simply wrap it with the code which prints out the inputs.&lt;/p&gt;
&lt;div class=&quot;typocode&quot;&gt;&lt;div class=&quot;codetitle&quot;&gt;Echo a function, Take 1&lt;/div&gt;

&lt;pre class=&quot;prettyprint&quot;&gt;def echo_both_args(fn):
    &quot;Returns a traced version of the input 2-argument function.&quot;
    def wrapped(arg1, arg2):
        name = fn.__name__
        print &quot;%s(%r, %r)&quot; % (name, arg1, arg2)
        return fn(arg1, arg2)
    return wrapped

def dot(vec1, vec2):
    ....

dot = echo_both_args(dot)

&lt;/pre&gt;

&lt;/div&gt;

&lt;p&gt;The &lt;code&gt;echo_both_args&lt;/code&gt; function accepts a single function as a parameter and returns a new function which wraps this original function by adding the desired trace functionality. By the way, I&amp;#8217;ve introduced the term &amp;#8220;echo&amp;#8221; for this action rather than the more conventional &amp;#8220;trace&amp;#8221; since Python already has a &lt;a href=&quot;http://docs.python.org/lib/module-trace.html&quot;&gt;trace module&lt;/a&gt; which does something rather different. The idea is that when you call a function, you hear your call repeated &amp;#8212; like an echo.&lt;/p&gt;
&lt;p&gt;C/C++ programmers will have noticed the inner function object, &lt;code&gt;wrapped&lt;/code&gt;, which &lt;code&gt;echo_both_args&lt;/code&gt; returns. Returning inner functions is a common Python idiom, and is the way language implements the closures found in other high-level languages such as Scheme or Ruby. The inner function doesn&amp;#8217;t go out of scope &amp;#8212; in Python, objects persist as long as needed.&lt;/p&gt;
&lt;p&gt;The final line of the code snippet simply rebinds &lt;code&gt;dot&lt;/code&gt; to the echoed version of itself. We don&amp;#8217;t need to pass the name of the function to be traced (&lt;code&gt;dot&lt;/code&gt; in this example) into &lt;code&gt;echo_both_args&lt;/code&gt; since in Python a function object carries its name around with it in a &lt;code&gt;__name__&lt;/code&gt; attribute. If we now call &lt;code&gt;dot&lt;/code&gt; in an interpreted session, we&amp;#8217;ll see the call echoed:&lt;/p&gt;
&lt;div class=&quot;typocode&quot;&gt;

&lt;pre class=&quot;prettyprint&quot;&gt;&amp;gt;&amp;gt;&amp;gt; dot((1, 2, 3), (3, 2, 1))
dot((1, 2, 3), (3, 2, 1))
10

&lt;/pre&gt;

&lt;/div&gt;

&lt;p&gt;The inner function, &lt;code&gt;wrapped&lt;/code&gt;, should be capable of wrapping any function &amp;#8212; so long as that function accepts just two parameters, that is. (Note the use of the &lt;code&gt;%r&lt;/code&gt; print formatter which converts any Python object into its canonical string representation). If we want a more general purpose &lt;code&gt;echo&lt;/code&gt; which can wrap any function with any signature, we might try something like the following:&lt;/p&gt;
&lt;div class=&quot;typocode&quot;&gt;&lt;div class=&quot;codetitle&quot;&gt;Echo a function, Take 2&lt;/div&gt;

&lt;pre class=&quot;prettyprint&quot;&gt;def echo(fn):
    &quot;Returns a traced version of the input function.&quot;
    from itertools import chain
    def wrapped(*v, **k):
        name = fn.__name__
        print &quot;%s(%s)&quot; % (
            name, &quot;, &quot;.join(map(repr, chain(v, k.values()))))
        return fn(*v, **k)
    return wrapped

&lt;/pre&gt;

&lt;/div&gt;

&lt;p&gt;Here, the inner function, &lt;code&gt;wrapped&lt;/code&gt;, has parameters &lt;code&gt;(*v, **k)&lt;/code&gt;, which contain the positional and keyword arguments passed to this function respectively. It doesn&amp;#8217;t really matter how many arguments the function being wrapped has, or indeed if this function itself accepts arbitrary positional and keyword arguments: it just works &amp;#8212; have a look in the Python reference manual for details. We&amp;#8217;ve use &lt;code&gt;chain&lt;/code&gt;, one of the handy iterator tools from the &lt;a href=&quot;http://www.python.org/doc/current/lib/module-itertools.html&quot; title=&quot;itertools -- Functions creating iterators for efficient looping&quot;&gt;itertools module&lt;/a&gt;, to iterate through all the positional and keyword argument values; then a combination of &lt;code&gt;string.join&lt;/code&gt; and the &lt;code&gt;map&lt;/code&gt; and &lt;code&gt;repr&lt;/code&gt; builtins produce a string representation of these values.&lt;/p&gt;
&lt;p&gt;We can now define, wrap and call some functions with more varied signatures.&lt;/p&gt;
&lt;div class=&quot;typocode&quot;&gt;

&lt;pre class=&quot;prettyprint&quot;&gt;def f(x): pass
def g(x, y): pass
def h(x=1, y=2): pass
def i(x, y, *v): pass
def j(x, y, *v, **k): pass

f, g, h, i, j = map(echo, (f, g, h, i, j))

f(10)
g(&quot;spam&quot;, 42)
g(y=&quot;spam&quot;, x=42)
h()
i(&quot;spam&quot;, 42, &quot;extra&quot;, &quot;args&quot;, 1, 2, 3)
j((&quot;green&quot;, &quot;eggs&quot;), y=&quot;spam&quot;, z=42)

&lt;/pre&gt;

&lt;/div&gt;

&lt;p&gt;Running this code produces output:&lt;/p&gt;
&lt;div class=&quot;typocode&quot;&gt;

&lt;pre class=&quot;prettyprint&quot;&gt;f(10)
g(&amp;#x27;spam&amp;#x27;, 42)
g(&amp;#x27;spam&amp;#x27;, 42)
h()
i(&amp;#x27;spam&amp;#x27;, 42, &amp;#x27;extra&amp;#x27;, &amp;#x27;args&amp;#x27;, 1, 2, 3)
j((&amp;#x27;green&amp;#x27;, &amp;#x27;eggs&amp;#x27;), &amp;#x27;spam&amp;#x27;, 42)

&lt;/pre&gt;

&lt;/div&gt;

&lt;p&gt;This does something like what we want, but note a couple of problems:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;the second call to &lt;code&gt;g&lt;/code&gt; uses keyword argument syntax, and the output &lt;code&gt;g(&#x27;spam&#x27;, 42)&lt;/code&gt; is exactly what we saw echoed by the previous call to &lt;code&gt;g&lt;/code&gt; even though the arguments have been swapped around. We&amp;#8217;d better try and echo argument names as well as their values (just as we did when we first modified &lt;code&gt;dot&lt;/code&gt; to echo calls).&lt;/li&gt;
&lt;li&gt;the output doesn&amp;#8217;t show the (defaulted) arguments passed to &lt;code&gt;h&lt;/code&gt; &lt;a href=&quot;http://wordaligned.org/articles/echo#footnote1&quot; id=&quot;fn1link&quot;&gt;&lt;sup&gt;&lt;a href=&quot;https://blog.codeship.com/building-minimal-docker-containers-for-go-applications/&quot;&gt;1&lt;/a&gt;&lt;/sup&gt;&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;There&amp;#8217;s another more subtle problem too.&lt;/p&gt;
&lt;div class=&quot;typocode&quot;&gt;

&lt;pre class=&quot;prettyprint&quot;&gt;&amp;gt;&amp;gt;&amp;gt; def f(x):
...     &quot; I&amp;#x27;m a function called f. &quot;
...     pass
...
&amp;gt;&amp;gt;&amp;gt; f.__name__
&amp;#x27;f&amp;#x27;
&amp;gt;&amp;gt;&amp;gt; f.func_doc
&quot; I&amp;#x27;m a function called f. &quot;
&amp;gt;&amp;gt;&amp;gt; f = echo(f)
&amp;gt;&amp;gt;&amp;gt; f.__name__
&amp;#x27;wrapped&amp;#x27;
&amp;gt;&amp;gt;&amp;gt; f.func_doc
None

&lt;/pre&gt;

&lt;/div&gt;

&lt;p&gt;That is, by wrapping &lt;code&gt;f&lt;/code&gt;, we&amp;#8217;ve tinkered with its identity: its name has changed and its documentation has disappeared. This is bad news in a dynamic language, since any code introspecting &lt;code&gt;f&lt;/code&gt; will get the wrong idea about it. We should really have modified &lt;code&gt;wrapper&lt;/code&gt; to copy various attributes from &lt;code&gt;f&lt;/code&gt;.&lt;/p&gt;
&lt;h3 id=&quot;decorators&quot;&gt;Decorators&lt;/h3&gt;
&lt;p&gt;At Python 2.3, the &lt;code&gt;@&lt;/code&gt; character was pulled out of the bag to provide a special syntax for decorating functions in this way. Rather than retrospectively rebinding a function &lt;code&gt;f&lt;/code&gt; as shown in the examples so far, we can explicitly decorate &lt;code&gt;f&lt;/code&gt; up front with the &lt;code&gt;echo&lt;/code&gt; wrapper like this:&lt;/p&gt;
&lt;div class=&quot;typocode&quot;&gt;&lt;div class=&quot;codetitle&quot;&gt;using decorator syntax&lt;/div&gt;

&lt;pre class=&quot;prettyprint&quot;&gt;&amp;gt;&amp;gt;&amp;gt; def echo(fn):
...     from itertools import chain
...     def wrapped(*v, **k):
...         name = fn.__name__
...         print &quot;%s(%s)&quot; % (name, &quot;, &quot;.join(map(repr, chain(v, k.values()))))
...         return fn(*v, **k)
...     return wrapped
...
&amp;gt;&amp;gt;&amp;gt; @echo
&amp;gt;&amp;gt;&amp;gt; def f(x): pass
...
&amp;gt;&amp;gt;&amp;gt; f(&amp;#x27;does it work?&amp;#x27;)
f(&amp;#x27;does it work?&amp;#x27;)

&lt;/pre&gt;

&lt;/div&gt;

&lt;p&gt;Of course decoration isn&amp;#8217;t reserved for the particular use case shown in this article: we might decorate functions to time their execution, to protect them against simultaneous access from multiple threads, to check the validity of input arguments, to dynamically analyse code coverage, and so on.&lt;/p&gt;
&lt;p&gt;Note also that there&amp;#8217;s a special decorator in the &lt;a href=&quot;http://docs.python.org/lib/module-functools.html&quot; title=&quot;functools -- Higher order functions and operations on callable objects&quot;&gt;functools module&lt;/a&gt; which does the job of making a wrapper look like its wrappee.&lt;/p&gt;
&lt;div class=&quot;typocode&quot;&gt;

&lt;pre class=&quot;prettyprint&quot;&gt;&amp;gt;&amp;gt;&amp;gt; import functools
&amp;gt;&amp;gt;&amp;gt; def echo(fn):
...     @functools.wraps(fn)
...     def wrapped(*v, **k):
...         ....
...    return wrapped
...
&amp;gt;&amp;gt;&amp;gt; @echo
&amp;gt;&amp;gt;&amp;gt; def f(x):
...    &quot; I&amp;#x27;m f, don&amp;#x27;t mess with me! &quot;
...    pass
&amp;gt;&amp;gt;&amp;gt; f.__name__
&amp;#x27;f&amp;#x27;
&amp;gt;&amp;gt;&amp;gt; f.func_doc
&quot; I&amp;#x27;m f, don&amp;#x27;t mess with me! &quot;
&amp;gt;&amp;gt;&amp;gt; f((&amp;#x27;spam&amp;#x27;, &amp;#x27;spam&amp;#x27;, &amp;#x27;spam!&amp;#x27;))
f((&amp;#x27;spam&amp;#x27;, &amp;#x27;spam&amp;#x27;, &amp;#x27;spam!&amp;#x27;))

&lt;/pre&gt;

&lt;/div&gt;

&lt;h3 id=&quot;improving-echo&quot;&gt;Improving echo&lt;/h3&gt;
&lt;p&gt;Here&amp;#8217;s a version of &lt;code&gt;echo&lt;/code&gt; which fixes the remaining problems: that is, it prints out argument names as well as argument values, and it also prints out any arguments defaulted in the call to the wrapped function. This version is a little longer and considerably more fiddly &lt;a href=&quot;http://wordaligned.org/articles/echo#footnote2&quot; id=&quot;fn2link&quot;&gt;&lt;sup&gt;&lt;a href=&quot;http://devcenter.wercker.com/docs/quickstarts/advanced/building-minimal-containers-with-go&quot;&gt;2&lt;/a&gt;&lt;/sup&gt;&lt;/a&gt;, since we need to dig deeper into the function&amp;#8217;s code, but it follows the same basic pattern as its predecessors.&lt;/p&gt;
&lt;p&gt;While we&amp;#8217;re improving things, note that we&amp;#8217;ve also parameterised the
&lt;code&gt;write&lt;/code&gt; function, rather than naively hijacking &lt;code&gt;sys.stdout&lt;/code&gt; to print out function calls.&lt;/p&gt;
&lt;div class=&quot;typocode&quot;&gt;&lt;div class=&quot;codetitle&quot;&gt;Echo a function, Take 3&lt;/div&gt;

&lt;pre class=&quot;prettyprint&quot;&gt;import sys

def format_arg_value(arg_val):
    &quot;&quot;&quot; Return a string representing a (name, value) pair.

    &amp;gt;&amp;gt;&amp;gt; format_arg_value((&amp;#x27;x&amp;#x27;, (1, 2, 3)))
    &amp;#x27;x=(1, 2, 3)&amp;#x27;
    &quot;&quot;&quot;
    arg, val = arg_val
    return &quot;%s=%r&quot; % (arg, val)

def echo(fn, write=sys.stdout.write):
    &quot;&quot;&quot; Echo calls to a function.

    Returns a decorated version of the input function which &quot;echoes&quot; calls
    made to it by writing out the function&amp;#x27;s name and the arguments it was
    called with.
    &quot;&quot;&quot;
    import functools
    # Unpack function&amp;#x27;s arg count, arg names, arg defaults
    code = fn.func_code
    argcount = code.co_argcount
    argnames = code.co_varnames[:argcount]
    fn_defaults = fn.func_defaults or list()
    argdefs = dict(zip(argnames[-len(fn_defaults):], fn_defaults))

    @functools.wraps(fn)
    def wrapped(*v, **k):
        # Collect function arguments by chaining together positional,
        # defaulted, extra positional and keyword arguments.
        positional = map(format_arg_value, zip(argnames, v))
        defaulted = [format_arg_value((a, argdefs[a]))
                     for a in argnames[len(v):] if a not in k]
        nameless = map(repr, v[argcount:])
        keyword = map(format_arg_value, k.items())
        args = positional + defaulted + nameless + keyword
        write(&quot;%s(%s)\n&quot; % (name(fn), &quot;, &quot;.join(args)))
        return fn(*v, **k)
    return wrapped

&lt;/pre&gt;

&lt;/div&gt;

&lt;p&gt;Let&amp;#8217;s give it a try.&lt;/p&gt;
&lt;div class=&quot;typocode&quot;&gt;

&lt;pre class=&quot;prettyprint&quot;&gt;@echo
def f(x): pass
@echo
def g(x, y): pass
@echo
def h(x=1, y=2): pass
@echo
def i(x, y, *v): pass
@echo
def j(x, y, *v, **k): pass
class X(object):
    @echo
    def m(self, x): pass
    @classmethod
    @echo
    def cm(klass, x): pass

def reversed_write(s): sys.write(&amp;#x27;&amp;#x27;.join(reversed(s)))
def k(**kw): pass
k = echo(k, write=reversed_write)

f(10)
g(&quot;spam&quot;, 42)
g(y=&quot;spam&quot;, x=42)
h()
i(&quot;spam&quot;, 42, &quot;extra&quot;, &quot;args&quot;, 1, 2, 3)
j((&quot;green&quot;, &quot;eggs&quot;), y=&quot;spam&quot;, z=42)
X().m(&quot;method call&quot;)
X.cm(&quot;classmethod call&quot;)
k(born=&quot;Mon&quot;, christened=&quot;Tues&quot;, married=&quot;Weds&quot;)

&lt;/pre&gt;

&lt;/div&gt;

&lt;p&gt;Running the preceding code produces:&lt;/p&gt;
&lt;div class=&quot;typocode&quot;&gt;

&lt;pre class=&quot;prettyprint&quot;&gt;f(x=10)
g(x=&amp;#x27;spam&amp;#x27;, y=42)
g(y=&amp;#x27;spam&amp;#x27;, x=42)
h(x=1, y=2)
i(x=&amp;#x27;spam&amp;#x27;, y=42, &amp;#x27;extra&amp;#x27;, &amp;#x27;args&amp;#x27;, 1, 2, 3)
j(x=(&amp;#x27;green&amp;#x27;, &amp;#x27;eggs&amp;#x27;), y=&amp;#x27;spam&amp;#x27;, z=42)
m(self=&amp;lt;__main__.X instance at 0x7837d8&amp;gt;, x=&amp;#x27;method call&amp;#x27;)
cm(klass=&amp;lt;class __main__.X at 0x785840&amp;gt;, x=&amp;#x27;classmethod call&amp;#x27;)
)&amp;#x27;seuT&amp;#x27;=denetsirhc ,&amp;#x27;sdeW&amp;#x27;=deirram ,&amp;#x27;noM&amp;#x27;=nrob(k

&lt;/pre&gt;

&lt;/div&gt;

&lt;p&gt;As you can see, it works on methods and classmethods too. &lt;/p&gt;
&lt;p&gt;By the way, if you&amp;#8217;re not familiar with classmethods, they&amp;#8217;re created using Python&amp;#8217;s built-in &lt;code&gt;classmethod&lt;/code&gt; function, which transforms functions in the required way; and, as shown in the example above, the decorator syntax is the recommended way of applying this transformation.&lt;/p&gt;
&lt;h3 id=&quot;wider-application&quot;&gt;Wider application&lt;/h3&gt;
&lt;p&gt;Using this final version of &lt;code&gt;echo&lt;/code&gt; to decorate functions is simple enough. All you have to do is precede the function(s) you want to echo with the echo decorator. What, though, if these functions are in a module you don&amp;#8217;t want to modify &amp;#8212; one of the standard library modules, for example? What if you want to echo an entire class by echoing all of its methods without editing the class itself; or all the classes and functions in a module, again without editing the module itself?&lt;/p&gt;
&lt;p&gt;A little introspection works the required magic. All we have to do is work our way through all the functions and classes in a module, and all the methods in these classes, rebinding these functions to their echoed versions. Extra attention is needed for class-, static- and private- methods, but otherwise this code contains few surprises.&lt;/p&gt;
&lt;div class=&quot;typocode&quot;&gt;&lt;div class=&quot;codetitle&quot;&gt;echo, echo, echo!&lt;/div&gt;

&lt;pre class=&quot;prettyprint&quot;&gt;import inspect
import sys

def name(item):
    &quot; Return an item&amp;#x27;s name. &quot;
    return item.__name__

def is_classmethod(instancemethod):
    &quot; Determine if an instancemethod is a classmethod. &quot;
    return instancemethod.im_self is not None

def is_class_private_name(name):
    &quot; Determine if a name is a class private name. &quot;
    # Exclude system defined names such as __init__, __add__ etc
    return name.startswith(&quot;__&quot;) and not name.endswith(&quot;__&quot;)

def method_name(method):
    &quot;&quot;&quot; Return a method&amp;#x27;s name.

    This function returns the name the method is accessed by from
    outside the class (i.e. it prefixes &quot;private&quot; methods appropriately).
    &quot;&quot;&quot;
    mname = name(method)
    if is_class_private_name(mname):
        mname = &quot;_%s%s&quot; % (name(method.im_class), mname)
    return mname

def format_args(args):
    ...

def echo(fn, write=sys.stdout.write):
    ...

def echo_instancemethod(klass, method, write=sys.stdout.write):
    &quot;&quot;&quot; Change an instancemethod so that calls to it are echoed.

    Replacing a classmethod is a little more tricky.
    See: http://www.python.org/doc/current/ref/types.html
    &quot;&quot;&quot;
    mname = method_name(method)
    never_echo = &quot;__str__&quot;, &quot;__repr__&quot;, # Avoid recursion printing method calls
    if mname in never_echo:
        pass
    elif is_classmethod(method):
        setattr(klass, mname, classmethod(echo(method.im_func, write)))
    else:
        setattr(klass, mname, echo(method, write))

def echo_class(klass, write=sys.stdout.write):
    &quot;&quot;&quot; Echo calls to class methods and static functions
    &quot;&quot;&quot;
    for _, method in inspect.getmembers(klass, inspect.ismethod):
        echo_instancemethod(klass, method, write)
    for _, fn in inspect.getmembers(klass, inspect.isfunction):
        setattr(klass, name(fn), staticmethod(echo(fn, write)))

def echo_module(mod, write=sys.stdout.write):
    &quot;&quot;&quot; Echo calls to functions and methods in a module.
    &quot;&quot;&quot;
    for fname, fn in inspect.getmembers(mod, inspect.isfunction):
        setattr(mod, fname, echo(fn, write))
    for _, klass in inspect.getmembers(mod, inspect.isclass):
        echo_class(klass, write)

&lt;/pre&gt;

&lt;/div&gt;

&lt;h3 id=&quot;work-in-progress&quot;&gt;Work in progress&lt;/h3&gt;
&lt;p&gt;I&amp;#8217;ve used the &lt;code&gt;echo&lt;/code&gt; library successfully on a number of occasions. Usually, I simply want to capture all function calls made to a module. Echoing the module generates a log file which I can then examine offline using the standard &lt;a href=&quot;http://wordaligned.org/articles/shell-script-sets.html&quot;&gt;Unix shell tools&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;I&amp;#8217;ve resisted the urge to add options to fine-tune exactly which functions get echoed, or to control whether or not private methods get echoed &amp;#8212; I prefer to generate a surplus of information then filter it as needed. (Though note that the code, as it stands, &lt;em&gt;doesn&amp;#8217;t&lt;/em&gt; echo nested functions and classes.)&lt;/p&gt;
&lt;p&gt;I discovered that if a class customises the special &lt;code&gt;__repr__&lt;/code&gt; method, then trying to echo calls to this method leads to recursion and a runtime error. As a consequence, &lt;code&gt;echo&lt;/code&gt; avoids echoing &lt;code&gt;__repr__&lt;/code&gt; and, for good measure, &lt;code&gt;__str__&lt;/code&gt; as well. I suspect that &lt;code&gt;echo&lt;/code&gt; would lead to similar problems if applied to another introspective module. Echoing &lt;code&gt;doctest&lt;/code&gt; wouldn&amp;#8217;t be very clever, and echoing echo itself is surely doomed.&lt;/p&gt;
&lt;h3 id=&quot;source-code&quot;&gt;Source Code&lt;/h3&gt;
&lt;p&gt;The code for this article is available using anonymous SVN access at http://svn.wordaligned.org/svn/etc/echo (&lt;a href=&quot;http://svn.wordaligned.org/svn/etc/echo&quot;&gt;browse the code online&lt;/a&gt;).&lt;/p&gt;
&lt;h3 id=&quot;credits&quot;&gt;Credits&lt;/h3&gt;
&lt;p&gt;My thanks to Dan Tallis, &lt;a href=&quot;http://curbralan.com&quot;&gt;Kevlin Henney&lt;/a&gt;, &lt;a href=&quot;http://gedmin.as&quot;&gt;Marius Gedminas&lt;/a&gt; and all at &lt;a href=&quot;http://accu.org/index.php/aboutus/aboutjournals&quot;&gt;CVu&lt;/a&gt; for their help with this article.&lt;/p&gt;
&lt;hr /&gt;
&lt;h3 id=&quot;end&quot;&gt;@ end&lt;/h3&gt;
&lt;p&gt;Other languages also lay claim the to the term &amp;#8220;decorator&amp;#8221;, and indeed use of the &lt;code&gt;@&lt;/code&gt; symbol for this purpose. For example, a statically-typed language such as C++ can utilise the &lt;a href=&quot;http://en.wikipedia.org/wiki/Decorator_pattern&quot;&gt;Decorator&lt;/a&gt; pattern to adapt objects at runtime: the classic example would be a window in a graphical user interface, which may be dynamically decorated with (combinations of) borders, scroll-bars, and so on.&lt;/p&gt;
&lt;p&gt;Java makes special use of the &lt;code&gt;@&lt;/code&gt; symbol in its annotations, a language feature related to Python&amp;#8217;s decorators. You&amp;#8217;ll also find the &lt;code&gt;@&lt;/code&gt; symbol  used in Java comments, where it augments the code without changing its runtime-behaviour, enabling the &lt;a href=&quot;http://java.sun.com/j2se/javadoc&quot; title=&quot;Javadoc is a tool from Sun Microsystems for generating API documentation in HTML format from doc comments in source code&quot;&gt;Javadoc&lt;/a&gt; tool to generate better documentation. I&amp;#8217;ve seen this idea stretched further by the &lt;a href=&quot;http://xdoclet.sourceforge.net&quot; title=&quot;XDoclet is an open source code generation engine.&quot;&gt;XDoclet&lt;/a&gt; family of tools which perform tag-based tricks on Javadoc-style comments in order to generate boiler-plate code &amp;#8212; though in this case my response is closer to bewilderment than wonder.&lt;/p&gt;
&lt;p&gt;Elevating the concept of decoration further brings us to aspect-oriented programming, a paradigm which provides language/framework support for the separation of concerns &amp;#8212; and if that sounds like a collection of buzzwords, it&amp;#8217;s because I don&amp;#8217;t know anything about it!&lt;/p&gt;
&lt;p&gt;For some readers, Python&amp;#8217;s ability to tamper with classes and functions in ways unforeseen by their original implementer may seem dangerous, and I regard this a fair reaction. I&amp;#8217;ve heard it argued that languages like Java and C++ are better suited for large projects, primarily because such languages simply don&amp;#8217;t allow you to write code such as &lt;code&gt;change_everything(world)&lt;/code&gt; &amp;#8212; which is really what &lt;code&gt;echo_module(module)&lt;/code&gt; does.&lt;/p&gt;
&lt;p&gt;Meta-programming techniques like these need taste and restraint. As we&amp;#8217;ve shown, in Python, the &lt;code&gt;@&lt;/code&gt; symbol is pure syntactic sugar; sweet as it may seem, we should use it to improve, not impair.&lt;/p&gt;
&lt;hr /&gt;
&lt;p&gt;&lt;a href=&quot;http://wordaligned.org/articles/echo#fn1link&quot; id=&quot;footnote1&quot;&gt;&lt;a href=&quot;https://blog.codeship.com/building-minimal-docker-containers-for-go-applications/&quot;&gt;1&lt;/a&gt;&lt;/a&gt;
Strictly speaking, the default arguments aren&amp;#8217;t &amp;#8220;passed&amp;#8221; to the function; they&amp;#8217;re stored by the function object when the function code is parsed.&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://wordaligned.org/articles/echo#fn2link&quot; id=&quot;footnote2&quot;&gt;&lt;a href=&quot;http://devcenter.wercker.com/docs/quickstarts/advanced/building-minimal-containers-with-go&quot;&gt;2&lt;/a&gt;&lt;/a&gt;
I suspect that inside this rather contorted function a simpler version is begging to get out. I&amp;#8217;d be pleased to accept any suggestions.&lt;/p&gt;</description>
<dc:date>2008-03-10</dc:date>
<guid>http://wordaligned.org/articles/echo</guid>
<author>tag@wordaligned.org (Thomas Guest)</author>
<link>http://wordaligned.org/articles/echo</link>
<category>ACCU</category>
</item>

<item>
<title>ACCU Conference 2008</title>
<description>&lt;p&gt;&lt;a href=&quot;http://accu.org/index.php/conferences/accu_conference_2008&quot;&gt;&lt;img src=&quot;http://wordaligned.org/files/accu-2008.png&quot; alt=&quot;ACCU Conference 2008 graphic&quot;/&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;I&amp;#8217;ve just noticed &lt;a href=&quot;http://accu.org/index.php/conferences/accu_conference_2008/accu2008_schedule&quot;&gt;the schedule&lt;/a&gt; for the ACCU 2008 conference has been posted, and it&amp;#8217;s looking stronger than ever. &lt;/p&gt;
&lt;p&gt;The conference will be held in Oxford, from Wednesday 2nd April to Saturday 5th April. I&amp;#8217;m not going to reproduce any other information you can find on the &lt;a href=&quot;http://accu.org/index.php/conferences/accu_conference_2008&quot;&gt;official website&lt;/a&gt;, except this:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;The conference is usually a sell-out, so book online today to secure your place!&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;a href=&quot;http://accu.org&quot; title=&quot;ACCU: professionalism in programming&quot;&gt;
&lt;img src=&quot;http://accu.org/content/images/buttonl_120x60.gif&quot; 
width=&quot;120&quot; height=&quot;60&quot; 
alt=&quot;ACCU: professionalism in programming&quot; /&gt;
&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;If you care about software development, I&amp;#8217;d recommend attending. It&amp;#8217;s not just for C and C++ programmers, and it&amp;#8217;s not just for programmers: there&amp;#8217;s plenty of stuff on process, project management and so on. If your employers care about training and development, ask them to pay &amp;#8212; where else could you get &lt;a href=&quot;http://accu.org/index.php/conferences/accu_conference_2008/accu2008_speakers#Simon%20Peyton-Jones&quot;&gt;Simon Peyton Jones&lt;/a&gt; and &lt;a href=&quot;http://accu.org/index.php/conferences/accu_conference_2008/accu2008_speakers#Joe%20Armstrong&quot;&gt;Joe Armstrong&lt;/a&gt; to teach you Haskell and Erlang? Or Gail Ollis to discuss &lt;a href=&quot;http://accu.org/index.php/conferences/accu_conference_2008/accu2008_sessions#Santa%20Claus%20and%20other%20methodologies&quot;&gt;Santa Claus&lt;/a&gt;? Or &amp;#8230; well, just checkout &lt;a href=&quot;http://accu.org/index.php/conferences/accu_conference_2008/accu2008_schedule&quot;&gt;the schedule&lt;/a&gt; for yourself!&lt;/p&gt;</description>
<dc:date>2008-01-07</dc:date>
<guid>http://wordaligned.org/articles/accu-conference-2008</guid>
<author>tag@wordaligned.org (Thomas Guest)</author>
<link>http://wordaligned.org/articles/accu-conference-2008</link>
<category>ACCU</category>
</item>

</channel>
</rss>
