<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:dc="http://purl.org/dc/elements/1.1/" >
<channel>
<title>Word Aligned</title>
<link>http://wordaligned.org</link>
<description>tales from the code face</description>
<dc:creator>tag@wordaligned.org</dc:creator>
<language>en-gb</language>
<item>
<title>Jokey Code?</title>
<description>&lt;h3&gt;Choose Talks&lt;/h3&gt;
&lt;p&gt;I usually leave it as late as possible before deciding which sessions to attend at the &lt;a href="http://accu.org/index.php/conferences/accu_conference_2015"&gt;ACCU conference&lt;/a&gt;. There&amp;#8217;s ample time to study the &lt;a href="http://accu.org/index.php/conferences/accu_conference_2015/accu2015_schedule"&gt;schedule&lt;/a&gt; when you&amp;#8217;re there and anyway, it&amp;#8217;s subject to change.
&lt;/p&gt;
&lt;p&gt;This year I stuck with this policy with a couple of notable exceptions. First, there was &lt;a href="http://wordaligned.org/docs/oulipo/"&gt;my own talk&lt;/a&gt;, where I noted that computer programmers are writers who impose formal constraints on their texts, and who can learn from other writers who practice the same discipline. Second, there was Peter Hilton&amp;#8217;s talk, &lt;a href="http://accu.org/index.php/conferences/accu_conference_2015/accu2015_sessions#how_to_name_things_-_the_hardest_problem_in_programming"&gt;&amp;#8220;How to name things &amp;#8212; the hardest problem in programming&amp;#8221;&lt;/a&gt;, in which he argued more generally that programmers had much to learn from writers.
&lt;/p&gt;
&lt;p&gt;I &lt;strong&gt;had&lt;/strong&gt; to see Peter Hilton&amp;#8217;s talk and it did not disappoint. It engaged me at the time, in discussions afterwards, and it continues to make me think. I won&amp;#8217;t post a full response here but I do want to consider one aspect: humour.
&lt;/p&gt;
&lt;div&gt;&lt;iframe src="http://wordaligned.org//www.slideshare.net/slideshow/embed_code/key/qnND7jVVQOmWCS" width="425" height="355" frameborder="0" marginwidth="0" marginheight="0" scrolling="no" style="border:1px solid #CCC; border-width:1px; margin-bottom:5px; max-width: 100%;" allowfullscreen&gt;&lt;/iframe&gt;&lt;div style="margin-bottom:5px"&gt;&lt;strong&gt;&lt;a href="http://wordaligned.org//www.slideshare.net/pirhilton/how-to-name-things-the-hardest-problem-in-programming" title="How to name things: the hardest problem in programming" target="_blank"&gt;How to name things: the hardest problem in programming&lt;/a&gt;&lt;/strong&gt; from &lt;strong&gt;&lt;a href="http://wordaligned.org//www.slideshare.net/pirhilton" target="_blank"&gt;Peter Hilton&lt;/a&gt;&lt;/strong&gt;&lt;/div&gt;&lt;/div&gt;


&lt;h3&gt;Tell Jokes&lt;/h3&gt;
&lt;p&gt;Peter Hilton argued we should pay attention to tips from the likes of George Orwell and Stephen King because their advice is better written and also because it&amp;#8217;s &lt;strong&gt;funnier&lt;/strong&gt;. Why does this humourous aspect matter? Well, perhaps we&amp;#8217;re more likely to listen to someone who makes us laugh. Witty advice sounds less pompous.
&lt;/p&gt;
&lt;p&gt;It goes deeper than this, though. Another point from the talk:
&lt;/p&gt;
&lt;blockquote&gt;&lt;p&gt;Improve your general vocabulary. Read books, especially funny novels.
&lt;/p&gt;
&lt;/blockquote&gt;&lt;p&gt;Why &lt;strong&gt;funny novels&lt;/strong&gt;, especially? At this point in the talk Peter Hilton disingenously suggested such books were easier to read. A point he made later goes deeper:
&lt;/p&gt;
&lt;blockquote&gt;&lt;p&gt;Tell jokes &amp;#8230; Puns are important for naming, because they rely on double-meanings. Spotting double-meanings is the essential skill for avoiding ambiguous names.
&lt;/p&gt;
&lt;/blockquote&gt;&lt;p&gt;Interesting! I agree that word play and word power are linked: but do you need to be a punster to avoid ambiguity? I&amp;#8217;m not sure. In the words of &lt;a href="http://chrisoldwood.blogspot.co.uk/2015/04/the-daily-stand-up.html"&gt;Chris Oldwood&lt;/a&gt;:
&lt;/p&gt;
&lt;blockquote&gt;&lt;p&gt;I&amp;#8217;ve been writing more functional code lately. I recently tried a few numerical recipes with currying functions, but all I got was a NaN.
&lt;/p&gt;
&lt;/blockquote&gt;&lt;p&gt;&lt;a href="http://en.wikipedia.org/wiki/Naan"&gt;&lt;img src="http://wordaligned.org/images/naan.jpg" alt="all I got was a NaN"/&gt;&lt;/a&gt;
&lt;/p&gt;

&lt;h3&gt;Laughable Code&lt;/h3&gt;
&lt;p&gt;Is there a place for humour in code? Rarely, I&amp;#8217;d say. Code is read,
   re-read and then read again: most jokes become tired and then
   irritating under such scrutiny. Peter Hilton, though, described his
   amusement on discovering this &lt;a href="http://www.slideshare.net/pirhilton/how-to-name-things-the-hardest-problem-in-programming/55"&gt;function&lt;/a&gt;, which configures
   and starts &lt;a href="http://camel.apache.org/"&gt;Apache Camel&lt;/a&gt;:
&lt;/p&gt;
&lt;div class="typocode"&gt;

&lt;pre class="prettyprint"&gt;/** Configure and start Apache Camel */
def mountCamel() {
    Logger.info("Starting Camel...")
    val context = new DefaultCamelContext()
    configuredRoutes foreach { route =&amp;gt;
        context.addRoutes(route)
    }
    context.start()
}

&lt;/pre&gt;

&lt;/div&gt;

&lt;p&gt;The obvious alternative, &lt;code&gt;startCamel()&lt;/code&gt;, just isn&amp;#8217;t funny enough, apparently. I&amp;#8217;m glad the author resisted the temptation to call it &lt;code&gt;humpCamel()&lt;/code&gt;.
&lt;/p&gt;
&lt;p&gt;I&amp;#8217;m reminded of a colleague with a fondness for &lt;a href="http://en.wikipedia.org/wiki/Franglais"&gt;franglais&lt;/a&gt; who
   would, for example, check in a graphics routine called
   &lt;code&gt;do_le_render()&lt;/code&gt;. Mildly amusing first time round, maybe, but less so
   each time it got revisited to fix les bugs.
&lt;/p&gt;
&lt;p&gt;&lt;a href="https://www.flickr.com/photos/ahmedrabea/7929947448" title="Ark of Desert - Camel by Ahmed Rabea, on Flickr"&gt;&lt;img src="https://farm9.staticflickr.com/8180/7929947448_06dd57700c_z.jpg" width="640" height="427" alt="Ark of Desert - Camel"&gt;&lt;/a&gt;
&lt;/p&gt;
&lt;p&gt;I don&amp;#8217;t see many jokes in the code I read and I don&amp;#8217;t think it&amp;#8217;s
   because the authors lack a sense of humour. Just as &lt;a href="./entertaining-documentation" title="Entertaining documentation"&gt;good
documentation should inform rather than entertain&lt;/a&gt;, good code
   should express complex ideas as plainly as possible: humour doesn&amp;#8217;t
   get a look in.
&lt;/p&gt;
&lt;p&gt;There are exceptions. We&amp;#8217;ve already seen the name &amp;#8220;camel&amp;#8221; used for something which isn&amp;#8217;t a camel: libraries, products and projects can benefit from short, memorable and quirky names. In unit tests, too, code is less complex, which can leave space for quips and in-jokes. When an integer is expected it often turns out to be &lt;a href="https://www.google.co.uk/webhp?q=the%20answer%20to%20life%20the%20universe%20and%20everything"&gt;42&lt;/a&gt;. Binary input data is laid out to form strange messages when viewed as &lt;a href="http://nedbatchelder.com/text/hexwords.html"&gt;hexadecimal&lt;/a&gt;. If some text &amp;#8212; any old text &amp;#8212; is needed, &lt;a href="http://en.wikipedia.org/wiki/Lorem_ipsum"&gt;lorem ipsum&lt;/a&gt; would indicate a lack of imagination. Even so, well-chosen names and values from the domain under test would probably be more helpful when a failing test needs fixing.
&lt;/p&gt;

&lt;h3&gt;Charming code&lt;/h3&gt;
&lt;p&gt;I&amp;#8217;m down on jokes in code but I do think code can be a pleasure to read and that well written programs can delight. Whilst I agree with Peter Hilton&amp;#8217;s recommendation to read widely and well, I was surprised he didn&amp;#8217;t recommend reading &lt;strong&gt;code&lt;/strong&gt;, and when I discussed this with him afterwards he asked, where is it? Where is it! That will be the subject of another article, but off the top of my head, &lt;a href="http://www.freetype.org"&gt;freetype&lt;/a&gt;, &lt;a href="https://www.ffmpeg.org/"&gt;ffmpeg&lt;/a&gt;, &lt;a href="http://llvm.org/"&gt;llvm&lt;/a&gt;, the Go and Python standard libraries. If you read through any of these you&amp;#8217;ll enjoy their clarity and internal consistency &amp;#8212; their style; and should you code against them, these same attributes show through their interfaces.
&lt;/p&gt;
&lt;p&gt;I haven&amp;#8217;t found any jokes in the &lt;a href="https://www.sqlite.org/"&gt;SQLite&lt;/a&gt; source but if you decide
   to integrate it in your application, when you check the license you&amp;#8217;ll
   find, instead, a &lt;a href="https://www.sqlite.org/different.html"&gt;blessing&lt;/a&gt;. This may seem funny &amp;#8212; unusual,
   certainly &amp;#8212; but it&amp;#8217;s actually quite serious.
&lt;/p&gt;
&lt;blockquote&gt;May you do good and not evil&lt;br&gt;
May you find forgiveness for yourself and forgive others&lt;br&gt;
May you share freely, never taking more than you give.&lt;/blockquote&gt;

&lt;p&gt;We may not issue blessings with our own code but maybe we can find other ways to surprise and delight.
&lt;/p&gt;</description>
<dc:date>2015-05-11</dc:date>
<guid>http://wordaligned.org/articles/jokey-code</guid>
<author>tag@wordaligned.org (Thomas Guest)</author>
<link>http://wordaligned.org/articles/jokey-code</link>
<category>Documentation</category>
</item>

<item>
<title>Generic documentation</title>
<description>&lt;pre&gt;/**
 *  @brief &lt;a href="http://www.google.com/codesearch?q=%22This+does+what+you+think+it+does%22"&gt;This does what you think it does.&lt;/a&gt;
 *  @param  a  A thing of arbitrary type.
 *  @param  b  Another thing of arbitrary type.
    ....
 */
&lt;/pre&gt;</description>
<dc:date>2009-04-30</dc:date>
<guid>http://wordaligned.org/articles/generic-documentation</guid>
<author>tag@wordaligned.org (Thomas Guest)</author>
<link>http://wordaligned.org/articles/generic-documentation</link>
<category>Documentation</category>
</item>

<item>
<title>Books, blogs, comments and code samples</title>
<description>&lt;div class="toc"&gt;
&lt;h2&gt;Contents&lt;/h2&gt;
&lt;ul&gt;
 &lt;li&gt;&lt;a href="http://wordaligned.org/articles/code-samples#tocfastware-slow-progress" name="toc0" id="toc0"&gt;Fastware, slow progress&lt;/a&gt;
 &lt;/li&gt;

 &lt;li&gt;&lt;a href="http://wordaligned.org/articles/code-samples#toccode-and-document-editors" name="toc1" id="toc1"&gt;Code and document editors&lt;/a&gt;
 &lt;/li&gt;

 &lt;li&gt;&lt;a href="http://wordaligned.org/articles/code-samples#tocdocument-editors-and-code" name="toc2" id="toc2"&gt;Document editors and code&lt;/a&gt;
 &lt;/li&gt;

 &lt;li&gt;&lt;a href="http://wordaligned.org/articles/code-samples#tocserious-problems-with-code-examples" name="toc3" id="toc3"&gt;Serious problems with code examples&lt;/a&gt;
 &lt;/li&gt;

 &lt;li&gt;&lt;a href="http://wordaligned.org/articles/code-samples#tocpythons-doctest-module" name="toc4" id="toc4"&gt;Python&amp;#8217;s Doctest module&lt;/a&gt;
 &lt;/li&gt;

 &lt;li&gt;&lt;a href="http://wordaligned.org/articles/code-samples#tocsubtle-problems-with-code-examples" name="toc5" id="toc5"&gt;Subtle problems with code examples&lt;/a&gt;
 &lt;/li&gt;

 &lt;li&gt;&lt;a href="http://wordaligned.org/articles/code-samples#toccontent-and-presentation" name="toc6" id="toc6"&gt;Content and presentation&lt;/a&gt;
 &lt;/li&gt;

 &lt;li&gt;&lt;a href="http://wordaligned.org/articles/code-samples#tocperfectionism-and-programming" name="toc7" id="toc7"&gt;Perfectionism and programming&lt;/a&gt;
 &lt;/li&gt;

 &lt;li&gt;&lt;a href="http://wordaligned.org/articles/code-samples#tocthe-outlook-for-fastware" name="toc8" id="toc8"&gt;The outlook for Fastware!&lt;/a&gt;
 &lt;/li&gt;

 &lt;li&gt;&lt;a href="http://wordaligned.org/articles/code-samples#tocnotes" name="toc9" id="toc9"&gt;Notes&lt;/a&gt;
 &lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;h3&gt;&lt;a href="http://wordaligned.org/articles/code-samples#toc0" name="tocfastware-slow-progress" id="tocfastware-slow-progress"&gt;Fastware, slow progress&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;&lt;a href="http://www.aristeia.com/"&gt;&lt;img src="http://www.aristeia.com/images/sdm-small.jpg" alt="Scott Meyers mugshot"/&gt;&lt;/a&gt;
&lt;/p&gt;
&lt;p&gt;Few would argue with &lt;a href="http://www.artima.com/cppsource/top_cpp_books.html"&gt;Scott Meyers&amp;#8217; claim&lt;/a&gt; to have written one of &amp;#8220;the most important C++ books &amp;#8230; &lt;em&gt;Ever&lt;/em&gt;&amp;#8221;. There is not (and could never be) a K&amp;amp;R for C++, but every C++ programmer should have access to the current edition of Meyers&amp;#8217; classic book, &lt;a href="http://www.amazon.com/gp/product/0321334876?tag=wordalig-20"&gt;Effective C++&lt;/a&gt;, which makes sense of a subtle and complex language.
&lt;/p&gt;
&lt;div class="amazon"&gt;&lt;a href="http://www.amazon.com/gp/product/0321334876?tag=wordalig-20"&gt;&lt;img src="http://wordaligned.org/images/books/effective-cpp.jpg" alt="Effective C++ cover"/&gt;&lt;/a&gt;&lt;/div&gt;

&lt;p&gt;Naturally, then, I was interested to discover &lt;a href="http://www.aristeia.com/"&gt;Meyers&lt;/a&gt; has started writing a new book, working title &lt;a href="http://fastwareproject.blogspot.com"&gt;Fastware!&lt;/a&gt; Or maybe I should say that he will be starting on a new book just as soon as he can settle on a suitable toolchain. His new &lt;a href="http://fastwareproject.blogspot.com"&gt;Fastware Project blog&lt;/a&gt; explores the issues.
&lt;/p&gt;
&lt;p&gt;Why are the tools he used so successfully to produce Effective C++ no longer adequate?
&lt;/p&gt;
&lt;span id="continue-reading"/&gt;

&lt;blockquote&gt;&lt;p&gt;&amp;#8230; my writing has been stalled for quite some time as I&amp;#8217;ve wrestled with the question of what it means to write a book these days. For conventional print books, things are easy for an author, because the game is pretty well understood: ink is black, paper is white, standard font size is around 10 point, page dimensions are generally around 9&amp;#x22;x6&amp;#x22; with maybe a margin of around 1&amp;#x22; on all sides &amp;#8230;
&lt;/p&gt;
&lt;p&gt;But I don&amp;#8217;t think the ink-on-paper world is the one I want to write for any more. I still want to write something that is recognizably a book, but I want to think of ink on paper as but one of many possible output devices. Others include computer screens (big with color support), portable ebook readers like Kindle (smaller and currently with no color support), and portable devices that happen to support text (e.g., iPhones &amp;#8212; very small with color support).
&lt;/p&gt;
&lt;p&gt;&amp;#8212; &lt;a href="http://fastwareproject.blogspot.com/2008/11/two-projects-in-one.html"&gt;Scott Meyers, Two Projects in One&lt;/a&gt;
&lt;/p&gt;
&lt;/blockquote&gt;&lt;p&gt;Here&amp;#8217;s an example of the distinctions: Meyers corrects any errors he discovers in Effective C++ each time it gets reprinted, trying to ensure that &lt;a href="http://fastwareproject.blogspot.com/2008/11/post-publication-page-break-problem.html"&gt;no pages are renumbered&lt;/a&gt; as a result of these changes. So if you&amp;#8217;re directed e.g. to page 44 of the 3rd edition of Effective C++, you&amp;#8217;ll find what you&amp;#8217;re looking for no matter which print run your copy happened to come from. Page numbers are the canonical way of referring to positions in a book, so they&amp;#8217;d better persist. 
&lt;/p&gt;
&lt;p&gt;For web based presentation of the same content, page breaking problems should be easier to avoid, but a fixed URL scheme is crucial; further, readers should be able to discover and use subsection links within a page (e.g. clicking on a subsection header could copy its permanent link to the clipboard).
&lt;/p&gt;
&lt;p&gt;On the &lt;a href="http://fastwareproject.blogspot.com"&gt;Fastware blog&lt;/a&gt;, Meyers ponders more interesting examples, such as the &lt;a href="http://fastwareproject.blogspot.com/2008/11/what-can-go-in-book.html"&gt;representation of audio content and animations&lt;/a&gt; in different output formats. One key topic he has yet to discuss in depth is perhaps the most important of all: &lt;strong&gt;what to do about code samples?&lt;/strong&gt;
&lt;/p&gt;

&lt;h3&gt;&lt;a href="http://wordaligned.org/articles/code-samples#toc1" name="toccode-and-document-editors" id="toccode-and-document-editors"&gt;Code and document editors&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;&lt;a title="&amp;#x01dd;&amp;#x025f;&amp;#x025f;&amp;#x0131;lpoo&amp;#x0183; &amp;#x01dd;&amp;#x0287;&amp;#x01dd;d" href="http://www.goodliffe.net"&gt;&lt;img src="http://wordaligned.org/images/pete-goodliffe.jpg" style="float:right;" alt="&amp;#x01dd;&amp;#x025f;&amp;#x025f;&amp;#x0131;lpoo&amp;#x0183; &amp;#x01dd;&amp;#x0287;&amp;#x01dd;d"/&gt;&lt;/a&gt;
&lt;/p&gt;
&lt;p&gt;Consider the problem of including code in a book, or indeed an online article. Obviously, there&amp;#8217;s a formatting problem. You can&amp;#8217;t just paste (e.g.) C++ from your programming IDE into an HTML page or a .tex file: you&amp;#8217;ll lose the formatting, and the angle brackets and ampersands need escaping. Not so very hard to solve, maybe, but still an issue to overcome. Experienced programmer and author &lt;a href="http://goodliffe.blogspot.com/2008/11/c-stl-like-circular-buffer-part-4.html?showComment=1227282360000#c3539371097531739661"&gt;Pete Goodliffe complains&lt;/a&gt;:
&lt;/p&gt;
&lt;blockquote&gt;&lt;p&gt;Putting code examples into blogger is hateful. HTML-conversion of templated C++ code is not my idea of a good time!
&lt;/p&gt;
&lt;/blockquote&gt;&lt;p&gt;(Templated C++ code isn&amp;#8217;t my idea of a good time either, but I think Pete Goodliffe means all those &amp;lt;angle&amp;gt; &amp;lt;brackets&amp;gt; are giving him grief.)
&lt;/p&gt;
&lt;p&gt;The formatting problem is amplified when it comes to comments. One advantage of web publishing is that readers can add comments, and may even offer code samples in their comments. One danger of web publishing is that crackers may try and attack your server by including code in their comments! As a result, comments must be sanitised, which often mangles code samples. This problem is far from being solved, as I realised when a reader posted some code in &lt;a href="http://www.haloscan.com/comments/wordaligned/joined_output_and_the_fencepost_problem/#40466"&gt;a comment on this site&lt;/a&gt;, which unfortunately the comment handler ruined.
&lt;/p&gt;

&lt;h3&gt;&lt;a href="http://wordaligned.org/articles/code-samples#toc2" name="tocdocument-editors-and-code" id="tocdocument-editors-and-code"&gt;Document editors and code&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Pasting from a code editor into a document editor can lead to problems. So can writing code directly in a document editor &amp;#8212; even if you&amp;#8217;re &lt;a href="http://www.research.att.com/~bs"&gt;Bjarne Stroustrup&lt;/a&gt; and the code is in C++, a language you invented and implemented. Here&amp;#8217;s what happened when I tried compiling some code copied directly from Stroustrup&amp;#8217;s paper &lt;a href="http://www.research.att.com/~bs/abstraction.pdf"&gt;Abstraction, libraries, and efficiency in C++ (PDF)&lt;/a&gt;.
&lt;/p&gt;
&lt;p&gt;The code reads:
&lt;/p&gt;
&lt;div class="typocode"&gt;&lt;pre class="prettyprint"&gt;
string s;
in &amp;gt;&amp;gt; s; // &amp;ldquo;in&amp;rdquo; is an input stream connected to a data source
cout &amp;lt;&amp;lt; &amp;ldquo;I read &amp;ldquo; &amp;lt;&amp;lt; s.length() &amp;lt;&amp;lt; &amp;ldquo;characters&amp;rdquo;;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;The compiler barfs:
&lt;/p&gt;
&lt;pre&gt;
bs.cpp:3: error: stray '\226' in program
bs.cpp:3: error: stray '\128' in program
bs.cpp:3: error: stray '\156' in program
bs.cpp:3: error: stray '\226' in program
bs.cpp:3: error: stray '\128' in program
bs.cpp:3: error: stray '\156' in program
bs.cpp:3: error: stray '\226' in program
bs.cpp:3: error: stray '\128' in program
bs.cpp:3: error: stray '\156' in program
bs.cpp:3: error: stray '\226' in program
bs.cpp:3: error: stray '\128' in program
bs.cpp:3: error: stray '\157' in program
...
bs.cpp:3: error: 'I' was not declared in this scope
bs.cpp:3: error: expected `;' before 'read'
&lt;/pre&gt;

&lt;p&gt;Not a bad haul of errors for code which the author found &amp;#8220;trivial to write&amp;#8221;!
&lt;/p&gt;
&lt;p&gt;Of course, Stroustrup has been caught out by some (not so!) smart quoting applied by his authoring tools.
&lt;/p&gt;
&lt;p&gt;(Any programming editor should expose this problem by failing to highlight &amp;ldquo;I read &amp;rdquo; and &amp;ldquo;characters&amp;rdquo; as string literals, and if you&amp;#8217;re reading this article served directly from wordaligned.org, rather than in a feed reader, then the &lt;a href="http://wordaligned.org/scripts/prettify.js"&gt;javascript prettifier&lt;/a&gt; should do just this. The poorly spaced output bug may not be spotted until the code actually executes.)
&lt;/p&gt;

&lt;h3&gt;&lt;a href="http://wordaligned.org/articles/code-samples#toc3" name="tocserious-problems-with-code-examples" id="tocserious-problems-with-code-examples"&gt;Serious problems with code examples&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Whether or not you can paste source code directly into the source text of your book/article depends on the format used for that source. I can and do copy code directly into the articles I post to &lt;a href="http://wordaligned.org"&gt;wordaligned.org&lt;/a&gt;. A documentation toolchain based around &lt;a href="http://daringfireball.net/projects/markdown/"&gt;Markdown&lt;/a&gt; takes care of conversion to HTML, and a clever &lt;a href="http://wordaligned.org/scripts/prettify.js"&gt;javascript program&lt;/a&gt; handles syntax highlighting. The more serious problems here are twofold:
&lt;/p&gt;
&lt;ol&gt;
 &lt;li&gt;&lt;p&gt;Whenever you cut and paste code between documents, more than one version of that code exists. You&amp;#8217;ve introduced a branch.
&lt;/p&gt;

 &lt;/li&gt;

 &lt;li&gt;&lt;p&gt;Once code leaves its normal development environment, it can no longer be executed in the usual way.
&lt;/p&gt;

 &lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Both of these problems can be overcome, and many conscientious authors have put together their own solutions, but I think it&amp;#8217;s fair to say there is no single, accepted, way of solving them.
&lt;/p&gt;
&lt;p&gt;Programmers are familiar with build systems, and this is exactly &lt;a href="http://fastwareproject.blogspot.com/2008/11/single-source-automatic-building-is.html"&gt;Scott Meyers&amp;#8217; approach&lt;/a&gt; to book production:
&lt;/p&gt;
&lt;blockquote&gt;&lt;p&gt;&amp;#8230; it&amp;#8217;s crucial that I have a &lt;strong&gt;single master source&lt;/strong&gt; for each book, and it&amp;#8217;s also crucial that the various target versions of the book can be &lt;strong&gt;automatically built&lt;/strong&gt; from the single master source. If this sounds like the usual requirement for cross-platform software development, it should, because that&amp;#8217;s exactly how I think of it.
&lt;/p&gt;
&lt;/blockquote&gt;&lt;p&gt;He doesn&amp;#8217;t mention if his build system includes regression tests, which, in this case, would involve extracting the various code examples, building them, testing the output &amp;#8212; ideally (especially for a language as close to the platform as C++) using multiple compilers on multiple platforms.
&lt;/p&gt;

&lt;h3&gt;&lt;a href="http://wordaligned.org/articles/code-samples#toc4" name="tocpythons-doctest-module" id="tocpythons-doctest-module"&gt;Python&amp;#8217;s Doctest module&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;I haven&amp;#8217;t cracked these problems myself and have often come to regret this flaw in the toolchain I use for code examples on this site. I&amp;#8217;ve published syntax errors, off-by-one bugs, logical inversions &amp;#8212; and this despite the fact that my &lt;a href="http://wordaligned.org/articles/accidental-emacs.html"&gt;programming and documentation editors are one and the same&lt;/a&gt;.
&lt;/p&gt;
&lt;p&gt;When writing about Python life should be a little easier since the compilation phase doesn&amp;#8217;t exist, and perhaps this explains my laziness. Python&amp;#8217;s &lt;a href="http://docs.python.org/library/doctest.html"&gt;doctest module&lt;/a&gt; also allows a degree of sanity checking, at least for any interpreted Python code. For example, a bug has somehow crept into the string reversal shown below:
&lt;/p&gt;
&lt;div class="typocode"&gt;

&lt;pre class="prettyprint"&gt;&amp;gt;&amp;gt;&amp;gt; 'wordaligned.org'[::-1]
'gro.dengliadrow'
&amp;gt;&amp;gt;&amp;gt;

&lt;/pre&gt;

&lt;/div&gt;

&lt;p&gt;Doctest exposes this problem by reading in the file, finding anything which looks like an interpreted Python session, and playing it back, checking for errors.
&lt;/p&gt;
&lt;pre&gt;
python -c 'import doctest; doctest.testfile("code-samples")'
**********************************************************************
File "code-samples", line 104, in code-samples
Failed example:
    'wordaligned.org'[::-1]
Expected:
    'gro.dengliadrow'
Got:
    'gro.dengiladrow'
**********************************************************************
1 items had failures:
   1 of   1 in code-examples
***Test Failed*** 1 failures.
&lt;/pre&gt;

&lt;p&gt;Note though, that to properly check this article, with its intentional mistake, doctest alone is no longer up to the job, since I need to confirm the mistake fails correctly.
&lt;/p&gt;

&lt;h3&gt;&lt;a href="http://wordaligned.org/articles/code-samples#toc5" name="tocsubtle-problems-with-code-examples" id="tocsubtle-problems-with-code-examples"&gt;Subtle problems with code examples&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;So, formatting problems should be simple to solve. Testing code examples for correctness is hard. There are more subtle problems, too. 
&lt;/p&gt;
&lt;p&gt;How do you annotate sample code? Authors frequently use comments for such annotations, resulting in code examples which are far from exemplary. Here&amp;#8217;s another Stroustrup program, taken from &lt;a href="http://www.research.att.com/~bs/new_learning.pdf"&gt;Learning Standard C++ as a New Language (PDF)&lt;/a&gt;.
&lt;/p&gt;
&lt;div class="typocode"&gt;&lt;pre class="prettyprint"&gt;
#include&amp;lt;iostream&amp;gt;//get standard I/O facilities 
#include&amp;lt;string&amp;gt;//get standard string facilities

int main()
{ 
    using namespace std; //gain access to standard library 
    cout &amp;lt;&amp;lt; "Please enter your first name\n";
    string name;
    cin &amp;gt;&amp;gt; name;
    cout &amp;lt;&amp;lt; "Hello " &amp;lt;&amp;lt; name &amp;lt;&amp;lt; &amp;rsquo;\n&amp;rsquo;; 
}
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;It&amp;#8217;s seductively easy to adopt this style of annotation, and it&amp;#8217;s employed in many of the best programming texts (including Effective C++). Nonetheless, it&amp;#8217;s poor programming style. I&amp;#8217;d like to see authors find a better way.
&lt;/p&gt;
&lt;div class="amazon"&gt;&lt;a href="http://www.amazon.com/gp/product/0201657880?ie=UTF8&amp;amp;tag=wordalig-20"&gt;&lt;img src="http://wordaligned.org/images/books/programming-pearls.jpg" alt="Programming Pearls cover"/&gt;&lt;/a&gt;&lt;/div&gt;

&lt;p&gt;Can code in a book ever differ from production code? I&amp;#8217;m more convinced by Jon Bentley&amp;#8217;s up front note in the preface to his excellent and code-packed book, &lt;a href="http://www.amazon.com/gp/product/0201657880?ie=UTF8&amp;amp;tag=wordalig-20"&gt;Programming Pearls&lt;/a&gt;:
&lt;/p&gt;
&lt;blockquote&gt;&lt;p&gt;The programs use a terse programming style: short variable names, few blank lines, and little or no error checking. This is inappropriate in large software projects, but it is useful to convey the key ideas of algorithms.
&lt;/p&gt;
&lt;/blockquote&gt;&lt;p&gt;He&amp;#8217;s right: this particular book would be less accessible if the code (e.g.) checked inputs rigorously, or employed the variable naming conventions Bentley prefers for large software projects. The difference is that the code in his book exists to illustrate the key ideas dealt with more fully in the text; whereas, in a software project, the code is the text.
&lt;/p&gt;
&lt;p&gt;Bentley balances code and text superbly, switching between pseudocode, real code and prose to find a solution matching the precise needs of his book. My only complaint is that you can&amp;#8217;t download the code examples from the website referenced in the book (www.programmingpearls.com, don&amp;#8217;t go there!) because someone has snatched the domain. Other books have different goals and it would be a severe failing if, for example, Effective C++ were to include code examples which weren&amp;#8217;t exception safe. How often does &amp;#8220;exercise for the reader&amp;#8221; sound like &amp;#8220;excuse for the writer&amp;#8221;?
&lt;/p&gt;

&lt;h3&gt;&lt;a href="http://wordaligned.org/articles/code-samples#toc6" name="toccontent-and-presentation" id="toccontent-and-presentation"&gt;Content and presentation&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Testing code samples is really a diversion from the points Meyers raises on his blog: he&amp;#8217;s more concerned with multiple format presentation. How exactly do you arrange for suitable syntax highlighting in print, on a computer screen, in a podcast?
&lt;/p&gt;
&lt;p&gt;Traditionally, authors deliver &lt;strong&gt;content&lt;/strong&gt; to publishers, and publishers control the &lt;strong&gt;presentation&lt;/strong&gt; of that content. Both sides do what they&amp;#8217;re best at. In the world of computing books, this model often isn&amp;#8217;t the case. Programmers are capable of driving and configuring the software involved with book production &amp;#8212; and indeed of writing new software if what exists isn&amp;#8217;t good enough. Many programmers are ahead of the game when it comes to understanding the opportunities with newer formats. (I could also add that programmers like to be self-sufficient, enjoy tinkering, value control, and think they know better!) Reading Meyers&amp;#8217; blog, it becomes apparent that he takes immense care &amp;#8212; and exercises complete control &amp;#8212; over the final presentation of his traditional book content, in fact delivering his &lt;a href="http://fastwareproject.blogspot.com/2008/11/single-source-automatic-building-is.html"&gt;publishers camera-ready copy&lt;/a&gt;.
&lt;/p&gt;
&lt;blockquote&gt;&lt;p&gt;I write my books with a goal of their remaining useful for at least five years, and there are generally at least one or two reprints each year, so camera-ready copy for one of my books should have to be produced at least 10 times. It&amp;#8217;s often more than that. More Effective C++, which I wrote in 1996, is now in its 26th printing.
&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3&gt;&lt;a href="http://wordaligned.org/articles/code-samples#toc7" name="tocperfectionism-and-programming" id="tocperfectionism-and-programming"&gt;Perfectionism and programming&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Perfectionism and programming is a rare combination. Donald Knuth&amp;#8217;s famous typesetting program, &lt;a href="http://en.wikipedia.org/wiki/TeX"&gt;TeX&lt;/a&gt;, is reputedly as close as a substantial program ever gets to perfection, and it continues to set the standard for printed material (&lt;a href="http://fastwareproject.blogspot.com/2008/11/xml.html"&gt;and looks likely to play a role&lt;/a&gt; in the print version of Fastware). TeX was born from a dissatisfaction with the available tools. Knuth simply couldn&amp;#8217;t accept the content of The Art of Computer Programming being spoiled by ugly presentation
&lt;/p&gt;
&lt;blockquote&gt;&lt;p&gt; I had spent 15 years writing those books, but if they were going to look awful I didn&amp;#8217;t want to write any more&lt;a id="fn1link" href="http://wordaligned.org/articles/code-samples#fn1"&gt;&lt;sup&gt;[1]&lt;/sup&gt;&lt;/a&gt;
&lt;/p&gt;
&lt;/blockquote&gt;&lt;p&gt;and he had the determination, passion and ability to take a ten year detour and do something about.
&lt;/p&gt;

&lt;h3&gt;&lt;a href="http://wordaligned.org/articles/code-samples#toc8" name="tocthe-outlook-for-fastware" id="tocthe-outlook-for-fastware"&gt;The outlook for Fastware!&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Will Meyers find himself similarly diverted? I don&amp;#8217;t know, but I&amp;#8217;m enjoying reading his thoughts.
&lt;/p&gt;
&lt;p&gt;On reflection, I suggest &lt;a href="http://www.amazon.com/gp/product/0321334876?tag=wordalig-20"&gt;Effective C++&lt;/a&gt; succeeds &lt;em&gt;because&lt;/em&gt; of its narrow scope. It doesn&amp;#8217;t aim to teach programming, or even programming in C++: it&amp;#8217;s a concise survival guide for those who work with the language. As such, its traditional printed form serves it well. It&amp;#8217;s not an entertainment (you wouldn&amp;#8217;t want to listen to it on a long journey) and nor is it strictly a reference (you won&amp;#8217;t be using it to cut and paste code from): rather, it&amp;#8217;s packed with material you need to read carefully and understand. 
&lt;/p&gt;
&lt;p&gt;Fastware! a language-agnostic, multi-format book, will clearly be something very different. 
&lt;/p&gt;
&lt;p&gt;&lt;a href="http://fastwareproject.blogspot.com/feeds/posts/default"&gt;Subscribe!&lt;/a&gt;
&lt;/p&gt;
&lt;hr /&gt;


&lt;h3&gt;&lt;a href="http://wordaligned.org/articles/code-samples#toc9" name="tocnotes" id="tocnotes"&gt;Notes&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;&lt;a href="http://docbook.org"&gt;DocBook&lt;/a&gt; aims to solve the multiple output formats problem. Loosely speaking, it comprises an XML vocabulary to describe a book&amp;#8217;s content, together with XSLT transforms and other tools to convert that content into web pages, PDFs and so on. You can read about &lt;a href="http://wordaligned.org/docs/softdoc_overload/index.html"&gt;my experience with DocBook here&lt;/a&gt;.
&lt;/p&gt;
&lt;p&gt;I also recommend &lt;a href="http://www.amazon.com/gp/product/020163371X?tag=wordalig-20"&gt;More Effective C++&lt;/a&gt; and &lt;a href="http://www.amazon.com/gp/product/0201749629?tag=wordalig-20"&gt;Effective STL&lt;/a&gt;, both by Scott Meyers.
&lt;/p&gt;
&lt;hr /&gt;

&lt;p&gt;&lt;a id="fn1" href="http://wordaligned.org/articles/code-samples#fn1link"&gt;[1]&lt;/a&gt; &lt;a href="http://en.wikipedia.org/wiki/TeX#cite_note-3"&gt;This Knuth quotation&lt;/a&gt; appears in the links section of the &lt;a href="http://en.wikipedia.org/wiki/TeX"&gt;Wikipedia page on TeX&lt;/a&gt;.
&lt;/p&gt;</description>
<dc:date>2008-11-25</dc:date>
<guid>http://wordaligned.org/articles/code-samples</guid>
<author>tag@wordaligned.org (Thomas Guest)</author>
<link>http://wordaligned.org/articles/code-samples</link>
<category>Documentation</category>
</item>

<item>
<title>Syntactic Sugar</title>
<description>&lt;p&gt;&lt;a href="http://www.sgi.com/tech/stl/"&gt;&lt;img style="float:right;" src="http://www.sgi.com/images/common/sgilogo.gif" alt="SGI logo"/&gt;&lt;/a&gt;
&lt;/p&gt;
&lt;p&gt;The SGI STL documentation &lt;a href="http://www.sgi.com/tech/stl/Map.html#3"&gt;notes that&lt;/a&gt; &lt;code&gt;std::map::operator[]&lt;/code&gt; is redundant:
&lt;/p&gt;
&lt;blockquote&gt;&lt;p&gt;Strictly speaking, this member function is unnecessary: it exists only for convenience.
&lt;/p&gt;
&lt;/blockquote&gt;&lt;p&gt;This sentence pretty much nails what&amp;#8217;s meant by &amp;#8220;syntactic sugar&amp;#8221;, &lt;a href="http://en.wikipedia.org/wiki/Syntactic_sugar"&gt;defined more formally in Wikipedia&lt;/a&gt; as:
&lt;/p&gt;
&lt;blockquote&gt;&lt;p&gt;&amp;#8230; a term coined by Peter J. Landin for additions to the syntax of a computer language that do not affect its functionality but make it &amp;#8220;sweeter&amp;#8221; for humans to use.
&lt;/p&gt;
&lt;/blockquote&gt;&lt;p&gt;&lt;a href="http://uncyclopedia.org/wiki/Semicolon_Cancer"&gt;&lt;img style="float:right;" src="http://images.wikia.com/uncyclopedia/images/4/4a/Semicolon.png" alt="Cancer of the semicolon"/&gt;&lt;/a&gt;
&lt;/p&gt;
&lt;p&gt;For example, Python&amp;#8217;s &lt;a href="http://wordaligned.org/articles/echo.html"&gt;@decorator&lt;/a&gt; syntax sweetens the practice of wrapping functions. In C++, operator overloading adds nothing which couldn&amp;#8217;t be achieved using standard function call syntax, but it opens the door to some &lt;a href="http://www.boost.org/doc/libs/1_36_0/libs/spirit/classic/doc/introduction.html" title="Spirit imitates EBNF in C++ using operator overloading"&gt;inventive and expressive techniques&lt;/a&gt;. Haskell has a &lt;a href="http://www.haskell.org/haskellwiki/Syntactic_sugar"&gt;nice syntax&lt;/a&gt; for custom infix operators, and so on. 
&lt;/p&gt;
&lt;p&gt;Lisp values its &lt;a href="http://paulgraham.com/hundred.html" title="As few axioms as possible, says Paul Graham"&gt;spare syntax&lt;/a&gt; and certainly won&amp;#8217;t allow infix operators, but even a &lt;a href="http://schemers.org"&gt;minimalist dialect like Scheme&lt;/a&gt; allows lists to be &lt;a href="http://www.r6rs.org/final/html/r6rs/r6rs-Z-H-7.html#node_sec_4.3.2"&gt;represented&lt;/a&gt; like this &lt;code&gt;(a b c d e)&lt;/code&gt; rather than &lt;code&gt;(a . (b . (c . (d . (e . ())))))&lt;/code&gt;.
&lt;/p&gt;
&lt;p&gt;Perl comes laced and frosted with syntactic sugar. &lt;a href="http://www.wall.org/~larry/"&gt;Larry Wall&lt;/a&gt; explains why he doesn&amp;#8217;t heed Alan Perlis&amp;#8217;s famous warning about &lt;a href="http://www.cs.yale.edu/quotes.html" title="Syntactic sugar causes cancer of the semicolon, says Alan J. Perlis"&gt;cancer of the semicolon&lt;/a&gt;.
&lt;/p&gt;
&lt;blockquote&gt;&lt;p&gt;To me, one of the most agonizing aspects of language design is coming up with a useful system of operators. To other language designers, this may seem like a silly thing to agonize over. After all, you can view all operators as mere syntactic sugar &amp;#8212; operators are just funny looking function calls. Some languages make a feature of leveling all function calls into one syntax. As a result, the so-called functional languages tend to wear out your parenthesis keys, while OO languages tend to wear out your dot key. &amp;#8212; &lt;a href="http://dev.perl.org/perl6/doc/design/apo/A03.html"&gt;Larry Wall, Apocalypse 3, Operators&lt;/a&gt;
&lt;/p&gt;
&lt;/blockquote&gt;&lt;p&gt;(Perl, of course, tends to wear out your shift key &amp;#8230;)
&lt;/p&gt;
&lt;span id="continue-reading"/&gt;

&lt;p&gt;There&amp;#8217;s not much in C++ you couldn&amp;#8217;t manage using C, given enough effort. I &lt;a href="http://www.research.att.com/~bs/blast.html" title="Be tolerant, refrain from hyperbole, says Bjarne Stroustrup"&gt;both use and bitch about C++&lt;/a&gt; and sometimes it&amp;#8217;s good to get back to the plain and wholesome taste of C. Not for long though: I start to miss the standard containers and algorithms, operator overloading, exceptions etc.
&lt;/p&gt;
&lt;p&gt;I mention this because I&amp;#8217;ve been thinking about what &lt;a href="http://wordaligned.org/articles/entertaining-documentation.html"&gt;makes good software documentation&lt;/a&gt;. If I&amp;#8217;m working with the C standard library, I tend to refer to the &lt;code&gt;man&lt;/code&gt; pages for help, and very fine they are too. Apparently &lt;code&gt;man&lt;/code&gt; pages for the C++ standard library exist but they don&amp;#8217;t come as standard on my platform and I haven&amp;#8217;t installed them &amp;#8212; instead I refer to the &lt;a href="http://www.sgi.com/tech/stl/"&gt;SGI STL Programmer&amp;#8217;s Guide&lt;/a&gt;, which I&amp;#8217;ve downloaded locally for instant and offline access. Now, it&amp;#8217;s clear this guide hasn&amp;#8217;t been actively maintained (the &lt;a href="http://www.sgi.com/tech/stl/whats_new.html"&gt;&amp;#8220;What&amp;#8217;s New&amp;#8221;&lt;/a&gt; page lists nothing more recent than June 2000): it includes non-standard extensions and in some places I&amp;#8217;ve found it&amp;#8217;s no longer correct&lt;a id="fn1link" href="http://wordaligned.org/articles/syntactic-sugar#fn1"&gt;&lt;sup&gt;[1]&lt;/sup&gt;&lt;/a&gt;. Nonetheless, its clear exposition and clean layout make it my first point of reference.
&lt;/p&gt;
&lt;p&gt;C++&amp;#8217;s standard &lt;code&gt;map&lt;/code&gt; container bears a superficial resemblance to Python&amp;#8217;s &lt;code&gt;dict&lt;/code&gt;, associating keys with values (under the surface, a &lt;code&gt;map&lt;/code&gt; is a balanced tree and a &lt;code&gt;dict&lt;/code&gt; is a hash table&lt;a id="fn2link" href="http://wordaligned.org/articles/syntactic-sugar#fn2"&gt;&lt;sup&gt;[2]&lt;/sup&gt;&lt;/a&gt;). Like Python, the &lt;code&gt;[]&lt;/code&gt; operator syntax can be used for container access. Unlike Python, accessing the value associated with a key not present in the map succeeds &amp;#8212; the key gets added and the value is default constructed&lt;a id="fn3link" href="http://wordaligned.org/articles/syntactic-sugar#fn3"&gt;&lt;sup&gt;[3]&lt;/sup&gt;&lt;/a&gt;. &lt;a href="http://www.sgi.com/tech/stl/Map.html#3"&gt;Here&amp;#8217;s how the SGI guide documents&lt;/a&gt; this overloading of &lt;code&gt;operator[]&lt;/code&gt; (emphasis mine).
&lt;/p&gt;
&lt;blockquote&gt;&lt;p&gt;Since &lt;code&gt;operator[]&lt;/code&gt; might insert a new element into the &lt;code&gt;map&lt;/code&gt;, it can&amp;#8217;t possibly be a &lt;code&gt;const&lt;/code&gt; member function. Note that the definition of &lt;code&gt;operator[]&lt;/code&gt; is &lt;strong&gt;extremely simple&lt;/strong&gt;: &lt;code&gt;m[k]&lt;/code&gt; is equivalent to &lt;code&gt;(*((m.insert(value_type(k, data_type()))).first)).second&lt;/code&gt;. Strictly speaking, this member function is unnecessary: it exists only for convenience.
&lt;/p&gt;
&lt;/blockquote&gt;&lt;p&gt;&lt;a href="http://wordaligned.org/articles/entertaining-documentation.html"&gt;Should reference documentation entertain?&lt;/a&gt; This paragraph may not have had me rolling on the floor with laughter, but I did snort in my coffee.
&lt;/p&gt;
&lt;p&gt;Here&amp;#8217;s some compact C++ code designed to showcase the convenience of the operator overload, in this case calculating word frequencies in an istream:
&lt;/p&gt;
&lt;div class="typocode"&gt;

&lt;pre class="prettyprint"&gt;typedef std::string Word;
typedef std::map&amp;lt;Word, int&amp;gt; WordCounts;

void count_words(std::istream &amp;amp; text, WordCounts &amp;amp; word_counts)
{
    Word word;
    while (text &amp;gt;&amp;gt; word)
    {
        ++word_counts[word];
    }
}

&lt;/pre&gt;

&lt;/div&gt;

&lt;p&gt;Using the supplied definition of &lt;code&gt;operator[]&lt;/code&gt;, the loop reads:
&lt;/p&gt;
&lt;div class="typocode"&gt;

&lt;pre class="prettyprint"&gt;    while (text &amp;gt;&amp;gt; word)
    {
        ++(*((word_counts.insert
              (WordCounts::value_type(word, WordCounts::mapped_type()))
              .first))).second;
    }

&lt;/pre&gt;

&lt;/div&gt;

&lt;p&gt;Now, I realise you have to be clever to use C++, and I&amp;#8217;m sure there&amp;#8217;s a better way of laying out this expression, but can really anyone find it &lt;strong&gt;extremely simple&lt;/strong&gt;?
&lt;/p&gt;
&lt;p&gt;Syntactic sugar. Pour it on!
&lt;/p&gt;
&lt;p&gt;&lt;a href="http://www.flickr.com/photos/thomasguest/2828100509/" title="sugar by Thomas Guest, on Flickr"&gt;&lt;img src="http://farm4.static.flickr.com/3240/2828100509_2e0c61bfdd_m.jpg" width="180" height="240" alt="sugar" /&gt;&lt;/a&gt;
&lt;/p&gt;
&lt;hr /&gt;

&lt;p&gt;&lt;a id="fn1" href="http://wordaligned.org/articles/syntactic-sugar#fn1link"&gt;[1]&lt;/a&gt; For example, in the quoted documentation for &lt;code&gt;operator[]&lt;/code&gt;, &lt;code&gt;data_type()&lt;/code&gt; should now read &lt;code&gt;mapped_type()&lt;/code&gt;.
&lt;/p&gt;
&lt;p&gt;&lt;a id="fn2" href="http://wordaligned.org/articles/syntactic-sugar#fn2link"&gt;[2]&lt;/a&gt; TR1 at last brings a standard hash table to C++, which goes under the unlikely name of &lt;code&gt;std::tr1::unordered_map&lt;/code&gt;.
&lt;/p&gt;
&lt;p&gt;&lt;a id="fn3" href="http://wordaligned.org/articles/syntactic-sugar#fn3link"&gt;[3]&lt;/a&gt; Python provides &lt;a href="http://docs.python.org/lib/defaultdict-objects.html"&gt;collections.defaultdict&lt;/a&gt; if you want this behaviour.
&lt;/p&gt;</description>
<dc:date>2008-09-04</dc:date>
<guid>http://wordaligned.org/articles/syntactic-sugar</guid>
<author>tag@wordaligned.org (Thomas Guest)</author>
<link>http://wordaligned.org/articles/syntactic-sugar</link>
<category>Documentation</category>
</item>

<item>
<title>Entertaining Documentation</title>
<description>&lt;div class="toc"&gt;
&lt;h2&gt;Contents&lt;/h2&gt;
&lt;ul&gt;
 &lt;li&gt;&lt;a href="http://wordaligned.org/articles/entertaining-documentation#toca-programmers-first-language" name="toc0" id="toc0"&gt;A Programmer&amp;#8217;s first language&lt;/a&gt;
 &lt;/li&gt;

 &lt;li&gt;&lt;a href="http://wordaligned.org/articles/entertaining-documentation#tocshould-documentation-entertain" name="toc1" id="toc1"&gt;Should documentation entertain?&lt;/a&gt;
 &lt;/li&gt;

 &lt;li&gt;&lt;a href="http://wordaligned.org/articles/entertaining-documentation#tocunix-sets-the-standard" name="toc2" id="toc2"&gt;Unix sets the standard&lt;/a&gt;
 &lt;/li&gt;

 &lt;li&gt;&lt;a href="http://wordaligned.org/articles/entertaining-documentation#tocentertaining-python-documentation" name="toc3" id="toc3"&gt;Entertaining Python documentation&lt;/a&gt;
 &lt;/li&gt;

 &lt;li&gt;&lt;a href="http://wordaligned.org/articles/entertaining-documentation#tocmultimedia-documentation" name="toc4" id="toc4"&gt;Multimedia documentation&lt;/a&gt;
 &lt;/li&gt;

 &lt;li&gt;&lt;a href="http://wordaligned.org/articles/entertaining-documentation#tocducking-the-challenge" name="toc5" id="toc5"&gt;Ducking the challenge&lt;/a&gt;
 &lt;/li&gt;

 &lt;li&gt;&lt;a href="http://wordaligned.org/articles/entertaining-documentation#toclooking-further" name="toc6" id="toc6"&gt;Looking further&lt;/a&gt;
 &lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;h3&gt;&lt;a href="http://wordaligned.org/articles/entertaining-documentation#toc0" name="toca-programmers-first-language" id="toca-programmers-first-language"&gt;A Programmer&amp;#8217;s first language&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;&lt;a href="http://personal.ee.surrey.ac.uk/Personal/L.Wood/double-plus-ungood/" title="BDFL wearing ++ungood T-shirt and snake"&gt;&lt;img src="http://info.ee.surrey.ac.uk/Personal/L.Wood/softwear/ungood-guido-van-rossum-small.jpeg" alt="BDFL wearing ++ungood T-shirt"/&gt;&lt;/a&gt;
&lt;/p&gt;
&lt;p&gt;A recent enquiry on the &lt;a href="http://accu.org/index.php/mailinglists"&gt;ACCU mailing list&lt;/a&gt; asked which programming language would be most suitable for a beginner. The general response favoured Python. This should come as no surprise: &lt;a href="http://www.techworld.com.au/article/255835/-z_programming_languages_python"&gt;elsewhere&lt;/a&gt;, Python&amp;#8217;s benevolent dictator for life explains: 
&lt;/p&gt;
&lt;ol&gt;
 &lt;li&gt;
     how his funky title came about, and 
 &lt;/li&gt;

 &lt;li&gt;
     how (somewhat to his surprise) Python has become increasingly popular for teaching and as a first language.
 &lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Hang on though! Back on the mailing list Mike Small voiced his dissent and spoke up for Perl.
&lt;/p&gt;
&lt;blockquote&gt;&lt;p&gt;&amp;#8230; I also think the online &lt;a href="http://perldoc.perl.org/"&gt;Perl documentation&lt;/a&gt; blows away the online &lt;a href="http://docs.python.org"&gt;Python docs&lt;/a&gt;.  One I can read for entertainment. The other has just the bare facts and is dull, although not as bad as the run of the mill doxygen-type tool generated, fill in the required fields docs you get for mainstream stuff like Java or .NET.
&lt;/p&gt;
&lt;p&gt;Compare&amp;#8230;
&lt;/p&gt;
&lt;p&gt;&lt;a href="http://perldoc.perl.org/perlbot.html"&gt;http://perldoc.perl.org/perlbot.html&lt;/a&gt;
&lt;/p&gt;
&lt;p&gt;&amp;#8230; with &amp;#8230;
&lt;/p&gt;
&lt;p&gt;&lt;a href="http://docs.python.org/ref/types.html"&gt;http://docs.python.org/ref/types.html&lt;/a&gt;
&lt;/p&gt;
&lt;p&gt;(if that&amp;#8217;s an unfair comparison someone feel free to find me an excerpt from the standard python docs that isn&amp;#8217;t a complete snore-fest).
&lt;/p&gt;
&lt;/blockquote&gt;&lt;span id="continue-reading"/&gt;


&lt;h3&gt;&lt;a href="http://wordaligned.org/articles/entertaining-documentation#toc1" name="tocshould-documentation-entertain" id="tocshould-documentation-entertain"&gt;Should documentation entertain?&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Well, this &lt;em&gt;did&lt;/em&gt; surprise me, primarily because it seemed such an unusual charge. It&amp;#8217;s hard &amp;#8212; harder than generally acknowledged, I think &amp;#8212; to write good documentation. In the case of a language reference manual or a standard library user guide, &amp;#8220;good&amp;#8221; would mean accurate, accessible and written as simply as possible. Surely entertainment value doesn&amp;#8217;t get a look in?
&lt;/p&gt;
&lt;p&gt;What&amp;#8217;s more, for a language up there with Perl and Python, many readers face text written by an author from a different culture and in a language which may not be their first. Irony and wit easily get mistranslated.
&lt;/p&gt;
&lt;p&gt;Most &lt;a href="http://c2.com/cgi/wiki?FunnyThingsSeenInSourceCodeAndDocumentation"&gt;jokes in software and its documentation fall flat&lt;/a&gt;. If it&amp;#8217;s hard to write clearly, it&amp;#8217;s almost impossible to write clearly and entertainingly. Guido van Rossum may be a fan of Monty Python, but I imagine he&amp;#8217;s happy leave the humour up to experts like &lt;a href="http://www.cleeseblog.com/"&gt;Cleese&lt;/a&gt; et al.
&lt;/p&gt;
&lt;p&gt;&lt;a href="http://www.cleeseblog.com/"&gt;&lt;img src="http://upload.wikimedia.org/wikipedia/en/a/ae/Tv_muppet_show_john_cleese.jpg" alt="Humour Experts"/&gt;&lt;/a&gt;
&lt;/p&gt;
&lt;p&gt;Maybe.
&lt;/p&gt;
&lt;p&gt;On the other hand, even the &lt;a href="http://www.google.co.uk/search?q=14882%3A2003" title="Search for the current C++ standard"&gt;driest reference in computer programming&lt;/a&gt; makes space for an amusing &amp;#8212; and &lt;em&gt;informative&lt;/em&gt; &amp;#8212; limerick.
&lt;/p&gt;
&lt;p&gt;&lt;a href="http://www-cs-faculty.stanford.edu/~knuth"&gt;&lt;img style="float:right;" src="http://www-cs-faculty.stanford.edu/~uno/don.gif" alt="Don Knuth"/&gt;&lt;/a&gt;
&lt;/p&gt;
&lt;p&gt;I happen to think the standard Python documentation is generally very good. I wouldn&amp;#8217;t recommend Python as a language for learners if this wasn&amp;#8217;t the case. But perhaps Mike Small has a point. The very best software writers can entertain and amuse as well as inform &amp;#8212; Donald Knuth being the outstanding example. &lt;a href="http://www-cs-faculty.stanford.edu/~knuth/taocp.html"&gt;&amp;#8220;The Art of Computer Programming&amp;#8221;&lt;/a&gt; manages to be academic without being dry, a readable reference. Classics like Jon Bentley&amp;#8217;s &amp;#8220;Programming Pearls&amp;#8221; and Abelson and Sussman&amp;#8217;s &lt;a href="http://mitpress.mit.edu/sicp/full-text/book/book.html"&gt;&amp;#8220;Structure and Interpretation of Computer Programs&amp;#8221;&lt;/a&gt; also show what can be achieved. From what I&amp;#8217;ve read of his, &lt;a href="http://www.wall.org/~larry"&gt;Larry Wall&lt;/a&gt; is up there too, and his wit and linguistic energy shine through Perl, even if he didn&amp;#8217;t personally document all of it.
&lt;/p&gt;
&lt;p&gt;&lt;a href="http://www.wall.org/~larry/"&gt;&lt;img src="http://www.linuxjournal.com/files/linuxjournal.com/linuxjournal/articles/033/3394/3394f1.png" alt="Larry Wall"/&gt;&lt;/a&gt;
&lt;/p&gt;

&lt;h3&gt;&lt;a href="http://wordaligned.org/articles/entertaining-documentation#toc2" name="tocunix-sets-the-standard" id="tocunix-sets-the-standard"&gt;Unix sets the standard&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;We mustn&amp;#8217;t equate &amp;#8220;entertaining&amp;#8221; with &amp;#8220;funny&amp;#8221;. The Unix documentation (available at terminal near you via &lt;code&gt;man&lt;/code&gt; or &lt;code&gt;info&lt;/code&gt;) is hardly a chuckle-fest, but its vigour and clarity make it a fine read. Although it never aims to amuse, sometimes its deadpan delivery makes me laugh. Here&amp;#8217;s the BSD documentation for a handy but non-standard C string function:
&lt;/p&gt;
&lt;blockquote&gt;&lt;p&gt;Note that because strlcpy(3) is not defined in any standards, it should only be used when portability is not a concern.
&lt;/p&gt;
&lt;/blockquote&gt;&lt;p&gt;Typing &lt;code&gt;man gamma&lt;/code&gt; on a nearby Linux box generates the painfully funny story of the confusion surrounding the naming and usage of the &lt;a href="http://www.johndcook.com/blog/2008/04/24/how-to-calculate-binomial-probabilities/"&gt;Gamma function&lt;/a&gt;.
&lt;/p&gt;
&lt;blockquote&gt;&lt;p&gt;&lt;strong&gt;HISTORY&lt;/strong&gt;
&lt;/p&gt;
&lt;p&gt;4.2BSD had a &lt;strong&gt;gamma()&lt;/strong&gt; that computed ln(|Gamma(|x|)|), leaving the sign of  Gamma(|x|) in the external integer signgam.  In 4.3BSD the name was changed to &lt;strong&gt;lgamma()&lt;/strong&gt;, and the man page promises
&lt;/p&gt;
&lt;blockquote&gt;&lt;p&gt;&amp;#8220;At some time in the future the name gamma will be rehabilitated and used for the Gamma function&amp;#8221;
&lt;/p&gt;
&lt;/blockquote&gt;&lt;p&gt;This  did indeed happen in 4.4BSD, where &lt;strong&gt;gamma()&lt;/strong&gt; computes the Gamma function (with no effect on signgam).  However, this came too late, and we now have &lt;strong&gt;tgamma()&lt;/strong&gt;, the &amp;#8220;true gamma&amp;#8221; function.
&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;CONFORMING TO&lt;/strong&gt;
&lt;/p&gt;
&lt;p&gt;4.2BSD. Compatible with previous mistakes.
&lt;/p&gt;
&lt;/blockquote&gt;&lt;p&gt;In the main, though, the Unix documentation is plain, understated and accurate. It sets the standard for written software reference documentation. 
&lt;/p&gt;
&lt;p&gt;Maybe this is why Mike enjoys the Perl documentation? I&amp;#8217;ve heard Perl described as &amp;#8220;shell on steroids&amp;#8221;; and while the Perl documentation &lt;em&gt;does&lt;/em&gt; have the look and feel of a man page, there&amp;#8217;s also something a bit more pumped up and manic about it.
&lt;/p&gt;

&lt;h3&gt;&lt;a href="http://wordaligned.org/articles/entertaining-documentation#toc3" name="tocentertaining-python-documentation" id="tocentertaining-python-documentation"&gt;Entertaining Python documentation&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;What about the standard Python documentation? Certainly, it aims for a friendly, informal tone. Here&amp;#8217;s an &lt;a href="http://docs.python.org/tut/node3.html"&gt;excerpt&lt;/a&gt; from the tutorial introduction:
&lt;/p&gt;
&lt;blockquote&gt;&lt;p&gt;By the way, the language is named after the BBC show &amp;#8220;Monty Python&amp;#8217;s Flying Circus&amp;#8221; and has nothing to do with nasty reptiles. Making references to Monty Python skits in documentation is not only allowed, it is encouraged! 
&lt;/p&gt;
&lt;/blockquote&gt;&lt;p&gt;Later, this same tutorial makes good on that promise, taking us through the subtleties of &lt;a href="http://docs.python.org/tut/node6.html"&gt;keyword arguments&lt;/a&gt; with reference to the famous &lt;a href="http://en.wikipedia.org/wiki/Dead_Parrot"&gt;dead parrot sketch&lt;/a&gt;.
&lt;/p&gt;
&lt;blockquote&gt;&lt;p&gt;Functions can also be called using keyword arguments of the form &amp;#8220;&lt;tt&gt;keyword = value&lt;/tt&gt;&amp;#8221;.  For instance, the following function:&lt;/p&gt;
&lt;pre&gt;
def parrot(voltage, state='a stiff', action='voom', type='Norwegian Blue'):
    print "-- This parrot wouldn't", action,
    print "if you put", voltage, "volts through it."
    print "-- Lovely plumage, the", type
    print "-- It's", state, "!"
&lt;/pre&gt;
&lt;p&gt;could be called in any of the following ways:&lt;/p&gt;
&lt;pre&gt;
parrot(1000)
parrot(action = 'VOOOOOM', voltage = 1000000)
parrot('a thousand', state = 'pushing up the daisies')
parrot('a million', 'bereft of life', 'jump')
&lt;/pre&gt;&lt;/blockquote&gt;

&lt;p&gt;Well, I guess it beats the weary employee database examples found in so many programming texts. Sadly, though, the parrot sketch has been repeated too often, and in this case the &amp;#8220;snore-fest&amp;#8221; epithet sticks.
&lt;/p&gt;

&lt;h3&gt;&lt;a href="http://wordaligned.org/articles/entertaining-documentation#toc4" name="tocmultimedia-documentation" id="tocmultimedia-documentation"&gt;Multimedia documentation&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Mike talks explicitly about &amp;#8220;online documentation&amp;#8221;, and these days online (for programmers, at least) implies:
&lt;/p&gt;
&lt;ul&gt;
 &lt;li&gt;
     a decent browser
 &lt;/li&gt;

 &lt;li&gt;
     plenty of pixels
 &lt;/li&gt;

 &lt;li&gt;
     a high bandwidth connection
 &lt;/li&gt;

 &lt;li&gt;
     javascript
 &lt;/li&gt;

 &lt;li&gt;
     excellent graphics
 &lt;/li&gt;

 &lt;li&gt;
     a means to collaborate and contribute
 &lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;These factors, in combination, enable some novel possibilities for documentation. Hyperlinks provide basic navigation; mix in folding documentation and search facilities, and readers quickly find what they&amp;#8217;re looking for. There&amp;#8217;s ample space for examples and comments, for contributions, for diagrams, for &lt;a href="http://showmedo.com/videos/python"&gt;audio and video&lt;/a&gt; content. Why bother reading how to create a &lt;a href="http://showmedo.com/videos/series?name=PythonWxPythonBeginnersSeries"&gt;graphical user interface using wxPython&lt;/a&gt;, for example, when you can effectively look over someone&amp;#8217;s shoulder while they walk through its features?
&lt;/p&gt;
&lt;p&gt;I said earlier that the Unix documentation set the standard for written documentation. If you&amp;#8217;re reading at a terminal 40 rows deep and 72 columns wide, with limited font rendering and graphical capabilities, you couldn&amp;#8217;t do better. If you have a larger screen and more than one monitor, maybe you can.
&lt;/p&gt;

&lt;h3&gt;&lt;a href="http://wordaligned.org/articles/entertaining-documentation#toc5" name="tocducking-the-challenge" id="tocducking-the-challenge"&gt;Ducking the challenge&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Returning to Mike Small&amp;#8217;s challenge:
&lt;/p&gt;
&lt;blockquote&gt;&lt;p&gt;&amp;#8230; someone feel free to find me an excerpt from the standard python docs that isn&amp;#8217;t a complete snore-fest.
&lt;/p&gt;
&lt;/blockquote&gt;&lt;p&gt;I can see where he&amp;#8217;s coming from, but I disagree. In my opinion the Python documentation is well-organised, accessible and accurate. The documentation for some modules may be rather thin, but that&amp;#8217;s the strongest criticism I would make. I do struggle to single out an entertaining excerpt, though: the documentation aims to inform, and at that it does well.
&lt;/p&gt;

&lt;h3&gt;&lt;a href="http://wordaligned.org/articles/entertaining-documentation#toc6" name="toclooking-further" id="toclooking-further"&gt;Looking further&lt;/a&gt;&lt;/h3&gt;
&lt;div class="amazon"&gt;&lt;a href="http://www.amazon.com/gp/product/0596007973?ie=UTF8&amp;amp;tag=wordalig-20"&gt;&lt;img src="http://wordaligned.org/images/books/python-cookbook.jpg" alt="Python Cookbook cover"/&gt;&lt;/a&gt;&lt;/div&gt;

&lt;p&gt;If you&amp;#8217;re prepared to venture away from &lt;a href="http://docs.python.org"&gt;docs.python.org&lt;/a&gt;, you&amp;#8217;ll find the Python community is served by some &lt;a href="http://diveintomark.org" title="Mark Pilgrim"&gt;talented&lt;/a&gt; &lt;a href="http://www.dabeaz.com" title="David Beazley"&gt;and&lt;/a&gt; &lt;a href="http://www.aleax.it/python_mat_en.html" title="Alex Martelli"&gt;entertaining&lt;/a&gt; writers. I&amp;#8217;ve &lt;a href="http://wordaligned.org/articles/essential-python-reading-list.html" title="My essential Python reading list"&gt;mentioned&lt;/a&gt; the &lt;a href="http://www.amazon.com/gp/product/0596007973?ie=UTF8&amp;amp;amp;tag=wordalig-20"&gt;Python Cookbook&lt;/a&gt; before: the entire text can now be found &lt;a href="http://www.ubookcase.com/book/Oreilly/Python.Cookbook.2nd.edition"&gt;online&lt;/a&gt;, but I recommend getting hold of hard-copy so you can sit down and read it from cover to cover &amp;#8212; definite armchair material. Many programmers contributed recipes to the book but it&amp;#8217;s pulled together by some skillful editing and by the fine essays which introduce each chapter.
&lt;/p&gt;
&lt;p&gt;&lt;a href="http://www.flickr.com/photos/codebear/7409127/"&gt;&lt;img style="float:left;" src="http://static.flickr.com/4/7409127_53df0dd56c_s.jpg" alt="Tim Peters by codebear"/&gt;&lt;/a&gt;
&lt;/p&gt;
&lt;p&gt;Tim Peters introduces the chapter on &lt;a href="http://www.ubookcase.com/book/Oreilly/Python.Cookbook.2nd.edition/0596007973/ch05-77003.html"&gt;Searching and Sorting&lt;/a&gt; and if you scratch at Python a little harder you&amp;#8217;ll find plenty more written by him. &lt;a href="http://svn.python.org/projects/python/trunk/Objects/listsort.txt"&gt;Here are his notes&lt;/a&gt; on Python&amp;#8217;s hybrid sort algorithm. &lt;a href="http://svn.python.org/projects/python/trunk/Objects/listobject.c"&gt;Here&amp;#8217;s&lt;/a&gt; the implementation. Enjoy!
&lt;/p&gt;</description>
<dc:date>2008-08-27</dc:date>
<guid>http://wordaligned.org/articles/entertaining-documentation</guid>
<author>tag@wordaligned.org (Thomas Guest)</author>
<link>http://wordaligned.org/articles/entertaining-documentation</link>
<category>Documentation</category>
</item>

<item>
<title>Paging through the Manual using Access Keys</title>
<description>&lt;h3&gt;Random Access&lt;/h3&gt;
&lt;p&gt;These days most reference manuals are designed to be read in a web browser. This has many advantages, especially for random access. Standard search techniques bring up the page you want &amp;#8212; and section-hopping is a snip.
&lt;/p&gt;

&lt;h3&gt;Sequential Access&lt;/h3&gt;
&lt;p&gt;Sequential access may be less convenient. Suppose you actually want to &lt;em&gt;read&lt;/em&gt; the manual. Maybe you&amp;#8217;re evaluating a new &lt;a href="http://scons.org"&gt;build technology&lt;/a&gt;, and you&amp;#8217;d like to flick through the manual to get an overview of how it hangs together. Or maybe you&amp;#8217;ve been charged with &lt;a href="http://wordaligned.org/docs/cvs2svn/index.html"&gt;upgrading your company&amp;#8217;s source control system&lt;/a&gt; from CVS, and you need to read the &lt;a href="http://svnbook.red-bean.com/"&gt;Subversion manual&lt;/a&gt; carefully, from start to finish.
&lt;/p&gt;
&lt;p&gt;If the manual is well designed this shouldn&amp;#8217;t be hard. Each page will have a prominent &lt;strong&gt;Next&lt;/strong&gt; link; you keep clicking this link to advance through the manual. This does have problems, though. If the link moves or your mouse moves (which, after all, is what mice are meant to do) you waste effort concentrating on pointer placement instead of following what you&amp;#8217;re reading.
&lt;/p&gt;

&lt;h3&gt;Hot Keys&lt;/h3&gt;
&lt;p&gt;My feed reader client, &lt;a href="http://reader.google.com"&gt;Google Reader&lt;/a&gt;, is designed to allow you to skim through a mountain of new material sequentially, and you drive it all using the largest key on the keyboard: the spacebar. This apparent simplicity is a product of good interface design and hardcore javascript.
&lt;/p&gt;
&lt;p&gt;&lt;a href="http://docbook.org"&gt;DocBook&lt;/a&gt; offers a number of lo-tech solutions to this problem. The first, which shouldn&amp;#8217;t be neglected, is that it&amp;#8217;s possible to convert DocBook sources into something more suited for paging though at leisure &amp;#8212; hard-copy! 
&lt;/p&gt;
&lt;p&gt;Restricting ourselves to HTML output, DocBook can generate output as single block of HTML, which you can then page through using the spacebar (or indeed by using the mouse wheel, but there&amp;#8217;s no need for pointer precision). For chunked HTML, DocBook by default places &lt;a href="http://en.wikipedia.org/wiki/Access_keys"&gt;access keys&lt;/a&gt; on each page:
&lt;/p&gt;
&lt;ul&gt;
 &lt;li&gt;
     &lt;strong&gt;N&lt;/strong&gt; takes you to the next page 
 &lt;/li&gt;

 &lt;li&gt;
     &lt;strong&gt;P&lt;/strong&gt; takes you to the previous page 
 &lt;/li&gt;

 &lt;li&gt;
     &lt;strong&gt;U&lt;/strong&gt; takes you up a level
 &lt;/li&gt;

 &lt;li&gt;
     &lt;strong&gt;H&lt;/strong&gt; takes you to the top-level
 &lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Once you discover these keys and once you&amp;#8217;ve worked out how exactly to use them on your platform, you&amp;#8217;ll use them more and more.
&lt;/p&gt;
&lt;p&gt;&lt;img src="http://wordaligned.org/docs/images/prev.png" alt="Previous" /&gt;
   &lt;img src="http://wordaligned.org/docs/images/up.png" alt="Up" /&gt;
   &lt;img src="http://wordaligned.org/docs/images/home.png" alt="Home" /&gt;
   &lt;img src="http://wordaligned.org/docs/images/next.png" alt="Next" /&gt;
&lt;/p&gt;

&lt;h3&gt;Paging through Word Aligned using Access Keys&lt;/h3&gt;
&lt;p&gt;&lt;a href="http://wordaligned.org/"&gt;Word Aligned&lt;/a&gt; is a time-ordered chain of articles which you can page through using access keys.
&lt;/p&gt;
&lt;ul&gt;
 &lt;li&gt;
     &lt;strong&gt;N&lt;/strong&gt; takes you to the next article (newer)
 &lt;/li&gt;

 &lt;li&gt;
     &lt;strong&gt;P&lt;/strong&gt; takes you to the previous article (older)
 &lt;/li&gt;

 &lt;li&gt;
     &lt;strong&gt;H&lt;/strong&gt; takes you home
 &lt;/li&gt;
&lt;/ul&gt;</description>
<dc:date>2007-11-19</dc:date>
<guid>http://wordaligned.org/articles/paging-through-the-manual-using-access-keys</guid>
<author>tag@wordaligned.org (Thomas Guest)</author>
<link>http://wordaligned.org/articles/paging-through-the-manual-using-access-keys</link>
<category>Documentation</category>
</item>

<item>
<title>RTM vs STW</title>
<description>&lt;h3&gt;Virtual hosting problems&lt;/h3&gt;
&lt;p&gt;A colleague, call him Lem E Tweakit, was suffering from code-rage. I could tell from the way he was shoving his mouse around, hammering the keyboard and muttering. 
&lt;/p&gt;
&lt;p&gt;&amp;#8220;Anything I can help with?&amp;#8221;
&lt;/p&gt;
&lt;p&gt;&amp;#8220;Yeah, maybe. Have you ever set up &lt;a href="http://httpd.apache.org/"&gt;Apache&lt;/a&gt; on Windows?&amp;#8221;
&lt;/p&gt;
&lt;p&gt;I have, but never to do more than serve static files, run CGI scripts, that sort of thing. Given the choice, I&amp;#8217;ll use a Unix-based system for a web server every time, and I prefer &lt;a href="http://www.lighttpd.net/"&gt;lighttpd&lt;/a&gt;, but anyway, what&amp;#8217;s the problem?
&lt;/p&gt;
&lt;p&gt;Virtual hosts weren&amp;#8217;t working, Lem said. He&amp;#8217;d googled around, found some instructions written up by someone who&amp;#8217;d overcome a similar problem, followed the instructions, found they didn&amp;#8217;t work, googled a bit more, found some slightly different instructions, they didn&amp;#8217;t work either &amp;#8230; and now he was stuck in a cycle of tweaking &lt;code&gt;httpd.conf&lt;/code&gt;, restarting the web server, refreshing his browser to see if it had worked, googling. 
&lt;/p&gt;
&lt;p&gt;Like he said, virtual hosts weren&amp;#8217;t working! Were they even &lt;em&gt;supposed&lt;/em&gt; to work on Windows?
&lt;/p&gt;
&lt;span id="continue-reading"/&gt;


&lt;h3&gt;Search the Web&lt;/h3&gt;
&lt;p&gt;In a recent &lt;a href="http://www.artima.com/weblogs/viewpost.jsp?thread=208868"&gt;post&lt;/a&gt; on his artima weblog Andy Dent suggests that when interviewing programmers, you should test their ability to search the web. He adds you should consider training existing employees in this skill.
&lt;/p&gt;
&lt;p&gt;I&amp;#8217;ve got mixed feelings about this. Certainly you shouldn&amp;#8217;t expect candidates to carry everything around in their heads (though I &lt;em&gt;would&lt;/em&gt; expect someone who puts &amp;#8220;Experienced C Programmer&amp;#8221; on a CV to be able to write syntactically correct C without access to a reference &amp;#8212; it&amp;#8217;s alarming how many can&amp;#8217;t!)
&lt;/p&gt;

&lt;h3&gt;Read the Manual&lt;/h3&gt;
&lt;p&gt;What I consider important is how exactly someone goes about finding information. The web search is a great tool but it shouldn&amp;#8217;t always be the first one we reach for. Continuing our earlier example, for C the most important reference has to be K &amp;amp; R, and I&amp;#8217;d expect any serious C programmer to know and use this book. And Unix programmers call on &lt;code&gt;man&lt;/code&gt; and &lt;code&gt;info&lt;/code&gt; even if the search quality for these references isn&amp;#8217;t quite up to google&amp;#8217;s standards.
&lt;/p&gt;
&lt;p&gt;C and Unix are showing their age, though. What about something more up to date, something more closely aligned to the internet? Python, say, to pick something I claim to know about.
&lt;/p&gt;
&lt;p&gt;Again, if I need Python help I don&amp;#8217;t start with a web search, even though a lot of the time I do end up referring to web pages. For simple queries I try &lt;code&gt;help()&lt;/code&gt; in an interpreted session. For full answers, I point my web browser at the official documentation, which, incidentally, I have bookmarked to use a location on my hard-disk &amp;#8212; a location which came as part of my standard Python installation. This means I have direct access to the documents on- or off-line, it&amp;#8217;s fractionally quicker than going to &lt;a href="http://docs.python.org"&gt;docs.python.org&lt;/a&gt;, and I&amp;#8217;m guaranteed to get the documentation for the Python version I&amp;#8217;m using. If I &lt;em&gt;still&lt;/em&gt; can&amp;#8217;t find what I&amp;#8217;m looking for then there are a number of options: the Python Cookbook, a web search, email a friend, comp.lang.python.
&lt;/p&gt;
&lt;p&gt;If it&amp;#8217;s a non-standard Python library I&amp;#8217;m using (the Python Imaging Library for example) then again I&amp;#8217;ll try the official documentation for that library first; and if this documentation doesn&amp;#8217;t help then I probably won&amp;#8217;t be using the library much longer (the PIL documentation is fine, I use it all the time).
&lt;/p&gt;

&lt;h3&gt;No, Search the Web&lt;/h3&gt;
&lt;p&gt;I won&amp;#8217;t pretend I always read the manual and never search the web. Far from it. On many occasions a web search turns up something that&amp;#8217;s better than the official manual. &lt;span /&gt;On other occasions I want a quick fix: perhaps I&amp;#8217;m using a technology I really don&amp;#8217;t care much about, and am therefore reluctant to invest any great effort in. Vi for example, some Java framework, or Open Office.
&lt;/p&gt;
&lt;p&gt;Does &lt;a href="http://httpd.apache.org/"&gt;Apache httpd&lt;/a&gt; fall into this category? Of course not. It may not be my &lt;a href="http://www.lighttpd.net/"&gt;web server of choice&lt;/a&gt;, but it&amp;#8217;s the world&amp;#8217;s web server of choice, and definitely something a programmer should know about.
&lt;/p&gt;

&lt;h3&gt;Apache Virtual Hosts&lt;/h3&gt;
&lt;p&gt;I watched Lem more closely. The first thing I noticed was that when he restarted Apache &amp;#8212; by clicking an icon &amp;#8212; a console window transiently appeared, and I&amp;#8217;m pretty sure there was an error message in that window. What was it trying to say?
&lt;/p&gt;
&lt;p&gt;Lem pulled up the server error log. Sure enough, it recorded an error found in the configuration file. Not a fatal error, otherwise the server wouldn&amp;#8217;t have started, but a strong indication something wasn&amp;#8217;t right.
&lt;/p&gt;
&lt;p&gt;&amp;#8220;I know, I&amp;#8217;ve tried googling for that, but &amp;#8230;&amp;#8221;
&lt;/p&gt;
&lt;p&gt;I&amp;#8217;d also noticed an icon linking to the online Apache documentation: look, there, right next to the &amp;#8220;Start Apache&amp;#8221; icon! 
&lt;/p&gt;
&lt;p&gt;We clicked it and found ourselves on the Apache HTTP Server &lt;a href="http://httpd.apache.org/docs/2.2/"&gt;documentation&lt;/a&gt; page. 
&lt;/p&gt;
&lt;img src="http://wordaligned.org/files/apache-22-docs.jpeg" alt="Apache 2.2 documentation page"/&gt;

&lt;p&gt;As you can see, there&amp;#8217;s a prominent search widget at the top of the page. Lem instinctively typed &amp;#8220;Virtual Hosts&amp;#8221; into the text field and clicked the button.
&lt;/p&gt;
&lt;p&gt;&amp;#8220;It&amp;#8217;s just a google search,&amp;#8221; he said, disgusted. Hadn&amp;#8217;t Google been letting him down all morning?
&lt;/p&gt;
&lt;p&gt;Not quite! It&amp;#8217;s actually a google &lt;em&gt;site&lt;/em&gt; search &amp;#8212; you do know google can return you search results within a specific site? As it happened, the first hit from this search was the one we wanted, one we should have spotted on the front page of the documentation if we&amp;#8217;d not been diverted by the search button.
&lt;/p&gt;
&lt;p&gt;After about 5 minutes of careful reading we&amp;#8217;d fixed &lt;code&gt;httpd.conf&lt;/code&gt;, eliminated the warning, and virtual hosting was working.
&lt;/p&gt;
&lt;hr /&gt;

&lt;p&gt;&lt;a href="http://www.google.com/search?q=Lem+E+Tweakit"&gt;Find out&lt;/a&gt; about Lem E Tweakit, including address and salary details.
&lt;/p&gt;</description>
<dc:date>2007-11-02</dc:date>
<guid>http://wordaligned.org/articles/rtm-vs-stw</guid>
<author>tag@wordaligned.org (Thomas Guest)</author>
<link>http://wordaligned.org/articles/rtm-vs-stw</link>
<category>Documentation</category>
</item>

<item>
<title>Collaborative documentation tools</title>
<description>&lt;p&gt;Version control is one of the unquestioned foundations of software development: while there may be discussion about which version control system to use, whether or not to allow concurrent modification, how to secure access to the system etc., noone would think of undertaking any serious project without using version control. Quite simply it&amp;#8217;s how a team of people can work on the same codebase at the same time.
&lt;/p&gt;
&lt;p&gt;Yet recently I &lt;a href="http://wordaligned.org/articles/a-world-without-version-control.html"&gt;described&lt;/a&gt; a project where version control was not used. Instead, the team relied on ad-hoc file sharing, circulating source files by email and by copying them to a shared folder. Concurrent modifications were prohibited. System integration was left until the last minute. Inevitably the project manager worked through the night to meet the delivery deadline &amp;#8212; a proven technique for bug creation. &lt;span /&gt;What&amp;#8217;s worse, noone on the team really questioned this mode of operation.
&lt;/p&gt;
&lt;span id="continue-reading"/&gt;


&lt;h3&gt;Why?&lt;/h3&gt;
&lt;p&gt;Because the final system was a document. Because the source files (the sections of this document, that is) were edited using Microsoft Word. Because the team &amp;#8212; a combination of sales people, business managers and technical experts &amp;#8212; knew no better way of working &lt;sup&gt;&lt;a href="http://wordaligned.org/articles/collaborative-documentation-tools#footnote1"&gt;[1]&lt;/a&gt;&lt;/sup&gt;.
&lt;/p&gt;
&lt;p&gt;The sad truth is, I don&amp;#8217;t know of any documentation system which could have coped with the requirements of this project. Version control isn&amp;#8217;t the problem. Subversion (for example) is more than up to the job of managing the source files, by which I mean not that it allows secure, networked access to the files, backups, revision control and so on &amp;#8212; that&amp;#8217;s a given; but rather that it comes with user-friendly clients such as &lt;a href="http://tortoisesvn.tigris.org/"&gt;TortoiseSVN&lt;/a&gt;. You don&amp;#8217;t need to be a programmer to use TortoiseSVN.
&lt;/p&gt;

&lt;h3&gt;LaTeX and DocBook&lt;/h3&gt;
&lt;p&gt;No, the problem is with the documentation systems themselves. You &lt;em&gt;do&lt;/em&gt; need to be a programmer to work with a system based on &lt;a href="http://www.latex-project.org/"&gt;LaTeX&lt;/a&gt; or on &lt;a href="http://docbook.org"&gt;DocBook&lt;/a&gt; &amp;#8212; or at least to give up Microsoft Word in favour of such a system. Yet the benefits, if you can make the move, &lt;a href="http://wordaligned.org/articles/softdoc.html"&gt;are substantial&lt;/a&gt;: you can assemble documents from separate sections, you can view differences between versions, more than one person can work on the same section at the same time, you can generate various output formats from a single set of sources, branching and merging become possible, as do more sophisticated text transformations, and searching multiple documents becomes a snip.
&lt;/p&gt;

&lt;h3&gt;Google documents&lt;/h3&gt;
&lt;p&gt;I recently tried out the Google documents word processor, which I&amp;#8217;d rather assumed I&amp;#8217;d like. It &lt;em&gt;has&lt;/em&gt; got many things right &amp;#8212; document access, for example. You control who can view the document, who can edit the document, and shared access is as simple as an internet connection. Integration with the email client was equally sweet, assuming you use &lt;a href="http://mail.google.com"&gt;gmail&lt;/a&gt; that is. Document versioning and differencing is also in place. Unfortunately I&amp;#8217;d say there&amp;#8217;s still some way to go with the basic document editing, which I found sluggish and clunky.
&lt;/p&gt;
&lt;p&gt;I wouldn&amp;#8217;t recommend it, at least not yet, but, like the team I described, I don&amp;#8217;t really know of anything better. Collaborative, networked documentation tools are the way forwards, I suggest; and I think these tools could usefully steal many ideas from successful software development tools. They&amp;#8217;re just not there yet.
&lt;/p&gt;
&lt;p&gt;&lt;hr /&gt;
   &lt;a id="footnote1"&gt;[1]&lt;/a&gt;
&lt;/p&gt;
&lt;p&gt;I&amp;#8217;ve experienced worse. At one place I worked software development activities were organised into separate projects. Each project had its own documentation folder on a networked drive; beneath this folder a number of standard subfolders contained design, planning, specification documents and so on. Documents within a project were indexed using a spreadsheet in the top-level folder. A master spreadsheet indexed all the spreadsheets. Each project had a project number. Each document in each project had a document number. There were spreadsheets containing the numbers. Documents included version numbers in their filenames: &lt;code&gt;N237571_tasklist_V37.doc&lt;/code&gt;. To edit a document you had to copy it to its new file name then edit its properties to set the internal version number equal to the internal one, then fill out the document history form. To revert a document, someone had to dig through the backups. Everyone had write access to everything. Concurrent modifications were outlawed. I shudder at the memory.
&lt;/p&gt;</description>
<dc:date>2007-08-10</dc:date>
<guid>http://wordaligned.org/articles/collaborative-documentation-tools</guid>
<author>tag@wordaligned.org (Thomas Guest)</author>
<link>http://wordaligned.org/articles/collaborative-documentation-tools</link>
<category>Documentation</category>
</item>

<item>
<title>A world without version control</title>
<description>&lt;p&gt;The requirements were open to interpretation but the customer had fixed a delivery date. Everything had to be completed by the end of the month. The team quickly agreed how to tackle the project:
&lt;/p&gt;
&lt;ul&gt;
 &lt;li&gt;
     the system would be broken down into components
 &lt;/li&gt;

 &lt;li&gt;
     development of the components would be shared, but each component would have a single owner who would take primary responsibility for its completion
 &lt;/li&gt;

 &lt;li&gt;
     the project manager would take sole responsibility for integrating the components into the final system
 &lt;/li&gt;

 &lt;li&gt;
     all work would be peer-reviewed
 &lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Because of the short timescales, the team adopted a simple project infrastructure:
&lt;/p&gt;
&lt;ul&gt;
 &lt;li&gt;
     the source for the components would be shared using a combination of email and a networked drive
 &lt;/li&gt;

 &lt;li&gt;
     concurrent modification of the components was prohibited; each component&amp;#8217;s owner took responsibility for evaluating and merging in changes suggested by other team members
 &lt;/li&gt;

 &lt;li&gt;
     change logs would be included in the component headers
 &lt;/li&gt;

 &lt;li&gt;
     version numbers would be included in the component headers, and reinforced using a simple file naming scheme (component_V001, component_V002, component_V003, &amp;#8230;)
 &lt;/li&gt;

 &lt;li&gt;
     final assembly of the components into the finished system would be done at the end of the project
 &lt;/li&gt;

 &lt;li&gt;
     to produce the best possible finished system, final assembly would be left until the penultimate day of the month
 &lt;/li&gt;
&lt;/ul&gt;</description>
<dc:date>2007-08-03</dc:date>
<guid>http://wordaligned.org/articles/a-world-without-version-control</guid>
<author>tag@wordaligned.org (Thomas Guest)</author>
<link>http://wordaligned.org/articles/a-world-without-version-control</link>
<category>Documentation</category>
</item>

<item>
<title>Martin Fowler on Soft Documentation</title>
<description>&lt;p&gt;A while ago I &lt;a href="http://www.wordaligned.org/softdoc/index.html"&gt;wrote&lt;/a&gt; about my experience of writing a user
   manual using a &lt;a href="http://docbook.org"&gt;DocBook&lt;/a&gt; toolchain. DocBook uses XML to structure
   your document&amp;#8217;s content in a presentation-neutral format; you then
   apply XSLT transformations to render the document in various forms &amp;#8212;
   in my case, chunked HTML and printable PDF.
&lt;/p&gt;
&lt;p&gt;More recently I found myself at &lt;a href="http://martinfowler.com"&gt;Martin Fowler&lt;/a&gt;&amp;#8217;s website, reading an
   &lt;a href="http://martinfowler.com/articles/writingInXml.html"&gt;article&lt;/a&gt; titled &lt;em&gt;&amp;#8220;Writing with XML&amp;#8221;&lt;/em&gt;. Although he hadn&amp;#8217;t
   adopted &lt;a href="http://docbook.org"&gt;DocBook&lt;/a&gt; as his XML starting point, his experiences and
   conclusions overlap considerably with my own. One extra bonus he found
   was that using an XML master document provided a good start for
   &lt;a href="http://martinfowler.com/articles/writingInXml.html#id2249385"&gt;testing the code samples&lt;/a&gt;
   in his book.
&lt;/p&gt;
&lt;p&gt;To summarise this summary: I think we&amp;#8217;d both do it the same way again!
&lt;/p&gt;</description>
<dc:date>2006-12-14</dc:date>
<guid>http://wordaligned.org/articles/martin-fowler-on-soft-documentation</guid>
<author>tag@wordaligned.org (Thomas Guest)</author>
<link>http://wordaligned.org/articles/martin-fowler-on-soft-documentation</link>
<category>Documentation</category>
</item>

<item>
<title>Wiki Markup</title>
<description>&lt;p&gt;I&amp;#8217;m a big fan of wikis but one irritation is that they all have their
   own markup syntax. I guess that&amp;#8217;s because the wiki is one of those sweet
   web applications that every programmer wants to reinvent.
&lt;/p&gt;
&lt;p&gt;On a fairly regular basis, and in order of personal preference, I use:
&lt;/p&gt;
&lt;ul&gt;
 &lt;li&gt;
     &lt;a href="http://daringfireball.net/projects/markdown/"&gt;Markdown&lt;/a&gt;
 &lt;/li&gt;

 &lt;li&gt;
     &lt;a href="http://boost.org/tools/quickbook"&gt;QuickBook&lt;/a&gt;
 &lt;/li&gt;

 &lt;li&gt;
     &lt;a href="http://trac.edgewall.org/wiki/TracWiki"&gt;TracWiki&lt;/a&gt;
 &lt;/li&gt;

 &lt;li&gt;
     &lt;a href="http://www.textism.com/tools/textile/"&gt;Textile&lt;/a&gt;
 &lt;/li&gt;

 &lt;li&gt;
     &lt;a href="http://www.mediawiki.org/"&gt;MediaWiki&lt;/a&gt;
 &lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;There&amp;#8217;s some convergence between these mini-languages, but not a whole
   lot. Ampersands and angle brackets are of course converted into
   HTML-safe equivalents. Paragraphs and bulleted lists usually work as
   you&amp;#8217;d expect. The other primary ingredients &amp;#8212; headings, links, images
   &amp;#8212; vary between implementations.
&lt;/p&gt;
&lt;p&gt;This post describes what I think makes a good wiki markup syntax and why
   I rate &lt;a href="http://daringfireball.net/projects/markdown/"&gt;Markdown&lt;/a&gt; so highly.
&lt;/p&gt;
&lt;span id="continue-reading"/&gt;


&lt;h3&gt;Bigger != Better&lt;/h3&gt;
&lt;p&gt;Given the number of wiki variants out there, most users are unlikely
   to remember even the basics of any single wiki markup
   syntax.  Ideally, then, the wiki markup rules should be simple &amp;#8212;
   simple enough to fit on a post-it note (or a post-it note sized
   block of pixels on a screen) which the user can refer to.
&lt;/p&gt;
&lt;p&gt;I wouldn&amp;#8217;t use this criterion to rule out a more complex markup
   syntax. &lt;a href="http://www.mediawiki.org/"&gt;MediaWiki&lt;/a&gt; is probably about as complex a markup as there
   is but it still manages to keep the simple things simple.
&lt;/p&gt;
&lt;p&gt;All things being equal, though, I prefer a compact set of markup rules.
&lt;/p&gt;

&lt;h3&gt;Well Documented&lt;/h3&gt;
&lt;p&gt;It goes without saying that the wiki markup rules should be well
   documented. How else is an end user to work out what to do?
&lt;/p&gt;
&lt;p&gt;I think it&amp;#8217;s also plain that a wiki markup should be self-documented,
   by which I mean the
   &lt;a href="http://daringfireball.net/projects/markdown/syntax"&gt;documentation&lt;/a&gt;
   should be written using
   &lt;a href="http://daringfireball.net/projects/markdown/syntax.text"&gt;itself&lt;/a&gt;.
&lt;/p&gt;

&lt;h3&gt;Escape to (X)HTML&lt;/h3&gt;
&lt;p&gt;Noone expects a wiki syntax to do everything HTML can, so there&amp;#8217;d
   better be a way of escaping the normal wiki markup rules to include
   raw HTML in a document.  For example, there have been a number of
   attempts to provide a wiki syntax for tables, but none works quite as well
   as an HTML table &amp;#8212; so a wiki should simply provide a way for HTML
   tables to be introduced into a document.
&lt;/p&gt;
&lt;p&gt;There&amp;#8217;s another side to this. Sometimes we simply want to stop normal
   wiki processing from happening. If the underscore is normally used to
   emphasize words &lt;em&gt;like this&lt;/em&gt;, then we&amp;#8217;d better be able to escape this
   behaviour when we want to see the underscores _like this_.
&lt;/p&gt;
&lt;div class="typocode"&gt;&lt;div class="codetitle"&gt;escaping underscores with Markdown&lt;/div&gt;

&lt;pre class="prettyprint"&gt;If the underscore is normally used to emphasize
words _like this_, then we'd better be able to
escape this behaviour when we want to see
the underscores \_like this\_.

&lt;/pre&gt;

&lt;/div&gt;


&lt;h3&gt;Conformance Tests&lt;/h3&gt;
&lt;p&gt;A good wiki markup syntax may well have a life outside its native wiki
   implementation. It could be used in other wikis or blogs. It could become a
   general purpose HTML templating application.
&lt;/p&gt;
&lt;p&gt;If it&amp;#8217;s to have any hope of standing on its own like this, it had
   better come with a decent set of conformance tests: that is, a set of
   test inputs and expected outputs.
&lt;/p&gt;
&lt;p&gt;The existence of such a suite helps explain why you can find
   trustworthy &lt;a href="http://daringfireball.net/projects/markdown/"&gt;Markdown&lt;/a&gt; implementations in a variety of popular
   high-level languages (Perl, PHP, Python, Ruby &amp;#8230;).
&lt;/p&gt;

&lt;h3&gt;Suck it and See&lt;/h3&gt;
&lt;p&gt;Most wikis provide a page to be used for experimentation &amp;#8212; it&amp;#8217;s often
   called something like &amp;#8220;SandBox&amp;#8221;. A superior better wiki markup syntax
   will also host such a facility online. You can try out Markdown
   &lt;a href="http://daringfireball.net/projects/markdown/dingus"&gt;here&lt;/a&gt; and
   Textile &lt;a href="http://www.textism.com/tools/textile/"&gt;here&lt;/a&gt;.
&lt;/p&gt;

&lt;h3&gt;And the Winner is &amp;#8230;&lt;/h3&gt;
&lt;p&gt;No suprises here: I said at the outset that &lt;a href="http://daringfireball.net/projects/markdown/"&gt;Markdown&lt;/a&gt; is my favourite. It
   more than meets all the criteria mentioned above which already puts
   it one step ahead of most alternatives. It also wins points for:
&lt;/p&gt;
&lt;ol&gt;
 &lt;li&gt;&lt;p&gt;Explaining its design goals so clearly:
&lt;/p&gt;
&lt;blockquote&gt;&lt;p&gt;Readability, however, is emphasized above all else. A
   Markdown-formatted document should be publishable as-is, as plain
   text, without looking like it&amp;#8217;s been marked up with tags or formatting
   instructions.
&lt;/p&gt;
&lt;/blockquote&gt;
 &lt;/li&gt;

 &lt;li&gt;&lt;p&gt;Working so well with an &amp;#8220;aware&amp;#8221; text editor. I write the content for
      my &lt;a href="http://www.wordaligned.org"&gt;web site&lt;/a&gt; in Markdown using
      &lt;a href="http://www.gnu.org/software/emacs/"&gt;emacs&lt;/a&gt;, and the emacs text mode
      does the right thing when I&amp;#8217;m writing lists, blockquotes etc.
&lt;/p&gt;

 &lt;/li&gt;

 &lt;li&gt;&lt;p&gt;Providing superior support for
      &lt;a href="http://daringfireball.net/projects/markdown/syntax#link"&gt;links&lt;/a&gt;.
&lt;/p&gt;

 &lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;a href="http://boost.org/tools/quickbook"&gt;Quickbook&lt;/a&gt; deserves a special mention too, since it generates not HTML
   but &lt;a href="http://docbook.org"&gt;DocBook XML&lt;/a&gt;, and hence can be used as a starting point for both
   &lt;a href="http://wordaligned.org/docs/softdoc_overload/index.html"&gt;online and printed&lt;/a&gt;
   versions of a document.
&lt;/p&gt;</description>
<dc:date>2006-12-03</dc:date>
<guid>http://wordaligned.org/articles/wiki-markup</guid>
<author>tag@wordaligned.org (Thomas Guest)</author>
<link>http://wordaligned.org/articles/wiki-markup</link>
<category>Documentation</category>
</item>

<item>
<title>Soft Documentation</title>
<description>&lt;p&gt;One &lt;a href="http://wordaligned.org/doc/softdoc/index.html"&gt;article&lt;/a&gt;, two versions: a software developer&amp;#8217;s investigation into documentation tools. 
&lt;/p&gt;
&lt;p&gt;This &lt;a href="http://wordaligned.org/doc/softdoc/index.html"&gt;article&lt;/a&gt; was first published in &lt;a href="http://accu.org/index.php/journals/c141/"&gt;Overload 71&lt;/a&gt; and was subsequently republished in &lt;a href="http://www.istc.org.uk/pages/journals.php"&gt;Communicator&lt;/a&gt;, a journal for technical writers. 
&lt;/p&gt;
&lt;div class="extended"&gt;&lt;p&gt;&lt;a href="http://wordaligned.org/docs/softdoc/index.html"&gt;Continue reading&amp;#8230;&lt;/a&gt;&lt;/p&gt;&lt;/div&gt;</description>
<dc:date>2006-10-09</dc:date>
<guid>http://wordaligned.org/articles/soft-documentation</guid>
<author>tag@wordaligned.org (Thomas Guest)</author>
<link>http://wordaligned.org/articles/soft-documentation</link>
<category>Documentation</category>
</item>

<item>
<title>Browsing Python Documentation using the Python Sidebar</title>
<description>&lt;p&gt;Until recently, I worked on a Windows box (even if it was often little
   more than a display device for my Xterms running on a Linux box).
   Now, though, I&amp;#8217;m using &lt;a href="http://www.apple.com/macosx/"&gt;Mac OS X&lt;/a&gt;, which
   seems better all round.
&lt;/p&gt;
&lt;p&gt;Just one problem, though: I&amp;#8217;ve become addicted to the &lt;a href="http://python.org"&gt;Python&lt;/a&gt; Windows
   documentation browser. I know my way around the documentation
   hierarchy and can quickly open and close nodes to get where I need
   to. The search is good too. Unfortunately the Windows help only runs
   on Windows, and clicking through the online documentation at
   &lt;a href="http://docs.python.org/"&gt;http://docs.python.org/&lt;/a&gt; was getting frustrating.
&lt;/p&gt;
&lt;p&gt;Luckily I found a nice &lt;a href="http://edgewall.org/python-sidebar/"&gt;Mozilla
plugin&lt;/a&gt; provided by the &lt;a href="http://python.org"&gt;Python&lt;/a&gt;
   wizards at &lt;a href="http://edgewall.org"&gt;edgewall&lt;/a&gt;. Now I can navigate by
   opening and closing nodes, as before.
&lt;/p&gt;</description>
<dc:date>2006-09-20</dc:date>
<guid>http://wordaligned.org/articles/browsing-python-documentation-using-the-python-sidebar</guid>
<author>tag@wordaligned.org (Thomas Guest)</author>
<link>http://wordaligned.org/articles/browsing-python-documentation-using-the-python-sidebar</link>
<category>Documentation</category>
</item>

<item>
<title>Personal version control</title>
<description>&lt;p&gt;We all know that version control isn&amp;#8217;t just for source files but
   opinions differ about what should and shouldn&amp;#8217;t be checked in. &lt;span /&gt;Can
   something be too large for version control?  Too immutable?
   Conversely, something be too small? Too transient?
&lt;/p&gt;
&lt;span id="continue-reading"/&gt;


&lt;h4&gt;Large Things&lt;/h4&gt;
&lt;p&gt;Most of the arguments concern large items: should we check in the
   compiler (plus patches); the JDK (including source code); the high
   definition video files used for test purposes; third party RPMs used
   to build the CD ISO image? Surely (one side of the argument goes) we
   don&amp;#8217;t need to version control these &lt;em&gt;huge&lt;/em&gt; assets which don&amp;#8217;t/can&amp;#8217;t
   change &amp;#8212; we should just burn them to DVD and keep them safe? Surely
   (the counter-argument goes) we need to keep track of &lt;em&gt;everything&lt;/em&gt; our
   project depends on, and that&amp;#8217;s what version control systems are good
   at.
&lt;/p&gt;
&lt;p&gt;Both arguments are reasonable and a solution must be found somewhere
   between the two. Clearly we can&amp;#8217;t version control everything since we
   can&amp;#8217;t version control the version control system.
&lt;/p&gt;
&lt;p&gt;My inclination is to use version control as widely as possible. It&amp;#8217;s well
   suited to managing &lt;a href="http://www.wordaligned.org/doc/softdoc/index.html"&gt;documentation&lt;/a&gt; for example.  A
   &lt;a href="http://subversion.tigris.org"&gt;decent version control client&lt;/a&gt; should impose no overhead
   &amp;#8212; making it as easy to check a design document into version control
   as at is to copy it into a shared folder.
&lt;/p&gt;

&lt;h4&gt;Small Things&lt;/h4&gt;
&lt;p&gt;At the other end of the scale, what about the small, transient,
   personal things? I&amp;#8217;m talking about hidden resource files: your
   &lt;code&gt;.bashrc&lt;/code&gt;, your &lt;code&gt;.emacs&lt;/code&gt;, your &lt;a href="http://www.eclipse.org"&gt;eclipse&lt;/a&gt;
   configuration, your personal cronfile.
&lt;/p&gt;
&lt;p&gt;In my experience, these files very rarely get placed under source
   control &amp;#8212; and I can&amp;#8217;t understand why. I often tweak my resource
   files. I want to be able to wind back these changes, if necessary. I
   want these files backed up as carefully as project source files since
   they&amp;#8217;re an integral part of my development environment. Putting these
   files under version control also means that setting up my preferences
   on a new platform can be accomplished with a command as simple as:
&lt;/p&gt;
&lt;div class="typocode"&gt;

&lt;pre class="prettyprint"&gt;svn co svn://&amp;lt;svnserver&amp;gt;/personal/tag/home .

&lt;/pre&gt;

&lt;/div&gt;

&lt;p&gt;&lt;span /&gt;What&amp;#8217;s more, when you start treating your personal environment as
   something deserving version control, you find it becomes better
   organised. Those baby throwaway scripts &amp;#8212; which you wish you hadn&amp;#8217;t
   thrown away &amp;#8212; instead grow up and develop options and usage
   help. Tiny experimental test programs find a home. Even your directory
   structure becomes less muddled (assuming you use a &lt;a href="http://subversion.tigris.org"&gt;version control
system&lt;/a&gt; which allows you to move files and check in soft
   links).
&lt;/p&gt;
&lt;p&gt;&lt;a href="http://subversion.tigris.org"&gt;Subversion&lt;/a&gt; even allows you to check in soft links.
&lt;/p&gt;</description>
<dc:date>2006-09-07</dc:date>
<guid>http://wordaligned.org/articles/personal-version-control</guid>
<author>tag@wordaligned.org (Thomas Guest)</author>
<link>http://wordaligned.org/articles/personal-version-control</link>
<category>Documentation</category>
</item>

</channel>
</rss>
