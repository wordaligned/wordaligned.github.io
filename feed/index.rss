<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:dc="http://purl.org/dc/elements/1.1/" >
<channel>
<title>Word Aligned</title>
<link>http://wordaligned.org</link>
<description>tales from the code face</description>
<dc:creator>tag@wordaligned.org</dc:creator>
<language>en-gb</language>
<item>
<title>2147483647</title>
<description>&lt;h1&gt;Magic!&lt;/h1&gt;
&lt;p&gt;When software developers refer to &amp;#8220;magic numbers&amp;#8221; they mean those numeric literals which appear in a program without explanation &amp;#8212; as if by magic. Consider the mysterious figures in this incantation:
&lt;/p&gt;
&lt;div class="typocode"&gt;

&lt;pre class="prettyprint"&gt;int cigarettes()
{
    return 365 * 20 * 10 + 2 * 20 + 17;
}

&lt;/pre&gt;

&lt;/div&gt;

&lt;p&gt;Why is the &lt;code&gt;&lt;a href="http://www.richardbeard.info/category/my-books/x20/
"&gt;20&lt;/a&gt;&lt;/code&gt; repeated? Does the first &lt;code&gt;20&lt;/code&gt; mean the same as the second one? Could &lt;code&gt;365&lt;/code&gt; be the number of days in a year? Named constants would make the code easier to read and maintain.
&lt;/p&gt;
&lt;p&gt;Some numbers truly are &lt;strong&gt;magical&lt;/strong&gt; though.
&lt;/p&gt;

&lt;h1&gt;2147483647&lt;/h1&gt;
&lt;p&gt;The number 2147483647 is special and terrible.
&lt;/p&gt;
&lt;p&gt;It&amp;#8217;s a substantial number, far greater than the number of goals Lionel Messi has scored or the number of hot dinners I&amp;#8217;ve eaten, and comparable with the number of heart beats in a lifetime or the number of instructions a processor executes in a second; but it&amp;#8217;s not that large. You&amp;#8217;ll need more than 2147483647 bytes to install a modern operating system, let alone store your video collection. And shuffling a pack of just 52 cards has 80658175170943878571660636856403766975289505440883277824000000000000 possible outcomes.
&lt;/p&gt;
&lt;p&gt;If 2147483647 isn&amp;#8217;t remarkable for its size it certainly has a noteworthy history. In 1772 the Swiss mathematician Leonhard Euler proved it a prime. I&amp;#8217;m guessing it was the largest known prime at the time. Euler didn&amp;#8217;t have a computer to hunt for primes so he narrowed the field by focusing on &lt;a href="http://www.mersenne.org/"&gt;Mersenne numbers&lt;/a&gt; &amp;#8212; numbers one less than a power of two &amp;#8212; a strategy which remains a winner even today, when computers are networked to search.
&lt;/p&gt;
&lt;p&gt;Actually, 2147483647 is a double Mersenne prime, which is to say it takes the form 2&lt;sup&gt;m&lt;/sup&gt; - 1, where &lt;code&gt;m&lt;/code&gt; itself takes the form 2&lt;sup&gt;n&lt;/sup&gt; - 1. 
&lt;/p&gt;
&lt;div class="typocode"&gt;

&lt;pre class="prettyprint"&gt;&amp;gt;&amp;gt;&amp;gt; 2**(2**5 - 1) - 1
2147483647

&lt;/pre&gt;

&lt;/div&gt;

&lt;p&gt;Magic!
&lt;/p&gt;

&lt;h1&gt;Dragons!&lt;/h1&gt;
&lt;p&gt;2147483647 has a special significance for C programmers, who know it by the name &lt;code&gt;INT_MAX&lt;/code&gt;, and for C++ programmers, who demystify the digits as &lt;code&gt;std::numeric_limits&amp;lt;int&amp;gt;::max()&lt;/code&gt;.
&lt;/p&gt;
&lt;p&gt;Remember, 2147483647 is Mersenne(Mersenne(5)), which is Mersenne(31), or 2 to the power 31 minus 1. In binary arithmetic you add a zero on the right to multiply by 2 so 2 to the 31 is 1 followed by 31 zeros; and subtracting 1 leaves 31 1&amp;#8217;s. It&amp;#8217;s the largest signed value you can fit in a 32 bit register.
&lt;/p&gt;
&lt;div class="typocode"&gt;

&lt;pre class="prettyprint"&gt;&amp;gt;&amp;gt;&amp;gt; mersenne31 = 2**31-1
&amp;gt;&amp;gt;&amp;gt; bin(mersenne31)
'0b1111111111111111111111111111111'
&amp;gt;&amp;gt;&amp;gt; hex(mersenne31)
'0x7fffffffL'
&amp;gt;&amp;gt;&amp;gt; mersenne31
2147483647L

&lt;/pre&gt;

&lt;/div&gt;

&lt;p&gt;It&amp;#8217;s quite possible to inadvertantly increment an &lt;code&gt;int&lt;/code&gt; which has reached &lt;code&gt;INT_MAX&lt;/code&gt;. The result is undefined behaviour: anything could happen. 
&lt;/p&gt;
&lt;p&gt;&lt;a href="http://en.wikipedia.org/wiki/Myth_of_the_Flat_Earth"&gt;&lt;img src="http://wordaligned.org/images/flammarion.jpg"/&gt;&lt;/a&gt;
&lt;/p&gt;

&lt;h1&gt;Gangnam Style&lt;/h1&gt;
&lt;blockquote&gt;&lt;p&gt;We never thought a video would be watched in numbers greater than a 32-bit integer (=2,147,483,647 views), but that was before we met PSY. Gangnam Style has been viewed so many times we had to upgrade to a 64-bit integer (9,223,372,036,854,775,808)!
&lt;/p&gt;
&lt;/blockquote&gt;&lt;p&gt;&amp;mdash; &lt;a href="https://plus.google.com/u/0/wm/4/+youtube/posts/BUXfdWqu86Q"&gt;youtube developers&lt;/a&gt;
&lt;/p&gt;
&lt;img src="http://wordaligned.org/images/psy.png" alt="Psy"/&gt;

&lt;p&gt;Exactly what undefined behaviour was provoked when PSY&amp;#8217;s popularity broke the magic limit isn&amp;#8217;t disclosed. Maybe a server leaked account details to North Korean hackers. Or maybe the video&amp;#8217;s viewing figures were wrong for a while. 
&lt;/p&gt;
&lt;p&gt;Note that the new limit of 9,223,372,036,854,775,808 is an unsigned value, which is exempt from this flavour of undefined behaviour and wraps to zero when you bump it up.
&lt;/p&gt;

&lt;h1&gt;Bugwards compatibility&lt;/h1&gt;
&lt;p&gt;There&amp;#8217;s another reason for preferring &lt;code&gt;INT_MAX&lt;/code&gt; to the magical 2147483647: the two values might be different. 2147483647 is 2147483647 but &lt;code&gt;INT_MAX&lt;/code&gt; depends on the implementation.
&lt;/p&gt;
&lt;p&gt;A modern computer probably has 64 bit registers making a 64 bit &lt;code&gt;int&lt;/code&gt; a more natural choice. However, for compatibility reasons, &lt;code&gt;int&lt;/code&gt;s may intentionally be limited to 32 bits!
&lt;/p&gt;</description>
<dc:date>2015-02-12</dc:date>
<guid>http://wordaligned.org/articles/2147483647</guid>
<author>tag@wordaligned.org (Thomas Guest)</author>
<link>http://wordaligned.org/articles/2147483647</link>
<category>C</category>
<category>C++</category>
</item>

<item>
<title>Lessons from the OuLiPo</title>
<description>&lt;p&gt;I&amp;#8217;m delighted to announce that my talk, &lt;a href="http://accu.org/index.php/conferences/accu_conference_2015/accu2015_sessions#lessons_from_the_oulipo"&gt;Lessons from the OuLiPo&lt;/a&gt;, has been accepted for the &lt;a href="http://accu.org/index.php/conferences/accu_conference_2015" title="ACCU 2015 conference"&gt;ACCU 2015 conference&lt;/a&gt;.
&lt;/p&gt;
&lt;img src="http://wordaligned.org/images/lessons-from-the-oulipo.png" alt="Slide 1"/&gt;

&lt;p&gt;The talk follows up on a lightning talk I gave at &lt;a href="http://www.snsystems.com/" title="SN Systems website"&gt;my employer&amp;#8217;s&lt;/a&gt; last year about Georges Perec&amp;#8217;s masterpiece, &lt;a href="http://wordaligned.org/knights-tour"&gt;Life A User&amp;#8217;s Manual&lt;/a&gt;. Click the graphic below to play the animation and read the transcript.
&lt;/p&gt;
&lt;p&gt;&lt;a href="http://wordaligned.org/knights-tour"&gt;&lt;img src="http://wordaligned.org/images/knights-tour.jpg" alt="Knights tour"/&gt;&lt;/a&gt;
&lt;/p&gt;
&lt;p&gt;I&amp;#8217;ll be giving a preview of the full version here in Bristol in a couple of weeks. I hope you can come along. More details on &lt;a href="http://www.meetup.com/ACCU-Bristol/events/219301279/"&gt;Meetup&lt;/a&gt;.
&lt;/p&gt;
&lt;p&gt;In the meanwhile, the next section of this page introduces the ideas I&amp;#8217;ll be exploring in my talk.
&lt;/p&gt;
&lt;p style="text-align:center"&gt;&amp;sect;&lt;/p&gt;

&lt;p&gt;As software developers we often ponder what it is we do: are we architects, engineers, or scientists? Are we &amp;#8212; &lt;em&gt;gasp!&lt;/em&gt; &amp;#8212; rock stars or ninjas? Which metaphors best fit? Tending a code base is like gardening. Through the seasons we encourage new growth, whilst pruning back dead code and squashing bugs. Programming is like carpentry, maybe. Select the right tool from a set kept sharp and ready for action. Programming is like cooking. Source the finest ingredients and follow the recipe.
&lt;/p&gt;
&lt;p&gt;I think there&amp;#8217;s a more obvious metaphor. Actually there&amp;#8217;s nothing meta- about it. It is what we do.
&lt;/p&gt;
&lt;p&gt;&lt;big&gt;We&amp;#8217;re writers.&lt;/big&gt;
&lt;/p&gt;
&lt;p&gt;We write to communicate and to instruct. We write for fun and profit. We edit and adapt. We rewrite. We borrow text from other writers. The languages we think we write in &amp;#8212; C++, Python, Javascript &amp;#8212; are actually just highly stylised dialects of our native tongue. Like poets we&amp;#8217;re particular about punctuation and space. We have strange ideas about spelling. The texts we write, &lt;em&gt;programs&lt;/em&gt;, are subject to formal constraints.
&lt;/p&gt;
&lt;p&gt;&lt;big&gt;We&amp;#8217;re writers bound by mathematical rules.&lt;/big&gt;
&lt;/p&gt;
&lt;p&gt;November, 1960. Paris. The poet Raymond Queneau organises the first meeting of a group which will become known as OuLiPo. A dozen turn up: writers, mathematicians, pataphysicians and surrealists. Their mission: to explore the literary potential of applying mathematical constraints to texts.
&lt;/p&gt;
&lt;p&gt;Of course constrained writing is nothing new &amp;#8212; consider the haiku: 17 syllables, arranged as 3 phrases of 5, 7 and 5 syllables, a Japanese form many centuries old &amp;#8212; and one strand of the OuLiPo&amp;#8217;s efforts is devoted to researching past experiments and structures; but I claim it&amp;#8217;s no coincidence the OuLiPo emerged at much the same time as our own novel form of constrained writing: computer programming.
&lt;/p&gt;
&lt;p&gt;In &lt;a href="http://accu.org/index.php/conferences/accu_conference_2015/accu2015_sessions#lessons_from_the_oulipo"&gt;this talk&lt;/a&gt; I&amp;#8217;ll discuss the OuLiPo in more depth, investigating the parallels between their work and ours. We&amp;#8217;ll focus on Georges Perec, whose book &lt;a href="http://wordaligned.org/knights-tour"&gt;Life A User&amp;#8217;s Manual&lt;/a&gt; is an Oulipian tour de force. There will be some code, as well as quines, easter eggs and &amp;#8212; as you&amp;#8217;d expect &amp;#8212; bugs.
&lt;/p&gt;</description>
<dc:date>2015-01-12</dc:date>
<guid>http://wordaligned.org/articles/lessons-from-the-oulipo</guid>
<author>tag@wordaligned.org (Thomas Guest)</author>
<link>http://wordaligned.org/articles/lessons-from-the-oulipo</link>
<category>ACCU</category>
<category>Oulipo</category>
<category>Perec</category>
<category>Bristol</category>
</item>

<item>
<title>Why zip when you can map?</title>
<description>&lt;p&gt;&lt;a href="http://en.wikipedia.org/wiki/Zipper"&gt;&lt;img src="http://wordaligned.org/images/zip.jpg" title="Why zip?" alt="Why zip?"/&gt;&lt;/a&gt;
   &lt;a href="http://www.strava.com/activities/158661061"&gt;&lt;img src="http://wordaligned.org/images/dundry-thunder.jpg" alt="when you can map?" title="when you can map!"/&gt;&lt;/a&gt;
&lt;/p&gt;
&lt;p&gt;You&amp;#8217;ve got a couple of parallel lists you&amp;#8217;d like to combine and output, a line for each pair. Here&amp;#8217;s one way to do it: use &lt;code&gt;zip&lt;/code&gt; to do the combining.
&lt;/p&gt;
&lt;div class="typocode"&gt;

&lt;pre class="prettyprint"&gt;&amp;gt;&amp;gt;&amp;gt; times = [42.12, 42.28, 42.34, 42.40, 42.45]
&amp;gt;&amp;gt;&amp;gt; names = ['Hickman', 'Guest', 'Burns', 'Williams']
&amp;gt;&amp;gt;&amp;gt; fmt = '{:20} {:.2f}'.format
&amp;gt;&amp;gt;&amp;gt; print('\n'.join(fmt(n, t) for n, t in zip(names, times)))
Hickman              42.12
Guest                42.28
Burns                42.34
Williams             42.40

&lt;/pre&gt;

&lt;/div&gt;

&lt;p&gt;Slightly more succinctly:
&lt;/p&gt;
&lt;div class="typocode"&gt;

&lt;pre class="prettyprint"&gt;&amp;gt;&amp;gt;&amp;gt; print('\n'.join(fmt(*nt) for nt in zip(names, times)))
...

&lt;/pre&gt;

&lt;/div&gt;

&lt;p&gt;If you look at the generator expression passed into &lt;code&gt;str.join&lt;/code&gt;, you can see we&amp;#8217;re just mapping &lt;code&gt;fmt&lt;/code&gt; to the zipped &lt;code&gt;names&lt;/code&gt; and &lt;code&gt;times&lt;/code&gt; lists.
&lt;/p&gt;
&lt;p&gt;Well, sort of.
&lt;/p&gt;
&lt;div class="typocode"&gt;

&lt;pre class="prettyprint"&gt;&amp;gt;&amp;gt;&amp;gt; print('\n'.join(map(fmt, zip(names, times))))
Traceback (most recent call last):
...
IndexError: tuple index out of range

&lt;/pre&gt;

&lt;/div&gt;

&lt;p&gt;To fix this, we &lt;strong&gt;could&lt;/strong&gt; use &lt;code&gt;itertools.starmap&lt;/code&gt; which effectively unpacks the zipped pairs.
&lt;/p&gt;
&lt;div class="typocode"&gt;

&lt;pre class="prettyprint"&gt;&amp;gt;&amp;gt;&amp;gt; from itertools import starmap
&amp;gt;&amp;gt;&amp;gt; print('\n'.join(starmap(fmt, zip(names, times))))
Hickman              42.12
Guest                42.28
Burns                42.34
Williams             42.40

&lt;/pre&gt;

&lt;/div&gt;

&lt;p&gt;This latest version looks clean enough but there&amp;#8217;s something odd about zipping two lists together only to unpack the resulting 2-tuples for consumption by the format function.
&lt;/p&gt;
&lt;p&gt;Don&amp;#8217;t forget, &lt;code&gt;map&lt;/code&gt; happily accepts more than one sequence! There&amp;#8217;s no need to &lt;code&gt;zip&lt;/code&gt; after all.
&lt;/p&gt;
&lt;div class="typocode"&gt;&lt;div class="codetitle"&gt;Don&amp;#8217;t zip, map!&lt;/div&gt;

&lt;pre class="prettyprint"&gt;&amp;gt;&amp;gt;&amp;gt; print('\n'.join(map(fmt, names, times)))
...

&lt;/pre&gt;

&lt;/div&gt;</description>
<dc:date>2014-12-16</dc:date>
<guid>http://wordaligned.org/articles/why-zip-when-you-can-map</guid>
<author>tag@wordaligned.org (Thomas Guest)</author>
<link>http://wordaligned.org/articles/why-zip-when-you-can-map</link>
<category>Python</category>
</item>

<item>
<title>Find the average of a collection of tuples or dicts using Python</title>
<description>&lt;p&gt;You&amp;#8217;ve been running some tests, each of which returns a 3-tuple of numerical results &amp;#8212; &lt;code&gt;(real, user, sys)&lt;/code&gt; times, maybe &amp;#8212; and you&amp;#8217;d like to combine these into a single 3-tuple, the average result.
&lt;/p&gt;
&lt;p&gt;Easy!
&lt;/p&gt;
&lt;div class="typocode"&gt;

&lt;pre class="prettyprint"&gt;def average(times):
    N = float(len(times))
    return (sum(t[0] for t in times)/N,
            sum(t[1] for t in times)/N,
            sum(t[2] for t in times)/N)

&lt;/pre&gt;

&lt;/div&gt;

&lt;p&gt;If you want a more generic solution, one which works when the tuples might have any number of elements, you could do this:
&lt;/p&gt;
&lt;div class="typocode"&gt;

&lt;pre class="prettyprint"&gt;def average(xs):
    N = float(len(xs))
    R = len(xs[0])
    return tuple(sum(x[i] for x in xs)/N for i in range(R))

&lt;/pre&gt;

&lt;/div&gt;

&lt;p&gt;or this:
&lt;/p&gt;
&lt;div class="typocode"&gt;

&lt;pre class="prettyprint"&gt;def average(xs):
    N = float(len(xs))
    return tuple(sum(col)/N for col in zip(*xs))

&lt;/pre&gt;

&lt;/div&gt;

&lt;p&gt;The second generic variant uses &lt;a href="https://docs.python.org/3/library/functions.html#zip"&gt;zip&lt;/a&gt; to transpose its inputs. 
&lt;/p&gt;
&lt;p&gt;Now suppose we have keyed collections of results which we want to average:
&lt;/p&gt;
&lt;div class="typocode"&gt;

&lt;pre class="prettyprint"&gt;&amp;gt;&amp;gt;&amp;gt; times = [{'real': 34.4, 'user': 26.2, 'sys': 7.3},
             {'real': 28.7, 'user': 21.5, 'sys': 6.4},
             {'real': 29.3, 'user': 22.0, 'sys': 6.9}]

&lt;/pre&gt;

&lt;/div&gt;

&lt;p&gt;If, as in the example above, each result has the same set of keys, the average result could be calculated like this:
&lt;/p&gt;
&lt;div class="typocode"&gt;

&lt;pre class="prettyprint"&gt;&amp;gt;&amp;gt;&amp;gt; N = float(len(times))
&amp;gt;&amp;gt;&amp;gt; { k : sum(t[k] for t in times)/N for k in times[0] }
{'real': 30.8, 'sys': 6.9, 'user': 23.2}

&lt;/pre&gt;

&lt;/div&gt;

&lt;p&gt;What if the inputs don&amp;#8217;t have the same keys? Consider the contents of four fridges.
&lt;/p&gt;
&lt;div class="typocode"&gt;

&lt;pre class="prettyprint"&gt;&amp;gt;&amp;gt;&amp;gt; fridges = [
    { 'egg': 5, 'milk': 1.700, 'sausage': 6 },
    { 'beer': 6, 'milk': 0.568, 'egg': 1 },
    { 'egg': 3, 'sausage': 4, 'milk': 0.125, 'lettuce': 1 },
    { 'carrot': 4 }]

&lt;/pre&gt;

&lt;/div&gt;

&lt;p&gt;A &lt;a href="https://docs.python.org/3/library/collections.html#collections.Counter"&gt;Counter&lt;/a&gt; can collect and calculate the average fridge contents. 
&lt;/p&gt;
&lt;div class="typocode"&gt;

&lt;pre class="prettyprint"&gt;&amp;gt;&amp;gt;&amp;gt; from collections import Counter
&amp;gt;&amp;gt;&amp;gt; total = sum(map(Counter, fridges), Counter())
&amp;gt;&amp;gt;&amp;gt; N = float(len(fridges))
&amp;gt;&amp;gt;&amp;gt; { k: v/N for k, v in total.items() }
{'sausage': 2.5, 'lettuce': 0.25, 'beer': 1.5, 'carrot': 1.0, 
 'egg': 2.25, 'milk': 0.59825}

&lt;/pre&gt;

&lt;/div&gt;

&lt;p&gt;Note that although &lt;code&gt;Counter&lt;/code&gt;s were primarily designed to work with positive integers to represent counts, there&amp;#8217;s nothing stopping us from using floating point numbers (amount of milk in our example) in the values field.
&lt;/p&gt;</description>
<dc:date>2014-12-03</dc:date>
<guid>http://wordaligned.org/articles/python-averages</guid>
<author>tag@wordaligned.org (Thomas Guest)</author>
<link>http://wordaligned.org/articles/python-averages</link>
<category>Python</category>
</item>

<item>
<title>Group When</title>
<description>&lt;p&gt;Phil Nash&amp;#8217;s recent tweet intrigued me.
&lt;/p&gt;
&lt;div&gt;&lt;blockquote class="twitter-tweet" lang="en"&gt;&lt;p&gt;Functional people: I often (in F#) need to process a seq into a smaller list or seq &amp;ndash; where items from the input are grouped in some way&amp;hellip;&lt;/p&gt;&amp;mdash; Phil Nash (@phil_nash) &lt;a href="https://twitter.com/phil_nash/statuses/489167611641724928"&gt;July 15, 2014&lt;/a&gt;&lt;/blockquote&gt;&lt;blockquote class="twitter-tweet" lang="en"&gt;&lt;p&gt;&amp;hellip; the need to group may not be known until after the first item in the group.&amp;#10;I struggle to find a nicely functional way to do this. Ideas?&lt;/p&gt;&amp;mdash; Phil Nash (@phil_nash) &lt;a href="https://twitter.com/phil_nash/statuses/489167962931482626"&gt;July 15, 2014&lt;/a&gt;&lt;/blockquote&gt;&lt;script async src="http://wordaligned.org//platform.twitter.com/widgets.js" charset="utf-8"&gt;&lt;/script&gt;&lt;/div&gt;

&lt;p&gt;He later clarified what he was after &amp;#8212; and had now found &amp;#8212; linking to a &lt;a href="http://fssnip.net/6A"&gt;solution&lt;/a&gt; posted a couple of years ago by &lt;a href="http://tomasp.net"&gt;Tomas Petricek&lt;/a&gt;. The function &lt;code&gt;groupWhen&lt;/code&gt; splits a sequence into groups, starting a new group whenever the predicate returns true.
&lt;/p&gt;
&lt;div class="typocode"&gt;

&lt;pre class="prettyprint"&gt; module Seq =
   /// Iterates over elements of the input sequence and groups adjacent elements.
   /// A new group is started when the specified predicate holds about the element
   /// of the sequence (and at the beginning of the iteration).
   ///
   /// For example: 
   ///    Seq.groupWhen isOdd [3;3;2;4;1;2] = seq [[3]; [3; 2; 4]; [1; 2]]
   let groupWhen f (input:seq&amp;lt;_&amp;gt;) = seq {
     use en = input.GetEnumerator()
     let running = ref true
     
     // Generate a group starting with the current element. Stops generating
     // when it founds element such that 'f en.Current' is 'true'
     let rec group() = 
       [ yield en.Current
         if en.MoveNext() then
           if not (f en.Current) then yield! group() 
         else running := false ]
     
     if en.MoveNext() then
       // While there are still elements, start a new group
       while running.Value do
         yield group() |&amp;gt; Seq.ofList }

&lt;/pre&gt;

&lt;/div&gt;

&lt;p&gt;Here&amp;#8217;s a nice Haskell version coded up by &lt;a href="https://twitter.com/sdarlington"&gt;@sdarlington&lt;/a&gt;.
&lt;/p&gt;
&lt;script src="https://gist.github.com/sdarlington/be76048bff124694769d.js"&gt;&lt;/script&gt;

&lt;p&gt;Maybe &lt;a href="https://docs.python.org/3/library/itertools.html#itertools.takewhile"&gt;takewhile&lt;/a&gt; and &lt;a href="https://docs.python.org/3/library/itertools.html#itertools.dropwhile"&gt;dropwhile&lt;/a&gt; could power a Python solution, but my first choice would be &lt;a href="https://docs.python.org/3/library/itertools.html#itertools.groupby"&gt;itertools.groupby&lt;/a&gt;. &lt;code&gt;Groupby&lt;/code&gt; chops a sequence into subsequences, where the elements of each subsequence have the same key value. A suitable key function, in this case, must change its return value every time the sequence yields an element for which the predicate holds. It could toggle between a pair of values, for example. Or it could just count the number of times the predicate holds.
&lt;/p&gt;
&lt;div class="typocode"&gt;

&lt;pre class="prettyprint"&gt;class count_p:
    ''' Return a value which increments every time the predicate holds.
    '''
    def __init__(self, pred):
        self._n = 0
        self._pred = pred
    
    def __call__(self, v):
        self._n += self._pred(v)
        return self._n

def group_when(pred, xs):
    return (gp for _, gp in groupby(xs, count_p(pred)))

&lt;/pre&gt;

&lt;/div&gt;

&lt;p&gt;Here, &lt;code&gt;group_when&lt;/code&gt; accepts an iterable and returns an iterable sequence of iterable groups. Clients choose how to consume the results.
&lt;/p&gt;
&lt;div class="typocode"&gt;

&lt;pre class="prettyprint"&gt;&amp;gt;&amp;gt;&amp;gt; def odd(v): return v % 2
&amp;gt;&amp;gt;&amp;gt; xs = group_when(odd, [3, 3, 2, 4, 1, 2])
&amp;gt;&amp;gt;&amp;gt; print([list(g) for g in xs])
[[3], [3, 2, 4], [1, 2]]

&lt;/pre&gt;

&lt;/div&gt;

&lt;p&gt;Note that &lt;code&gt;count_p&lt;/code&gt; does something very like &lt;a href="acc"&gt;itertools.accumulate&lt;/a&gt;. Here&amp;#8217;s another version of &lt;code&gt;group_when&lt;/code&gt; which takes advantage of this.
&lt;/p&gt;
&lt;div class="typocode"&gt;

&lt;pre class="prettyprint"&gt;def group_when(pred, xs):
    xs, ys = tee(xs)
    accu = accumulate(map(pred, ys))
    return (gp for _, gp in groupby(xs, lambda _: next(accu)))

&lt;/pre&gt;

&lt;/div&gt;

&lt;p style="text-align:center"&gt;&amp;sect;&lt;/p&gt;

&lt;p&gt;After a short break, here&amp;#8217;s a third version of &lt;code&gt;group_when&lt;/code&gt;. This is the first time I&amp;#8217;ve found a use for &lt;code&gt;takewhile&lt;/code&gt; and &lt;code&gt;dropwhile&lt;/code&gt;. Beware: as the teed streams &lt;code&gt;xs&lt;/code&gt; and &lt;code&gt;ys&lt;/code&gt; diverge, the amount of backing storage required will grow &amp;#8230; only for the stored values to then be dropped!
&lt;/p&gt;
&lt;div class="typocode"&gt;

&lt;pre class="prettyprint"&gt;from itertools import *
 
def group_when(p, xs):
    def notp(x): return not p(x)
    xs = iter(xs)
    while True:
        x = next(xs)
        xs, ys = tee(xs)
        yield chain([x], takewhile(notp, xs))
        xs = dropwhile(notp, ys)
 
def odd(x):
    return x % 2
 
[list(g) for g in group_when(odd, [3, 3, 2, 4, 1, 2])] # [[3], [3, 2, 4], [1, 2]]

&lt;/pre&gt;

&lt;/div&gt;</description>
<dc:date>2014-07-16</dc:date>
<guid>http://wordaligned.org/articles/group-when</guid>
<author>tag@wordaligned.org (Thomas Guest)</author>
<link>http://wordaligned.org/articles/group-when</link>
<category>Python</category>
<category>Haskell</category>
<category>Streams</category>
</item>

<item>
<title>Word Aligned, hosted by Github</title>
<description>&lt;p&gt;To anyone who subscribes to this site&amp;#8217;s &lt;a href="http://feeds.wordaligned.org/wordaligned"&gt;feed&lt;/a&gt;, my apologies if your reader recently got filled with items you&amp;#8217;d already seen. I can explain.
&lt;/p&gt;
&lt;p&gt;About seven years ago, I signed up for a great deal on hosting for life with a company called &lt;a href="http://wordaligned.org/articles/hosting-for-life-textdrive-revived.html"&gt;TextDrive&lt;/a&gt;. For most of the time since then, this service was actually provided by Joyent &amp;#8212; who took over TextDrive. Then they, Joyent, said the hosting for life deal was being &amp;#8220;sunsetted&amp;#8221;, i.e. canned. Happily TextDrive&amp;#8217;s original founder, Dean Allen, stepped in to revive his company and honour the original offer, which has indeed happened, though it&amp;#8217;s been all too clear that he&amp;#8217;s been hard to get hold of whilst the operations staff have been over-stretched.
&lt;/p&gt;
&lt;p&gt;Last week, a tweet from one of these hardworking ops tipped me off that TextDrive would soon be gone.
&lt;/p&gt;
&lt;div&gt;&lt;blockquote class="twitter-tweet" lang="en"&gt;&lt;p&gt;Public Service Announcement: TextDrivers please note that TextDrive is ceasing operation on the 14th of March 2014  &lt;a href="http://t.co/AMIO3xS2wX"&gt;http://t.co/AMIO3xS2wX&lt;/a&gt;&lt;/p&gt;&amp;mdash; Jacques Marneweck (@txdjm) &lt;a href="https://twitter.com/txdjm/statuses/441774463386800129"&gt;March 7, 2014&lt;/a&gt;&lt;/blockquote&gt;
&lt;script async src="http://wordaligned.org//platform.twitter.com/widgets.js" charset="utf-8"&gt;&lt;/script&gt;&lt;/div&gt;

&lt;p&gt;Tomorrow!
&lt;/p&gt;
&lt;p&gt;What to do?
&lt;/p&gt;
&lt;p&gt;After some &lt;a href="https://www.google.com/search?q=static+website+hosting"&gt;googling&lt;/a&gt; I&amp;#8217;ve chosen &lt;a href="http://pages.github.com"&gt;Github pages&lt;/a&gt; as the new host for Word Aligned. I&amp;#8217;ve had to relinquish a little control over URLs to make the site truly static. (A side-effect being old content appearing with new identifiers in the RSS &lt;a href="http://feeds.wordaligned.org/wordaligned"&gt;feed&lt;/a&gt;). I also won&amp;#8217;t be configuring a web server or rooting around in rotating log files. The experts at Github can take care of that.
&lt;/p&gt;
&lt;p&gt;I do get to keep my own domain, which was paramount. I don&amp;#8217;t have to pay anything, which is nice.
&lt;/p&gt;
&lt;p&gt;Previously, I used version control to track my site&amp;#8217;s contents and &lt;code&gt;rsync&lt;/code&gt; over &lt;code&gt;SSH&lt;/code&gt; to publish. Now I simply use version control: pushing a change to &lt;a href="https://github.com/wordaligned"&gt;github&lt;/a&gt; &lt;strong&gt;is&lt;/strong&gt; publication.
&lt;/p&gt;
&lt;p&gt;It&amp;#8217;s early days yet, but I&amp;#8217;m happy with the change. The &lt;a href="http://feeds.wordaligned.org/wordaligned"&gt;feed&lt;/a&gt; should settle down now, so stay subscribed. Please &lt;a href="mailto:tag@wordaligned.org?subject=Wordaligned.org%20glitches"&gt;let me know&lt;/a&gt; if you spot any problems with the site.
&lt;/p&gt;</description>
<dc:date>2014-03-13</dc:date>
<guid>http://wordaligned.org/articles/word-aligned-hosted-by-github</guid>
<author>tag@wordaligned.org (Thomas Guest)</author>
<link>http://wordaligned.org/articles/word-aligned-hosted-by-github</link>
<category>self</category>
</item>

<item>
<title>Go for short variable names</title>
<description>&lt;p&gt;Recently Brad Fitzpatrick promoted the &lt;a href="http://golang.org/s/style" title="Go style guide"&gt;Go style guide&lt;/a&gt; on twitter, which prompted Tim Penhey to take issue with its advice on variable naming.
&lt;/p&gt;
&lt;div&gt;&lt;blockquote class="twitter-tweet" lang="en"&gt;&lt;p&gt;&lt;a href="https://twitter.com/bradfitz"&gt;@bradfitz&lt;/a&gt; sorry, but can&amp;#39;t agree with &amp;#8220;use short variable names over descriptive ones&amp;#8221; &lt;a href="https://twitter.com/search?q=%23golang&amp;amp;src=hash"&gt;#golang&lt;/a&gt; &lt;a href="https://twitter.com/search?q=%23styleguide&amp;amp;src=hash"&gt;#styleguide&lt;/a&gt; /cc &lt;a href="https://twitter.com/sidneidasilva"&gt;@sidneidasilva&lt;/a&gt;&lt;/p&gt;&amp;mdash; Tim Penhey (@howbazaar) &lt;a href="https://twitter.com/howbazaar/statuses/437893595857571840"&gt;February 24, 2014&lt;/a&gt;&lt;/blockquote&gt;&lt;script async src="http://wordaligned.org//platform.twitter.com/widgets.js" charset="utf-8"&gt;&lt;/script&gt;&lt;/div&gt;

&lt;p&gt;A brief and inconclusive exchange followed. Twitter&amp;#8217;s fine for opinions and one-liners but flawed for discussions &amp;#8212; even when the subject happens to be brevity.
&lt;/p&gt;
&lt;p&gt;I&amp;#8217;m not going to tweet about it, but I like Go and I like its style. I&amp;#8217;d rather read code which uses short variable names. Long descriptive names, which may appear to provide more information, often obscure the structure and flow of the code. The narrower the scope, the shorter names can be; so the style guide implicitly sanctions short functions and shuns globals. All good.
&lt;/p&gt;
&lt;p&gt;How short is short?
&lt;/p&gt;
&lt;div&gt;&lt;blockquote class="twitter-tweet" data-conversation="none" lang="en"&gt;&lt;p&gt;&lt;a href="https://twitter.com/golang"&gt;@golang&lt;/a&gt; where does it stop? In our project we have &amp;#8220;c, ch, d, m, s, st&amp;#8221; and they point and say &amp;#8220;style guide says it is fine&amp;#8221;.&lt;/p&gt;&amp;mdash; Tim Penhey (@howbazaar) &lt;a href="https://twitter.com/howbazaar/statuses/438084788038037505"&gt;February 24, 2014&lt;/a&gt;&lt;/blockquote&gt;&lt;/div&gt;

&lt;p&gt;Those variables are certainly short rather than descriptive but they aren&amp;#8217;t scary: &lt;code&gt;c&lt;/code&gt; could be a character; &lt;code&gt;ch&lt;/code&gt; for channel, maybe, or another character; &lt;code&gt;d&lt;/code&gt; for data, difference or distance; &lt;code&gt;m&lt;/code&gt;, midpoint; &lt;code&gt;s&lt;/code&gt; string; &lt;code&gt;st&lt;/code&gt; state. All guesses, of course, but in context I&amp;#8217;d expect to see &amp;#8212; in the space of just a few lines of code &amp;#8212; where each variable lives and how it&amp;#8217;s used, a more clear and correct indication of what it means than a lengthy name could ever be.
&lt;/p&gt;
&lt;p&gt;Single character variables are just fine, says the &lt;a href="http://golang.org/s/style" title="Go style guide"&gt;style guide&lt;/a&gt;:
&lt;/p&gt;
&lt;blockquote&gt;&lt;p&gt;Prefer c to lineCount. Prefer i to sliceIndex.
&lt;/p&gt;
&lt;/blockquote&gt;&lt;p&gt;Some languages allow you to go further. Omit a variable in Perl and it defaults to being what you&amp;#8217;d like it to be. Usually.
&lt;/p&gt;
&lt;p&gt;A single character variable name is an extreme form of abbreviation. It works nicely for small things, like pixels and characters.
&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;Pixel pixel, pel, px, &lt;b&gt;p&lt;/b&gt;;
Character character, char, ch, &lt;b&gt;c&lt;/b&gt;;&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Some less terse abbreviations hurt my ear: &lt;code&gt;mngr&lt;/code&gt;, &lt;code&gt;svr&lt;/code&gt;, &lt;code&gt;cnt&lt;/code&gt;.
&lt;/p&gt;
&lt;p&gt;The style guide is, after all, a guide, and common sense applies.
   Some abbreviations are ugly and others save so little space they aren&amp;#8217;t worth it.
&lt;/p&gt;
&lt;p&gt;Go&amp;#8217;s advice on naming tips a hat to the language&amp;#8217;s C heritage and to C&amp;#8217;s great application, UNIX, which is unsurprising when you realise one of Go&amp;#8217;s prominent contributors, Ken Thompson, had a hand in both. When Thompson was asked what he would do differently if he were redesigning UNIX &lt;a href="http://en.wikiquote.org/wiki/Kenneth_Thompson#Attributed" title="Ken Thompson, quoted in The UNIX Programming Environment (Kernighan, Pike)"&gt;he replied&lt;/a&gt;: 
&lt;/p&gt;
&lt;blockquote&gt;&lt;p&gt;I&amp;#8217;d spell &lt;a href="http://unixhelp.ed.ac.uk/CGI/man-cgi?creat" title="man 2 creat"&gt;creat&lt;/a&gt; with an &amp;#8220;e&amp;#8221;.
&lt;/p&gt;
&lt;/blockquote&gt;&lt;p&gt;So, working on Go, &lt;a href="https://code.google.com/p/go/source/detail?r=4a3f6bbb5f0c6021279ccb3c23558b3c480d995f" title="Spell it with an e"&gt;he did&lt;/a&gt;.
&lt;/p&gt;</description>
<dc:date>2014-03-06</dc:date>
<guid>http://wordaligned.org/articles/go-for-short-variable-names</guid>
<author>tag@wordaligned.org (Thomas Guest)</author>
<link>http://wordaligned.org/articles/go-for-short-variable-names</link>
<category>Go</category>
</item>

<item>
<title>You wait all day for a bus&#8230;</title>
<description>&lt;p&gt;&lt;a href="http://docs.python.org/3/library/functions.html#any"&gt;&lt;code&gt;Any&lt;/code&gt;&lt;/a&gt; and &lt;a href="http://docs.python.org/3/library/functions.html#all"&gt;&lt;code&gt;all&lt;/code&gt;&lt;/a&gt;  didn&amp;#8217;t appear in Python until version 2.5, released in 2006, when the language was already well into its teens.
&lt;/p&gt;
&lt;p&gt;Why the delay in offering such fundamental functions? An oversight? Or simply that they&amp;#8217;re so easy to implement they weren&amp;#8217;t thought necessary. Either way, they&amp;#8217;re here now.
&lt;/p&gt;
&lt;p&gt;The functions are closely related and complementary. We can define &lt;code&gt;any&lt;/code&gt; in terms of &lt;code&gt;all&lt;/code&gt; and vice-versa.
&lt;/p&gt;
&lt;div class="typocode"&gt;

&lt;pre class="prettyprint"&gt;def any_(xs):
    return not all(map(operator.not_, xs))

def all_(xs):
    return not any(map(operator.not_, xs))

&lt;/pre&gt;

&lt;/div&gt;

&lt;p&gt;C++ reached its 30s before introducing &lt;a href="http://en.cppreference.com/w/cpp/algorithm/all_any_none_of"&gt;its own versions&lt;/a&gt; of these logical algorithms, &lt;code&gt;any_of&lt;/code&gt; and &lt;code&gt;all_of&lt;/code&gt;, but made up for lost time by finding room for a third, &lt;code&gt;none_of&lt;/code&gt;, which is not &lt;code&gt;any_of&lt;/code&gt;.
&lt;/p&gt;
&lt;div class="typocode"&gt;

&lt;pre class="prettyprint"&gt;template &amp;lt;class Iter, class Pred&amp;gt;
bool none_of_(Iter b, Iter e, Pred p)
{
    return std::find_if(b, e, p) == e;
}

template &amp;lt;class Iter, class Pred&amp;gt;
bool any_of_(Iter b, Iter e, Pred p)
{
    return !none_of_(b, e, p);
}

template &amp;lt;class Iter, class Pred&amp;gt;
bool all_of_(Iter b, Iter e, Pred p)
{
    return !any_of_(b, e, std::not1(p));
}

&lt;/pre&gt;

&lt;/div&gt;</description>
<dc:date>2013-10-02</dc:date>
<guid>http://wordaligned.org/articles/all-any-none</guid>
<author>tag@wordaligned.org (Thomas Guest)</author>
<link>http://wordaligned.org/articles/all-any-none</link>
<category>C++</category>
<category>Python</category>
</item>

<item>
<title>Reverse, Esrever</title>
<description>&lt;p&gt;&lt;code&gt;&lt;a href="http://en.cppreference.com/w/cpp/algorithm/reverse"&gt;Reverse&lt;/a&gt;&lt;/code&gt; is a member of the C++ standard library, but its reverse, &lt;code&gt;esrever&lt;/code&gt;, isn&amp;#8217;t. Similarly &lt;code&gt;keep&lt;/code&gt; isn&amp;#8217;t but &lt;code&gt;&lt;a href="http://en.cppreference.com/w/cpp/io/basic_istream/peek"&gt;peek&lt;/a&gt;&lt;/code&gt; is.
&lt;/p&gt;
&lt;p&gt;Can anyone think of a C++ standard library member whose reverse &lt;strong&gt;is also a member&lt;/strong&gt;?
&lt;/p&gt;
&lt;p&gt;Answers in the comments below.
&lt;/p&gt;
&lt;p&gt;Go!
&lt;/p&gt;</description>
<dc:date>2013-09-27</dc:date>
<guid>http://wordaligned.org/articles/reverse-esrever</guid>
<author>tag@wordaligned.org (Thomas Guest)</author>
<link>http://wordaligned.org/articles/reverse-esrever</link>
<category>C++</category>
<category>Puzzles</category>
</item>

<item>
<title>Clown, Flee, Jump</title>
<description>&lt;p&gt;The clown is running away from the circus. The contortionist wants nothing more to do with him. She&amp;#8217;s confessed everything to her husband, the strongman, who&amp;#8217;s after the clown&amp;#8217;s blood. The clown has no time to pack. Hurrying from the big top he snatches up his most treasured possessions and some refreshments:
&lt;/p&gt;
&lt;ul&gt;
 &lt;li&gt;
     a makeup case
 &lt;/li&gt;

 &lt;li&gt;
     a box camera, with tripod attached
 &lt;/li&gt;

 &lt;li&gt;
     a cactus
 &lt;/li&gt;

 &lt;li&gt;
     a roasted goose
 &lt;/li&gt;

 &lt;li&gt;
     a magnum of champagne
 &lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Each item weighs exactly 3kg.
&lt;/p&gt;
&lt;p&gt;Soon he reaches the edge of a ravine. A rope bridge connected to the other side has a sign in front of it.
&lt;/p&gt;
&lt;pre style="align:center;width:400px;border: 2px solid red; background: white;font-size:200%;"&gt;WARNING
UNSTABLE STRUCTURE
SAFE TO A MAXIMUM OF 75KG&lt;/pre&gt;

&lt;p&gt;The bridge is 100m long. The clown weighs 70kg. The strongman, who&amp;#8217;s closing in, weighs considerably more. The clown must cross the bridge at once to effect his escape. &lt;strong&gt;How can he do so without abandoning any of his baggage&lt;/strong&gt;?
&lt;/p&gt;
&lt;p style="text-align:center;font-size:200%"&gt;?&lt;/p&gt;

&lt;p&gt;Elsewhere, it&amp;#8217;s school sports day. Conditions are perfect for the high jump &amp;#8212; warm, sunny, still &amp;#8212; and a talented young athlete has raised the bar to 1.85m, which happens to be his own height. On the first two attempts he fails. On the third attempt he succeeds.
&lt;/p&gt;
&lt;img alt="High Jump" src="http://wordaligned.org/images/high-jump.jpg"/&gt;

&lt;p&gt;&amp;#8220;Chapeau!&amp;#8221; says the French teacher.
&lt;/p&gt;
&lt;p&gt;&amp;#8220;Awesome!&amp;#8221; says the Chaplain.
&lt;/p&gt;
&lt;p&gt;&amp;#8220;Unbelievable!&amp;#8221; says the head of Mathematics.
&lt;/p&gt;
&lt;p&gt;&amp;#8220;Actually,&amp;#8221; the sports coach says, &amp;#8220;it&amp;#8217;s quite simple: a combination of talent, training, and technique. He cleared his own height &lt;strong&gt;but his centre of gravity didn&amp;#8217;t&lt;/strong&gt;.&amp;#8221;
&lt;/p&gt;
&lt;p&gt;&amp;#8220;What nonsense!&amp;#8221; says the mathematician.
&lt;/p&gt;
&lt;p style="text-align:center;font-size:300%"&gt;??&lt;/p&gt;

&lt;img alt="Grimaldi" src="http://wordaligned.org/images/grimaldi.jpg"/&gt;

&lt;p&gt;The clown barely breaks stride. Juggling with mismatched objects is part of his act and quick as a flash case, camera, cactus, fowl and fizz are in the air. At no point does he have more than one object in either hand so his weight never exceeds 73kg. The bridge holds. The clown gets away.
&lt;/p&gt;
&lt;p&gt;&amp;#8220;Grrrr!&amp;#8221; says the strongman, shaking his fists.
&lt;/p&gt;
&lt;p style="text-align:center;font-size:400%"&gt;???&lt;/p&gt;</description>
<dc:date>2013-09-11</dc:date>
<guid>http://wordaligned.org/articles/clown-flee-jump</guid>
<author>tag@wordaligned.org (Thomas Guest)</author>
<link>http://wordaligned.org/articles/clown-flee-jump</link>
<category>Puzzles</category>
</item>

<item>
<title>Angle brackets hurt my eyes</title>
<description>&lt;blockquote&gt;&lt;p&gt;&amp;#8220;All these angle brackets, they&amp;#8217;re hurting my eyes.&amp;#8221;
&lt;/p&gt;
&lt;/blockquote&gt;&lt;p&gt;I&amp;#8217;m quoting a colleague who sits next to me and I sympathise. Perhaps a section from a build file was causing him pain?
&lt;/p&gt;
&lt;div class="typocode"&gt;

&lt;pre class="prettyprint"&gt;&amp;lt;target name="all" description="Build product."&amp;gt;
  &amp;lt;mkdir dir="build" if="${not directory::exists('build')}" /&amp;gt;
   ....
&amp;lt;/target&amp;gt;

&lt;/pre&gt;

&lt;/div&gt;

&lt;p&gt;Or maybe it was some XSL to generate XML by applying XML to XML?
&lt;/p&gt;
&lt;div class="typocode"&gt;

&lt;pre class="prettyprint"&gt;&amp;lt;xsl:if test="$index-make or @index!='false'"&amp;gt;
  &amp;lt;xsl:if test="//index"&amp;gt;
    &amp;lt;fo:block text-align-last="justify" space-before="5pt"&amp;gt;
      &amp;lt;fo:basic-link internal-destination="index-page"&amp;gt;
        &amp;lt;xsl:choose&amp;gt;
          &amp;lt;xsl:when test="(/doc/@lang = 'ja') or (/doc/@lang = '')&amp;lt;/xsl:when&amp;gt;
          &amp;lt;xsl:otherwise&amp;gt;INDEX&amp;lt;/xsl:otherwise&amp;gt;
        &amp;lt;/xsl:choose&amp;gt;
      &amp;lt;/fo:basic-link&amp;gt;
      &amp;lt;fo:page-number-citation ref-id="index-page"/&amp;gt;
    &amp;lt;/fo:block&amp;gt;
  &amp;lt;/xsl:if&amp;gt;
&amp;lt;/xsl:if&amp;gt;

&lt;/pre&gt;

&lt;/div&gt;

&lt;p&gt;Or perhaps he was wrestling with a C++ compile error.
&lt;/p&gt;
&lt;div class="typocode"&gt;

&lt;pre class="prettyprint"&gt;print.cpp: In function 'void print(const
std::map&amp;lt;std::basic_string&amp;lt;char, std::char_traits&amp;lt;char&amp;gt;,
std::allocator&amp;lt;char&amp;gt; &amp;gt;, int, std::less&amp;lt;std::basic_string&amp;lt;char,
std::char_traits&amp;lt;char&amp;gt;, std::allocator&amp;lt;char&amp;gt; &amp;gt; &amp;gt;,
std::allocator&amp;lt;std::pair&amp;lt;const std::basic_string&amp;lt;char,
std::char_traits&amp;lt;char&amp;gt;, std::allocator&amp;lt;char&amp;gt; &amp;gt;, int&amp;gt; &amp;gt; &amp;gt;&amp;amp;)':
print.cpp:7: error: no match for 'operator&amp;lt;&amp;lt;' in 'std::cout &amp;lt;&amp;lt;
details' /usr/include/c++/4.2.1/ostream:112: note: candidates are:
std::basic_ostream&amp;lt;_CharT, _Traits&amp;gt;&amp;amp; std::basic_ostream&amp;lt;_CharT,
_Traits&amp;gt;::operator&amp;lt;&amp;lt;(std::basic_ostream&amp;lt;_CharT, _Traits&amp;gt;&amp;amp;
(*)(std::basic_ostream&amp;lt;_CharT, _Traits&amp;gt;&amp;amp;)) [with _CharT = char,
_Traits = std::char_traits&amp;lt;char&amp;gt;]

&lt;/pre&gt;

&lt;/div&gt;

&lt;p&gt;What makes angle brackets so vexatious. Could it be their sharp corners?
&lt;/p&gt;
&lt;p&gt;Lisp is as elegant as XML is prickly, yet it too is famous for brackets, &lt;a href="http://en.wikipedia.org/wiki/S-expression"&gt;albeit round ones&lt;/a&gt; &amp;#8212; and lots of them.
&lt;/p&gt;
&lt;blockquote class="twitter-tweet"&gt;&lt;p&gt;It&amp;#8217;s not that Clojure/Lisp has a lot of parentheses. Its just that we removed everything else.&lt;/p&gt;&amp;mdash; Alex Miller (@puredanger) &lt;a href="https://twitter.com/puredanger/status/313507982623268865"&gt;March 18, 2013&lt;/a&gt;&lt;/blockquote&gt;
&lt;script async src="http://wordaligned.org//platform.twitter.com/widgets.js" charset="utf-8"&gt;&lt;/script&gt;

Imagine a parallel universe with angle-bracket Lisp. I wonder if the language would have proved so enduring?



&lt;div class="typocode"&gt;&lt;div class="codetitle"&gt;Not so pretty now?&lt;/div&gt;

&lt;pre class="prettyprint"&gt;&amp;lt;define &amp;lt;euler-transform s&amp;gt;
  &amp;lt;let &amp;lt;&amp;lt;s0 &amp;lt;stream-ref s 0&amp;gt;&amp;gt;
        &amp;lt;s1 &amp;lt;stream-ref s 1&amp;gt;&amp;gt;    
        &amp;lt;s2 &amp;lt;stream-ref s 2&amp;gt;&amp;gt;&amp;gt;
    &amp;lt;cons-stream &amp;lt;- s2 &amp;lt;/ &amp;lt;square &amp;lt;- s2 s1&amp;gt;&amp;gt;
                          &amp;lt;+ s0 &amp;lt;* -2 s1&amp;gt; s2&amp;gt;&amp;gt;&amp;gt;
                 &amp;lt;euler-transform &amp;lt;stream-cdr s&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;

&lt;/pre&gt;

&lt;/div&gt;



Looking more closely at the first code snippet, the section from a build file, we can see the problem isn&amp;#8217;t so much the angle brackets as all the others.



&lt;div class="typocode"&gt;

&lt;pre class="prettyprint"&gt;&amp;lt;mkdir dir="build" if="${not directory::exists('build')}" /&amp;gt;

&lt;/pre&gt;

&lt;/div&gt;



The braces and parentheses may be embedded in a double quoted string but that only makes things worse. The nested levels hurt my eyes and, if you can bear to look at the code long enough, you&amp;#8217;ll realise there&amp;#8217;s a simpler message trying to get out: &lt;tt&gt;mkdir -p build&lt;/tt&gt;.</description>
<dc:date>2013-05-01</dc:date>
<guid>http://wordaligned.org/articles/angle-brackets-hurt-my-eyes</guid>
<author>tag@wordaligned.org (Thomas Guest)</author>
<link>http://wordaligned.org/articles/angle-brackets-hurt-my-eyes</link>
<category>Lisp</category>
<category>Syntax</category>
</item>

<item>
<title>&#8220;Solutions&#8221;</title>
<description>&lt;p&gt;I like working around enthusiasts and optimists but that doesn&amp;#8217;t mean I want to use chirpy or bombastic software.
&lt;/p&gt;
&lt;p&gt;These days I build programs using visual studio. Sure, it&amp;#8217;s a decent tool but part of me cringes every time I&amp;#8217;m asked to open a &lt;strong&gt;&amp;#8220;Solution&amp;#8221;&lt;/strong&gt; especially when what I get seems more like a &lt;strong&gt;&amp;#8220;Muddle&amp;#8221;&lt;/strong&gt;. A progress bar slides into action after my program links: &lt;strong&gt;&amp;#8220;Updating Intellisense &amp;#8230;&amp;#8221;&lt;/strong&gt;
&lt;/p&gt;
&lt;p&gt;Who coined that galumphing portmanteau? It means auto-completion and I don&amp;#8217;t want to know it&amp;#8217;s going on &amp;#8212; especially since I edit code using &lt;a href="http://wordaligned.org/articles/accidental-emacs.html"&gt;Emacs&lt;/a&gt;.
&lt;/p&gt;
&lt;p&gt;Perforce is new to me and I lean on a &lt;a href="http://www.perforce.com/product/components/perforce-visual-client" title="P4V"&gt;graphical client&lt;/a&gt; so heavily I sometimes trip over it. So when I&amp;#8217;m trying to dance round client workspaces and their half-baked integration with microsoft &lt;del&gt;muddles&lt;/del&gt; solutions, the last thing I want is to be asked to &lt;strong&gt;&amp;#8220;Choose a Favorite Connection&amp;#8221;&lt;/strong&gt;. When it comes to Perforce Servers I don&amp;#8217;t have favourites let alone favorites. Sorry.
&lt;/p&gt;</description>
<dc:date>2013-04-17</dc:date>
<guid>http://wordaligned.org/articles/solutions</guid>
<author>tag@wordaligned.org (Thomas Guest)</author>
<link>http://wordaligned.org/articles/solutions</link>
<category>Windows</category>
<category>C++</category>
<category>Emacs</category>
</item>

<item>
<title>ACCU 2013</title>
<description>&lt;img src="http://accu.org/content/images/conferences/2013/accu2013web.png" alt="ACCU 2013" /&gt;

&lt;p&gt;Brian Marick opened the second day of ACCU 2013 with a keynote presentation entitled: &lt;a href="http://accu.org/index.php/conferences/accu_conference_2013/accu2013_sessions#cheating_decline:acting_now_to_let_you_program_well_for_a_really_long_time"&gt;&amp;#8220;Cheating Decline: Acting now to let you program well for a really long time&amp;#8221;&lt;/a&gt;. He drew a distinction between effortful and automatic thinking. For example, we can drive a car along a clear road automatically but it requires considerable concentration to parallel park that same car. By tuning out unwanted signals crickets can locate their mates using minimal brainpower, and cricket players have no need of Newtonian dynamics to track the trajectory of a ball &amp;#8212; they apply a simple visual self-calibrating algorithm to catch out batsmen. Tango dancers disturb and re-establish invariants. A robot can walk for hours without thinking about what it&amp;#8217;s doing. Actually, if it&amp;#8217;s your job to park cars, you can probably do &lt;strong&gt;that&lt;/strong&gt; without thinking; and this was Brian Marick&amp;#8217;s main cheat &amp;#8212; find the work practices which allow you to lean on your perceptions and so avoid effortful thinking.
&lt;/p&gt;
&lt;iframe width="560" height="315" src="http://www.youtube.com/embed/rhu2xNIpgDE?rel=0" frameborder="0" allowfullscreen&gt;&lt;/iframe&gt;

&lt;p&gt;Anthony Williams&amp;#8217; talk on &lt;a href="http://accu.org/index.php/conferences/accu_conference_2013/accu2013_sessions#c_11_features_and_real-world_code"&gt;C++11 Features and Real World code&lt;/a&gt; did require effortful thinking but that was what I&amp;#8217;d hoped for. He provided a concise and expert summary of the new language features in action, focusing on the biggest early winners. Leading with &lt;code&gt;auto&lt;/code&gt;, &lt;code&gt;lambda&lt;/code&gt;, &lt;code&gt;range-for&lt;/code&gt;, he went on to talk about concurrency and move semantics. I learned that &lt;code&gt;lambda&lt;/code&gt; functions can have a mutable qualifier. Ha!
&lt;/p&gt;
&lt;p&gt;I couldn&amp;#8217;t resist &lt;a href="http://www.pvv.org/~oma/"&gt;Olve Maudal&amp;#8217;s&lt;/a&gt; C++11 pub quiz, appropriately held in the Marriot Hotel bar, for which we formed teams and mentally compiled and executed dodgy code, capturing standard output on an answer sheet. Some of the answers may well have have been implementation dependent but Olve specified an implementation: our answers should match &lt;strong&gt;this&lt;/strong&gt; laptop running &lt;strong&gt;this&lt;/strong&gt; software. I was simultaneously appalled by the limits of my knowledge on fundamental subjects such as integral promotion and initialisation order, and surprised by my ability to correctly predict the behaviour of some esoteric and perverse code. I&amp;#8217;m chastened and will be studying the answers in the cold light of day. Brian Marick may have advocated programming after a beer or two in his morning session, but the afternoon pub quiz proved that coffee works better for me!
&lt;/p&gt;
&lt;p&gt;A programmer&amp;#8217;s dozen (13, which is 12 counting from zero!) lightning talks kept the day crackling with energy. Ewan Milne chaired the session expertly, adeptly dispatching a birthday cake as proceedings commenced. I wish I could describe all the talks but you really had to be there. Phil Nash&amp;#8217;s use of the little known &lt;a href="http://ideone.com/jWHxu2"&gt;left arrow operator&lt;/a&gt; &amp;larr; got a well deserved response from the audience. Sander Hoogendoorn stuck the boot into &lt;a href="http://sanderhoogendoorn.com/blog/?p=1059"&gt;&amp;#8220;Agile Fluffiness&amp;#8221;&lt;/a&gt;. &lt;a href="http://www.renaissancesoftware.net/blog/"&gt;James Grenning&amp;#8217;s&lt;/a&gt; talk on embedded development was a lightning keynote: hilarious, moving and, ultimately, tragic.
&lt;/p&gt;</description>
<dc:date>2013-04-11</dc:date>
<guid>http://wordaligned.org/articles/accu-2013</guid>
<author>tag@wordaligned.org (Thomas Guest)</author>
<link>http://wordaligned.org/articles/accu-2013</link>
<category>ACCU</category>
<category>C++</category>
<category>Bristol</category>
</item>

<item>
<title>An Exploration of the Phenomenology of Software Development</title>
<description>&lt;p&gt;I was lucky to be in the audience last week, when &lt;a href="http://charlestolman.com/"&gt;Charles Tolman&lt;/a&gt; visited Accu Bristol to preview his Accu 2013 conference talk: &lt;a href="http://www.meetup.com/ACCU-Bristol-Bath/events/105025942" title="An Exploration of the Phenomenology of Software Development"&gt;&amp;#8220;An Exploration of the Phenomenology of Software Development&amp;#8221;&lt;/a&gt;.
&lt;/p&gt;
&lt;p&gt;The talk precis is entirely accurate &amp;#8212; but maybe not so helpful. What this talk actually delivers is a highly original and thoughtful examination of what the software development revolution is and how we can make sense of it.
&lt;/p&gt;
&lt;p&gt;Charles Tolman&amp;#8217;s central insight is that we have crossed a boundary. New tools and technologies have extended our powers. Just as  machinery developed in the industrial revolution extended our physical abilities, so software developed in the information technology revolution extends our capacity for thought.
&lt;/p&gt;
&lt;p&gt;Essentially, software development &lt;strong&gt;is&lt;/strong&gt; thinking, so to analyse it we need to think about thought. With this realisation we can view our industry as a continuation of the efforts of earlier thought workers &amp;#8212; philosophers such as Descartes and Goethe.
&lt;/p&gt;
&lt;p&gt;If this all sounds a bit heavy, Charles made space for anecdotes, humourous insights and pictures of gliders. I look forward to future episodes.
&lt;/p&gt;</description>
<dc:date>2013-04-02</dc:date>
<guid>http://wordaligned.org/articles/an-exploration-of-the-phenomenology-of-software-development</guid>
<author>tag@wordaligned.org (Thomas Guest)</author>
<link>http://wordaligned.org/articles/an-exploration-of-the-phenomenology-of-software-development</link>
<category>ACCU</category>
</item>

<item>
<title>Patience Sorted</title>
<description>&lt;p&gt;I gave a lightning talk today about patience sorting and its application to the longest increasing subsequence problem. It&amp;#8217;s a subject I&amp;#8217;ve &lt;a href="http://wordaligned.org/articles/patience-sort.html" title="Patience sort and the longest increasing subsequence"&gt;written about&lt;/a&gt; before. My computer has been put through several million simulations. I&amp;#8217;ve even coded up a &lt;a href="http://wordaligned.org/pages/psort"&gt;javascript demo&lt;/a&gt; which deals out virtual playing cards and sorts them at the click of a button.
&lt;/p&gt;
&lt;script type="text/javascript" src="http://ajax.googleapis.com/ajax/libs/jquery/1.3.1/jquery.min.js"&gt;&lt;/script&gt;
&lt;script type="text/javascript"&gt;
var zz = 0;

var xtop  = ["330px", "302px", "275px", "255px", "234px", "209px", "187px", "158px", "128px", "99px", "70px", "43px", "15px"];
var ytop  = ["26px", "30px", "28px", "29px", "31px", "28px", "27px", "28px", "28px", "30px", "26px", "30px", "29px"];
var xpile = ["10px", "13px", "12px", "115px", "14px", "220px", "220px", "319px", "15px", "216px", "118px", "118px", "321px"];
var ypile = ["205px", "233px", "266px", "206px", "295px", "206px", "236px", "209px", "325px", "267px", "235px", "263px", "234px"];
var result = ["#card7", "#card6", "#card3", "#card2"];

function reset_cards() {
    jQuery("img").stop();
    zz += 13;
    for (var j = 0; j != 13; ++j, --zz) {
        jQuery("#card" + j)
        .css({"z-index":zz, "margin-left":xtop[j], "margin-top":ytop[j], "border-width":0});
    }
    zz += 13;
}

function lis(j) {
    var it = jQuery(result[j]);
    if (it.length &gt; 0) {
        it.animate({borderWidth : "5px"}, "slow", 0, function(){lis(++j);});
    }
}

function psort(j) {
    var it = jQuery("#card"+j);
    if (it.length != 0) {
        it
        .animate({marginLeft : xpile[j], marginTop: ypile[j]}, "slow", 0, function(){psort(++j);})
        .css({"z-index" : ++zz});
    } else {
        lis(0);
    }
}

function animate() {
    reset_cards();
    psort(0);
}
&lt;/script&gt;

&lt;div class="cardtable" style="background-color: #093; width:440px; height:480px;"&gt;
&lt;img id="card0" style="border: 0 orange solid; position: absolute; margin-left: 330px; margin-top: 27px; z-index: 13;" src="http://wordaligned.org/images/cards/1s.png" alt="Ace of Spades"/&gt;
&lt;img id="card1" style="border: 0 orange solid; position: absolute; margin-left: 302px; margin-top: 27px; z-index: 12;" src="http://wordaligned.org/images/cards/10s.png" alt="10 of Spades"/&gt;
&lt;img id="card2" style="border: 0 orange solid; position: absolute; margin-left: 275px; margin-top: 27px; z-index: 11;" src="http://wordaligned.org/images/cards/6s.png" alt="6 of Spades"/&gt;
&lt;img id="card3" style="border: 0 orange solid; position: absolute; margin-left: 255px; margin-top: 26px; z-index: 10;" src="http://wordaligned.org/images/cards/7s.png" alt="7 of Spades"/&gt;
&lt;img id="card4" style="border: 0 orange solid; position: absolute; margin-left: 234px; margin-top: 28px; z-index: 9;" src="http://wordaligned.org/images/cards/5s.png" alt="5 of Spades"/&gt;
&lt;img id="card5" style="border: 0 orange solid; position: absolute; margin-left: 209px; margin-top: 26px; z-index: 8;" src="http://wordaligned.org/images/cards/13s.png" alt="King of Spades"/&gt;
&lt;img id="card6" style="border: 0 orange solid; position: absolute; margin-left: 187px; margin-top: 31px; z-index: 7;" src="http://wordaligned.org/images/cards/9s.png" alt="9 of Spades"/&gt;
&lt;img id="card7" style="border: 0 orange solid; position: absolute; margin-left: 158px; margin-top: 27px; z-index: 6;" src="http://wordaligned.org/images/cards/12s.png" alt="Queen of Spades"/&gt;
&lt;img id="card8" style="border: 0 orange solid; position: absolute; margin-left: 128px; margin-top: 29px; z-index: 5;" src="http://wordaligned.org/images/cards/2s.png" alt="2 of Spades"/&gt;
&lt;img id="card9" style="border: 0 orange solid; position: absolute; margin-left: 99px; margin-top: 29px; z-index: 4;" src="http://wordaligned.org/images/cards/8s.png" alt="8 of Spades"/&gt;
&lt;img id="card10" style="border: 0 orange solid; position: absolute; margin-left: 70px; margin-top: 26px; z-index: 3;" src="http://wordaligned.org/images/cards/4s.png" alt="4 of Spades"/&gt;
&lt;img id="card11" style="border: 0 orange solid; position: absolute; margin-left: 43px; margin-top: 27px; z-index: 2;" src="http://wordaligned.org/images/cards/3s.png" alt="3 of Spades"/&gt;
&lt;img id="card12" style="border: 0 orange solid; position: absolute; margin-left: 15px; margin-top: 28px; z-index: 1;" src="http://wordaligned.org/images/cards/11s.png" alt="Knave of Spades"/&gt;
&lt;/div&gt;&lt;div&gt;&lt;p&gt;&lt;button onclick="reset_cards();"&gt;Reset&lt;/button&gt;&lt;button onclick="animate();"&gt;Play&lt;/button&gt;&lt;/p&gt;&lt;/div&gt;

&lt;p&gt;Today I used real playing cards; a linen-finished standard deck. For any talk it&amp;#8217;s nice to have a prop.
&lt;/p&gt;
&lt;p&gt;&lt;a href="http://www.flickr.com/photos/thomasguest/8558343442/" title="Rock &amp;amp; Pop Legends by Thomas Guest, on Flickr"&gt;&lt;img src="http://farm9.staticflickr.com/8100/8558343442_0402f04e83.jpg" width="500" height="361" alt="Rock &amp;amp; Pop Legends"&gt;&lt;/a&gt;
&lt;/p&gt;
&lt;p&gt;Now, I &lt;strong&gt;thought&lt;/strong&gt; I understood the patience sort algorithm but until yesterday I&amp;#8217;d never actually played it with real cards. I&amp;#8217;ve been surprised by how much this physical dimension has developed my understanding.
&lt;/p&gt;
&lt;p&gt;I&amp;#8217;ll be testing my new cards on some other sorting algorithms; I have high hopes. It would be good to find a similarly simple prop for linked data structures so I can balance trees, flip lists and walk graphs.
&lt;/p&gt;</description>
<dc:date>2013-03-14</dc:date>
<guid>http://wordaligned.org/articles/patience-sorted</guid>
<author>tag@wordaligned.org (Thomas Guest)</author>
<link>http://wordaligned.org/articles/patience-sorted</link>
<category>Algorithms</category>
<category>Puzzles</category>
<category>Self</category>
</item>

<item>
<title>Hosting for Life? TextDrive revived!</title>
<description>&lt;p&gt;Towards the end of last year I was emailed by Jason Hoffman from Joyent. &lt;a href="http://en.wikipedia.org/wiki/Joyent" title="Wikipedia on Joyent and TextDrive"&gt;Joyent owned TextDrive&lt;/a&gt;, the company which, 6 years ago, offered web hosting &lt;strong&gt;for life&lt;/strong&gt; in return for a single up-front payment. Jason&amp;#8217;s email said this lifetime hosting &amp;#8212; legacy service, he called it &amp;#8212; was nearing &lt;strong&gt;End of Life&lt;/strong&gt; (!) and would be sunsetted (!!) at the end of October 2012.
&lt;/p&gt;
&lt;p&gt;&lt;a href="http://textdrive.com"&gt;&lt;img src="http://wordaligned.org/images/txd-banner.png" alt="TextDrive banner"/&gt;&lt;/a&gt; 
&lt;/p&gt;
&lt;p&gt;As a TextDrive customer I reckon I&amp;#8217;d had good value from the original deal, but while six years may seem like forever on the internet it&amp;#8217;s surely not a lifetime. Happily TextDrive&amp;#8217;s original founder, Dean Allen, &lt;a href="http://techcrunch.com/2012/08/30/happy-ending-to-the-joyent-lifetime-subscription-story/" title="TechCrunch reports on Joyent/TextDrive"&gt;felt the same way&lt;/a&gt;: &lt;strong&gt;he&lt;/strong&gt; emailed me to say he&amp;#8217;d be relaunching &lt;a href="http://textdrive.com/"&gt;TextDrive&lt;/a&gt; on a new, modern, infrastructure.
&lt;/p&gt;
&lt;p&gt;Quite how this pans out remains to be seen but I&amp;#8217;m sticking it out. If you&amp;#8217;re reading this page, great: it&amp;#8217;s been served up by the new, modern infrastructure which Dean mentioned. Whilst migrating &lt;a href="http://wordaligned.org/"&gt;wordaligned.org&lt;/a&gt; I&amp;#8217;ve had to fiddle with rewrite rules and tinker with DNS records and file permissions. Any glitches or oddities, please &lt;a href="mailto:tag@wordaligned.org?subject=Wordaligned.org%20glitches"&gt;let me know&lt;/a&gt;.
&lt;/p&gt;</description>
<dc:date>2013-03-06</dc:date>
<guid>http://wordaligned.org/articles/hosting-for-life-textdrive-revived</guid>
<author>tag@wordaligned.org (Thomas Guest)</author>
<link>http://wordaligned.org/articles/hosting-for-life-textdrive-revived</link>
<category>Self</category>
<category>Web-applications</category>
</item>

<item>
<title>More adventures in C++</title>
<description>&lt;div class="typocode"&gt;

&lt;pre class="prettyprint"&gt;bool operator&amp;lt;(version const &amp;amp; v1, version const &amp;amp; v2)
{
    if (v1.major != v2.major)
        return v1.major &amp;lt; v2.major;
    if (v1.minor != v2.minor)
        return v1.minor &amp;lt; v2.minor;
    if (v1.patch != v2.patch)
        return v1.patch &amp;lt; v2.patch;
    return v1.build &amp;lt; v2.build;
}

&lt;/pre&gt;

&lt;/div&gt;

&lt;p&gt;C++ programmers are sticklers for tradition and unlikely to be swayed by &lt;a href="http://www.zemanta.com/blog/i-bet-you-over-engineered-your-startup/#comment-685047168" title="unlike web developers"&gt;what&amp;#8217;s in fashion&lt;/a&gt;. C++ suits those who want to control the machine, and who respect the rigour and discipline this imposes. C++ programmers are generally a conservative bunch.
&lt;/p&gt;
&lt;p&gt;Some history: C++ was standardized in 1998. The next major revision of the language was developed under the working title of C++0x, where the &amp;#8220;0x&amp;#8221; stood for the year the job would be finished. The X gave the standardizers some slack, but not enough. C++0x became C++11 which is now, thankfully, simply C++.
&lt;/p&gt;
&lt;p&gt;Although the language&amp;#8217;s development has been painstakingly slow the developments themselves have been extensive and radical. What&amp;#8217;s more, users are rushing to use the new features &amp;#8212; even before they have access to compilers which support them! I&amp;#8217;ve seen answers to C++ topics on Q&amp;amp;A sites which use aspects of the language the contributors cheerfully admit they have no access to. I&amp;#8217;ve worked on a project which used elaborate shims to hide the fact that GCC 4.6 couldn&amp;#8217;t compile C++ as well as GCC 4.7 does, and this despite the fact that &lt;a href="http://gcc.gnu.org/projects/cxx0x.html" title="Important: GCC's support for C++11 is still experimental"&gt;GCC&amp;#8217;s C++11 support remains, officially, &amp;#8220;experimental&amp;#8221;&lt;/a&gt;.
&lt;/p&gt;
&lt;span id="continue-reading"/&gt;

&lt;p&gt;At home, I&amp;#8217;m downloading compiler and library updates I&amp;#8217;m in no position to use at work; and at work, I&amp;#8217;ve already been sent on a C++11 training course.  I&amp;#8217;ve streamed high quality &lt;a href="http://channel9.msdn.com/Events/GoingNative/GoingNative-2012" title="Going Native 2012 - good stuff here!"&gt;videos&lt;/a&gt; starring C++&amp;#8217;s big hitters which promote the new C++, explaining its principles, its foundations, and even where it&amp;#8217;s going next.
&lt;/p&gt;
&lt;p&gt;What exactly is it about C++11 that&amp;#8217;s roused such a normally phlegmatic audience?
&lt;/p&gt;
&lt;p&gt;Before I try and answer that, I&amp;#8217;ll venture to suggest new C++ isn&amp;#8217;t going to win many new recruits. I don&amp;#8217;t even think it will persuade those who have abandoned the language to return. C++11 contains all of C++98, a notoriously complex and subtle language, then adds &lt;a href="http://www.stroustrup.com/C++11FAQ.html#learn" title="Is C++11 hard to learn? Stroustrup C++11 FAQ"&gt;a whole lot more&lt;/a&gt;. Yes, it &lt;strong&gt;is&lt;/strong&gt; possible to write new C++ which is more compact and efficient than traditional C++, but you&amp;#8217;ll also need to maintain old C++ code and build new expertise. And the language update fails to address some of C++&amp;#8217;s worst characteristics: slow compile times and impenetrable compiler diagnostics.
&lt;/p&gt;
&lt;p&gt;No, C++11 is primarily a win for existing C++ programmers; those of us who already have a fair understanding of the language and its trade-offs, and who can appreciate the rationale behind the changes. For traditionalists and pragmatists, the transition isn&amp;#8217;t hard &amp;#8212; at least, no harder than any port between compiler revisions. For progressives, there are several immediate wins: the &lt;code&gt;auto&lt;/code&gt; keyword has been repurposed, reducing repetition and making code more flexible; lambdas enable functions to be plugged directly into algorithms; smart pointers are standard, allowing accurate memory management; and on the subject of memory, rvalues and move semantics mean you&amp;#8217;ll waste less of it on temporaries.
&lt;/p&gt;
&lt;p&gt;I could go on.
&lt;/p&gt;
&lt;p&gt;Rather than risk more generalisations, here&amp;#8217;s a specific example of C++11 in action. Consider an object with multiple fields, a four part version number, say.
&lt;/p&gt;
&lt;div class="typocode"&gt;

&lt;pre class="prettyprint"&gt;struct version
{
    unsigned major, minor, patch, build;
};

&lt;/pre&gt;

&lt;/div&gt;

&lt;p&gt;To compare version numbers, or sort them, or put them in a &lt;code&gt;std::set&lt;/code&gt;, we&amp;#8217;ll need &lt;code&gt;operator&amp;lt;()&lt;/code&gt;. This operator must model a &lt;a href="http://www.sgi.com/tech/stl/StrictWeakOrdering.html"&gt;strict weak ordering&lt;/a&gt;. The canonical form looks something like.
&lt;/p&gt;
&lt;div class="typocode"&gt;

&lt;pre class="prettyprint"&gt;bool operator&amp;lt;(version const &amp;amp; v1, version const &amp;amp; v2)
{
    if (v1.major != v2.major)
        return v1.major &amp;lt; v2.major;
    if (v1.minor != v2.minor)
        return v1.minor &amp;lt; v2.minor;
    if (v1.patch != v2.patch)
        return v1.patch &amp;lt; v2.patch;
    return v1.build &amp;lt; v2.build;
}

&lt;/pre&gt;

&lt;/div&gt;

&lt;p&gt;It&amp;#8217;s not so hard to write this code for the &lt;code&gt;version&lt;/code&gt; struct, where we have a clear idea of what it means for one version number to be less than another. It would be rather more tricky if we were dealing with points, for example, &lt;code&gt;struct point { int x, y; };&lt;/code&gt;. Ordering points makes little sense but we might well want them as keys in an associative container, and we&amp;#8217;d better have a suitable &lt;code&gt;operator&amp;lt;()&lt;/code&gt;.
&lt;/p&gt;
&lt;div class="typocode"&gt;&lt;div class="codetitle"&gt;No, no, no!&lt;/div&gt;

&lt;pre class="prettyprint"&gt;bool operator&amp;lt;(point const &amp;amp; p1, point const &amp;amp; p2)
{
    return p1.x &amp;lt; p2.x &amp;amp;&amp;amp; p1.y &amp;lt; p2.y;
}

&lt;/pre&gt;

&lt;/div&gt;

&lt;p&gt;With C++11 &amp;#8212; &lt;strong&gt;with the current version of C++&lt;/strong&gt; &amp;#8212; we can use &lt;code&gt;std::tie()&lt;/code&gt; to create a tuple of references, recasting &lt;code&gt;operator&amp;lt;()&lt;/code&gt; into a form that&amp;#8217;s easy to read and hard to get wrong.
&lt;/p&gt;
&lt;div class="typocode"&gt;&lt;div class="codetitle"&gt;Yes, yes, yes!&lt;/div&gt;

&lt;pre class="prettyprint"&gt;bool operator&amp;lt;(version const &amp;amp; v1, version const &amp;amp; v2)
{
    return std::tie(v1.major, v1.minor, v1.patch, v1.build)
         &amp;lt; std::tie(v2.major, v2.minor, v2.patch, v2.build);
}

bool operator&amp;lt;(point const &amp;amp; p1, point const &amp;amp; p2)
{
    return std::tie(p1.x, p1.y) &amp;lt; std::tie(p2.x, p2.y);
}

&lt;/pre&gt;

&lt;/div&gt;

&lt;p style="text-align:center"&gt;&amp;sect;&lt;/p&gt;

&lt;p&gt;My thanks to Jonathan Wakely for sharing the &lt;code&gt;std::tie()&lt;/code&gt; recipe on the &lt;a href="http://accu.org/index.php/mailinglists"&gt;accu-general mailing list&lt;/a&gt; and for letting me use it here.
&lt;/p&gt;</description>
<dc:date>2013-02-21</dc:date>
<guid>http://wordaligned.org/articles/more-adventures-in-c++</guid>
<author>tag@wordaligned.org (Thomas Guest)</author>
<link>http://wordaligned.org/articles/more-adventures-in-c++</link>
<category>C++</category>
<category>ACCU</category>
</item>

<item>
<title>Singly Linked Lists in C++</title>
<description>&lt;p&gt;In a &lt;a href="http://wordaligned.org/articles/two-star-programming.html"&gt;recent post&lt;/a&gt; I wrote about removing items from a singly linked list. I presented a couple of alternative implementations, and in the comments section readers suggested yet more versions.
&lt;/p&gt;
&lt;p&gt;My implementations were written in C: the post was inspired by something &lt;a href="http://meta.slashdot.org/story/12/10/11/0030249/linus-torvalds-answers-your-questions"&gt;Linus Torvalds had said&lt;/a&gt; about low-level programming skills, and I&amp;#8217;m guessing he meant C programming skills. The fact is, C programmers are condemned to reimplement these basic functions on this basic structure because the C standard library has nothing to say about singly linked lists. Until recently the C++ standard library was similarly silent on the subject, only offering a doubly linked list.
&lt;/p&gt;

&lt;h3&gt;C++ introduces &amp;#8230; the linked list!&lt;/h3&gt;
&lt;p&gt;That&amp;#8217;s all changed now with the introduction of &lt;code&gt;std::forward_list&lt;/code&gt;. The &lt;a href="http://en.cppreference.com/w/cpp/container/forward_list"&gt;class interface&lt;/a&gt; doesn&amp;#8217;t mention links or pointers but a quick glance through its contents makes it clear that if you imagine the container to be a templated version of a classic singly-linked list, you won&amp;#8217;t go far wrong.
&lt;/p&gt;
&lt;p&gt;This gives &lt;code&gt;forward_list&lt;/code&gt; some members you won&amp;#8217;t find elsewhere in the &lt;code&gt;std::&lt;/code&gt; namespace. For example, &lt;code&gt;std::forward_list::before_begin()&lt;/code&gt;, which returns an iterator just before the beginning of the list &amp;#8212; much as the more familiar &lt;code&gt;end()&lt;/code&gt; is just past the end.
&lt;/p&gt;
&lt;p&gt;Why is &lt;code&gt;before_begin()&lt;/code&gt; necessary? You can&amp;#8217;t dereference it and you can&amp;#8217;t reverse through a forward list till you get to it. Well, since forward list iterators can only go forwards, instead of the familiar sequence &lt;code&gt;insert()&lt;/code&gt;, &lt;code&gt;erase()&lt;/code&gt; and &lt;code&gt;emplace()&lt;/code&gt; methods we have &lt;code&gt;insert_after()&lt;/code&gt;, &lt;code&gt;erase_after()&lt;/code&gt; and &lt;code&gt;emplace_after()&lt;/code&gt;, not to mention &lt;code&gt;splice_after()&lt;/code&gt;. The before-the-beginning iterator allows you to use these operations to modify the node at the head of the list.
&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Quick question&lt;/strong&gt;: what&amp;#8217;s the complexity of &lt;code&gt;std::list::size()&lt;/code&gt;?
&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Trick question&lt;/strong&gt;: and how about &lt;code&gt;std::forward_list::size()&lt;/code&gt;?
&lt;/p&gt;
&lt;span id="continue-reading"/&gt;


&lt;h3&gt;Remove_if for forward lists&lt;/h3&gt;
&lt;p&gt;Using pointers-to-pointers to modify linked lists gives this elegant and compact C implementation of &lt;code&gt;remove_if()&lt;/code&gt;, which de-lists all nodes which match a supplied predicate.
&lt;/p&gt;
&lt;div class="typocode"&gt;

&lt;pre class="prettyprint"&gt;void remove_if(node ** head, remove_fn rm)
{
    for (node** curr = head; *curr; )
    {
        node * entry = *curr;
        if (rm(entry))
        {
            *curr = entry-&amp;gt;next;
            free(entry);
        }
        else
            curr = &amp;amp;entry-&amp;gt;next;
    }
}

&lt;/pre&gt;

&lt;/div&gt;

&lt;p&gt;How does the C++ standard library support this algorithm?
&lt;/p&gt;
&lt;p&gt;&lt;a href="http://en.cppreference.com/w/cpp/algorithm/remove"&gt;&lt;code&gt;Std::remove_if()&lt;/code&gt;&lt;/a&gt; operates on an iterator range, &lt;code&gt;remove_if(first, last, pred)&lt;/code&gt;. All it requires is that the iterators are forward iterators so it should just work on a &lt;code&gt;forward_list&lt;/code&gt;.
&lt;/p&gt;
&lt;p&gt;Hang on though: what if &lt;code&gt;pred(*first)&lt;/code&gt; is true? How can a node be removed from a linked list without reference to its predecessor? Actually, the node isn&amp;#8217;t removed &amp;#8212; the value it contains gets overwritten by the value in the first node (if any!) for which the predicate returns false. In fact, &lt;code&gt;remove_if&lt;/code&gt; &lt;strong&gt;doesn&amp;#8217;t remove anything&lt;/strong&gt; from the container! What it does is return an iterator, call it &lt;code&gt;new_last&lt;/code&gt;, such that the range &lt;code&gt;(first, new_last)&lt;/code&gt; holds the elements which have been kept, and &lt;code&gt;(new_last, last)&lt;/code&gt; holds those which have been &amp;#8220;removed&amp;#8221;, which is to say they can still be dereferenced but their value is implementation dependent.
&lt;/p&gt;
&lt;p&gt;&lt;code&gt;Remove_if&lt;/code&gt; usually pairs up with erase:
&lt;/p&gt;
&lt;div class="typocode"&gt;

&lt;pre class="prettyprint"&gt;container.erase(remove_if(first, last, pred), last);

&lt;/pre&gt;

&lt;/div&gt;

&lt;p&gt;There is no &lt;code&gt;std::forward_list::erase(iterator)&lt;/code&gt; &amp;#8212; remember, we can only erase &lt;strong&gt;after&lt;/strong&gt; &amp;#8212; so the usual remove_if algorithm is of little use for forward lists.
&lt;/p&gt;

&lt;h3&gt;Forward_list::remove_if()&lt;/h3&gt;
&lt;p&gt;As usual, we should &lt;a href="http://www.informit.com/articles/article.aspx?p=21851" title="Scott Meyers, Effective STL"&gt;prefer member functions to algorithms with the same names&lt;/a&gt;. C++&amp;#8217;s &lt;code&gt;forward_list&lt;/code&gt; has its very own &lt;code&gt;remove_if&lt;/code&gt; which manipulates pointers rather than moves values, and which really does remove and destroy items.
&lt;/p&gt;
&lt;p&gt;&lt;a href="http://en.cppreference.com/w/cpp/container/forward_list/remove"&gt;&lt;code&gt;Forward_list::remove_if()&lt;/code&gt;&lt;/a&gt; operates on the list as a whole, not an iterator range &amp;#8212; as we&amp;#8217;ve seen, an iterator cannot remove itself. I took a look at a couple of implementations of this function to see how it&amp;#8217;s done.
&lt;/p&gt;
&lt;p&gt;Here&amp;#8217;s LLVM&amp;#8217;s libc++ &lt;a href="http://llvm.org/svn/llvm-project/libcxx/trunk/include/forward_list"&gt;implementation&lt;/a&gt;:
&lt;/p&gt;
&lt;div class="typocode"&gt;

&lt;pre class="prettyprint"&gt;template &amp;lt;class _Tp, class _Alloc&amp;gt;
template &amp;lt;class _Predicate&amp;gt;
void
forward_list&amp;lt;_Tp, _Alloc&amp;gt;::remove_if(_Predicate __pred)
{
    iterator __e = end();
    for (iterator __i = before_begin(); __i.__ptr_-&amp;gt;__next_ != nullptr;)
    {
        if (__pred(__i.__ptr_-&amp;gt;__next_-&amp;gt;__value_))
        {
            iterator __j = _VSTD::next(__i, 2);
            for (; __j != __e &amp;amp;&amp;amp; __pred(*__j); ++__j)
                ;
            erase_after(__i, __j);
            if (__j == __e)
                break;
            __i = __j;
        }
        else
            ++__i;
    }
}

&lt;/pre&gt;

&lt;/div&gt;

&lt;p&gt;There&amp;#8217;s no need for any special treatment of the first list node here, since we have its predecessor, the &lt;code&gt;before_begin()&lt;/code&gt; node. The function does double back though, figuring out the next range to erase before going back to erase it &amp;#8212; and the erase function isn&amp;#8217;t pretty.
&lt;/p&gt;
&lt;div class="typocode"&gt;

&lt;pre class="prettyprint"&gt;template &amp;lt;class _Tp, class _Alloc&amp;gt;
typename forward_list&amp;lt;_Tp, _Alloc&amp;gt;::iterator
forward_list&amp;lt;_Tp, _Alloc&amp;gt;::erase_after(const_iterator __f, const_iterator __l)
{
    __node_pointer __e = const_cast&amp;lt;__node_pointer&amp;gt;(__l.__ptr_);
    if (__f != __l)
    {
        __node_pointer __p = const_cast&amp;lt;__node_pointer&amp;gt;(__f.__ptr_);
        __node_pointer __n = __p-&amp;gt;__next_;
        if (__n != __e)
        {
            __p-&amp;gt;__next_ = __e;
            __node_allocator&amp;amp; __a = base::__alloc();
            do
            {
                __p = __n-&amp;gt;__next_;
                __node_traits::destroy(__a, _VSTD::addressof(__n-&amp;gt;__value_));
                __node_traits::deallocate(__a, __n, 1);
                __n = __p;
            } while (__n != __e);
        }
    }
    return iterator(__e);
}

&lt;/pre&gt;

&lt;/div&gt;

&lt;p&gt;For comparison, here&amp;#8217;s how GCC&amp;#8217;s &lt;a href="http://gcc.gnu.org/viewcvs/trunk/libstdc%2B%2B-v3/include/bits/forward_list.tcc?view=markup"&gt;libstdc++ does the same thing&lt;/a&gt;.
&lt;/p&gt;
&lt;div class="typocode"&gt;

&lt;pre class="prettyprint"&gt;template&amp;lt;typename _Tp, typename _Alloc&amp;gt;
    template&amp;lt;typename _Pred&amp;gt;
      void
      forward_list&amp;lt;_Tp, _Alloc&amp;gt;::
      remove_if(_Pred __pred)
      {
	_Node* __curr = static_cast&amp;lt;_Node*&amp;gt;(&amp;amp;this-&amp;gt;_M_impl._M_head);
        while (_Node* __tmp = static_cast&amp;lt;_Node*&amp;gt;(__curr-&amp;gt;_M_next))
          {
            if (__pred(*__tmp-&amp;gt;_M_valptr()))
              this-&amp;gt;_M_erase_after(__curr);
            else
              __curr = static_cast&amp;lt;_Node*&amp;gt;(__curr-&amp;gt;_M_next);
          }
      }

&lt;/pre&gt;

&lt;/div&gt;

&lt;p&gt;Here, erasing (after a) node reads:
&lt;/p&gt;
&lt;div class="typocode"&gt;

&lt;pre class="prettyprint"&gt;template&amp;lt;typename _Tp, typename _Alloc&amp;gt;
    _Fwd_list_node_base*
    _Fwd_list_base&amp;lt;_Tp, _Alloc&amp;gt;::
    _M_erase_after(_Fwd_list_node_base* __pos)
    {
      _Node* __curr = static_cast&amp;lt;_Node*&amp;gt;(__pos-&amp;gt;_M_next);
      __pos-&amp;gt;_M_next = __curr-&amp;gt;_M_next;
      _Tp_alloc_type __a(_M_get_Node_allocator());
      allocator_traits&amp;lt;_Tp_alloc_type&amp;gt;::destroy(__a, __curr-&amp;gt;_M_valptr());
      __curr-&amp;gt;~_Node();
      _M_put_node(__curr);
      return __pos-&amp;gt;_M_next;
    }

&lt;/pre&gt;

&lt;/div&gt;

&lt;p&gt;This version walks through the list removing nodes which match the predicate as it finds them. Don&amp;#8217;t be confused by &lt;code&gt;&amp;amp;this-&amp;gt;_M_impl._M_head&lt;/code&gt;: it&amp;#8217;s not the node at the head of the list, it&amp;#8217;s the one before.
&lt;/p&gt;

&lt;h3&gt;Lessons from C++&lt;/h3&gt;
&lt;p&gt;Maybe this code wouldn&amp;#8217;t persaude Linus Torvalds to rethink &lt;a href="http://harmful.cat-v.org/software/c++/linus" title="C++ is a horrible language"&gt;his opinion of C++&lt;/a&gt;, but if you can see past the angle brackets, underscores and allocators, it&amp;#8217;s simple enough.
&lt;/p&gt;
&lt;p&gt;It&amp;#8217;s also:
&lt;/p&gt;
&lt;ul&gt;
 &lt;li&gt;
     subtle, so I&amp;#8217;m glad someone else has written and checked it
 &lt;/li&gt;

 &lt;li&gt;
     generic, so I can put what I want in a list without casting or indirection
 &lt;/li&gt;

 &lt;li&gt;
     standard, so I know what to expect
 &lt;/li&gt;

 &lt;li&gt;
     supported
 &lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;The before-begin node idea serves &lt;a href="http://wordaligned.org/articles/two-star-programming.html#comment-760751047"&gt;equally well in C&lt;/a&gt;, enabling list modifiers which have no need of double indirection or special case code for the list head.
&lt;/p&gt;
&lt;div class="typocode"&gt;

&lt;pre class="prettyprint"&gt;void remove_after(node * prev, remove_fn rm)
{
    while (prev-&amp;gt;next != NULL)
    {
        node * curr = prev-&amp;gt;next;
        if (rm(curr))
        {
            prev-&amp;gt;next = curr-&amp;gt;next;
            free(curr);
        }
        else
            prev = curr;
    }
}

&lt;/pre&gt;

&lt;/div&gt;

&lt;p&gt;Pass this function the before-begin node to remove all items from the list which match the predicate. 
&lt;/p&gt;</description>
<dc:date>2013-02-07</dc:date>
<guid>http://wordaligned.org/articles/singly-linked-lists-in-c++</guid>
<author>tag@wordaligned.org (Thomas Guest)</author>
<link>http://wordaligned.org/articles/singly-linked-lists-in-c++</link>
<category>C</category>
<category>C++</category>
<category>Algorithms</category>
</item>

<item>
<title>Folded files and rainbow code</title>
<description>&lt;p&gt;In one of my first programming jobs I worked at a software house which grew its own tools. We had a home made version control system, build system, test harness and programming language. We even had our own editor!
&lt;/p&gt;
&lt;p&gt;The language was C, lightly extended to support the primitive types of our particular problem domain. The editor was more esoteric. You drove it using the numeric keypad and it modeled source code as nested blocks:
&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;files contained blocks of:&lt;/li&gt;
&lt;ul&gt;&lt;li&gt;includes&lt;/li&gt;
&lt;li&gt;documentation&lt;/li&gt;
&lt;li&gt;data&lt;/li&gt;
&lt;li&gt;functions&lt;/li&gt;&lt;/ul&gt;
&lt;li&gt;functions contained groups of:&lt;/li&gt;
&lt;ul&gt;&lt;li&gt;parameters:&lt;/li&gt;
&lt;ul&gt;&lt;li&gt;in parameters&lt;/li&gt;
&lt;li&gt;out parameters&lt;/li&gt;&lt;/ul&gt;
&lt;li&gt;initialisation blocks&lt;/li&gt;
&lt;li&gt;assertions&lt;/li&gt;
&lt;li&gt;code blocks&lt;/li&gt;
&lt;li&gt;loops&lt;/li&gt;
&lt;li&gt;machine dependent sections&lt;/li&gt;
&lt;li&gt;returns&lt;/li&gt;&lt;/ul&gt;&lt;/ul&gt;

&lt;p&gt;The editor facilitated navigation of this nested structure, with keypresses to &lt;a href="http://en.wikipedia.org/wiki/Code_folding"&gt;fold and unfold&lt;/a&gt;.
&lt;/p&gt;
&lt;p&gt;You don&amp;#8217;t need to write your own editor to get the benefits of code folding: most editors support it to some degree. With this particular editor, however, folding reached its apotheosis. You could crimp and tuck and pleat, nesting layer upon layer within a single source file.
&lt;/p&gt;
&lt;p&gt;&lt;a href="http://www.flickr.com/photos/cobbphoto/4534419314/" title="Origami Dragon by g cobb, on Flickr"&gt;&lt;img src="http://farm5.staticflickr.com/4001/4534419314_705521d064.jpg" width="500" height="334" alt="Origami Dragon"&gt;&lt;/a&gt;
&lt;/p&gt;
&lt;span id="continue-reading"/&gt;

&lt;p&gt;The house editor wasn&amp;#8217;t mandated but the fold tokens it automatically placed in special comments made it challenging to work with anything else &lt;a id="fn1link" href="http://wordaligned.org/articles/folded-files-and-rainbow-code#fn1"&gt;&lt;sup&gt;[1]&lt;/sup&gt;&lt;/a&gt;. 
&lt;/p&gt;
&lt;p&gt;Folding made it easy to work with large files and long, complex functions. Looking back, I&amp;#8217;d say it made it &lt;strong&gt;too&lt;/strong&gt; easy &amp;#8212; I&amp;#8217;ve come to prefer other ways of organising code &amp;#8212; but at the time I saw things differently. We all did. What interests me now is the effect an editor has on the shape of your code.
&lt;/p&gt;
&lt;p&gt;A wide editing pane renders long lines comfortably. Code completion makes forgettable names workable. Smart indentation keeps your code legal even as you type. Cut and paste allows you to replicate an existing function and tweak it for a new use case. Undo, redo and autosave are like version control made simple.
&lt;/p&gt;
&lt;p&gt;The folding editor failed to seduce everyone. One colleague grumbled it lacked syntax highlighting. Well, it probably came from an age before coloured pixels, and, similarly dated, at the time, I couldn&amp;#8217;t see the need.
&lt;/p&gt;
&lt;p&gt;These days I find it hard to operate without syntax highlighting: code doesn&amp;#8217;t even look like code if imports, literals, comments etc. aren&amp;#8217;t visually distinct. Yet there are &lt;a href="http://en.wikipedia.org/wiki/Rob_Pike"&gt;elite programmers&lt;/a&gt; who write their own programming languages using their &lt;a href="http://acme.cat-v.org/faq"&gt;own editors&lt;/a&gt; who find syntax highlighting a distraction.
&lt;/p&gt;
&lt;iframe width="500" height="281" src="http://www.youtube.com/embed/dP1xVpMPn8M?rel=0" frameborder="0" allowfullscreen&gt;&lt;/iframe&gt;

&lt;p&gt;Walking round the office where I work I see a diversity of editors. There are split screens and floating windows, stacked up toolbars, icons piled high. Helicopter views expose the jagged outlines of source code seen from a distance. Lenses zoom in on regions of interest. Tokens glow like plankton in deep sea colour schemes.
&lt;/p&gt;
&lt;p&gt;&lt;a href="http://www.flickr.com/photos/76798465@N00/4169369269/" title="More phytoplankton zooplankton by willapalens, on Flickr"&gt;&lt;img src="http://farm3.staticflickr.com/2663/4169369269_ac9a8bf641.jpg" width="500" height="375" alt="More phytoplankton zooplankton"&gt;&lt;/a&gt;
&lt;/p&gt;
&lt;p&gt;It&amp;#8217;s good practice to develop code on multiple platforms even if your product targets just one. Different compilers and hardware exercise your software in different ways, making it resilient and portable. I wonder too if multiple editors scrutinize your software from different perspectives, keeping it flexible and clean.
&lt;/p&gt;
&lt;p style="text-align:center"&gt;&amp;sect;&lt;/p&gt;

&lt;p&gt;My thanks to &lt;a href="http://www.flickr.com/photos/cobbphoto"&gt;Gary Cobb&lt;/a&gt; for permission to use his origami dragon snap, and to &lt;a href="http://www.flickr.com/photos/76798465@N00"&gt;willapalens&lt;/a&gt; for the plankton. The video clip is by &lt;a href="http://swtch.com/~rsc"&gt;Russ Cox&lt;/a&gt;, acme fanatic and &lt;a href="http://golang.org"&gt;go developer&lt;/a&gt;.
&lt;/p&gt;
&lt;p&gt;&lt;hr /&gt;
   &lt;a id="fn1" href="http://wordaligned.org/articles/folded-files-and-rainbow-code#fn1link"&gt;[1]&lt;/a&gt;: Programmers relish challenges and one seasoned emacs user had put together an emacs mode to cope with the folds.
&lt;/p&gt;</description>
<dc:date>2013-01-23</dc:date>
<guid>http://wordaligned.org/articles/folded-files-and-rainbow-code</guid>
<author>tag@wordaligned.org (Thomas Guest)</author>
<link>http://wordaligned.org/articles/folded-files-and-rainbow-code</link>
<category>Editors</category>
<category>Syntax</category>
</item>

<item>
<title>C++ Concurrency in Action</title>
<description>&lt;p&gt;&lt;span style="text-align:center;font-size:72px;color:gold;"&gt;&amp;#9733;&amp;#9733;&amp;#9733;&amp;#9733;&amp;#9733;&lt;/span&gt;
&lt;/p&gt;
&lt;p&gt;&lt;a href="http://www.amazon.co.uk/C-Concurrency-Action-Practical-Multithreading/dp/1933988770" title="C++ Concurrency in Action, on Amazon"&gt;C++ Concurrency in Action&lt;/a&gt; is an excellent book. You should buy it if you want to use the support for concurrency added by the new C++ standard, C++11; and if you&amp;#8217;re using C++11 you&amp;#8217;ll deepen your understanding of the various language enhancements and how they work together.
&lt;/p&gt;
&lt;div class="amazon"&gt;&lt;a href="http://www.amazon.co.uk/C-Concurrency-Action-Practical-Multithreading/dp/1933988770"&gt;&lt;img src="http://www.justsoftwaresolutions.co.uk/images/ccia.jpg" alt="C++ Concurrency in Action cover"&gt;&lt;/a&gt;&lt;/div&gt;

&lt;p&gt;Who&amp;#8217;s the author? What makes him qualified to write this book?
&lt;/p&gt;
&lt;blockquote&gt;&lt;p&gt;&lt;a href="http://www.justsoftwaresolutions.co.uk/" title="Anthony Willams' website"&gt;Anthony Williams&lt;/a&gt; is a UK-based developer and consultant with many years experience in C++. He has been an active member of the BSI C++ Standards Panel since 2001, and is author or coauthor of many of the C++ Standards Committee papers that led up to the inclusion of the thread library in the new C++ Standard, known as C++11 or C++0x. He has been the maintainer of the Boost Thread library since 2006, and is the developer of the &lt;a href="http://www.stdthread.co.uk/" title="just::thread, a C++ Standard Thread Library implementation"&gt;just::thread&lt;/a&gt; implementation of the C++11 thread library from Just Software Solutions Ltd. Anthony lives in the far west of Cornwall, England. &amp;#8212; &lt;a href="http://www.manning.com/williams/" title="Williams' author page on Manning website"&gt;About the Author, Manning website&lt;/a&gt;
&lt;/p&gt;
&lt;/blockquote&gt;&lt;p&gt;It&amp;#8217;s clear the experience of writing papers for the standards committee has paid off. The book is well organised and clearly written. Accurate and thorough, it&amp;#8217;s also a pleasure to read. The examples are practical, and range from launching threads through to lock-free message queues. The largest case study &amp;#8212; a message passing framework and an ATM application built on this framework &amp;#8212; shows the expert use of modern C++ to write elegant and compact code.
&lt;/p&gt;
&lt;p&gt;The clarity of the text is matched by the book&amp;#8217;s clean and functional design. It looks good. I bought the dead-tree version which gave me free access to the ebook and I&amp;#8217;ve made use of both formats.
&lt;/p&gt;
&lt;p&gt;I&amp;#8217;m new to C++11 and compilers are still catching up with the standard. This book is steeped in C++11. Reading through it, I came to realise that a close look at the standard thread library helps explain the evolution of the language as a whole: so &lt;strong&gt;that&amp;#8217;s&lt;/strong&gt; why variadic templates are needed, and move semantics work &lt;strong&gt;there&lt;/strong&gt;, and &amp;#8212; &lt;strong&gt;I get it!&lt;/strong&gt; &amp;#8212; lambda functions fit nicely with condition variables.
&lt;/p&gt;
&lt;p&gt;Recommended++
&lt;/p&gt;</description>
<dc:date>2013-01-21</dc:date>
<guid>http://wordaligned.org/articles/c++-concurrency-in-action</guid>
<author>tag@wordaligned.org (Thomas Guest)</author>
<link>http://wordaligned.org/articles/c++-concurrency-in-action</link>
<category>C++</category>
<category>Reviews</category>
</item>

</channel>
</rss>
