<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:dc="http://purl.org/dc/elements/1.1/" >
<channel>
<title>Word Aligned</title>
<link>http://wordaligned.org</link>
<description>tales from the code face</description>
<dc:creator>tag@wordaligned.org</dc:creator>
<language>en-gb</language>
<item>
<title>8 Queens Puzzle++</title>
<description>&lt;p&gt;&lt;a href="http://wordaligned.org/articles/8-queens-puzzle"&gt;Yesterday I wrote about&lt;/a&gt; a Python solution to the 8 Queens puzzle.
&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;n = width_of_chessboard = 8
sqs = list(range(n))

Qs = (Q for Q in itertools.permutations(sqs)
      if n == len({Q[i]+i for i in sqs})
           == len({Q[i]-i for i in sqs}))
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;It&amp;#8217;s possible to reproduce this strategy in C++:
&lt;/p&gt;
&lt;ul&gt;
 &lt;li&gt;
     range(n) &amp;#8594; &lt;a href="http://en.cppreference.com/w/cpp/algorithm/iota"&gt;std::iota&lt;/a&gt;
 &lt;/li&gt;

 &lt;li&gt;
     itertools.permutations &amp;#8594; &lt;a href="http://wordaligned.org/articles/next-permutation"&gt;std::next_permutation&lt;/a&gt;
 &lt;/li&gt;

 &lt;li&gt;
     set comprehension &amp;#8594; set insertion
 &lt;/li&gt;
&lt;/ul&gt;
&lt;script src="https://gist.github.com/wordaligned/c94649d6b37ec08a9bda16e53c43b888.js"&gt;&lt;/script&gt;

&lt;p&gt;The &lt;code&gt;std::next_permutation&lt;/code&gt; algorithm stands alone in the C++ standard library. Used here, it pairs well with the similarly uncommon &lt;code&gt;do ... while&lt;/code&gt; loop. The solution depends on the vector &lt;code&gt;sqs&lt;/code&gt; starting off in sorted order, and by the end of the loop the vector will have been returned to &lt;a href="https://rosettacode.org/wiki/Sorting_algorithms/Permutation_sort"&gt;this state&lt;/a&gt;.
&lt;/p&gt;</description>
<dc:date>2016-04-05</dc:date>
<guid>http://wordaligned.org/articles/8-queens-puzzle-cpp</guid>
<author>tag@wordaligned.org (Thomas Guest)</author>
<link>http://wordaligned.org/articles/8-queens-puzzle-cpp</link>
<category>Puzzles</category>
<category>C++</category>
</item>

<item>
<title>8 Queens Puzzle</title>
<description>&lt;p style="font-size:4em"&gt;&amp;#9819;&amp;#9819;&amp;#9819;&amp;#9819;&amp;#9819;&amp;#9819;&amp;#9819;&amp;#9819;&lt;/p&gt;

&lt;p&gt;Here&amp;#8217;s one of my favourite &lt;a href="http://code.activestate.com/recipes/576647-eight-queens-six-lines"&gt;recipes, by Raymond Hettinger&lt;/a&gt;, lightly adapted for Python 3.
&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;from itertools import permutations

n = width_of_chessboard = 8
sqs = range(n)

Qs = (Q for Q in permutations(sqs)
      if n == len({Q[i]+i for i in sqs})
           == len({Q[i]-i for i in sqs}))
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;We start by assigning &lt;code&gt;sqs&lt;/code&gt; to the range 0 through 7.
&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;&amp;gt;&amp;gt;&amp;gt; sqs = range(8)
&amp;gt;&amp;gt;&amp;gt; list(sqs)
[0, 1, 2, 3, 4, 5, 6, 7]
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;The range has 8 indices. If each index represents a column on a standard 8x8 chessboard and the value at that index represents a row on the same chessboard, then our range represents 8 positions on the board. Using the built-in &lt;a href="https://docs.python.org/3/library/functions.html#enumerate"&gt;enumerate&lt;/a&gt; function to generate these &lt;code&gt;(index, value)&lt;/code&gt; pairs we see that &lt;code&gt;sqs&lt;/code&gt; encodes the diagonal &lt;code&gt;(0, 0)&lt;/code&gt; to &lt;code&gt;(7, 7)&lt;/code&gt;:
&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;&amp;gt;&amp;gt;&amp;gt; list(enumerate(sqs))
[(0, 0), (1, 1), (2, 2), (3, 3), (4, 4), (5, 5), (6, 6), (7, 7)]
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Next, permute the values &amp;#8212; the rows.
&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;&amp;gt;&amp;gt;&amp;gt; from itertools import permutations
&amp;gt;&amp;gt;&amp;gt; rooks = permutations(sqs)
&amp;gt;&amp;gt;&amp;gt; next(rooks)
(0, 1, 2, 3, 4, 5, 6, 7)
&amp;gt;&amp;gt;&amp;gt; next(rooks)
(0, 1, 2, 3, 4, 5, 7, 6)
&amp;gt;&amp;gt;&amp;gt; next(rooks)
(0, 1, 2, 3, 4, 6, 5, 7)
&amp;gt;&amp;gt;&amp;gt; list(rooks)[34567]
(6, 7, 0, 1, 3, 4, 5, 2)
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;a href="https://docs.python.org/3/library/itertools.html#itertools.permutations"&gt;Itertools.permutations&lt;/a&gt; generates values lazily. The snippet above shows the first two results, then skips forward 34568 places. &lt;code&gt;Permutations(sqs)&lt;/code&gt; generates all possible arrangements of 8 pieces on a chessboard such that each row has exactly one piece on it and so does each column. That is, it generates all possible ways of placing 8 &lt;a href="http://mathworld.wolfram.com/RooksProblem.html"&gt;rooks on a chessboard&lt;/a&gt; so that no pair attacks each other.
&lt;/p&gt;
&lt;p&gt;In the final program, we filter these rook positions to generate solutions to the more challenging &amp;#8212; and more interesting &amp;#8212; &lt;a href="https://en.wikipedia.org/wiki/Eight_queens_puzzle"&gt;eight Queens puzzle&lt;/a&gt;.
&lt;/p&gt;
&lt;p&gt;Consider our starting point, the diagonal &lt;code&gt;(0, 0)&lt;/code&gt; to &lt;code&gt;(7, 7)&lt;/code&gt;
&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;&amp;gt;&amp;gt;&amp;gt; diagonal = range(8)
&amp;gt;&amp;gt;&amp;gt; {r-c for c,r in enumerate(diagonal)}
{0}
&amp;gt;&amp;gt;&amp;gt; {r+c for c,r in enumerate(diagonal)}
{0, 2, 4, 6, 8, 10, 12, 14}
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Here, a set comprehension collects the distinct values taken by the difference between the row and column along this diagonal, which in this case gives &lt;code&gt;{0}&lt;/code&gt;. That is, if we placed 8 bishops along this &amp;#x2197; diagonal they would all attack each other along this diagonal. The sum of the row and column takes 8 distinct values, however, meaning no pair attacks along a &amp;#x2196; diagonal.
&lt;/p&gt;
&lt;p&gt;&lt;a href="https://docs.python.org/3/reference/expressions.html#comparisons"&gt;Comparison operators chain in Python&lt;/a&gt;, so the expression:
&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;n == len({Q[i]+i for i in sqs}) == len({Q[i]-i for i in sqs})
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;is &lt;code&gt;True&lt;/code&gt; if both sets have 8 elements, that is, if the squares in &lt;code&gt;Q&lt;/code&gt; are on distinct &amp;#x2196; and &amp;#x2197; diagonals; or, equivalently no pair of bishops placed on the squares in &lt;code&gt;Q&lt;/code&gt; would attack each other. Since we already know &lt;code&gt;Q&lt;/code&gt; positions 8 rooks so that no pair attacks each other, and a chess Queen combines the moves of a rook and a bishop, we can see that &lt;code&gt;Qs&lt;/code&gt; generates every possible way of placing 8 Queens on a chessboard so that no pair attacks each other: which is to say, we&amp;#8217;ve solved the &lt;a href="https://en.wikipedia.org/wiki/Eight_queens_puzzle"&gt;8 Queens puzzle&lt;/a&gt;.
&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;Qs = (Q for Q in permutations(sqs)
      if n == len({Q[i]+i for i in sqs})
           == len({Q[i]-i for i in sqs}))
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;This is beautiful code and there&amp;#8217;s one final twist.
&lt;/p&gt;
&lt;p&gt;&lt;code&gt;Qs&lt;/code&gt; is a &lt;a href="https://docs.python.org/3/reference/expressions.html#generator-expressions"&gt;generator expression&lt;/a&gt; primed to permute squares into neighbourly rooks filtered by amicable bishops yielding unthreatening Queens. Until asked, however, it does nothing.
&lt;/p&gt;
&lt;p style="font-size:4em"&gt;&amp;#9813;&amp;#9813;&amp;#9813;&amp;#9813;&amp;#9813;&amp;#9813;&amp;#9813;&amp;#9813;&lt;/p&gt;</description>
<dc:date>2016-04-04</dc:date>
<guid>http://wordaligned.org/articles/8-queens-puzzle</guid>
<author>tag@wordaligned.org (Thomas Guest)</author>
<link>http://wordaligned.org/articles/8-queens-puzzle</link>
<category>Puzzles</category>
<category>Python</category>
</item>

<item>
<title>Easy as Py</title>
<description>&lt;h2&gt;What makes Python Simple?&lt;/h2&gt;
&lt;p&gt;I consider Python a simple language. Here&amp;#8217;s why.
&lt;/p&gt;

&lt;h2&gt;Easy to Read&lt;/h2&gt;
&lt;p&gt;I can read and understand Python code (unless it&amp;#8217;s &lt;a href="https://benkurtovic.com/2014/06/01/obfuscating-hello-world.html"&gt;wilfully perverse&lt;/a&gt;). Syntactic whitespace and the associated removal of punctuation results in a regular, open layout. The combination of built in containers, extensive standard libraries and high level constructs allow for clear, compact code: code which fits in your head.
&lt;/p&gt;

&lt;h2&gt;Easy to Write&lt;/h2&gt;
&lt;p&gt;I can write Python code which is free of syntax errors and which does what I want. Of course it helps that I&amp;#8217;ve been actively using the language for 15 years, but I&amp;#8217;ve been using C++ for longer and still make mistakes with it: ask me to declare a pointer to a member function, for example, or to knock up a variadic template function, and I&amp;#8217;ll need a moment or two.
&lt;/p&gt;

&lt;h2&gt;Transparent&lt;/h2&gt;
&lt;p&gt;I also consider C a simple language. C offers a transparent abstraction of a register machine, with a stack, a heap, and addressable memory. If you can imagine the operation of such a machine, you can figure out C. Python is less transparent but reveals its workings if pressed. Dicts form a part of the language seen by users, and under the hood they provide the dynamic context which supports a running program. The &lt;a href="https://en.wikipedia.org/wiki/Read%E2%80%93eval%E2%80%93print_loop"&gt;read-eval-print loop&lt;/a&gt; makes it easy to poke and reshape your program. You can &lt;a href="https://docs.python.org/3/library/dis.html"&gt;disassemble code&lt;/a&gt; to see what the virtual machine sees.
&lt;/p&gt;

&lt;h2&gt;Consistent improvement&lt;/h2&gt;
&lt;p&gt;The language has got better since I first started using it. It has also got bigger, and this growth would, at first, seem at odds with simplicity. However, consider &amp;#8212; as an example &amp;#8212; the point when list comprehensions were introduced. Language support for building a list from an iterable results in compact declarative code. Simple code. What&amp;#8217;s more, the square brackets which now delimit list comprehensions are the same square brackets that were previously used to delimit lists. The syntax may have been new but it didn&amp;#8217;t surprise. Now consider the introduction of set and dict comprehensions, which follow logically and naturally from list comprehensions, almost as if they were discovered rather than invented.
&lt;/p&gt;
&lt;p&gt;There are many other examples where additions to the language have unified and simplified.
&lt;/p&gt;

&lt;h2&gt;Vision&lt;/h2&gt;
&lt;p&gt;I&amp;#8217;m not a Python insider and cannot comment on the exact balance of benevolence and dictatorship which goes into the &lt;a href="https://www.python.org/dev/peps/"&gt;language enhancement process&lt;/a&gt;. I would say Python doesn&amp;#8217;t suffer from being designed by a committee. It sticks to its strengths and its direction, to its vision.
&lt;/p&gt;</description>
<dc:date>2016-03-23</dc:date>
<guid>http://wordaligned.org/articles/easy-as-py</guid>
<author>tag@wordaligned.org (Thomas Guest)</author>
<link>http://wordaligned.org/articles/easy-as-py</link>
<category>Python</category>
<category>C++</category>
<category>C</category>
</item>

<item>
<title>Sausages, sausages, sausages - slice, slice, slice</title>
<description>&lt;p&gt;A friend asked for help reaching the next level of a puzzle game. The test which stalled her involves machine placement in a sausage factory.
&lt;/p&gt;
&lt;blockquote&gt;&lt;p&gt;&amp;#8230; each sausage was branded with a letter for quality control purposes, thus:
   &lt;strong&gt;ypbtkizfgxptclcoirdsuhjwulqkoszrabfc&lt;/strong&gt;
&lt;/p&gt;
&lt;p&gt;The string was then drawn through seven machines which rearranged the sausages in flavour enhancing ways.
&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Machine A: The Reversifier&lt;/strong&gt;
&lt;/p&gt;
&lt;p&gt;Reverses the order of the sausages, so they get tastier as you go along.
&lt;/p&gt;
&lt;p&gt;&amp;#8230;
&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Machine G: Secondhalffirstifier&lt;/strong&gt;
&lt;/p&gt;
&lt;p&gt;move the second half of the string to the beginning, as the earlier sausages are too spicy to eat early in the morning.
&lt;/p&gt;
&lt;p&gt;He attached these machines in a certain sequence, though one of them was out for repair so only six were used. He then fed a string of sausages through and was surprised to discover the string that came out at the other end said &lt;strong&gt;lickyourlips&lt;/strong&gt;. What order were the machines in?
&lt;/p&gt;
&lt;/blockquote&gt;&lt;p&gt;It&amp;#8217;s nicely phrased, but what&amp;#8217;s really wanted is the sequence of simple transformations that takes input &amp;#8220;ypbtkizfgxptclcoirdsuhjwulqkoszrabfc&amp;#8221; and produces output &amp;#8220;lickyourlips&amp;#8221;.
&lt;/p&gt;
&lt;p&gt;It&amp;#8217;s no doubt possible to work backwards and figure out a solution using no more than logic, pencil and paper. For example, only two of the machines change the length of the string, and &amp;#8212; looking at the before and after lengths &amp;#8212; these must both be used. It&amp;#8217;s rather easier to write a short program to find a solution.
&lt;/p&gt;
&lt;p&gt;First we must simulate the seven sausage machines, A-G, which perform the following sequence operations.
&lt;/p&gt;
&lt;ol type="A"&gt;
&lt;li&gt;reverse the order of a sequence&lt;/li&gt;
&lt;li&gt;remove every other element of a sequence&lt;/li&gt;
&lt;li&gt;remove every third element of a sequence&lt;/li&gt;
&lt;li&gt;pairwise reverse elements of a sequence&lt;/li&gt;
&lt;li&gt;move even numbered elements to the front of a sequence&lt;/li&gt;
&lt;li&gt;move the last element of a sequence to the front&lt;/li&gt;
&lt;li&gt;swap the front and back half of a sequence&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;None of these is difficult, especially in a high-level language which builds in support for sequence operations. What I found noteworthy is that a solution can be found without any &lt;a href="https://docs.python.org/3/reference/compound_stmts.html"&gt;loops or if statements&lt;/a&gt;. What&amp;#8217;s more, every operation can handled using nothing more than &lt;a href="https://docs.python.org/3/library/stdtypes.html#sequence-types-list-tuple-range"&gt;slice operations&lt;/a&gt;.
&lt;/p&gt;
&lt;p&gt;Here&amp;#8217;s my solution. The machines consist of slice operations, helped by a couple of conditional expressions and recursive calls. The solution can then be brute-forced: there are only 5040 ways of permuting 6 out of 7 machines.
&lt;/p&gt;
&lt;script src="https://gist.github.com/wordaligned/a04308eac7ee2aa37e01.js"&gt;&lt;/script&gt;

&lt;p&gt;I&amp;#8217;ve used &lt;code&gt;reduce&lt;/code&gt; to apply a chain of functions to a string of sausages &amp;#8212; an explicit loop might be clearer, but I want a loop-free solution. For this same reason I use recursion in the pairwise swapper and the element dropper. Generally in Python, recursion is a poor choice. In this case I know I&amp;#8217;m starting with a string of just 36 elements which cannot get any longer; there&amp;#8217;s no risk of exceeding the &lt;a href="https://docs.python.org/3/library/sys.html#sys.getrecursionlimit"&gt;system recursion limit&lt;/a&gt;.
&lt;/p&gt;
&lt;p&gt;The sequence reversal &lt;code&gt;s[::-1]&lt;/code&gt; is idiomatic but alarming to the uninitiated. Slices have &lt;code&gt;[start:stop:stride]&lt;/code&gt; fields, any of which may be defaulted. Usually &lt;code&gt;start&lt;/code&gt; and &lt;code&gt;stop&lt;/code&gt; default to the start and end of the sequence, but in this case the negative stride reverses them.
&lt;/p&gt;
&lt;p&gt;To rotate the last element of a sequence to the front, prefer:
&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;return s[-1:] + s[:-1]
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;to:
&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;return [s[-1]] + s[:-1]
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;because the latter raises an &lt;code&gt;IndexError&lt;/code&gt; for an empty sequence.
&lt;/p&gt;
&lt;p&gt;Slicing is a formidable tool for sequence manipulation, especially when combined with the option of using negative indices to count back from the end. Slices allow you to reverse, rotate and partition sequences, to pairwise swap elements, and to drop every nth element.
&lt;/p&gt;
&lt;p&gt;The miniature recipes presented here don&amp;#8217;t even use slice assignment, which gives me an excuse to reproduce this elegant prime sieve function, which does.
&lt;/p&gt;
&lt;script src="https://gist.github.com/wordaligned/09c17eaabb6cd4c6bcfb.js"&gt;&lt;/script&gt;</description>
<dc:date>2016-03-21</dc:date>
<guid>http://wordaligned.org/articles/sausages-slices</guid>
<author>tag@wordaligned.org (Thomas Guest)</author>
<link>http://wordaligned.org/articles/sausages-slices</link>
<category>Puzzles</category>
<category>Python</category>
</item>

<item>
<title>Gofmt knows best</title>
<description>&lt;div class="toc"&gt;
&lt;h2&gt;Contents&lt;/h2&gt;
&lt;ul&gt;
 &lt;li&gt;&lt;a href="http://wordaligned.org/articles/gofmt-knows-best#toceveryones-favourite" name="toc0" id="toc0"&gt;Everyone&amp;#8217;s favourite&lt;/a&gt;
 &lt;/li&gt;

 &lt;li&gt;&lt;a href="http://wordaligned.org/articles/gofmt-knows-best#tocgo-knows-best" name="toc1" id="toc1"&gt;Go knows best&lt;/a&gt;
 &lt;/li&gt;

 &lt;li&gt;&lt;a href="http://wordaligned.org/articles/gofmt-knows-best#tocwhen-formatters-fail" name="toc2" id="toc2"&gt;When formatters fail&lt;/a&gt;
 &lt;/li&gt;

 &lt;li&gt;&lt;a href="http://wordaligned.org/articles/gofmt-knows-best#tocdecluttered-java" name="toc3" id="toc3"&gt;Decluttered Java&lt;/a&gt;
 &lt;/li&gt;

 &lt;li&gt;&lt;a href="http://wordaligned.org/articles/gofmt-knows-best#toctetrominoes" name="toc4" id="toc4"&gt;Tetrominoes&lt;/a&gt;
 &lt;/li&gt;

 &lt;li&gt;&lt;a href="http://wordaligned.org/articles/gofmt-knows-best#tocobfuscation" name="toc5" id="toc5"&gt;Obfuscation&lt;/a&gt;
 &lt;/li&gt;

 &lt;li&gt;&lt;a href="http://wordaligned.org/articles/gofmt-knows-best#tocdepth-first-search" name="toc6" id="toc6"&gt;Depth First Search&lt;/a&gt;
 &lt;/li&gt;

 &lt;li&gt;&lt;a href="http://wordaligned.org/articles/gofmt-knows-best#tocconclusion" name="toc7" id="toc7"&gt;Conclusion&lt;/a&gt;
 &lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;h2&gt;&lt;a href="http://wordaligned.org/articles/gofmt-knows-best#toc0" name="toceveryones-favourite" id="toceveryones-favourite"&gt;Everyone&amp;#8217;s favourite&lt;/a&gt;&lt;/h2&gt;
&lt;blockquote&gt;&lt;p&gt;Gofmt&amp;#8217;s style is no one&amp;#8217;s favorite, yet gofmt is everyone&amp;#8217;s favorite.
   &amp;#8212; &lt;a href="https://go-proverbs.github.io"&gt;Rob Pike&lt;/a&gt;
&lt;/p&gt;
&lt;/blockquote&gt;&lt;p&gt;Code formatting tools are nothing new but Go notches them up a level. Your Go installation comes with an automated formatter, &lt;a href="https://golang.org/cmd/gofmt/"&gt;gofmt&lt;/a&gt;, and this tool has been used to layout the entire code base. As a result, Go code looks uniform and familiar. The recommendation is to gofmt your own code, ideally on save and certainly before submitting for review.
&lt;/p&gt;
&lt;div class="typocode"&gt;

&lt;pre class="prettyprint"&gt;(add-hook 'before-save-hook 'gofmt-before-save)

&lt;/pre&gt;

&lt;/div&gt;

&lt;p&gt;&lt;a href="http://clang.llvm.org/docs/ClangFormatStyleOptions.html"&gt;Formatting tools for other languages&lt;/a&gt; require configuration. You must instruct the tool about your preferences for spaces and braces. Gofmt is inflexible and this is a strength.
&lt;/p&gt;
&lt;p&gt;The language designers did Go a favour by supplying and promoting gofmt early on, before alternative style guides had been developed and adopted. There can be no more arguments about tabs vs spaces, for example. Code reviews must focus on content rather than layout.
&lt;/p&gt;
&lt;p&gt;There are also more subtle benefits. Certain kinds of manual layout are fragile: the insertion of space to vertically align assignment statements, for example. A code formatter gets it right every time.
&lt;/p&gt;

&lt;h2&gt;&lt;a href="http://wordaligned.org/articles/gofmt-knows-best#toc1" name="tocgo-knows-best" id="tocgo-knows-best"&gt;Go knows best&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;As writers &amp;#8212; and programmers are, fundamentally, &lt;a href="http://wordaligned.org/articles/lessons-from-the-oulipo"&gt;writers&lt;/a&gt; &amp;#8212; maybe we don&amp;#8217;t want our work to look uniform or familiar. Maybe we prefer more control over what we produce. Maybe sometimes, we&amp;#8217;d like to surprise or provoke.
&lt;/p&gt;
&lt;p&gt;Does the regularity gofmt imposes render our code bland, even boring?
&lt;/p&gt;
&lt;p&gt;I&amp;#8217;ve heard this point extended to be a criticism of Go in general: that the language restricts what you can do because the language designers know best, and that it&amp;#8217;s for your own good.
&lt;/p&gt;
&lt;p&gt;Well, if I&amp;#8217;ve ever submitted extravagently formatted code for review, it&amp;#8217;s been slapped back. Substantial programs are developed by teams who adopt idiom and share style rules for good reason. It&amp;#8217;s how we work together. Imagine how much easier it would be if the third party code in your code base was also written to your preferred style. Go gives you that, so long as you prefer its native style.
&lt;/p&gt;
&lt;p&gt;Gofmt does not completely over-ride a programmer&amp;#8217;s choices. Two programs which are semantically identical but laid out differently will probably still be laid out differently after a pass through gofmt.
&lt;/p&gt;

&lt;h2&gt;&lt;a href="http://wordaligned.org/articles/gofmt-knows-best#toc2" name="tocwhen-formatters-fail" id="tocwhen-formatters-fail"&gt;When formatters fail&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Formatting sometimes fails. Some examples follow.
&lt;/p&gt;

&lt;h3&gt;&lt;a href="http://wordaligned.org/articles/gofmt-knows-best#toc3" name="tocdecluttered-java" id="tocdecluttered-java"&gt;Decluttered Java&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Here&amp;#8217;s some creatively formatted Java. Of course it&amp;#8217;s a joke, and a funny one, but a language like Python, and indeed go, gets the last laugh. It &lt;strong&gt;is&lt;/strong&gt; possible to get rid of braces and semicolons and your code &lt;strong&gt;will&lt;/strong&gt; look better for it.
&lt;/p&gt;
&lt;div&gt;&lt;blockquote class="twitter-tweet" data-lang="en"&gt;&lt;p lang="en" dir="ltr"&gt;I finally figured out how to get those pesky semicolons and curly braces out of my Java code &lt;a href="http://t.co/Ns96HdCuKO"&gt;pic.twitter.com/Ns96HdCuKO&lt;/a&gt;&lt;/p&gt;&amp;mdash; Uncle Bob&amp;#39;s Nephew (@thedirtycoder) &lt;a href="https://twitter.com/thedirtycoder/status/569339014085517312"&gt;February 22, 2015&lt;/a&gt;&lt;/blockquote&gt;&lt;script async src="http://wordaligned.org//platform.twitter.com/widgets.js" charset="utf-8"&gt;&lt;/script&gt;&lt;/div&gt;


&lt;h3&gt;&lt;a href="http://wordaligned.org/articles/gofmt-knows-best#toc4" name="toctetrominoes" id="toctetrominoes"&gt;Tetrominoes&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Here&amp;#8217;s an equally witty but perfectly sensible use of non-standard layout.
&lt;/p&gt;
&lt;blockquote class="twitter-tweet" data-cards="hidden" data-lang="en"&gt;&lt;p lang="en" dir="ltr"&gt;I always love it when code is formatted in the shape of the problem it&amp;#39;s solving.&lt;a href="https://t.co/XC7J2cSENj"&gt;pic.twitter.com/XC7J2cSENj&lt;/a&gt;&lt;/p&gt;&amp;mdash; Mathias Verraes (@mathiasverraes) &lt;a href="https://twitter.com/mathiasverraes/status/669490082022367232"&gt;November 25, 2015&lt;/a&gt;&lt;/blockquote&gt;

&lt;p&gt;Mathias is referring to some tetrominoes &amp;#8212; tetris shapes &amp;#8212; coded in &lt;a href="http://elm-lang.org"&gt;elm&lt;/a&gt; by &lt;a href="https://github.com/jcollard/elmtris/blob/master/src/Tetromino.elm"&gt;Joseph Collard&lt;/a&gt;.
&lt;/p&gt;
&lt;div class="typocode"&gt;

&lt;pre class="prettyprint"&gt;-- A Tetromino is a list of Locations. By definition, a valid tetromino
-- should contain exactly 4 different locations
type Tetromino = [Location]

line : Tetromino
line = [(0,0), (1,0), (2,0), (3,0)]

square : Tetromino
square = [(0,0), (1,0),
          (0,1), (1,1)]

spiece : Tetromino
spiece = [       (1,0), (2,0),
          (0,1), (1,1)]

jpiece : Tetromino
jpiece = [       (1,0),
                 (1,1),
          (0,2), (1,2)]

&lt;/pre&gt;

&lt;/div&gt;

&lt;p&gt;For brevity, I&amp;#8217;ve left out the Z and L pieces. I&amp;#8217;ve also omitted comments from the original, which I would suggest are redundant since the code has been painstakingly formatted to indicate the shape of the pieces.
&lt;/p&gt;
&lt;p&gt;The same tetrominoes in hand-formatted Go read:
&lt;/p&gt;
&lt;div class="typocode"&gt;

&lt;pre class="prettyprint"&gt;package tetris

type Tetronimo [4][2]int

var (
    Line   = Tetronimo   {{0, 0}, {1, 0}, {2, 0}, {3, 0}}
    
    Square = Tetronimo   {{0, 0}, {1, 0}, 
                          {0, 1}, {1, 1}}
    
    Spiece = Tetronimo   {        {1, 0}, {2, 0}, 
                          {0, 1}, {1, 1}}
    
    Jpiece = Tetronimo   {        {1, 0}, 
                                  {1, 1}, 
                          {0, 2}, {1, 2}}
)

&lt;/pre&gt;

&lt;/div&gt;

&lt;p&gt;Gofmt spoils them:
&lt;/p&gt;
&lt;div class="typocode"&gt;

&lt;pre class="prettyprint"&gt;package tetris

type Tetronimo [4][2]int

var (
	Line = Tetronimo{{0, 0}, {1, 0}, {2, 0}, {3, 0}}
    
	Square = Tetronimo{{0, 0}, {1, 0},
		{0, 1}, {1, 1}}
    
	Spiece = Tetronimo{{1, 0}, {2, 0},
		{0, 1}, {1, 1}}
    
	Jpiece = Tetronimo{{1, 0},
		{1, 1},
		{0, 2}, {1, 2}}
)

&lt;/pre&gt;

&lt;/div&gt;


&lt;h3&gt;&lt;a href="http://wordaligned.org/articles/gofmt-knows-best#toc5" name="tocobfuscation" id="tocobfuscation"&gt;Obfuscation&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Here&amp;#8217;s a tiny rectangular program &lt;a href="http://accu.org/index.php/journals/256"&gt;submitted by Thaddaeus Frogley&lt;/a&gt; to the International Obfuscated C Code Contest in 2001. It&amp;#8217;s &lt;strong&gt;meant&lt;/strong&gt; to be hard to read and the compact layout helps, by hindering.
&lt;/p&gt;
&lt;div class="typocode"&gt;

&lt;pre class="prettyprint"&gt;/*(c) 2001 Thad */
#include&amp;lt;string.h&amp;gt;
#include &amp;lt;stdio.h&amp;gt;
#define abc stdout
int main(int a,ch\
ar*b){char*c="??="
"??(??/??/??)??'{"
"??!??&amp;gt;??-";while(
!((a=fgetc(stdin))
==EOF))fputc((b=s\
trchr(c,a))?fputc(
fputc(077,abc),abc
),"=(/)'&amp;lt;!&amp;gt;""-"??(
b-c??):a, abc);??&amp;gt;

&lt;/pre&gt;

&lt;/div&gt;

&lt;p&gt;In the author&amp;#8217;s own words:
&lt;/p&gt;
&lt;blockquote&gt;&lt;p&gt; I wanted to create a piece of code that could be considered to be &amp;#8220;art&amp;#8221; on multiple levels.
&lt;/p&gt;
&lt;/blockquote&gt;&lt;p&gt;He&amp;#8217;s succeeded. It&amp;#8217;s impossible to translate this program into Go so I cannot gofmt it. If, instead, I try &lt;a href="http://clang.llvm.org/docs/ClangFormatStyleOptions.html"&gt;clang-format&lt;/a&gt;, the resulting code &lt;strong&gt;no longer compiles&lt;/strong&gt;! Obfuscation has bamboozled the formatter.
&lt;/p&gt;
&lt;div class="typocode"&gt;

&lt;pre class="prettyprint"&gt;/*(c) 2001 Thad */
#include &amp;lt;stdio.h&amp;gt;
#include &amp;lt;string.h&amp;gt;
#define abc stdout
int main(int a, ch\
ar *b) {
  char *c = "??="
            "??(??/??/??)??'{"
            "??!??&amp;gt;??-";
  while (!((a = fgetc(stdin)) == EOF))fputc((b=s\
trchr(c,a))?fputc(
fputc(077,abc),abc
),"=(/)'&amp;lt;!&amp;gt;""-"??(
b-c??):a, abc);
? ? &amp;gt;

&lt;/pre&gt;

&lt;/div&gt;


&lt;h3&gt;&lt;a href="http://wordaligned.org/articles/gofmt-knows-best#toc6" name="tocdepth-first-search" id="tocdepth-first-search"&gt;Depth First Search&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Finally, here&amp;#8217;s a recursive depth first search from the &lt;a href="https://github.com/boostorg/graph/blob/develop/include/boost/graph/depth_first_search.hpp#L181"&gt;boost graph library&lt;/a&gt;
&lt;/p&gt;
&lt;div class="typocode"&gt;

&lt;pre class="prettyprint"&gt;template &amp;lt;class IncidenceGraph, class DFSVisitor, class ColorMap,
          class TerminatorFunc&amp;gt;
void depth_first_visit_impl
  (const IncidenceGraph&amp;amp; g,
   typename graph_traits&amp;lt;IncidenceGraph&amp;gt;::vertex_descriptor u,
   DFSVisitor&amp;amp; vis,  // pass-by-reference here, important!
   ColorMap color, TerminatorFunc func)
{
  typedef typename graph_traits&amp;lt;IncidenceGraph&amp;gt;::vertex_descriptor Vertex;
  typedef typename property_traits&amp;lt;ColorMap&amp;gt;::value_type ColorValue;
  typedef color_traits&amp;lt;ColorValue&amp;gt; Color;
  typename graph_traits&amp;lt;IncidenceGraph&amp;gt;::out_edge_iterator ei, ei_end;
  
  put(color, u, Color::gray());          vis.discover_vertex(u, g);
  
  if (!func(u, g))
    for (boost::tie(ei, ei_end) = out_edges(u, g); ei != ei_end; ++ei) {
      Vertex v = target(*ei, g);           vis.examine_edge(*ei, g);
      ColorValue v_color = get(color, v);
      if (v_color == Color::white()) {     vis.tree_edge(*ei, g);
      depth_first_visit_impl(g, v, vis, color, func);
      } else if (v_color == Color::gray()) vis.back_edge(*ei, g);
      else                                 vis.forward_or_cross_edge(*ei, g);
      call_finish_edge(vis, *ei, g);
    }
  put(color, u, Color::black());         vis.finish_vertex(u, g);
}

&lt;/pre&gt;

&lt;/div&gt;

&lt;p&gt;Clients of the function supply a visitor, &lt;code&gt;vis&lt;/code&gt;, which is called back as vertices and edges are discovered and classified. These callbacks are carefully placed on the right hand side, visually distinguishing the core traversal from associated events. Note too the alignment, with edge events indented to the right of vertex events. Again, a code formatter tramples over this elegantly shaped code:
&lt;/p&gt;
&lt;div class="typocode"&gt;

&lt;pre class="prettyprint"&gt;template &amp;lt;class IncidenceGraph, class DFSVisitor, class ColorMap,
          class TerminatorFunc&amp;gt;
void depth_first_visit_impl(
    const IncidenceGraph &amp;amp;g,
    typename graph_traits&amp;lt;IncidenceGraph&amp;gt;::vertex_descriptor u,
    DFSVisitor &amp;amp;vis, // pass-by-reference here, important!
    ColorMap color, TerminatorFunc func) {
  typedef typename graph_traits&amp;lt;IncidenceGraph&amp;gt;::vertex_descriptor Vertex;
  typedef typename property_traits&amp;lt;ColorMap&amp;gt;::value_type ColorValue;
  typedef color_traits&amp;lt;ColorValue&amp;gt; Color;
  typename graph_traits&amp;lt;IncidenceGraph&amp;gt;::out_edge_iterator ei, ei_end;
  
  put(color, u, Color::gray());
  vis.discover_vertex(u, g);
  
  if (!func(u, g))
    for (boost::tie(ei, ei_end) = out_edges(u, g); ei != ei_end; ++ei) {
      Vertex v = target(*ei, g);
      vis.examine_edge(*ei, g);
      ColorValue v_color = get(color, v);
      if (v_color == Color::white()) {
        vis.tree_edge(*ei, g);
        depth_first_visit_impl(g, v, vis, color, func);
      } else if (v_color == Color::gray())
        vis.back_edge(*ei, g);
      else
        vis.forward_or_cross_edge(*ei, g);
      call_finish_edge(vis, *ei, g);
    }
  put(color, u, Color::black());
  vis.finish_vertex(u, g);
}

&lt;/pre&gt;

&lt;/div&gt;


&lt;h2&gt;&lt;a href="http://wordaligned.org/articles/gofmt-knows-best#toc7" name="tocconclusion" id="tocconclusion"&gt;Conclusion&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Creative code formatting does have a place. Generally, though, gofmt gets it right: an automated tool can and should take care of formatting our code base, and the benefits are amplified if the tool is inflexible. With formatting solved we can focus our creative energy where it counts. 
&lt;/p&gt;</description>
<dc:date>2016-03-07</dc:date>
<guid>http://wordaligned.org/articles/gofmt-knows-best</guid>
<author>tag@wordaligned.org (Thomas Guest)</author>
<link>http://wordaligned.org/articles/gofmt-knows-best</link>
<category>Go</category>
</item>

<item>
<title>Sledgehammers vs Nut Crackers</title>
<description>&lt;h2&gt;Awk&lt;/h2&gt;
&lt;p&gt;I get awk and can read awk programs but find the language of little use. Its focus is narrow and its syntax can be surprising. Python matches it at home and smashes it away. Nonetheless, a number of the &lt;a href="./advent-of-code"&gt;advent of code&lt;/a&gt; puzzles fit the awk processing model &amp;#8212; line based instructions, the interpretation of which builds state contributing to the final result &amp;#8212; and I enjoyed writing awk solutions. There&amp;#8217;s satisfaction in using a tool which is up to the job, no more and no less: in using a nutcracker, rather than a sledgehammer, to crack a nut.
&lt;/p&gt;

&lt;h2&gt;Puzzle&lt;/h2&gt;
&lt;p&gt;For example, the puzzle set on &lt;a href="http://adventofcode.com/day/6"&gt;day 6&lt;/a&gt; consists of a list of instructions for switching and toggling a 1000 x 1000 grid of lights. The instructions read:
&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;turn on 296,50 through 729,664
turn on 212,957 through 490,987
toggle 171,31 through 688,88
turn off 991,989 through 994,998
....
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;and the question is, after following these instructions, &lt;strong&gt;how many lights are lit&lt;/strong&gt;?
&lt;/p&gt;
&lt;p&gt;Each instruction is a single line; the actions &amp;#8212; turn on, turn off, toggle &amp;#8212; can be matched by patterns; and to follow these actions requires no more than an array and arithmetic: &lt;code&gt;awk&lt;/code&gt; fits nicely.
&lt;/p&gt;

&lt;h2&gt;Code&lt;/h2&gt;
&lt;script src="https://gist.github.com/wordaligned/ceb8671aad6a3416e094.js" type="text/javascript"&gt;&lt;/script&gt;


&lt;h2&gt;Comments&lt;/h2&gt;
&lt;p&gt;Here, the &lt;code&gt;BEGIN&lt;/code&gt; action sets the field separator &lt;code&gt;FS&lt;/code&gt; to the regular expression &lt;code&gt;[ ,]&lt;/code&gt; which picks out the textual and numeric fields from each instruction. Awk is highly dynamic: use a variable as a number and it becomes a number, in this case the coordinates of a lighting grid; and similarly, the fields &amp;#8220;on&amp;#8221;, &amp;#8220;off&amp;#8221; and &amp;#8220;toggle&amp;#8221; are matched and treated as strings.
&lt;/p&gt;
&lt;p&gt;The grid of lights appears to be represented as a two dimensional array, accessed &lt;code&gt;lights[x,y]&lt;/code&gt; rather than &lt;code&gt;lights[x][y]&lt;/code&gt;. In fact, the array &amp;#8212; like all arrays in awk &amp;#8212; is an associative container, which maps from strings &amp;#8212; not numbers &amp;#8212; to values.  The key &lt;code&gt;x,y&lt;/code&gt; becomes a string which joins the values of &lt;code&gt;x&lt;/code&gt; and &lt;code&gt;y&lt;/code&gt; with a separator defaulted to &lt;code&gt;"\034"&lt;/code&gt;.
&lt;/p&gt;

&lt;h2&gt;Niggles&lt;/h2&gt;
&lt;p&gt;The escape character at the end of line 5 is needed to continue the long line. I&amp;#8217;d prefer to use parentheses to wrap the expression over more than one line, &lt;a href="http://pep8.org/#indentation"&gt;as I would in Python&lt;/a&gt;, but this trick doesn&amp;#8217;t seem to work. I was somewhat surprised there was no built in &lt;code&gt;sum()&lt;/code&gt; function to count up the number of lights turned on by the &lt;code&gt;END&lt;/code&gt;. It would have been cute to pass &lt;code&gt;on()&lt;/code&gt;, &lt;code&gt;off()&lt;/code&gt; and &lt;code&gt;toggle()&lt;/code&gt; as functions into &lt;code&gt;switch()&lt;/code&gt;, separating traversal from action, but I couldn&amp;#8217;t find a way to do this in awk.
&lt;/p&gt;
&lt;p&gt;My awk script solved the puzzle in 45 seconds. A Python solution took 17 seconds. I didn&amp;#8217;t try optimising either.
&lt;/p&gt;
&lt;script src="https://gist.github.com/wordaligned/007c5cb30a3f7490e3ff.js" type="text/javascript"&gt;&lt;/script&gt;


&lt;h2&gt;Don&amp;#8217;t use a sledgehammer to crack a nut!&lt;/h2&gt;
&lt;p&gt;This advice, commonly given to programmers, demands explanation. If it&amp;#8217;s intended to imply a sledgehammer is more likely to pulverise the nut than open it, then fine, that&amp;#8217;s true &amp;#8212; but the analogy fails in this case: a solution written in Python would have been equally correct.
&lt;/p&gt;
&lt;p&gt;Alternatively, if we mean you shouldn&amp;#8217;t use a powerful language when a less powerful one would do, then the question becomes: &lt;strong&gt;why not&lt;/strong&gt;? Python is a general purpose programming language. It can crack nuts, peel bananas, serve web pages and so much more. If you know Python why bother with Awk?
&lt;/p&gt;
&lt;p&gt;At the outset of this post I admitted I don&amp;#8217;t generally bother with awk. Sometimes, though, I encounter the language and need to read and possibly adapt an existing script. So that&amp;#8217;s one reason to bother. Another reason is that it&amp;#8217;s elegant and compact. Studying its operation and motivation may help us compose and factor our own programs &amp;#8212; programs far more substantial than the scripts presented here, and in which there will surely be places for mini-languages of our own.
&lt;/p&gt;</description>
<dc:date>2016-02-23</dc:date>
<guid>http://wordaligned.org/articles/sledgehammers-vs-nut-crackers</guid>
<author>tag@wordaligned.org (Thomas Guest)</author>
<link>http://wordaligned.org/articles/sledgehammers-vs-nut-crackers</link>
<category>Awk</category>
<category>Python</category>
</item>

<item>
<title>Advent of Code</title>
<description>&lt;p&gt;I enjoyed solving &lt;a href="http://was.tl"&gt;Eric Wastl&lt;/a&gt;&amp;#8217;s excellent &lt;a href="http://adventofcode.com"&gt;Advent of Code&lt;/a&gt; programming puzzles over Christmas last year. The puzzles are nicely themed and the site itself is a delight: lighting up an ascii art Christmas tree, row by row, became an addiction.
&lt;/p&gt;
&lt;blockquote&gt;&lt;p&gt;Advent of Code is a series of small programming puzzles for a variety of skill levels. They are self-contained and are just as appropriate for an expert who wants to stay sharp as they are for a beginner who is just learning to code.
&lt;/p&gt;
&lt;/blockquote&gt;&lt;p&gt;First time through, I blasted through all the puzzles using Python, leaning on its standard containers, &lt;a href="https://docs.python.org/3/library/itertools.html"&gt;algorithms&lt;/a&gt; and text munging capabilities: &amp;#8220;an expert who wants to stay sharp&amp;#8221;, if you like. Now I&amp;#8217;m tackling the problems again using languages and techniques I&amp;#8217;m less comfortable with: &amp;#8220;a beginner who is just learning to code&amp;#8221;, which I like.
&lt;/p&gt;
&lt;p&gt;Second time round is fun, slow and instructive. I&amp;#8217;m posting solutions on &lt;a href="https://github.com/wordaligned/advent-of-code"&gt;github&lt;/a&gt;.
&lt;/p&gt;
&lt;p&gt;&lt;a href="http://adventofcode.com"&gt;&lt;img src="http://wordaligned.org/images/advent-of-code.png" alt="ascii xmas tree" /&gt;&lt;/a&gt;
&lt;/p&gt;</description>
<dc:date>2016-02-22</dc:date>
<guid>http://wordaligned.org/articles/advent-of-code</guid>
<author>tag@wordaligned.org (Thomas Guest)</author>
<link>http://wordaligned.org/articles/advent-of-code</link>
<category>Self</category>
<category>Algorithms</category>
<category>Github</category>
</item>

<item>
<title>Code Reviews - the rules</title>
<description>&lt;p&gt;The rule is: no code gets checked in without a review.
&lt;/p&gt;
&lt;p&gt;It&amp;#8217;s not always easy to get a reviewer to sign off a changelist. Does the code build? In all configurations and on all platforms? Do the tests pass? Are all new code paths covered? Does the commit message describe the change? Does the formatting match the style guide? Does the code match its surroundings? How about documentation, compiler warnings, license requirements?
&lt;/p&gt;
&lt;p&gt;Is the change really necessary? Could it have been realised more simply?
&lt;/p&gt;
&lt;p&gt;Certainly the reviewer&amp;#8217;s task is easier if the task has been &lt;a href="http://wordaligned.org/articles/programming-paired-and-shared"&gt;paired on&lt;/a&gt;. Small and self-contained changelists are more straightforward. Removing code, too, should be less contentious.
&lt;/p&gt;
&lt;p&gt;Depending on infrastructure, some checklist items can be automated. Ideally the changelist has already been though CI, for example, ticking the builds-cleanly and passes-its-tests boxes.
&lt;/p&gt;
&lt;p&gt;So far, so what? (So obvious!)
&lt;/p&gt;
&lt;p&gt;Here&amp;#8217;s another rule, and one I&amp;#8217;ve not seen written down before.
&lt;/p&gt;
&lt;p&gt;When I review code I might well consider how I would have made the change. That doesn&amp;#8217;t mean I&amp;#8217;ll insist the submitter does things my way. In the absence of &lt;a href="https://blog.golang.org/go-fmt-your-code" title="go fmt your code"&gt;automated formatters&lt;/a&gt; there will be more than one acceptable way to lay out the code. Sometimes there&amp;#8217;s little reason to prefer an explicit loop over an algorithm + lambda combination, or vice-versa. &lt;a href="http://wordaligned.org/articles/go-for-short-variable-names"&gt;Short names&lt;/a&gt; work for me but not for everyone. It&amp;#8217;s hard to argue against test coverage, but is more always better?
&lt;/p&gt;
&lt;p&gt;In such cases I won&amp;#8217;t try to impose my own style on the changelist. Instead, the question becomes: &lt;strong&gt;does the code match the standards we, as a team, have set&lt;/strong&gt;? Or, &lt;strong&gt;do these changes merit a place in our codebase&lt;/strong&gt;?
&lt;/p&gt;
&lt;p&gt;It&amp;#8217;s a simple principle but not an obvious one. It helps me review fairly and also to learn from others on my team.
&lt;/p&gt;
&lt;p&gt;There &lt;strong&gt;is&lt;/strong&gt; more than one way to do it!
&lt;/p&gt;</description>
<dc:date>2015-08-05</dc:date>
<guid>http://wordaligned.org/articles/code-reviews--the-rules</guid>
<author>tag@wordaligned.org (Thomas Guest)</author>
<link>http://wordaligned.org/articles/code-reviews--the-rules</link>
<category>Self</category>
<category>Design</category>
<category>Build</category>
<category>Go</category>
</item>

<item>
<title>Programming Paired and Shared</title>
<description>&lt;p&gt;We &lt;a href="http://en.wikipedia.org/wiki/Pair_programming"&gt;pair program&lt;/a&gt; where I work. Two people, one desk. It can get intense.
&lt;/p&gt;
&lt;p&gt;&lt;a href="http://en.wikipedia.org/wiki/Vim_%28cleaning_product%29"&gt;&lt;img style="align:top" src="http://wordaligned.org/images/vim.jpg" alt="Floor cleaner"/&gt;&lt;/a&gt;
   &lt;a href="http://wordaligned.org/articles/accidental-emacs"&gt;&lt;img style="align:top" src="http://wordaligned.org/images/gnu.jpg" alt="Emacs"/&gt;&lt;/a&gt;
&lt;/p&gt;
&lt;p&gt;Editor wars claim few casualties &amp;mdash; until an emacs and a vim user are forced to share a keyboard and screen, that is. Anyone for notepad?
&lt;/p&gt;
&lt;p&gt;Sharing the typing isn&amp;#8217;t why we pair. Where I work we also do code reviews. Whilst pair programming is encouraged, code reviews are mandated: code cannot be checked in until approved by a reviewer. That reviewer could be the person you paired with, and it soon becomes apparent that reviews conducted with a pair go more smoothly than ones where the reviewer is new to the task. It&amp;#8217;s hard for someone to review a tricky changeset without the context of its development.
&lt;/p&gt;
&lt;p&gt;The &lt;strong&gt;context of its development&lt;/strong&gt; turns out to be paramount for understanding a codebase, not just a changeset. Pair programming helps provide that context.
&lt;/p&gt;
&lt;p&gt;The term &lt;strong&gt;pairing&lt;/strong&gt; serves better than &lt;strong&gt;pair programming&lt;/strong&gt;. The former suggests sharing; the latter, typing. The benefits come from sharing all aspects of the work: decisions and responsibility; research, design, development; how to test; where to cut corners and where to go beyond the immediate requirement; when to take a break. Anyone for table football?
&lt;/p&gt;
&lt;p&gt;&lt;a href="http://www.snsystems.com/careers/"&gt;&lt;img src="http://wordaligned.org/images/table-football.jpg" alt="Edd and Bridget vs Bridget and Edd" title="Edd and Bridget kicking a ball around" /&gt;&lt;/a&gt;
&lt;/p&gt;</description>
<dc:date>2015-05-27</dc:date>
<guid>http://wordaligned.org/articles/programming-paired-and-shared</guid>
<author>tag@wordaligned.org (Thomas Guest)</author>
<link>http://wordaligned.org/articles/programming-paired-and-shared</link>
<category>Self</category>
<category>Emacs</category>
<category>Design</category>
</item>

<item>
<title>Jokey Code?</title>
<description>&lt;h3&gt;Choose Talks&lt;/h3&gt;
&lt;p&gt;I usually leave it as late as possible before deciding which sessions to attend at the &lt;a href="http://accu.org/index.php/conferences/accu_conference_2015"&gt;ACCU conference&lt;/a&gt;. There&amp;#8217;s ample time to study the &lt;a href="http://accu.org/index.php/conferences/accu_conference_2015/accu2015_schedule"&gt;schedule&lt;/a&gt; when you&amp;#8217;re there and anyway, it&amp;#8217;s subject to change.
&lt;/p&gt;
&lt;p&gt;This year I stuck with this policy with a couple of notable exceptions. First, there was &lt;a href="http://wordaligned.org/docs/oulipo/"&gt;my own talk&lt;/a&gt;, where I noted that computer programmers are writers who impose formal constraints on their texts, and who can learn from other writers who practice the same discipline. Second, there was Peter Hilton&amp;#8217;s talk, &lt;a href="http://accu.org/index.php/conferences/accu_conference_2015/accu2015_sessions#how_to_name_things_-_the_hardest_problem_in_programming"&gt;&amp;#8220;How to name things &amp;#8212; the hardest problem in programming&amp;#8221;&lt;/a&gt;, in which he argued more generally that programmers had much to learn from writers.
&lt;/p&gt;
&lt;p&gt;I &lt;strong&gt;had&lt;/strong&gt; to see Peter Hilton&amp;#8217;s talk and it did not disappoint. It engaged me at the time, in discussions afterwards, and it continues to make me think. I won&amp;#8217;t post a full response here but I do want to consider one aspect: humour.
&lt;/p&gt;
&lt;div&gt;&lt;iframe src="http://wordaligned.org//www.slideshare.net/slideshow/embed_code/key/qnND7jVVQOmWCS" width="425" height="355" frameborder="0" marginwidth="0" marginheight="0" scrolling="no" style="border:1px solid #CCC; border-width:1px; margin-bottom:5px; max-width: 100%;" allowfullscreen&gt;&lt;/iframe&gt;&lt;/div&gt;


&lt;h3&gt;Tell Jokes&lt;/h3&gt;
&lt;p&gt;Peter Hilton argued we should pay attention to tips from the likes of George Orwell and Stephen King because their advice is better written and also because it&amp;#8217;s &lt;strong&gt;funnier&lt;/strong&gt;. Why does this humourous aspect matter? Well, perhaps we&amp;#8217;re more likely to listen to someone who makes us laugh. Witty advice sounds less pompous.
&lt;/p&gt;
&lt;p&gt;It goes deeper than this, though. Another point from the talk:
&lt;/p&gt;
&lt;blockquote&gt;&lt;p&gt;Improve your general vocabulary. Read books, especially funny novels.
&lt;/p&gt;
&lt;/blockquote&gt;&lt;p&gt;Why &lt;strong&gt;funny novels&lt;/strong&gt;? At this point in the talk Peter Hilton disingenously suggested such books were easier to read. A point he made later goes deeper:
&lt;/p&gt;
&lt;blockquote&gt;&lt;p&gt;Tell jokes &amp;#8230; Puns are important for naming, because they rely on double-meanings. Spotting double-meanings is the essential skill for avoiding ambiguous names.
&lt;/p&gt;
&lt;/blockquote&gt;&lt;p&gt;Interesting! I agree that word play and word power are linked: but do you need to be a punster to avoid ambiguity? I&amp;#8217;m not sure. In the words of &lt;a href="http://chrisoldwood.blogspot.co.uk/2015/04/the-daily-stand-up.html"&gt;Chris Oldwood&lt;/a&gt;:
&lt;/p&gt;
&lt;blockquote&gt;&lt;p&gt;I&amp;#8217;ve been writing more functional code lately. I recently tried a few numerical recipes with currying functions, but all I got was a NaN.
&lt;/p&gt;
&lt;/blockquote&gt;&lt;p&gt;&lt;a href="http://en.wikipedia.org/wiki/Naan"&gt;&lt;img src="http://wordaligned.org/images/naan.jpg" alt="all I got was a NaN"/&gt;&lt;/a&gt;
&lt;/p&gt;

&lt;h3&gt;Laughable Code&lt;/h3&gt;
&lt;p&gt;Is there a place for humour in code? Rarely, I&amp;#8217;d say. Code is read,
   re-read and then read again: most jokes become tired and then
   irritating under such scrutiny. Peter Hilton, though, described his
   amusement on discovering this &lt;a href="http://www.slideshare.net/pirhilton/how-to-name-things-the-hardest-problem-in-programming/55"&gt;function&lt;/a&gt;, which configures
   and starts &lt;a href="http://camel.apache.org/"&gt;Apache Camel&lt;/a&gt;:
&lt;/p&gt;
&lt;div class="typocode"&gt;

&lt;pre class="prettyprint"&gt;/** Configure and start Apache Camel */
def mountCamel() {
    Logger.info("Starting Camel...")
    val context = new DefaultCamelContext()
    configuredRoutes foreach { route =&amp;gt;
        context.addRoutes(route)
    }
    context.start()
}

&lt;/pre&gt;

&lt;/div&gt;

&lt;p&gt;The obvious alternative, &lt;code&gt;startCamel()&lt;/code&gt;, just isn&amp;#8217;t funny enough, apparently. I&amp;#8217;m glad the author resisted the temptation to call it &lt;code&gt;humpCamel()&lt;/code&gt;.
&lt;/p&gt;
&lt;p&gt;I&amp;#8217;m reminded of a colleague with a fondness for &lt;a href="http://en.wikipedia.org/wiki/Franglais"&gt;franglais&lt;/a&gt; who
   would, for example, check in a graphics routine called
   &lt;code&gt;do_le_render()&lt;/code&gt;. Mildly amusing first time round, maybe, but less so
   each time it got revisited to fix les bugs.
&lt;/p&gt;
&lt;p&gt;&lt;a href="https://www.flickr.com/photos/ahmedrabea/7929947448" title="Ark of Desert - Camel by Ahmed Rabea, on Flickr"&gt;&lt;img src="https://farm9.staticflickr.com/8180/7929947448_06dd57700c_z.jpg" width="640" height="427" alt="Ark of Desert - Camel"/&gt;&lt;/a&gt;
&lt;/p&gt;
&lt;p&gt;I don&amp;#8217;t see many jokes in the code I read and I don&amp;#8217;t think it&amp;#8217;s
   because the authors lack a sense of humour. Just as &lt;a href="http://wordaligned.org/articles/entertaining-documentation" title="Entertaining documentation"&gt;good
documentation should inform rather than entertain&lt;/a&gt;, good code
   should express complex ideas as plainly as possible: humour doesn&amp;#8217;t
   get a look in.
&lt;/p&gt;
&lt;p&gt;There are exceptions. We&amp;#8217;ve already seen the name &amp;#8220;camel&amp;#8221; used for something which isn&amp;#8217;t a camel: libraries, products and projects can benefit from short, memorable and quirky names. In unit tests, too, code is less complex, which can leave space for quips and in-jokes. When an integer is expected it often turns out to be &lt;a href="https://www.google.co.uk/webhp?q=the%20answer%20to%20life%20the%20universe%20and%20everything"&gt;42&lt;/a&gt;. Binary input data is laid out to form strange messages when viewed as &lt;a href="http://nedbatchelder.com/text/hexwords.html"&gt;hexadecimal&lt;/a&gt;. If some text &amp;#8212; any old text &amp;#8212; is needed, &lt;a href="http://en.wikipedia.org/wiki/Lorem_ipsum"&gt;lorem ipsum&lt;/a&gt; would indicate a lack of imagination. Even so, well-chosen names and values from the domain under test would probably be more helpful when a failing test needs fixing.
&lt;/p&gt;

&lt;h3&gt;Charming code&lt;/h3&gt;
&lt;p&gt;I&amp;#8217;m down on jokes in code but I do think code can be a pleasure to read and that well written programs can delight. Whilst I agree with Peter Hilton&amp;#8217;s recommendation to read widely and well, I was surprised he didn&amp;#8217;t recommend reading &lt;strong&gt;code&lt;/strong&gt;, and when I discussed this with him afterwards he asked, where is it? Where is it! That will be the subject of another article, but off the top of my head, &lt;a href="http://www.freetype.org"&gt;freetype&lt;/a&gt;, &lt;a href="https://www.ffmpeg.org/"&gt;ffmpeg&lt;/a&gt;, &lt;a href="http://llvm.org/"&gt;llvm&lt;/a&gt;, the Go and Python standard libraries. If you read through any of these you&amp;#8217;ll enjoy their clarity and internal consistency &amp;#8212; their style; and should you code against them, these same attributes show through their interfaces.
&lt;/p&gt;
&lt;p&gt;I haven&amp;#8217;t found any jokes in the &lt;a href="https://www.sqlite.org/"&gt;SQLite&lt;/a&gt; source but if you decide
   to integrate it in your application, when you check the license you&amp;#8217;ll
   find, instead, a &lt;a href="https://www.sqlite.org/different.html"&gt;blessing&lt;/a&gt;. This may seem funny &amp;#8212; unusual,
   certainly &amp;#8212; but it&amp;#8217;s actually quite serious.
&lt;/p&gt;
&lt;blockquote&gt;&lt;p&gt;May you do good and not evil&lt;br/&gt;
May you find forgiveness for yourself and forgive others&lt;br/&gt;
May you share freely, never taking more than you give.&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;We may not issue blessings with our own code but maybe we can find other ways to surprise and delight.
&lt;/p&gt;</description>
<dc:date>2015-05-11</dc:date>
<guid>http://wordaligned.org/articles/jokey-code</guid>
<author>tag@wordaligned.org (Thomas Guest)</author>
<link>http://wordaligned.org/articles/jokey-code</link>
<category>Documentation</category>
<category>ACCU</category>
</item>

<item>
<title>Election Manifesto - a timely activity for agile retrospectives</title>
<description>&lt;p&gt;Did I mention that I&amp;#8217;ve become scrum master for my team? I have now. It&amp;#8217;s a new thing for me (and for this blog) but I enjoy it, especially running the retrospective meetings. You have to keep these fresh and one way of doing this is to connect them with what&amp;#8217;s going on in the world outside: the &lt;a href="http://plans-for-retrospectives.com/?id=54" title="Story Oscars, a retromat activity"&gt;Oscars&lt;/a&gt;, the eclipse, the &lt;a href="http://www.bbc.co.uk/news/election/2015"&gt;general election&lt;/a&gt; &amp;#8230;
&lt;/p&gt;
&lt;p style="margin:0;text-align:center;font-size:800%;"&gt;&amp;#x2611;&lt;/p&gt;

&lt;p&gt;With a week to go, my vote has been posted. So, here&amp;#8217;s an activity I devised for a recent retrospective. We were focusing on infrastructure issues and trying to come with improvements. For this, it worked well.
&lt;/p&gt;
&lt;blockquote&gt;&lt;p&gt;Ask the team to split into three or four &amp;#8220;political&amp;#8221; parties. Each party must come up with a manifesto for change. What isn&amp;#8217;t working? How would they improve things, given the chance? After 20 minutes of discussion, reconvene and ask the party leaders to present their manifesto to the electorate. Be prepared for tough questions and heckling!&lt;/p&gt;
&lt;p&gt;Now it&amp;#8217;s time to plan a brighter future. Summarise the key points of each manifesto and write them up on sticky notes, using different colours for the different parties. What do the parties agree on? Which promises are unrealistic and which can be delivered?&lt;/p&gt;&lt;/blockquote&gt;

&lt;p style="margin:0;text-align:center;font-size:800%;"&gt;&amp;#x2611;&lt;/p&gt;

&lt;p&gt;For more retrospective ideas, I recommend &lt;a href="http://plans-for-retrospectives.com" title="Retromat, plans for retrospectives"&gt;Retromat&lt;/a&gt; by &lt;a href="https://twitter.com/findingmarbles" title="@findingmarbles"&gt;Corinna Baldauf&lt;/a&gt;. You can find another suggestion of mine, &lt;a href="http://plans-for-retrospectives.com/?id=97"&gt;#tweetmysprint&lt;/a&gt;, on the Retromat and I&amp;#8217;ve submitted this one too.
&lt;/p&gt;
&lt;p style="margin:0;text-align:center;font-size:800%;"&gt;&amp;#x2611;&lt;/p&gt;

&lt;div&gt;&lt;blockquote class="twitter-tweet" lang="en"&gt;&lt;p&gt;&lt;a href="https://twitter.com/hashtag/tweetmysprint?src=hash"&gt;#tweetmysprint&lt;/a&gt; Please write 3 tweets describing this sprint. Stories, suggestions, rants all welcome &amp;mdash; but be brief ;-)&lt;/p&gt;&amp;mdash; Professor Scrum (@professorscrum) &lt;a href="https://twitter.com/professorscrum/status/583018772891639808"&gt;March 31, 2015&lt;/a&gt;&lt;/blockquote&gt;&lt;script async src="http://wordaligned.org//platform.twitter.com/widgets.js" charset="utf-8"&gt;&lt;/script&gt;&lt;/div&gt;</description>
<dc:date>2015-04-29</dc:date>
<guid>http://wordaligned.org/articles/election-manifesto</guid>
<author>tag@wordaligned.org (Thomas Guest)</author>
<link>http://wordaligned.org/articles/election-manifesto</link>
<category>Scrum</category>
<category>Self</category>
</item>

<item>
<title>Speaking at the ACCU Conference 2015</title>
<description>&lt;p&gt;This time last week I was on my way to the &lt;a href="http://accu.org/index.php/conferences/accu_conference_2015" title="ACCU 2015 main page"&gt;ACCU 2015 conference&lt;/a&gt; in Bristol. The past couple of years I&amp;#8217;ve been, but for one day only. This year, as a presenter of a full length (90 minute!) session I got to go to the whole thing.
&lt;/p&gt;
&lt;p&gt;Being a speaker made all the difference. Having the chance to attend plenty of sessions meant I was more relaxed about choosing which ones to pick &amp;#8212; each slot during the day offered &lt;a href="http://accu.org/index.php/conferences/accu_conference_2015/accu2015_schedule" title="ACCU 2015 Schedule"&gt;5 options&lt;/a&gt; &amp;#8212; and less upset if I thought, 10 minutes into a presentation, that I could have picked something else. Perhaps as a consequence of this, I was happy with all my choices. That said, I&amp;#8217;d love the whole thing to run again so I could take a second route through the schedule.
&lt;/p&gt;
&lt;blockquote class="twitter-tweet" lang="en"&gt;&lt;p&gt;I have no idea what &lt;a href="https://twitter.com/thomasguest"&gt;@thomasguest&lt;/a&gt;&amp;rsquot;s &lt;a href="https://twitter.com/hashtag/accu2015?src=hash"&gt;#accu2015&lt;/a&gt; talk will be about, which is why I&amp;rsquot;m here. &amp;ldqou;Lessons from the OuLiPo&amp;rdquo;. &lt;a href="http://t.co/l6CKhCBJ7f"&gt;pic.twitter.com/l6CKhCBJ7f&lt;/a&gt;&lt;/p&gt;&amp;mdash; Robert Smallshire (@robsmallshire) &lt;a href="https://twitter.com/robsmallshire/status/591256120783728640"&gt;April 23, 2015&lt;/a&gt;&lt;/blockquote&gt;

&lt;p&gt;I&amp;#8217;d run a couple of practice versions of my talk at ACCU local groups in &lt;a href="http://www.meetup.com/ACCU-Bristol"&gt;Bristol&lt;/a&gt; and then in &lt;a href="http://www.meetup.com/ACCU-Oxford"&gt;Oxford&lt;/a&gt;, which meant I was comfortable with the material and convinced it would hold an audience&amp;#8217;s interest.
&lt;/p&gt;
&lt;div&gt;&lt;blockquote class="twitter-tweet" lang="en"&gt;&lt;p&gt;Beautiful talk by &lt;a href="https://twitter.com/thomasguest"&gt;@thomasguest&lt;/a&gt; at &lt;a href="https://twitter.com/hashtag/accu2015?src=hash"&gt;#accu2015&lt;/a&gt; on adopting artificial constraints in design and programming guided by the OuLiPo.&lt;/p&gt;&amp;mdash; Robert Smallshire (@robsmallshire) &lt;a href="https://twitter.com/robsmallshire/status/591264421470666752"&gt;April 23, 2015&lt;/a&gt;&lt;/blockquote&gt;&lt;script async src="http://wordaligned.org//platform.twitter.com/widgets.js" charset="utf-8"&gt;&lt;/script&gt;&lt;/div&gt;

&lt;p&gt;Some things to consider for next year:
&lt;/p&gt;
&lt;ul&gt;
 &lt;li&gt;
     I&amp;#8217;m going to submit another talk proposal, and if it&amp;#8217;s accepted
 &lt;/li&gt;

 &lt;li&gt;
     I&amp;#8217;ll practise it twice, at least and
 &lt;/li&gt;

 &lt;li&gt;
     I&amp;#8217;ll get a remote control.
 &lt;/li&gt;

 &lt;li&gt;
     My laptop is too bulky for comfort. &lt;a href="https://www.themobilepresenter.com/"&gt;Dirk Haun&lt;/a&gt; ran &lt;a href="http://www.slideshare.net/dhaun/braindump-how-to-leave-your-knowledge-when-leaving-your-job"&gt;his talk&lt;/a&gt; from a tablet. Could a phone be used?
 &lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;My lightning talk &amp;#9758; &lt;a href="http://wordaligned.org/knights-tour" title="Perhaps the greatest 20th century novel &amp;amp;mdash; Donald Knuth"&gt;Life A User&amp;#8217;s Manual&lt;/a&gt;.
&lt;/p&gt;
&lt;p&gt;Slides for my main talk &amp;#9758; &lt;a href="http://wordaligned.org/docs/oulipo/"&gt;Lessons from the OuLiPo&lt;/a&gt;.
&lt;/p&gt;
&lt;p&gt;I would like to thank all the organisers of the conference, everyone who presented, and everyone who attended. Especial mention to &lt;a href="https://twitter.com/jonjagger" title="Loves people; software; fishing; built http://cyber-dojo.org"&gt;Jon Jagger&lt;/a&gt; who announced that this would be his last year as conference chair. Let&amp;#8217;s hope that in future years the mail bag continues to be inundated with letters! &lt;a href="http://www.goodliffe.net/"&gt;Pete Goodliffe&lt;/a&gt; too deserves a special mention for setting up three excellent lightning talk sessions. Controlled anarchy &amp;mdash; he&amp;#8217;s good at it!
&lt;/p&gt;</description>
<dc:date>2015-04-28</dc:date>
<guid>http://wordaligned.org/articles/speaking-at-the-accu-conference-2015</guid>
<author>tag@wordaligned.org (Thomas Guest)</author>
<link>http://wordaligned.org/articles/speaking-at-the-accu-conference-2015</link>
<category>ACCU</category>
<category>Self</category>
<category>Oulipo</category>
</item>

<item>
<title>2147483647</title>
<description>&lt;h1&gt;Magic!&lt;/h1&gt;
&lt;p&gt;When software developers refer to &amp;#8220;magic numbers&amp;#8221; they mean those numeric literals which appear in a program without explanation &amp;#8212; as if by magic. Consider the mysterious figures in this incantation:
&lt;/p&gt;
&lt;div class="typocode"&gt;

&lt;pre class="prettyprint"&gt;int cigarettes()
{
    return 365 * 20 * 10 + 2 * 20 + 17;
}

&lt;/pre&gt;

&lt;/div&gt;

&lt;p&gt;Why is the &lt;code&gt;&lt;a href="http://www.richardbeard.info/category/my-books/x20/
"&gt;20&lt;/a&gt;&lt;/code&gt; repeated? Does the first &lt;code&gt;20&lt;/code&gt; mean the same as the second one? Could &lt;code&gt;365&lt;/code&gt; be the number of days in a year? Named constants would make the code easier to read and maintain.
&lt;/p&gt;
&lt;p&gt;Some numbers truly are &lt;strong&gt;magical&lt;/strong&gt; though.
&lt;/p&gt;

&lt;h1&gt;2147483647&lt;/h1&gt;
&lt;p&gt;The number 2147483647 is special and terrible.
&lt;/p&gt;
&lt;p&gt;It&amp;#8217;s a substantial number, far greater than the number of goals Lionel Messi has scored or the number of hot dinners I&amp;#8217;ve eaten, and comparable with the number of heart beats in a lifetime or the number of instructions a processor executes in a second; but it&amp;#8217;s not that large. You&amp;#8217;ll need more than 2147483647 bytes to install a modern operating system, let alone store your video collection. And shuffling a pack of just 52 cards has 80658175170943878571660636856403766975289505440883277824000000000000 possible outcomes.
&lt;/p&gt;
&lt;p&gt;If 2147483647 isn&amp;#8217;t remarkable for its size it certainly has a noteworthy history. In 1772 the Swiss mathematician Leonhard Euler proved it a prime. I&amp;#8217;m guessing it was the largest known prime at the time. Euler didn&amp;#8217;t have a computer to hunt for primes so he narrowed the field by focusing on &lt;a href="http://www.mersenne.org/"&gt;Mersenne numbers&lt;/a&gt; &amp;#8212; numbers one less than a power of two &amp;#8212; a strategy which remains a winner even today, when computers are networked to search.
&lt;/p&gt;
&lt;p&gt;Actually, 2147483647 is a double Mersenne prime, which is to say it takes the form 2&lt;sup&gt;m&lt;/sup&gt; - 1, where &lt;code&gt;m&lt;/code&gt; itself takes the form 2&lt;sup&gt;n&lt;/sup&gt; - 1. 
&lt;/p&gt;
&lt;div class="typocode"&gt;

&lt;pre class="prettyprint"&gt;&amp;gt;&amp;gt;&amp;gt; 2**(2**5 - 1) - 1
2147483647

&lt;/pre&gt;

&lt;/div&gt;

&lt;p&gt;Magic!
&lt;/p&gt;

&lt;h1&gt;Dragons!&lt;/h1&gt;
&lt;p&gt;2147483647 has a special significance for C programmers, who know it by the name &lt;code&gt;INT_MAX&lt;/code&gt;, and for C++ programmers, who demystify the digits as &lt;code&gt;std::numeric_limits&amp;lt;int&amp;gt;::max()&lt;/code&gt;.
&lt;/p&gt;
&lt;p&gt;Remember, 2147483647 is Mersenne(Mersenne(5)), which is Mersenne(31), or 2 to the power 31 minus 1. In binary arithmetic you add a zero on the right to multiply by 2 so 2 to the 31 is 1 followed by 31 zeros; and subtracting 1 leaves 31 1&amp;#8217;s. It&amp;#8217;s the largest signed value you can fit in a 32 bit register.
&lt;/p&gt;
&lt;div class="typocode"&gt;

&lt;pre class="prettyprint"&gt;&amp;gt;&amp;gt;&amp;gt; mersenne31 = 2**31-1
&amp;gt;&amp;gt;&amp;gt; bin(mersenne31)
'0b1111111111111111111111111111111'
&amp;gt;&amp;gt;&amp;gt; hex(mersenne31)
'0x7fffffffL'
&amp;gt;&amp;gt;&amp;gt; mersenne31
2147483647L

&lt;/pre&gt;

&lt;/div&gt;

&lt;p&gt;It&amp;#8217;s quite possible to inadvertantly increment an &lt;code&gt;int&lt;/code&gt; which has reached &lt;code&gt;INT_MAX&lt;/code&gt;. The result is undefined behaviour: anything could happen. 
&lt;/p&gt;
&lt;p&gt;&lt;a href="http://en.wikipedia.org/wiki/Myth_of_the_Flat_Earth"&gt;&lt;img src="http://wordaligned.org/images/flammarion.jpg"/&gt;&lt;/a&gt;
&lt;/p&gt;

&lt;h1&gt;Gangnam Style&lt;/h1&gt;
&lt;blockquote&gt;&lt;p&gt;We never thought a video would be watched in numbers greater than a 32-bit integer (=2,147,483,647 views), but that was before we met PSY. Gangnam Style has been viewed so many times we had to upgrade to a 64-bit integer (9,223,372,036,854,775,808)!
&lt;/p&gt;
&lt;/blockquote&gt;&lt;p&gt;&amp;mdash; &lt;a href="https://plus.google.com/u/0/wm/4/+youtube/posts/BUXfdWqu86Q"&gt;youtube developers&lt;/a&gt;
&lt;/p&gt;
&lt;img src="http://wordaligned.org/images/psy.png" alt="Psy"/&gt;

&lt;p&gt;Exactly what undefined behaviour was provoked when PSY&amp;#8217;s popularity broke the magic limit isn&amp;#8217;t disclosed. Maybe a server leaked account details to North Korean hackers. Or maybe the video&amp;#8217;s viewing figures were wrong for a while. 
&lt;/p&gt;
&lt;p&gt;Note that the new limit of 9,223,372,036,854,775,808 is an unsigned value, which is exempt from this flavour of undefined behaviour and wraps to zero when you bump it up.
&lt;/p&gt;

&lt;h1&gt;Bugwards compatibility&lt;/h1&gt;
&lt;p&gt;There&amp;#8217;s another reason for preferring &lt;code&gt;INT_MAX&lt;/code&gt; to the magical 2147483647: the two values might be different. 2147483647 is 2147483647 but &lt;code&gt;INT_MAX&lt;/code&gt; depends on the implementation.
&lt;/p&gt;
&lt;p&gt;A modern computer probably has 64 bit registers making a 64 bit &lt;code&gt;int&lt;/code&gt; a more natural choice. However, for compatibility reasons, &lt;code&gt;int&lt;/code&gt;s may intentionally be limited to 32 bits!
&lt;/p&gt;</description>
<dc:date>2015-02-12</dc:date>
<guid>http://wordaligned.org/articles/2147483647</guid>
<author>tag@wordaligned.org (Thomas Guest)</author>
<link>http://wordaligned.org/articles/2147483647</link>
<category>C</category>
<category>C++</category>
</item>

<item>
<title>Lessons from the OuLiPo</title>
<description>&lt;p&gt;I&amp;#8217;m delighted to announce that my talk, &lt;a href="http://accu.org/index.php/conferences/accu_conference_2015/accu2015_sessions#lessons_from_the_oulipo"&gt;Lessons from the OuLiPo&lt;/a&gt;, has been accepted for the &lt;a href="http://accu.org/index.php/conferences/accu_conference_2015" title="ACCU 2015 conference"&gt;ACCU 2015 conference&lt;/a&gt;.
&lt;/p&gt;
&lt;img src="http://wordaligned.org/images/lessons-from-the-oulipo.png" alt="Slide 1"/&gt;

&lt;p&gt;The talk follows up on a lightning talk I gave at &lt;a href="http://www.snsystems.com/" title="SN Systems website"&gt;my employer&amp;#8217;s&lt;/a&gt; last year about Georges Perec&amp;#8217;s masterpiece, &lt;a href="http://wordaligned.org/knights-tour"&gt;Life A User&amp;#8217;s Manual&lt;/a&gt;. Click the graphic below to play the animation and read the transcript.
&lt;/p&gt;
&lt;p&gt;&lt;a href="http://wordaligned.org/knights-tour"&gt;&lt;img src="http://wordaligned.org/images/knights-tour.jpg" alt="Knights tour"/&gt;&lt;/a&gt;
&lt;/p&gt;
&lt;p&gt;I&amp;#8217;ll be giving a preview of the full version here in Bristol in a couple of weeks. I hope you can come along. More details on &lt;a href="http://www.meetup.com/ACCU-Bristol/events/219301279/"&gt;Meetup&lt;/a&gt;.
&lt;/p&gt;
&lt;p&gt;In the meanwhile, the next section of this page introduces the ideas I&amp;#8217;ll be exploring in my talk.
&lt;/p&gt;
&lt;p style="text-align:center"&gt;&amp;sect;&lt;/p&gt;

&lt;p&gt;As software developers we often ponder what it is we do: are we architects, engineers, or scientists? Are we &amp;#8212; &lt;em&gt;gasp!&lt;/em&gt; &amp;#8212; rock stars or ninjas? Which metaphors best fit? Tending a code base is like gardening. Through the seasons we encourage new growth, whilst pruning back dead code and squashing bugs. Programming is like carpentry, maybe. Select the right tool from a set kept sharp and ready for action. Programming is like cooking. Source the finest ingredients and follow the recipe.
&lt;/p&gt;
&lt;p&gt;I think there&amp;#8217;s a more obvious metaphor. Actually there&amp;#8217;s nothing meta- about it. It is what we do.
&lt;/p&gt;
&lt;p&gt;&lt;big&gt;We&amp;#8217;re writers.&lt;/big&gt;
&lt;/p&gt;
&lt;p&gt;We write to communicate and to instruct. We write for fun and profit. We edit and adapt. We rewrite. We borrow text from other writers. The languages we think we write in &amp;#8212; C++, Python, Javascript &amp;#8212; are actually just highly stylised dialects of our native tongue. Like poets we&amp;#8217;re particular about punctuation and space. We have strange ideas about spelling. The texts we write, &lt;em&gt;programs&lt;/em&gt;, are subject to formal constraints.
&lt;/p&gt;
&lt;p&gt;&lt;big&gt;We&amp;#8217;re writers bound by mathematical rules.&lt;/big&gt;
&lt;/p&gt;
&lt;p&gt;November, 1960. Paris. The poet Raymond Queneau organises the first meeting of a group which will become known as OuLiPo. A dozen turn up: writers, mathematicians, pataphysicians and surrealists. Their mission: to explore the literary potential of applying mathematical constraints to texts.
&lt;/p&gt;
&lt;p&gt;Of course constrained writing is nothing new &amp;#8212; consider the haiku: 17 syllables, arranged as 3 phrases of 5, 7 and 5 syllables, a Japanese form many centuries old &amp;#8212; and one strand of the OuLiPo&amp;#8217;s efforts is devoted to researching past experiments and structures; but I claim it&amp;#8217;s no coincidence the OuLiPo emerged at much the same time as our own novel form of constrained writing: computer programming.
&lt;/p&gt;
&lt;p&gt;In &lt;a href="http://accu.org/index.php/conferences/accu_conference_2015/accu2015_sessions#lessons_from_the_oulipo"&gt;this talk&lt;/a&gt; I&amp;#8217;ll discuss the OuLiPo in more depth, investigating the parallels between their work and ours. We&amp;#8217;ll focus on Georges Perec, whose book &lt;a href="http://wordaligned.org/knights-tour"&gt;Life A User&amp;#8217;s Manual&lt;/a&gt; is an Oulipian tour de force. There will be some code, as well as quines, easter eggs and &amp;#8212; as you&amp;#8217;d expect &amp;#8212; bugs.
&lt;/p&gt;</description>
<dc:date>2015-01-12</dc:date>
<guid>http://wordaligned.org/articles/lessons-from-the-oulipo</guid>
<author>tag@wordaligned.org (Thomas Guest)</author>
<link>http://wordaligned.org/articles/lessons-from-the-oulipo</link>
<category>ACCU</category>
<category>Oulipo</category>
<category>Perec</category>
<category>Bristol</category>
</item>

<item>
<title>Why zip when you can map?</title>
<description>&lt;p&gt;&lt;a href="http://en.wikipedia.org/wiki/Zipper"&gt;&lt;img src="http://wordaligned.org/images/zip.jpg" title="Why zip?" alt="Why zip?"/&gt;&lt;/a&gt;
   &lt;a href="http://www.strava.com/activities/158661061"&gt;&lt;img src="http://wordaligned.org/images/dundry-thunder.jpg" alt="when you can map?" title="when you can map!"/&gt;&lt;/a&gt;
&lt;/p&gt;
&lt;p&gt;You&amp;#8217;ve got a couple of parallel lists you&amp;#8217;d like to combine and output, a line for each pair. Here&amp;#8217;s one way to do it: use &lt;code&gt;zip&lt;/code&gt; to do the combining.
&lt;/p&gt;
&lt;div class="typocode"&gt;

&lt;pre class="prettyprint"&gt;&amp;gt;&amp;gt;&amp;gt; times = [42.12, 42.28, 42.34, 42.40, 42.45]
&amp;gt;&amp;gt;&amp;gt; names = ['Hickman', 'Guest', 'Burns', 'Williams']
&amp;gt;&amp;gt;&amp;gt; fmt = '{:20} {:.2f}'.format
&amp;gt;&amp;gt;&amp;gt; print('\n'.join(fmt(n, t) for n, t in zip(names, times)))
Hickman              42.12
Guest                42.28
Burns                42.34
Williams             42.40

&lt;/pre&gt;

&lt;/div&gt;

&lt;p&gt;Slightly more succinctly:
&lt;/p&gt;
&lt;div class="typocode"&gt;

&lt;pre class="prettyprint"&gt;&amp;gt;&amp;gt;&amp;gt; print('\n'.join(fmt(*nt) for nt in zip(names, times)))
...

&lt;/pre&gt;

&lt;/div&gt;

&lt;p&gt;If you look at the generator expression passed into &lt;code&gt;str.join&lt;/code&gt;, you can see we&amp;#8217;re just mapping &lt;code&gt;fmt&lt;/code&gt; to the zipped &lt;code&gt;names&lt;/code&gt; and &lt;code&gt;times&lt;/code&gt; lists.
&lt;/p&gt;
&lt;p&gt;Well, sort of.
&lt;/p&gt;
&lt;div class="typocode"&gt;

&lt;pre class="prettyprint"&gt;&amp;gt;&amp;gt;&amp;gt; print('\n'.join(map(fmt, zip(names, times))))
Traceback (most recent call last):
...
IndexError: tuple index out of range

&lt;/pre&gt;

&lt;/div&gt;

&lt;p&gt;To fix this, we &lt;strong&gt;could&lt;/strong&gt; use &lt;code&gt;itertools.starmap&lt;/code&gt; which effectively unpacks the zipped pairs.
&lt;/p&gt;
&lt;div class="typocode"&gt;

&lt;pre class="prettyprint"&gt;&amp;gt;&amp;gt;&amp;gt; from itertools import starmap
&amp;gt;&amp;gt;&amp;gt; print('\n'.join(starmap(fmt, zip(names, times))))
Hickman              42.12
Guest                42.28
Burns                42.34
Williams             42.40

&lt;/pre&gt;

&lt;/div&gt;

&lt;p&gt;This latest version looks clean enough but there&amp;#8217;s something odd about zipping two lists together only to unpack the resulting 2-tuples for consumption by the format function.
&lt;/p&gt;
&lt;p&gt;Don&amp;#8217;t forget, &lt;code&gt;map&lt;/code&gt; happily accepts more than one sequence! There&amp;#8217;s no need to &lt;code&gt;zip&lt;/code&gt; after all.
&lt;/p&gt;
&lt;div class="typocode"&gt;&lt;div class="codetitle"&gt;Don&amp;#8217;t zip, map!&lt;/div&gt;

&lt;pre class="prettyprint"&gt;&amp;gt;&amp;gt;&amp;gt; print('\n'.join(map(fmt, names, times)))
...

&lt;/pre&gt;

&lt;/div&gt;</description>
<dc:date>2014-12-16</dc:date>
<guid>http://wordaligned.org/articles/why-zip-when-you-can-map</guid>
<author>tag@wordaligned.org (Thomas Guest)</author>
<link>http://wordaligned.org/articles/why-zip-when-you-can-map</link>
<category>Python</category>
</item>

<item>
<title>Find the average of a collection of tuples or dicts using Python</title>
<description>&lt;p&gt;You&amp;#8217;ve been running some tests, each of which returns a 3-tuple of numerical results &amp;#8212; &lt;code&gt;(real, user, sys)&lt;/code&gt; times, maybe &amp;#8212; and you&amp;#8217;d like to combine these into a single 3-tuple, the average result.
&lt;/p&gt;
&lt;p&gt;Easy!
&lt;/p&gt;
&lt;div class="typocode"&gt;

&lt;pre class="prettyprint"&gt;def average(times):
    N = float(len(times))
    return (sum(t[0] for t in times)/N,
            sum(t[1] for t in times)/N,
            sum(t[2] for t in times)/N)

&lt;/pre&gt;

&lt;/div&gt;

&lt;p&gt;If you want a more generic solution, one which works when the tuples might have any number of elements, you could do this:
&lt;/p&gt;
&lt;div class="typocode"&gt;

&lt;pre class="prettyprint"&gt;def average(xs):
    N = float(len(xs))
    R = len(xs[0])
    return tuple(sum(x[i] for x in xs)/N for i in range(R))

&lt;/pre&gt;

&lt;/div&gt;

&lt;p&gt;or this:
&lt;/p&gt;
&lt;div class="typocode"&gt;

&lt;pre class="prettyprint"&gt;def average(xs):
    N = float(len(xs))
    return tuple(sum(col)/N for col in zip(*xs))

&lt;/pre&gt;

&lt;/div&gt;

&lt;p&gt;The second generic variant uses &lt;a href="https://docs.python.org/3/library/functions.html#zip"&gt;zip&lt;/a&gt; to transpose its inputs. 
&lt;/p&gt;
&lt;p&gt;Now suppose we have keyed collections of results which we want to average:
&lt;/p&gt;
&lt;div class="typocode"&gt;

&lt;pre class="prettyprint"&gt;&amp;gt;&amp;gt;&amp;gt; times = [{'real': 34.4, 'user': 26.2, 'sys': 7.3},
             {'real': 28.7, 'user': 21.5, 'sys': 6.4},
             {'real': 29.3, 'user': 22.0, 'sys': 6.9}]

&lt;/pre&gt;

&lt;/div&gt;

&lt;p&gt;If, as in the example above, each result has the same set of keys, the average result could be calculated like this:
&lt;/p&gt;
&lt;div class="typocode"&gt;

&lt;pre class="prettyprint"&gt;&amp;gt;&amp;gt;&amp;gt; N = float(len(times))
&amp;gt;&amp;gt;&amp;gt; { k : sum(t[k] for t in times)/N for k in times[0] }
{'real': 30.8, 'sys': 6.9, 'user': 23.2}

&lt;/pre&gt;

&lt;/div&gt;

&lt;p&gt;What if the inputs don&amp;#8217;t have the same keys? Consider the contents of four fridges.
&lt;/p&gt;
&lt;div class="typocode"&gt;

&lt;pre class="prettyprint"&gt;&amp;gt;&amp;gt;&amp;gt; fridges = [
    { 'egg': 5, 'milk': 1.700, 'sausage': 6 },
    { 'beer': 6, 'milk': 0.568, 'egg': 1 },
    { 'egg': 3, 'sausage': 4, 'milk': 0.125, 'lettuce': 1 },
    { 'carrot': 4 }]

&lt;/pre&gt;

&lt;/div&gt;

&lt;p&gt;A &lt;a href="https://docs.python.org/3/library/collections.html#collections.Counter"&gt;Counter&lt;/a&gt; can collect and calculate the average fridge contents. 
&lt;/p&gt;
&lt;div class="typocode"&gt;

&lt;pre class="prettyprint"&gt;&amp;gt;&amp;gt;&amp;gt; from collections import Counter
&amp;gt;&amp;gt;&amp;gt; total = sum(map(Counter, fridges), Counter())
&amp;gt;&amp;gt;&amp;gt; N = float(len(fridges))
&amp;gt;&amp;gt;&amp;gt; { k: v/N for k, v in total.items() }
{'sausage': 2.5, 'lettuce': 0.25, 'beer': 1.5, 'carrot': 1.0, 
 'egg': 2.25, 'milk': 0.59825}

&lt;/pre&gt;

&lt;/div&gt;

&lt;p&gt;Note that although &lt;code&gt;Counter&lt;/code&gt;s were primarily designed to work with positive integers to represent counts, there&amp;#8217;s nothing stopping us from using floating point numbers (amount of milk in our example) in the values field.
&lt;/p&gt;</description>
<dc:date>2014-12-03</dc:date>
<guid>http://wordaligned.org/articles/python-averages</guid>
<author>tag@wordaligned.org (Thomas Guest)</author>
<link>http://wordaligned.org/articles/python-averages</link>
<category>Python</category>
</item>

<item>
<title>Group When</title>
<description>&lt;p&gt;Phil Nash&amp;#8217;s recent tweet intrigued me.
&lt;/p&gt;
&lt;div&gt;&lt;blockquote class="twitter-tweet" lang="en"&gt;&lt;p&gt;Functional people: I often (in F#) need to process a seq into a smaller list or seq &amp;ndash; where items from the input are grouped in some way&amp;hellip;&lt;/p&gt;&amp;mdash; Phil Nash (@phil_nash) &lt;a href="https://twitter.com/phil_nash/statuses/489167611641724928"&gt;July 15, 2014&lt;/a&gt;&lt;/blockquote&gt;&lt;blockquote class="twitter-tweet" lang="en"&gt;&lt;p&gt;&amp;hellip; the need to group may not be known until after the first item in the group.&amp;#10;I struggle to find a nicely functional way to do this. Ideas?&lt;/p&gt;&amp;mdash; Phil Nash (@phil_nash) &lt;a href="https://twitter.com/phil_nash/statuses/489167962931482626"&gt;July 15, 2014&lt;/a&gt;&lt;/blockquote&gt;&lt;script async src="http://wordaligned.org//platform.twitter.com/widgets.js" charset="utf-8"&gt;&lt;/script&gt;&lt;/div&gt;

&lt;p&gt;He later clarified what he was after &amp;#8212; and had now found &amp;#8212; linking to a &lt;a href="http://fssnip.net/6A"&gt;solution&lt;/a&gt; posted a couple of years ago by &lt;a href="http://tomasp.net"&gt;Tomas Petricek&lt;/a&gt;. The function &lt;code&gt;groupWhen&lt;/code&gt; splits a sequence into groups, starting a new group whenever the predicate returns true.
&lt;/p&gt;
&lt;div class="typocode"&gt;

&lt;pre class="prettyprint"&gt; module Seq =
   /// Iterates over elements of the input sequence and groups adjacent elements.
   /// A new group is started when the specified predicate holds about the element
   /// of the sequence (and at the beginning of the iteration).
   ///
   /// For example: 
   ///    Seq.groupWhen isOdd [3;3;2;4;1;2] = seq [[3]; [3; 2; 4]; [1; 2]]
   let groupWhen f (input:seq&amp;lt;_&amp;gt;) = seq {
     use en = input.GetEnumerator()
     let running = ref true
     
     // Generate a group starting with the current element. Stops generating
     // when it founds element such that 'f en.Current' is 'true'
     let rec group() = 
       [ yield en.Current
         if en.MoveNext() then
           if not (f en.Current) then yield! group() 
         else running := false ]
     
     if en.MoveNext() then
       // While there are still elements, start a new group
       while running.Value do
         yield group() |&amp;gt; Seq.ofList }

&lt;/pre&gt;

&lt;/div&gt;

&lt;p&gt;Here&amp;#8217;s a nice Haskell version coded up by &lt;a href="https://twitter.com/sdarlington"&gt;@sdarlington&lt;/a&gt;.
&lt;/p&gt;
&lt;script src="https://gist.github.com/sdarlington/be76048bff124694769d.js"&gt;&lt;/script&gt;

&lt;p&gt;Maybe &lt;a href="https://docs.python.org/3/library/itertools.html#itertools.takewhile"&gt;takewhile&lt;/a&gt; and &lt;a href="https://docs.python.org/3/library/itertools.html#itertools.dropwhile"&gt;dropwhile&lt;/a&gt; could power a Python solution, but my first choice would be &lt;a href="https://docs.python.org/3/library/itertools.html#itertools.groupby"&gt;itertools.groupby&lt;/a&gt;. &lt;code&gt;Groupby&lt;/code&gt; chops a sequence into subsequences, where the elements of each subsequence have the same key value. A suitable key function, in this case, must change its return value every time the sequence yields an element for which the predicate holds. It could toggle between a pair of values, for example. Or it could just count the number of times the predicate holds.
&lt;/p&gt;
&lt;div class="typocode"&gt;

&lt;pre class="prettyprint"&gt;class count_p:
    ''' Return a value which increments every time the predicate holds.
    '''
    def __init__(self, pred):
        self._n = 0
        self._pred = pred
    
    def __call__(self, v):
        self._n += self._pred(v)
        return self._n

def group_when(pred, xs):
    return (gp for _, gp in groupby(xs, count_p(pred)))

&lt;/pre&gt;

&lt;/div&gt;

&lt;p&gt;Here, &lt;code&gt;group_when&lt;/code&gt; accepts an iterable and returns an iterable sequence of iterable groups. Clients choose how to consume the results.
&lt;/p&gt;
&lt;div class="typocode"&gt;

&lt;pre class="prettyprint"&gt;&amp;gt;&amp;gt;&amp;gt; def odd(v): return v % 2
&amp;gt;&amp;gt;&amp;gt; xs = group_when(odd, [3, 3, 2, 4, 1, 2])
&amp;gt;&amp;gt;&amp;gt; print([list(g) for g in xs])
[[3], [3, 2, 4], [1, 2]]

&lt;/pre&gt;

&lt;/div&gt;

&lt;p&gt;Note that &lt;code&gt;count_p&lt;/code&gt; does something very like &lt;a href="acc"&gt;itertools.accumulate&lt;/a&gt;. Here&amp;#8217;s another version of &lt;code&gt;group_when&lt;/code&gt; which takes advantage of this.
&lt;/p&gt;
&lt;div class="typocode"&gt;

&lt;pre class="prettyprint"&gt;def group_when(pred, xs):
    xs, ys = tee(xs)
    accu = accumulate(map(pred, ys))
    return (gp for _, gp in groupby(xs, lambda _: next(accu)))

&lt;/pre&gt;

&lt;/div&gt;

&lt;p style="text-align:center"&gt;&amp;sect;&lt;/p&gt;

&lt;p&gt;After a short break, here&amp;#8217;s a third version of &lt;code&gt;group_when&lt;/code&gt;. This is the first time I&amp;#8217;ve found a use for &lt;code&gt;takewhile&lt;/code&gt; and &lt;code&gt;dropwhile&lt;/code&gt;. Beware: as the teed streams &lt;code&gt;xs&lt;/code&gt; and &lt;code&gt;ys&lt;/code&gt; diverge, the amount of backing storage required will grow &amp;#8230; only for the stored values to then be dropped!
&lt;/p&gt;
&lt;div class="typocode"&gt;

&lt;pre class="prettyprint"&gt;from itertools import *
 
def group_when(p, xs):
    def notp(x): return not p(x)
    xs = iter(xs)
    while True:
        x = next(xs)
        xs, ys = tee(xs)
        yield chain([x], takewhile(notp, xs))
        xs = dropwhile(notp, ys)
 
def odd(x):
    return x % 2
 
[list(g) for g in group_when(odd, [3, 3, 2, 4, 1, 2])] # [[3], [3, 2, 4], [1, 2]]

&lt;/pre&gt;

&lt;/div&gt;</description>
<dc:date>2014-07-16</dc:date>
<guid>http://wordaligned.org/articles/group-when</guid>
<author>tag@wordaligned.org (Thomas Guest)</author>
<link>http://wordaligned.org/articles/group-when</link>
<category>Python</category>
<category>Haskell</category>
<category>Streams</category>
</item>

<item>
<title>Word Aligned, hosted by Github</title>
<description>&lt;p&gt;To anyone who subscribes to this site&amp;#8217;s &lt;a href="http://feeds.wordaligned.org/wordaligned"&gt;feed&lt;/a&gt;, my apologies if your reader recently got filled with items you&amp;#8217;d already seen. I can explain.
&lt;/p&gt;
&lt;p&gt;About seven years ago, I signed up for a great deal on hosting for life with a company called &lt;a href="http://wordaligned.org/articles/hosting-for-life-textdrive-revived.html"&gt;TextDrive&lt;/a&gt;. For most of the time since then, this service was actually provided by Joyent &amp;#8212; who took over TextDrive. Then they, Joyent, said the hosting for life deal was being &amp;#8220;sunsetted&amp;#8221;, i.e. canned. Happily TextDrive&amp;#8217;s original founder, Dean Allen, stepped in to revive his company and honour the original offer, which has indeed happened, though it&amp;#8217;s been all too clear that he&amp;#8217;s been hard to get hold of whilst the operations staff have been over-stretched.
&lt;/p&gt;
&lt;p&gt;Last week, a tweet from one of these hardworking ops tipped me off that TextDrive would soon be gone.
&lt;/p&gt;
&lt;div&gt;&lt;blockquote class="twitter-tweet" lang="en"&gt;&lt;p&gt;Public Service Announcement: TextDrivers please note that TextDrive is ceasing operation on the 14th of March 2014  &lt;a href="http://t.co/AMIO3xS2wX"&gt;http://t.co/AMIO3xS2wX&lt;/a&gt;&lt;/p&gt;&amp;mdash; Jacques Marneweck (@txdjm) &lt;a href="https://twitter.com/txdjm/statuses/441774463386800129"&gt;March 7, 2014&lt;/a&gt;&lt;/blockquote&gt;
&lt;script async src="http://wordaligned.org//platform.twitter.com/widgets.js" charset="utf-8"&gt;&lt;/script&gt;&lt;/div&gt;

&lt;p&gt;Tomorrow!
&lt;/p&gt;
&lt;p&gt;What to do?
&lt;/p&gt;
&lt;p&gt;After some &lt;a href="https://www.google.com/search?q=static+website+hosting"&gt;googling&lt;/a&gt; I&amp;#8217;ve chosen &lt;a href="http://pages.github.com"&gt;Github pages&lt;/a&gt; as the new host for Word Aligned. I&amp;#8217;ve had to relinquish a little control over URLs to make the site truly static. (A side-effect being old content appearing with new identifiers in the RSS &lt;a href="http://feeds.wordaligned.org/wordaligned"&gt;feed&lt;/a&gt;). I also won&amp;#8217;t be configuring a web server or rooting around in rotating log files. The experts at Github can take care of that.
&lt;/p&gt;
&lt;p&gt;I do get to keep my own domain, which was paramount. I don&amp;#8217;t have to pay anything, which is nice.
&lt;/p&gt;
&lt;p&gt;Previously, I used version control to track my site&amp;#8217;s contents and &lt;code&gt;rsync&lt;/code&gt; over &lt;code&gt;SSH&lt;/code&gt; to publish. Now I simply use version control: pushing a change to &lt;a href="https://github.com/wordaligned"&gt;github&lt;/a&gt; &lt;strong&gt;is&lt;/strong&gt; publication.
&lt;/p&gt;
&lt;p&gt;It&amp;#8217;s early days yet, but I&amp;#8217;m happy with the change. The &lt;a href="http://feeds.wordaligned.org/wordaligned"&gt;feed&lt;/a&gt; should settle down now, so stay subscribed. Please &lt;a href="mailto:tag@wordaligned.org?subject=Wordaligned.org%20glitches"&gt;let me know&lt;/a&gt; if you spot any problems with the site.
&lt;/p&gt;</description>
<dc:date>2014-03-13</dc:date>
<guid>http://wordaligned.org/articles/word-aligned-hosted-by-github</guid>
<author>tag@wordaligned.org (Thomas Guest)</author>
<link>http://wordaligned.org/articles/word-aligned-hosted-by-github</link>
<category>Self</category>
<category>Github</category>
</item>

<item>
<title>Go for short variable names</title>
<description>&lt;p&gt;Recently Brad Fitzpatrick promoted the &lt;a href="http://golang.org/s/style" title="Go style guide"&gt;Go style guide&lt;/a&gt; on twitter, which prompted Tim Penhey to take issue with its advice on variable naming.
&lt;/p&gt;
&lt;div&gt;&lt;blockquote class="twitter-tweet" lang="en"&gt;&lt;p&gt;&lt;a href="https://twitter.com/bradfitz"&gt;@bradfitz&lt;/a&gt; sorry, but can&amp;#39;t agree with &amp;#8220;use short variable names over descriptive ones&amp;#8221; &lt;a href="https://twitter.com/search?q=%23golang&amp;amp;src=hash"&gt;#golang&lt;/a&gt; &lt;a href="https://twitter.com/search?q=%23styleguide&amp;amp;src=hash"&gt;#styleguide&lt;/a&gt; /cc &lt;a href="https://twitter.com/sidneidasilva"&gt;@sidneidasilva&lt;/a&gt;&lt;/p&gt;&amp;mdash; Tim Penhey (@howbazaar) &lt;a href="https://twitter.com/howbazaar/statuses/437893595857571840"&gt;February 24, 2014&lt;/a&gt;&lt;/blockquote&gt;&lt;script async src="http://wordaligned.org//platform.twitter.com/widgets.js" charset="utf-8"&gt;&lt;/script&gt;&lt;/div&gt;

&lt;p&gt;A brief and inconclusive exchange followed. Twitter&amp;#8217;s fine for opinions and one-liners but flawed for discussions &amp;#8212; even when the subject happens to be brevity.
&lt;/p&gt;
&lt;p&gt;I&amp;#8217;m not going to tweet about it, but I like Go and I like its style. I&amp;#8217;d rather read code which uses short variable names. Long descriptive names, which may appear to provide more information, often obscure the structure and flow of the code. The narrower the scope, the shorter names can be; so the style guide implicitly sanctions short functions and shuns globals. All good.
&lt;/p&gt;
&lt;p&gt;How short is short?
&lt;/p&gt;
&lt;div&gt;&lt;blockquote class="twitter-tweet" data-conversation="none" lang="en"&gt;&lt;p&gt;&lt;a href="https://twitter.com/golang"&gt;@golang&lt;/a&gt; where does it stop? In our project we have &amp;#8220;c, ch, d, m, s, st&amp;#8221; and they point and say &amp;#8220;style guide says it is fine&amp;#8221;.&lt;/p&gt;&amp;mdash; Tim Penhey (@howbazaar) &lt;a href="https://twitter.com/howbazaar/statuses/438084788038037505"&gt;February 24, 2014&lt;/a&gt;&lt;/blockquote&gt;&lt;/div&gt;

&lt;p&gt;Those variables are certainly short rather than descriptive but they aren&amp;#8217;t scary: &lt;code&gt;c&lt;/code&gt; could be a character; &lt;code&gt;ch&lt;/code&gt; for channel, maybe, or another character; &lt;code&gt;d&lt;/code&gt; for data, difference or distance; &lt;code&gt;m&lt;/code&gt;, midpoint; &lt;code&gt;s&lt;/code&gt; string; &lt;code&gt;st&lt;/code&gt; state. All guesses, of course, but in context I&amp;#8217;d expect to see &amp;#8212; in the space of just a few lines of code &amp;#8212; where each variable lives and how it&amp;#8217;s used, a more clear and correct indication of what it means than a lengthy name could ever be.
&lt;/p&gt;
&lt;p&gt;Single character variables are just fine, says the &lt;a href="http://golang.org/s/style" title="Go style guide"&gt;style guide&lt;/a&gt;:
&lt;/p&gt;
&lt;blockquote&gt;&lt;p&gt;Prefer c to lineCount. Prefer i to sliceIndex.
&lt;/p&gt;
&lt;/blockquote&gt;&lt;p&gt;Some languages allow you to go further. Omit a variable in Perl and it defaults to being what you&amp;#8217;d like it to be. Usually.
&lt;/p&gt;
&lt;p&gt;A single character variable name is an extreme form of abbreviation. It works nicely for small things, like pixels and characters.
&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;Pixel pixel, pel, px, &lt;b&gt;p&lt;/b&gt;;
Character character, char, ch, &lt;b&gt;c&lt;/b&gt;;&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Some less terse abbreviations hurt my ear: &lt;code&gt;mngr&lt;/code&gt;, &lt;code&gt;svr&lt;/code&gt;, &lt;code&gt;cnt&lt;/code&gt;.
&lt;/p&gt;
&lt;p&gt;The style guide is, after all, a guide, and common sense applies.
   Some abbreviations are ugly and others save so little space they aren&amp;#8217;t worth it.
&lt;/p&gt;
&lt;p&gt;Go&amp;#8217;s advice on naming tips a hat to the language&amp;#8217;s C heritage and to C&amp;#8217;s great application, UNIX, which is unsurprising when you realise one of Go&amp;#8217;s prominent contributors, Ken Thompson, had a hand in both. When Thompson was asked what he would do differently if he were redesigning UNIX &lt;a href="http://en.wikiquote.org/wiki/Kenneth_Thompson#Attributed" title="Ken Thompson, quoted in The UNIX Programming Environment (Kernighan, Pike)"&gt;he replied&lt;/a&gt;: 
&lt;/p&gt;
&lt;blockquote&gt;&lt;p&gt;I&amp;#8217;d spell &lt;a href="http://unixhelp.ed.ac.uk/CGI/man-cgi?creat" title="man 2 creat"&gt;creat&lt;/a&gt; with an &amp;#8220;e&amp;#8221;.
&lt;/p&gt;
&lt;/blockquote&gt;&lt;p&gt;So, working on Go, &lt;a href="https://code.google.com/p/go/source/detail?r=4a3f6bbb5f0c6021279ccb3c23558b3c480d995f" title="Spell it with an e"&gt;he did&lt;/a&gt;.
&lt;/p&gt;</description>
<dc:date>2014-03-06</dc:date>
<guid>http://wordaligned.org/articles/go-for-short-variable-names</guid>
<author>tag@wordaligned.org (Thomas Guest)</author>
<link>http://wordaligned.org/articles/go-for-short-variable-names</link>
<category>Go</category>
</item>

<item>
<title>You wait all day for a bus&#8230;</title>
<description>&lt;p&gt;&lt;a href="http://docs.python.org/3/library/functions.html#any"&gt;&lt;code&gt;Any&lt;/code&gt;&lt;/a&gt; and &lt;a href="http://docs.python.org/3/library/functions.html#all"&gt;&lt;code&gt;all&lt;/code&gt;&lt;/a&gt;  didn&amp;#8217;t appear in Python until version 2.5, released in 2006, when the language was already well into its teens.
&lt;/p&gt;
&lt;p&gt;Why the delay in offering such fundamental functions? An oversight? Or simply that they&amp;#8217;re so easy to implement they weren&amp;#8217;t thought necessary. Either way, they&amp;#8217;re here now.
&lt;/p&gt;
&lt;p&gt;The functions are closely related and complementary. We can define &lt;code&gt;any&lt;/code&gt; in terms of &lt;code&gt;all&lt;/code&gt; and vice-versa.
&lt;/p&gt;
&lt;div class="typocode"&gt;

&lt;pre class="prettyprint"&gt;def any_(xs):
    return not all(map(operator.not_, xs))

def all_(xs):
    return not any(map(operator.not_, xs))

&lt;/pre&gt;

&lt;/div&gt;

&lt;p&gt;C++ reached its 30s before introducing &lt;a href="http://en.cppreference.com/w/cpp/algorithm/all_any_none_of"&gt;its own versions&lt;/a&gt; of these logical algorithms, &lt;code&gt;any_of&lt;/code&gt; and &lt;code&gt;all_of&lt;/code&gt;, but made up for lost time by finding room for a third, &lt;code&gt;none_of&lt;/code&gt;, which is not &lt;code&gt;any_of&lt;/code&gt;.
&lt;/p&gt;
&lt;div class="typocode"&gt;

&lt;pre class="prettyprint"&gt;template &amp;lt;class Iter, class Pred&amp;gt;
bool none_of_(Iter b, Iter e, Pred p)
{
    return std::find_if(b, e, p) == e;
}

template &amp;lt;class Iter, class Pred&amp;gt;
bool any_of_(Iter b, Iter e, Pred p)
{
    return !none_of_(b, e, p);
}

template &amp;lt;class Iter, class Pred&amp;gt;
bool all_of_(Iter b, Iter e, Pred p)
{
    return !any_of_(b, e, std::not1(p));
}

&lt;/pre&gt;

&lt;/div&gt;</description>
<dc:date>2013-10-02</dc:date>
<guid>http://wordaligned.org/articles/all-any-none</guid>
<author>tag@wordaligned.org (Thomas Guest)</author>
<link>http://wordaligned.org/articles/all-any-none</link>
<category>C++</category>
<category>Python</category>
</item>

</channel>
</rss>
